[{"title":"ES6","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/ES6/","content":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><p><strong>ECMAScript、JavaScript、NodeJs，它们的区别是什么？</strong></p>\n<ul>\n<li>ECMAScript：简称ES，是一个语言标准（循环、判断、变量、数组等数据类型）</li>\n<li>JavaScript：运行在浏览器端的语言，该语言使用ES标准。 ES + web api = JavaScript</li>\n<li>NodeJs：运行在服务器端的语言，该语言使用ES标准。 ES + node api = JavaScript</li>\n</ul>\n<p>无论JavaScript，还是NodeJs，它们都是ES的超集（super set）</p>\n<h4 id=\"声明变量的问题\"><a href=\"#声明变量的问题\" class=\"headerlink\" title=\"声明变量的问题\"></a>声明变量的问题</h4><p><strong>使用var声明变量</strong></p>\n<ol>\n<li><p>允许重复的变量声明：导致数据被覆盖</p>\n</li>\n<li><p>变量提升：怪异的数据访问、闭包问题</p>\n</li>\n<li><p>全局变量挂载到全局对象：全局对象成员污染问题</p>\n</li>\n</ol>\n<p><strong>使用<strong><strong>let</strong></strong>声明变量</strong></p>\n<p>ES6不仅引入let关键字用于解决变量声明的问题，同时引入了块级作用域的概念</p>\n<p>块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域</p>\n<p>声明变量的问题</p>\n<ol>\n<li><p>全局变量挂载到全局对象：全局对象成员污染问题</p>\n<p>let声明的变量不会挂载到全局对象</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294638948-60f1b824-e2f0-4d82-b8fa-6799e2b7b228.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li><p>允许重复的变量声明：导致数据被覆盖</p>\n<p>let声明的变量，不允许当前作用域范围内重复声明</p>\n<p>在块级作用域中用let定义的变量，在作用域外不能访问</p>\n</li>\n</ol>\n<p>补充：在之前js中，作用域就只分为全局作用域和函数作用域，而在es6中一个大括号就相当于一个块级作用域</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294638960-9c40369a-5267-43fe-a68e-e5e71917754f.png\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>变量提升：怪异的数据访问、闭包问题</li>\n</ol>\n<p>使用let不会有变量提升，因此，不能在定义let变量之前使用它</p>\n<p>底层实现上，let声明的变量实际上也会有提升，但是，提升后会将其放入到“暂时性死区”，如果访问的变量位于暂时性死区，则会报错：“Cannot access ‘a’ before initialization”。当代码运行到该变量的声明语句时，会将其从暂时性死区中移除。</p>\n<p>在循环中，用let声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环，使用的是一个全新的循环变量）。在循环中使用let声明的循环变量，在循环结束后会销毁。</p>\n<h4 id=\"使用const声明常量\"><a href=\"#使用const声明常量\" class=\"headerlink\" title=\"使用const声明常量\"></a>使用const声明常量</h4><p>const和let完全相同，仅在于用const声明的变量，必须在声明时赋值，而且不可以重新赋值。</p>\n<p>实际上，在开发中，应该尽量使用const来声明变量，以保证变量的值不会随意篡改，原因如下：</p>\n<ol>\n<li><p>根据经验，开发中的很多变量，都是不会更改，也不应该更改的。</p>\n</li>\n<li><p>后续的很多框架或者是第三方JS库，都要求数据不可变，使用常量可以一定程度上保证这一点。</p>\n</li>\n</ol>\n<p>注意的细节：</p>\n<ol>\n<li>常量不可变，是指声明的常量的内存空间不可变，并不保证内存空间中的地址指向的其他空间不可变。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294639015-f0a412aa-d6e8-41ec-a0d6-cb1cc3a0e13c.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>常量的命名</li>\n</ol>\n<ul>\n<li>特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率（PI）、月地距地（MOON_EARTH_DISTANCE）或其</li>\n</ul>\n<p>​      他一些绝不可能变化的配置。</p>\n<p>​      通常，该常量的名称全部使用大写，多个单词之间用下划线分割</p>\n<ul>\n<li><p>普通的常量：使用和之前一样的命名即可，小驼峰式。</p>\n</li>\n<li><p>在for循环中，循环变量不可以使用const声明。可以使用for in</p>\n</li>\n</ul>\n<h4 id=\"更好的Unicode支持\"><a href=\"#更好的Unicode支持\" class=\"headerlink\" title=\"更好的Unicode支持\"></a>更好的Unicode支持</h4><p>​    早期，由于存储空间宝贵，Unicode使用16位二进制来存储文字。我们将一个16位的二进制编码叫做一个码元（Code Unit）。</p>\n<p>​    后来，由于技术的发展，Unicode对文字编码进行了扩展，将某些文字扩展到了32位（占用两个码元），并且，将某个文字对应的二进制数字叫做码点（Code Point）。</p>\n<p>​    ES6为了解决这个困扰，为字符串提供了方法：codePointAt，根据字符串码元的位置得到其码点。</p>\n<p>​    同时，ES6为正则表达式添加了一个flag: u，如果添加了该配置，则匹配时，使用码点匹配</p>\n<h4 id=\"更多的字符串API\"><a href=\"#更多的字符串API\" class=\"headerlink\" title=\"更多的字符串API\"></a>更多的字符串API</h4><p>以下均为字符串的实例（原型）方法</p>\n<ul>\n<li>includes</li>\n</ul>\n<p>判断字符串中是否包含指定的子字符串</p>\n<p>- startsWith</p>\n<p>判断字符串中是否以指定的字符串开始</p>\n<p>- endsWith</p>\n<p>判断字符串中是否以指定的字符串结尾</p>\n<p>- repeat</p>\n<p>将字符串重复指定的次数，然后返回一个新字符串。</p>\n<p><strong>[扩展]正则中的粘连标记</strong></p>\n<p>标记名：y</p>\n<p>含义：匹配时，完全按照正则对象中的lastIndex位置开始匹配，并且匹配的位置必须在lastIndex位置。</p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串( )\"></a>模板字符串(<code> </code>)</h4><p>ES6之前处理字符串繁琐的两个方面：</p>\n<ol>\n<li><p>多行字符串</p>\n</li>\n<li><p>字符串拼接</p>\n</li>\n</ol>\n<p>在ES6中，提供了模板字符串的书写，可以非常方便的换行和拼接，要做的，仅仅是将字符串的开始或结尾改为 ` 符号</p>\n<p>如果要在字符串中拼接js表达式，只需要在模板字符串中使用<code>$&#123;JS表达式&#125;</code></p>\n<p><strong>[扩展]模板字符串标记</strong></p>\n<p>在模板字符串书写之前，可以加上标记:</p>\n<p>```js</p>\n<p>标记名<code>模板字符串</code></p>\n<p>```</p>\n<p>标记是一个函数，函数参数如下：</p>\n<ol>\n<li><p>参数1：被插值分割的字符串数组</p>\n</li>\n<li><p>后续参数：所有的插值</p>\n</li>\n</ol>\n<h4 id=\"arguments的缺陷：\"><a href=\"#arguments的缺陷：\" class=\"headerlink\" title=\"arguments的缺陷：\"></a>arguments的缺陷：</h4><ol>\n<li><p>如果和形参配合使用，容易导致混乱</p>\n</li>\n<li><p>从语义上，使用arguments获取参数，由于形参缺失，无法从函数定义上理解函数的真实意图</p>\n</li>\n</ol>\n<p>ES6的剩余参数专门用于收集末尾的所有参数，将其放置到一个形参数组中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function test(a, b, ...args) &#123;</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(1, 32, 46, 7, 34);</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295056735-3f74194e-5b8a-411d-8e6c-fee95180d5c8.png\" alt=\"image.png\"></p>\n<p><strong>语法:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function (...形参名)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>细节：</strong></p>\n<p>\\1. 一个函数，仅能出现一个剩余参数。即形参中只能有一个<code>...``args</code></p>\n<p>\\2. 一个函数，如果有剩余参数，剩余参数必须是最后一个参数。不能写为function test(a,…args，b)</p>\n<h4 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h4><p>使用方式：…要展开的东西</p>\n<ul>\n<li>对数组展开 ES6</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr1 = [3, 67, 8, 5];</span><br><span class=\"line\">const arr2 = [0, ...arr1, 1];</span><br><span class=\"line\">console.log(arr2, arr1 === arr2);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295111065-3f10ad71-21b9-4edf-865e-b0648ce8fb5f.png\" alt=\"image.png\"></p>\n<p>例2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 对所有数字求和</span><br><span class=\"line\">function sum(...args) &#123;</span><br><span class=\"line\">    let sum = 0;</span><br><span class=\"line\">    for (let i = 0; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">        sum += args[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取一个指定长度的随机数组成的数组</span><br><span class=\"line\">function getRandomNumbers(length) &#123;</span><br><span class=\"line\">    const arr = [];</span><br><span class=\"line\">    for (let i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">        arr.push(Math.random());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const numbers = getRandomNumbers(10);</span><br><span class=\"line\"></span><br><span class=\"line\">//将数组的每一项展开，依次作为参数传递，而不是把整个数组作为一个参数传递</span><br><span class=\"line\">console.log(sum(...numbers))//相当于传递了10个参数。输出10个随机数的和。</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>对对象展开 ES7</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const obj1 = &#123;</span><br><span class=\"line\">    name: &quot;小明&quot;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    love: &quot;milk&quot;,</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">        country: &quot;中国&quot;,</span><br><span class=\"line\">        province: &quot;黑龙江&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 浅克隆到obj2</span><br><span class=\"line\">const obj2 = &#123;</span><br><span class=\"line\">    ...obj1,</span><br><span class=\"line\">    name: &quot;李华&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(obj2)</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295111015-1ff2f0c2-87de-447d-a79d-b407e8ec7f99.png\" alt=\"image.png\"></p>\n<p>如果需要在克隆address的同时在obj2的address里添加属性及属性值，就在obj2里添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">address:&#123;</span><br><span class=\"line\">        ...obj1.address,</span><br><span class=\"line\">        city:&quot;哈尔滨&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6提供了一个特殊的API，可以使用该API在函数内部，判断该函数是否使用了new来调用：<strong>new.target</strong> </p>\n<p>该表达式得到的是：如果没有使用new来调用函数，则返回undefined</p>\n<p>如果使用new调用函数，则得到的是new关键字后面的函数本身</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295214081-47aa8ad6-1e5b-4415-8b61-ab87fc780c60.png\" alt=\"image.png\"></p>\n<h4 id=\"箭头函数：\"><a href=\"#箭头函数：\" class=\"headerlink\" title=\"箭头函数：\"></a>箭头函数：</h4><p>在js中的this指向</p>\n<ol>\n<li>通过对象调用函数，this指向对象</li>\n</ol>\n<p>\\2. 直接调用函数，this指向全局对象</p>\n<p>\\3. 如果通过new调用函数，this指向新创建的对象</p>\n<p>\\4. 如果通过apply、call、bind调用函数，this指向指定的数据</p>\n<p>\\5. 如果是DOM事件函数，this指向事件源</p>\n<p><strong>使用语法</strong></p>\n<p>箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数</p>\n<p>完整语法：</p>\n<p>(参数1, 参数2, …)=&gt;{</p>\n<p>   //函数体</p>\n<p>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const isOdd = (num) =&gt; &#123;</span><br><span class=\"line\">    return num % 2 !== 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果参数只有一个，可以省略小括号：</p>\n<p>参数 =&gt; {</p>\n<p>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const print = num =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;给我的数字是：&quot;, num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果箭头函数只有一条返回语句，可以省略大括号，和return关键字：</p>\n<p>参数 =&gt; 返回值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const isOdd = num =&gt; num % 2 !== 0;</span><br></pre></td></tr></table></figure>\n\n<p>如果要返回一个对象的话，返回的对象需要用（）包裹起来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const sum = (a, b) =&gt; (&#123;</span><br><span class=\"line\">    a: a,</span><br><span class=\"line\">    b: b</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意细节</strong></p>\n<p>- 箭头函数中，不存在<code>this</code>、<code>arguments</code>、<code>new.target</code>，如果使用了，则使用的是函数外层的对应的<code>this</code>、<code>arguments</code>、<code>new.target</code></p>\n<p>- 箭头函数没有原型</p>\n<p>- 箭头函数不能作用构造函数使用</p>\n<p><strong>应用场景</strong></p>\n<p>\\1. 临时性使用的函数，并不会可以调用它，比如：</p>\n<p>  \\1. 事件处理函数：页面事件（onload页面加载事件（页面打开后执行），onunload页面卸载事件（页面关闭时执行）），鼠标事件，键盘事件，其他事件（多用于表单）。</p>\n<p>  \\2. 异步处理函数</p>\n<p>  \\3. 其他临时性的函数</p>\n<p>\\2. 为了绑定外层this的函数</p>\n<p>\\3. 在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数。</p>\n<h4 id=\"ES6新增的对象字面量语法：\"><a href=\"#ES6新增的对象字面量语法：\" class=\"headerlink\" title=\"ES6新增的对象字面量语法：\"></a>ES6新增的对象字面量语法：</h4><p>\\1. 成员速写</p>\n<p>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写（语法糖）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295336927-bd43b802-9848-4be7-97ea-7b2acf60d597.png\" alt=\"image.png\"></p>\n<p>\\2. 方法速写</p>\n<p>对象字面初始化时，方法可以省略冒号和function关键字。（语法糖）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295334888-115a8626-e79c-4ea4-9991-3c0204a81d86.png\" alt=\"image.png\"></p>\n<p>\\3. 计算属性名</p>\n<p>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来表示该属性名是通过计算得到的。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295341524-ac2723e5-9ca2-4ec3-b693-29de16808ece.png\" alt=\"image.png\"></p>\n<h4 id=\"Object的新增API\"><a href=\"#Object的新增API\" class=\"headerlink\" title=\"Object的新增API\"></a>Object的新增API</h4><p>\\1. <code>Object.is</code></p>\n<p>用于判断两个数据是否相等，基本上跟严格相等（===）是一致的，除了以下两点：</p>\n<ol>\n<li><p>NaN和NaN相等</p>\n</li>\n<li><p>+0和-0不相等</p>\n</li>\n</ol>\n<p>\\2. <code>Object.assign</code></p>\n<p>用于混合对象</p>\n<p>\\3. <code>Object.getOwnPropertyNames </code>的枚举顺序</p>\n<p><code>Object.getOwnPropertyNames</code>方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。</p>\n<p>ES6规定了该方法返回的数组的排序方式如下：</p>\n<p>- 先排数字，并按照升序排序</p>\n<p>- 再排其他，按照书写顺序排序</p>\n<p>\\4. <code>Object.setPrototypeOf</code></p>\n<p>该函数用于设置某个对象的隐式原型</p>\n<p>比如： <code>Object.setPrototypeOf(obj1, obj2)</code>，</p>\n<p>相当于： <code>obj1.__proto__ = obj2</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295343546-a6e51022-44fc-4c8b-abe5-c76720d7192c.png\" alt=\"image.png\"></p>\n<h4 id=\"类：构造函数的语法糖\"><a href=\"#类：构造函数的语法糖\" class=\"headerlink\" title=\"类：构造函数的语法糖\"></a>类：构造函数的语法糖</h4><p>传统的构造函数的问题</p>\n<p>\\1. 属性和原型方法定义分离，降低了可读性</p>\n<p>\\2. 原型成员可以被枚举</p>\n<p>\\3. 默认情况下，构造函数仍然可以被当作普通函数使用<img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295335567-d1b94b4d-971c-4fd2-8ff2-82a9f1308d95.png\" alt=\"image.png\"></p>\n<p>类的特点</p>\n<p>\\1. 类声明不会被提升，与 let 和 const 一样，存在暂时性死区</p>\n<p>\\2. 类中的所有代码均在严格模式下执行</p>\n<p>\\3. 类的所有方法都是不可枚举的</p>\n<p>\\4. 类的所有方法都无法被当作构造函数使用</p>\n<p>\\5. 类的构造器必须使用 new 来调用</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295344551-5aa2b1a2-8998-4922-81ca-5e5d98930004.png\" alt=\"image.png\"></p>\n<p><strong>类的其他书写方式</strong></p>\n<p>\\1. 可计算的成员名</p>\n<p>\\2. getter和setter</p>\n<p><code>Object.defineProperty</code> 可定义某个对象成员属性的读取和设置</p>\n<p>使用getter和setter控制的属性，不在原型上</p>\n<p>\\3. 静态成员</p>\n<p>构造函数本身的成员</p>\n<p>使用static关键字定义的成员即静态成员</p>\n<p>\\4. 字段初始化器（ES7）</p>\n<p>注意：</p>\n<p>1). 使用static的字段初始化器，添加的是静态成员</p>\n<p>2). 没有使用static的字段初始化器，添加的成员位于对象上</p>\n<p>3). 箭头函数在字段初始化器位置上，指向当前对象</p>\n<p>\\5. 类表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const A = class &#123; </span><br><span class=\"line\">    a = 1;</span><br><span class=\"line\">    b = 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>\\6. [扩展]装饰器（ES7）(Decorator)</p>\n<p>横切关注点</p>\n<p>装饰器的本质是一个函数</p>\n<p><strong>类的继承</strong></p>\n<p>如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系</p>\n<p>如果B是A，则：</p>\n<p>\\1. B继承自A</p>\n<p>\\2. A派生B</p>\n<p>\\3. B是A的子类</p>\n<p>\\4. A是B的父类</p>\n<p>如果A是B的父类，则B会自动拥有A中的所有实例成员。</p>\n<p>新的关键字：</p>\n<p>- extends：继承，用于类的定义</p>\n<p>- super</p>\n<p>  - 直接当作函数调用，表示父类构造函数</p>\n<p>  - 如果当作对象使用，则表示父类的原型</p>\n<p>注意：ES6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Dog extends Animal &#123;</span><br><span class=\"line\">    constructor(name, age, sex) &#123;</span><br><span class=\"line\">        super(&quot;犬类&quot;, name, age, sex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于之前写法的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Dog(name, age, sex) &#123;</span><br><span class=\"line\">    Animal.call(this, &quot;犬类&quot;, name, age, sex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器</p>\n<p>默认：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Dog extends Animal &#123;</span><br><span class=\"line\">    constructor(type,name, age, sex) &#123;</span><br><span class=\"line\">        super(type, name, age, sex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h4><p>使用ES6的一种语法规则，将一个对象或数组的某个属性提取到某个变量中</p>\n<p><strong>解构不会对被解构的目标造成任何影响</strong></p>\n<p>1.解构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//从中取属性，之前 var name = user.name;</span><br><span class=\"line\">// 先定义5个变量，然后从对象中读取同名属性，放到变量中</span><br><span class=\"line\">let &#123; name, age, sex, other &#125; = user;</span><br><span class=\"line\">console.log(name, age, sex, other);</span><br><span class=\"line\">//Rich Brain 21 男 &#123;country: &quot;Indonesia&quot;, identity: &quot;rapper&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.给属性添加默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let &#123; name, age, sex, value = &quot;cute&quot;, other &#125; = user;</span><br><span class=\"line\">console.log(name, age, sex, value, other);</span><br><span class=\"line\">//Rich Brain 21 男 cute &#123;country: &quot;Indonesia&quot;, identity: &quot;rapper&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.给sex添加同名属性，这时输出sex会报错no defind</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let &#123;name,age,sex:gender,other&#125; = user;</span><br><span class=\"line\">console.log(name,age,gender,other);</span><br><span class=\"line\">//Rich Brain 21 男 &#123;country: &quot;Indonesia&quot;, identity: &quot;rapper&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.给同名属性赋值，前提是原属性名中没有值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let &#123;name:nickname = &quot;七哥&quot;,age,sex,other&#125; = user;</span><br><span class=\"line\">console.log(nickname,age,sex,other);</span><br><span class=\"line\">//七哥 21 男 &#123;country: &quot;Indonesia&quot;, identity: &quot;rapper&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.解构other里的属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let &#123;name,other:&#123;identity&#125;&#125; = user;</span><br><span class=\"line\">console.log(name,identity);//Rich Brain rapper</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h4><p>数组解构与对象解构类似</p>\n<p>1.解构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</span><br><span class=\"line\">const [n1, n2] = numbers;</span><br><span class=\"line\">console.log(n1, n2);//a b</span><br></pre></td></tr></table></figure>\n\n<p>2.解构数组中的数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 得到numbers下标为4的数组中的下标为2的数据，放到变量n中</span><br><span class=\"line\">const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, [1, 2, 3, 4]];</span><br><span class=\"line\">const [, , , , [, , n]] = numbers;</span><br><span class=\"line\">console.log(n);//3</span><br></pre></td></tr></table></figure>\n\n<p>3.给数组某个索引位添加默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</span><br><span class=\"line\">const [n1, , , n4, n5 = 123] = numbers;</span><br><span class=\"line\">console.log(n1, n4, n5);//a b 123const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</span><br><span class=\"line\">const [n1, , , n4, n5 = 123] = numbers;</span><br><span class=\"line\">console.log(n1, n4, n5);//a b 123</span><br></pre></td></tr></table></figure>\n\n<p>4.解构数组里的某几个值，然后剩余值放到新的数组里</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const numbers = [324, 7, 23, 5, 3243];</span><br><span class=\"line\">// 得到数组前两项，分别放到变量a和b中，然后剩余的所有数据放到数组nums</span><br><span class=\"line\">const [a, b, ...nums] = numbers;</span><br><span class=\"line\">// const a = numbers[0], b = numbers[1], nums = numbers.slice(2);//以前的写法</span><br><span class=\"line\">console.log(a, b, nums);//324 7 (3) [23, 5, 3243]</span><br></pre></td></tr></table></figure>\n\n<p>5.解构数组里的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">//得到numbers下标为4的数组的属性a，赋值给变量A</span><br><span class=\"line\">const [, , , , &#123; a: A &#125;] = numbers;//方法1</span><br><span class=\"line\">const &#123; a: A &#125; = numbers[4];//方法2</span><br><span class=\"line\">console.log(A)//1</span><br></pre></td></tr></table></figure>\n\n<p>6.解构对象里的某个属性，然后剩余属性放到新的对象里<br>///</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let &#123;name,...obj&#125; = user;</span><br><span class=\"line\">console.log(name,obj);//Rich Brain &#123;age: 21, sex: &quot;男&quot;, other: &#123;…&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.交换值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let a = 1, b = 2;</span><br><span class=\"line\">[b, a] = [a, b]</span><br><span class=\"line\">console.log(a, b);//2 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"参数解构\"><a href=\"#参数解构\" class=\"headerlink\" title=\"参数解构\"></a>参数解构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//之前的写法</span><br><span class=\"line\">// function print(user) &#123;</span><br><span class=\"line\">//     console.log(`姓名：$&#123;user.name&#125;`)</span><br><span class=\"line\">//     console.log(`年龄：$&#123;user.age&#125;`)</span><br><span class=\"line\">//     console.log(`性别：$&#123;user.sex&#125;`)</span><br><span class=\"line\">//     console.log(`国家：$&#123;user.other.country&#125;`)</span><br><span class=\"line\">//     console.log(`身份：$&#123;user.other.identity&#125;`)</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">function print(&#123; name, age, sex, other: &#123;</span><br><span class=\"line\">     country,</span><br><span class=\"line\">     identity</span><br><span class=\"line\">&#125; &#125;) &#123;</span><br><span class=\"line\">     console.log(`姓名：$&#123;name&#125;`)</span><br><span class=\"line\">     console.log(`年龄：$&#123;age&#125;`)</span><br><span class=\"line\">     console.log(`性别：$&#123;sex&#125;`)</span><br><span class=\"line\">     console.log(`国家：$&#123;country&#125;`)</span><br><span class=\"line\">     console.log(`身份：$&#123;identity&#125;`)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">print(user);//记得把要解构的对象传进去</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此方法可用于ajax</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609295351614-6440dad3-255a-4990-9271-55c4e28a5b8b.png\" alt=\"image.png\"></p>\n<h4 id=\"普通符号\"><a href=\"#普通符号\" class=\"headerlink\" title=\"普通符号\"></a>普通符号</h4><p>符号是ES6新增的一个数据类型，它通过使用函数 <code>Symbol(符号描述)</code> 来创建</p>\n<p>符号设计的初衷，是为了给对象设置私有属性</p>\n<p>私有属性：只能在对象内部使用，外面无法使用</p>\n<p><strong>符号具有以下特点</strong>：</p>\n<p>- 没有字面量</p>\n<p>- 使用 typeof 得到的类型是 symbol</p>\n<p>- 每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</p>\n<p>- 符号可以作为对象的属性名存在，这种属性称之为符号属性</p>\n<p>  - 开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问</p>\n<p>  - 符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</p>\n<p>  - Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性</p>\n<p>  - ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号</p>\n<p>- 符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换。</p>\n<h4 id=\"共享符号\"><a href=\"#共享符号\" class=\"headerlink\" title=\"共享符号\"></a>共享符号</h4><p>根据某个符号名称（符号描述）能够得到同一个符号</p>\n<p><code>Symbol.for</code>(“符号名/符号描述”)  //获取共享符号**<br>**</p>\n","categories":["Javascript"],"tags":["ES6"]},{"title":"asp","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/aaa/","content":"<span id=\"more\"></span>\n","categories":["C#"],"tags":["VUE"]},{"title":"bootstrap","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/Bootstrap/","content":"<h4 id=\"一、-bootstrap简介\"><a href=\"#一、-bootstrap简介\" class=\"headerlink\" title=\"一、 bootstrap简介\"></a>一、 <code>bootstrap</code>简介</h4><hr>\n<ul>\n<li><code>Bootstrap</code>，来自 <code>Twitter</code>（全国最大的微博），是目前最受欢迎的前端框架。</li>\n<li><code>bootstrap</code>下载及演示 <a href=\"http://v3.bootcss.com/\">http://v3.bootcss.com</a></li>\n<li>什么是<code>bootstrap</code>？<ul>\n<li><code>Bootstrap </code>是基于 <code>HTML</code>、<code>CSS</code>、<code>JAVASCRIPT</code> 的开源框架，它简洁、直观、强悍、灵活，使得 <code>Web </code>开发更加快捷，</li>\n<li>用于开发响应式布局、移动设备优先的 <code>WEB </code>项目。</li>\n</ul>\n</li>\n<li>为什么使用 <code>Bootstrap</code>？<ul>\n<li>跨设备</li>\n<li>跨浏览器（<code>chrome</code>，<code>IE9</code>以上，<code>Firefox</code>，<code>Safari</code>，<code>Opera</code>…）</li>\n<li>响应式布局</li>\n<li>具有实用性强的组件</li>\n<li>内置<code>jquery</code>插件</li>\n</ul>\n</li>\n<li><code>bootstrap</code>的结构<ul>\n<li>主要分为三大核心模块：<code>css</code>、<code>js</code>、<code>font</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二、bootstrap排版样式\"><a href=\"#二、bootstrap排版样式\" class=\"headerlink\" title=\"二、bootstrap排版样式\"></a>二、<code>bootstrap</code>排版样式</h4><hr>\n<ul>\n<li><strong>标题</strong><ul>\n<li>从 <code>h1</code> 到 <code>h6</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> //36px</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span> //30px</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> //24px</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span> //18px</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span> //14px</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span> //12px</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>bootstrap课程<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lead&quot;</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>内联文本元素<ul>\n<li>添加标记，<code>&lt;mark&gt;</code>元素或<code>.mark</code> 类</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Bootstrap<span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>排版<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--各种加线条的文本--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span>  //删除的文本</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span>  //无用的文本</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span>  //插入的文本</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span>  //效果同上，下划线文本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--各种强调的文本--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span>  //标准字号的 85%</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>    //加粗 700</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Bootstrap 排版<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>    //倾斜</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-left&quot;</span>&gt;</span>向左对齐文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span>居中对齐文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-right&quot;</span>&gt;</span>向右对齐文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-justify&quot;</span>&gt;</span>对齐文本。该段落会根据屏幕的大小对超出屏幕的文字进行换行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-nowrap&quot;</span>&gt;</span>该段落不会根据屏幕的大小对超出屏幕的文字进行换行。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-lowercase&quot;</span>&gt;</span>BOOTSTROP<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-uppercase&quot;</span>&gt;</span>bootstrap<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-capitalize&quot;</span>&gt;</span>bootstrap<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span> //单词首字母大写</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>缩略语</strong><ul>\n<li><code>HTML </code>元素提供了用于缩写的标记，比如 <code>WWW</code> 或 <code>HTTP</code>。<code>Bootstrap</code> 定义 <code>&lt;abbr&gt;</code> 元素的样式为显示在文本底部的一条虚线边框</li>\n<li>当鼠标悬停在上面时会显示完整的文本（只要您为 <code>&lt;abbr&gt;</code> title 属性添加了文本）。为了得到一个更小字体的文本，</li>\n<li>请添加 <code>.initialism</code> 到 <code>&lt;abbr&gt;</code></li>\n</ul>\n</li>\n</ul>\n <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;World Wide Web&quot;</span>&gt;</span>WWW<span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Real Simple Syndication&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;initialism&quot;</span>&gt;</span>RSS<span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>地址</strong><ul>\n<li><code>address</code>默认为 <code>display:block</code>;，需要使用标签来为封闭的地址文本添加换行</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Twitter, Inc.<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  795 Folsom Ave, Suite 600<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  San Francisco, CA 94107<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Phone&quot;</span>&gt;</span>P:<span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span> (123) 456-7890</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Full Name<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:#&quot;</span>&gt;</span>first.last@example.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>引用</strong><ul>\n<li>默认样式引用，增加了左边线，设定了字体大小和内外边距<br><code>&lt;blockquote&gt; Bootstrap 框架 &lt;/blockquote&gt;</code></li>\n<li>反向<br><code>&lt;blockquote class=&quot;blockquote-reverse &quot;&gt; Bootstrap 框架 &lt;/blockquote&gt;</code></li>\n<li>多种引用样式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-right&quot;</span>&gt;</span>Someone famous in <span class=\"tag\">&lt;<span class=\"name\">cite</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Source Title&quot;</span>&gt;</span>Source Title<span class=\"tag\">&lt;/<span class=\"name\">cite</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>列表</strong><ul>\n<li>有序列表、无序列表、自定义列表<ul>\n<li><code>.list-unstyled</code></li>\n<li><code>.list-inline</code></li>\n<li><code>.dl-horizontal </code>  应用于<code>&lt;dl&gt; </code>元素和<code> &lt;dt&gt;</code>元素中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>代码</strong><ul>\n<li><code>.pre-scrollable</code>  使 <code>&lt;pre&gt;</code> 元素可滚动 <code>scrollable</code></li>\n<li>内联代码   <code>&lt;code&gt;&lt;section&gt;&lt;/code&gt;</code></li>\n<li>用户输入   <code>press &lt;kbd&gt;ctrl + ,&lt;/kbd&gt;</code></li>\n<li>标记变量   <code>&lt;var&gt;y&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt;&lt;var&gt;x&lt;/var&gt; + &lt;var&gt;b&lt;/var&gt;</code></li>\n<li>程序输出   <code>&lt;samp&gt;This text is meant to be treated as sample output from a computer program.&lt;/samp&gt;</code></li>\n<li>代码块     <code>&lt;pre&gt;&lt;article&gt;Please input...&lt;/article&gt;&lt;/pre&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"三、表格、按钮、图片\"><a href=\"#三、表格、按钮、图片\" class=\"headerlink\" title=\"三、表格、按钮、图片\"></a>三、表格、按钮、图片</h4><hr>\n<ul>\n<li><p><strong>表格</strong></p>\n<ul>\n<li>基本表格 <code>&lt;table class=&quot;table&quot;&gt;</code></li>\n<li>条纹表格 <code>&lt;table class=&quot;table table-striped&quot;&gt;</code></li>\n<li>边框表格  <code>&lt;table class=&quot;table table-bordered&quot;&gt;</code></li>\n<li>悬停表格<code>&lt;table class=&quot;table table-hover&quot;&gt;</code></li>\n<li>精简表格<code>&lt;table class=&quot;table table-condensed&quot;&gt;</code></li>\n<li>状态表格<code>active</code>、<code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code></li>\n<li>隐藏某一行<code>&lt;tr class=&quot;sr-only&quot;&gt;</code></li>\n<li>响应式表格<ul>\n<li>表格父元素设置响应式，小于 <code>768px</code> 出现边框<br><code>&lt;div class=&quot;table-responsive&quot;&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>按钮</strong></p>\n<ul>\n<li>按钮标签<ul>\n<li>转化成普通按钮</li>\n<li><code>&lt;a href=&quot;###&quot; class=&quot;btn btn-default&quot;&gt;Link&lt;/a&gt;</code></li>\n<li><code>&lt;button class=&quot;btn btn-default&quot;&gt;Button&lt;/button&gt;</code></li>\n<li><code>&lt;input type=&quot;button&quot; class=&quot;btn btn-default&quot; value=&quot;input&quot;&gt;</code></li>\n<li>注意：为了跨浏览器展现，尽量使用<code>button</code></li>\n</ul>\n</li>\n<li>按钮大小<ul>\n<li><code>.btn-lg</code>    这会让按钮看起来比较大。</li>\n<li><code>.btn-sm</code>    这会让按钮看起来比较小。</li>\n<li><code>.btn-xs</code>    这会让按钮看起来特别小。</li>\n</ul>\n</li>\n<li>预定义样式<ul>\n<li><code>.btn-default</code>    默认/标准按钮</li>\n<li><code>.btn-primary</code>    首选项样式</li>\n<li><code>.btn-success</code>    成功样式</li>\n<li><code>.btn-info    </code>一般信息样式</li>\n<li><code>.btn-warning</code>    警告样式</li>\n<li><code>.btn-danger</code>    危险样式</li>\n<li><code>.btn-link</code>    链接样式</li>\n</ul>\n</li>\n<li>块级按钮<ul>\n<li><code>.btn-block</code>    块级按钮(拉伸至父元素100%的宽度)</li>\n</ul>\n</li>\n<li>激活状态<ul>\n<li><code>&lt;button class=&quot;btn active&quot;&gt;Button&lt;/button&gt;</code></li>\n</ul>\n</li>\n<li>禁用状态<ul>\n<li><code>&lt;button class=&quot;btn active disabled&quot;&gt;Button&lt;/button&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>图片</strong></p>\n<ul>\n<li><code>.img-rounded </code>   圆角 (<code>IE8</code> 不支持)</li>\n<li><code>.img-circle</code> 圆形 (<code>IE8</code> 不支持)</li>\n<li><code>.img-thumbnail</code>  缩略图功能</li>\n<li><code>.img-responsive</code>    图片响应式 (将很好地扩展到父元素)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四、栅格系统、表单\"><a href=\"#四、栅格系统、表单\" class=\"headerlink\" title=\"四、栅格系统、表单\"></a>四、栅格系统、表单</h4><hr>\n<ul>\n<li><p><strong>栅格系统</strong></p>\n<ul>\n<li><p>响应式网格系统随着屏幕或视口（<code>viewport</code>）尺寸的增加，系统会自动分为最多<code>12</code>列。</p>\n</li>\n<li><p>工作原理</p>\n<ul>\n<li>行必须放置在<code>.container</code>(固定宽度)或者<code>.container-fluid(100%宽度)</code>  <code>class</code>内，获得适当的对齐<code>(alignment)</code>和内边距<code>(padding)</code></li>\n<li>内容放置在列中，唯有列可以是行的直接子元素</li>\n<li>预定义的网格类，比如 <code>.row</code> 和 <code>.col-lg-4</code>，可用于快速创建网格布局</li>\n<li>列通过内边距<code>（padding）</code>来创建列内容之间的间隙</li>\n</ul>\n</li>\n<li><p>媒体查询</p>\n<ul>\n<li>超小设备（手机，小于 <code>768px</code>） </li>\n<li>没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 <code>Bootstrap</code> 是移动设备优先的吗？）</li>\n<li>小型设备（平板电脑，大于等于<code>768px</code>）<code>@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;</code></li>\n<li>中型设备（台式电脑，大于等于<code>992px</code>）<code>@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;</code></li>\n<li>大型设备（大台式电脑，大于等于<code>1200px</code>）<code>@media (min-width: @screen-lg-min) &#123; ... &#125;</code></li>\n</ul>\n</li>\n<li><p>栅格参数</p>\n<ul>\n<li>超小屏幕 手机 (<code>&lt;768px</code>)    </li>\n<li>小屏幕 平板 (<code>≥768px</code>)    </li>\n<li>中等屏幕 桌面显示器 (<code>≥992px</code>)    </li>\n<li>大屏幕 大桌面显示器 (<code>≥1200px</code>)</li>\n<li>栅格系统行为     <ul>\n<li>总是水平排列    </li>\n<li>开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</li>\n</ul>\n</li>\n<li><code>.container </code> 最大宽度    <code>None </code>（自动）<code>750px</code>  <code>970px</code>  <code>1170px</code></li>\n<li>类前缀 <code>.col-xs-     </code>  <code>.col-sm-</code>     <code>.col-md-</code>      <code>.col-lg-</code></li>\n<li>列（<code>column</code>）数    <code>12</code></li>\n<li>最大列（<code>column</code>）宽    自动 <code>~62px</code> <code>~81px</code>    <code>~97px</code></li>\n<li>间隙宽度     <code>30px</code> （每列左右均有 <code>15px</code>）</li>\n</ul>\n</li>\n<li><p>四种屏幕分类全部激活</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         ....</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>可以设置列偏移，让中间保持空隙</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-8&quot;</span>&gt;</span>1-8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-3 col-md-offset-1&quot;</span>&gt;</span>10-12<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>可以嵌套，嵌满也是 12 列</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-8&quot;</span>&gt;</span>1-8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-4&quot;</span>&gt;</span>9-12<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-3&quot;</span>&gt;</span> 10-12 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>可以把两个列交换位置，<code>push</code> 向右移动（推），<code>pull</code> 向左移动（拉）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-8 col-md-push-4&quot;</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-4 col-md-pull-8&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>表单</strong></p>\n<ul>\n<li>垂直或基本表单</li>\n<li>内联表单<ul>\n<li>让表单左对齐浮动，并表现为 <code>inline-block </code>内联块结构<code>&lt;form class=&quot;form-inline&quot;&gt;</code><br>注：当小于 <code>768px</code>，会恢复独占样式</li>\n</ul>\n</li>\n<li>水平表单<ul>\n<li>让表单内的元素保持水平排列</li>\n</ul>\n</li>\n<li>表单组合<ul>\n<li>前后增加片段<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>输入框、文本域</p>\n<ul>\n<li>原生的<code>HTML5</code>的<code>input</code>类型的支持</li>\n<li>包括：<ul>\n<li><code>text</code></li>\n<li><code>password</code></li>\n<li><code>datetime</code></li>\n<li><code>datetime-local</code></li>\n<li><code>date</code></li>\n<li><code>month</code></li>\n<li><code>time</code></li>\n<li><code>week</code></li>\n<li><code>number</code></li>\n<li><code>email</code></li>\n<li><code>url</code></li>\n<li><code>search</code></li>\n<li><code>tel </code></li>\n<li><code>color</code></li>\n</ul>\n</li>\n<li><code>&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;文本输入&quot;&gt;</code></li>\n<li><code>&lt;textarea class=&quot;form-control&quot; rows=&quot;3&quot;&gt;&lt;/textarea&gt;</code></li>\n<li>复选框（<code>Checkbox</code>）和单选框（<code>Radio</code>）<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>选项 1<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;optionsRadios&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;optionsRadios1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">value</span>=<span class=\"string\">&quot;option1&quot;</span> <span class=\"attr\">checked</span>&gt;</span> 选项 1</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>内联的复选框和单选框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inlineCheckbox1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;option1&quot;</span>&gt;</span> 选项 1</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;optionsRadiosinline&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;option1&quot;</span>&gt;</span> 选项 1</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>选择框    <code>multiple </code>多行显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>静态控件   <code>.form-control-static</code></p>\n</li>\n<li><p>表单控件状态</p>\n<ul>\n<li>输入框焦点</li>\n<li>当输入框 <code>input</code> 接收到<code> :focus</code> 时，输入框的轮廓会被移除，同时应用 <code>box-shadow</code>。</li>\n<li>禁用的输入框 <code>input</code></li>\n<li>如果您想要禁用一个输入框 <code>input</code>，只需要简单地添加 <code>disabled</code> 属性，这不仅会禁用输入框，还会改变输入框的样式以及当鼠标的指针悬停在元素上时鼠标指针的样式。</li>\n<li>禁用的字段集 <code>fieldset</code></li>\n<li>对 <code>&lt;fieldset&gt;</code> 添加 <code>disabled</code> 属性来禁用<code> &lt;fieldset&gt;</code> 内的所有控件。</li>\n<li>校验状态<ul>\n<li><code>.has-warning</code>、<code>.has-error</code> 或 <code>.has-success</code> 类到这些控件的父元素即可。</li>\n</ul>\n</li>\n<li>任何包含在此元素之内的 <code>.control-label</code>、<code>.form-control</code> 和 <code>.help-block</code> 元素都将接受这些校验状态的样式。</li>\n</ul>\n</li>\n<li><p>表单帮助文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;help-block&quot;</span>&gt;</span>一个较长的帮助文本块，超过一行，需要扩展到下一行。本实例中的帮助文本总共有两行。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>控件尺寸</p>\n<ul>\n<li><code>.input-lg</code>和<code>col-lg-*</code>来设置表单的高度和宽度<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control input-lg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;input-lg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-lg-2&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;col-lg-2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-lg-3&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;col-lg-3&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-lg-4&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;col-lg-4&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"五、辅助类、响应式工具、菜单、图标\"><a href=\"#五、辅助类、响应式工具、菜单、图标\" class=\"headerlink\" title=\"五、辅助类、响应式工具、菜单、图标\"></a>五、辅助类、响应式工具、菜单、图标</h4><hr>\n<h4 id=\"辅助类\"><a href=\"#辅助类\" class=\"headerlink\" title=\"辅助类\"></a>辅助类</h4><hr>\n<ul>\n<li><strong>文本</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-muted&quot;</span>&gt;</span>本行内容是减弱的<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-primary&quot;</span>&gt;</span>本行内容带有一个 primary class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-success&quot;</span>&gt;</span>本行内容带有一个 success class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-info&quot;</span>&gt;</span>本行内容带有一个 info class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-warning&quot;</span>&gt;</span>本行内容带有一个 warning class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-danger&quot;</span>&gt;</span>本行内容带有一个 danger class<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>背景</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-primary&quot;</span>&gt;</span>bootstrap课程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-success&quot;</span>&gt;</span>bootstrap课程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-info&quot;</span>&gt;</span>bootstrap课程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-warning&quot;</span>&gt;</span>bootstrap课程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-danger&quot;</span>&gt;</span>bootstrap课程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭按钮   <code>close</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span>×<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下拉式菜单  <code>caret</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>浮动 <code>pull-left</code>   <code>pull-right</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-left&quot;</span>&gt;</span>向左快速浮动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-right&quot;</span>&gt;</span>向右快速浮动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清除浮动   <code>clearfix</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clearfix&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;background: #D8D8D8;border: 1px solid #000;padding: 10px;&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-left&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#58D3F7;&quot;</span>&gt;</span>向左快速浮动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-right&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background: #DA81F5;&quot;</span>&gt;</span>向右快速浮动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>块级内容居中 <code>center-block</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center-block&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:200px;background-color:#ccc;&quot;</span>&gt;</span></span><br><span class=\"line\">\t这是 center-block</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示、隐藏  <code>show</code> <code>hide</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 91px 100px 19px 50px;&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;show&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:300px;background-color:#ccc;&quot;</span>&gt;</span></span><br><span class=\"line\">\t这是 show class</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:200px;background-color:#ccc;&quot;</span>&gt;</span></span><br><span class=\"line\">\t这是 hide class</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>屏幕阅读器和键盘导航  <code>.sr-only</code> 来把元素对所有设备隐藏，除了屏幕阅读器    <code>.sr-only-focusable</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 91px 100px 19px 50px;&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-inline&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span>Email 地址<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter email&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only sr-only-focusable&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#content&quot;</span>&gt;</span>Skip to main content<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>响应式工具</strong></p>\n<ul>\n<li><code>visible-xs</code> <code>visible-sm</code>  <code>visible-md</code>  <code>visible-lg</code></li>\n<li><code>hidden-xs</code>   <code>hidden-sm</code>   <code>hidden-md</code>   <code>hidden-lg</code></li>\n<li>以超小屏幕（<code>xs</code>）为例，可用的 <code>.visible-*-*</code> 类是：<code>visible-xs-block</code>、<code>visible-xs-inline</code> 和 <code>visible-xs-inline-block</code></li>\n<li><code>visible-print-block</code>    <code>visible-print-inline</code>    <code>visible-print-inline-block</code>  浏览器隐藏   打印机可见<pre><code>`hidden-print`  浏览器可见   打印机隐藏 `visible-print`\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-xs-6 col-sm-3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hidden-xs&quot;</span>&gt;</span>特别小型<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;visible-xs&quot;</span>&gt;</span>✔ 在特别小型设备上可见<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-xs-6 col-sm-3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hidden-sm&quot;</span>&gt;</span>小型<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;visible-sm&quot;</span>&gt;</span>✔ 在小型设备上可见<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-xs-6 col-sm-3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hidden-md&quot;</span>&gt;</span>中型<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;visible-md&quot;</span>&gt;</span>✔ 在中型设备上可见<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-xs-6 col-sm-3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hidden-lg&quot;</span>&gt;</span>大型<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;visible-lg&quot;</span>&gt;</span>✔ 在大型设备上可见<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>字体图标</strong></p>\n<ul>\n<li>用法：<code>&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;</code></li>\n</ul>\n</li>\n<li><p>下拉菜单</p>\n<ul>\n<li>基本的下拉菜单</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Dropdown <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Javascript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>jQuery<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>html5+css3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对齐 <code>dropdown-menu-right</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-header&quot;</span>&gt;</span>Dropdown header<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分隔线</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;divider&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用的菜单项</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span> <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">&quot;dropdownMenu4&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>Regular link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>Disabled link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>Another link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>让菜单默认显示 <code>&lt;div class=&quot;dropdown open&quot;&gt;</code></li>\n</ul>\n<h4 id=\"六、按钮、输入框组件\"><a href=\"#六、按钮、输入框组件\" class=\"headerlink\" title=\"六、按钮、输入框组件\"></a>六、按钮、输入框组件</h4><hr>\n<h4 id=\"按钮组件\"><a href=\"#按钮组件\" class=\"headerlink\" title=\"按钮组件\"></a>按钮组件</h4><hr>\n<ul>\n<li><strong>基本的按钮组</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按钮工具栏</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-toolbar&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>更多<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按钮的大小</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group btn-group-lg&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group btn-group-sm&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group btn-group-xs&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>嵌套</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>按钮 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>垂直的按钮组</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group-vertical&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>按钮 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>两端对齐排列的按钮组</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group btn-group-justified&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group btn-group-justified&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;div class=&quot;btn-group&quot;&gt;--&gt;</span>    为了浏览器兼容问题使用btn-group包裹</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;div class=&quot;btn-group&quot;&gt;--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;div class=&quot;btn-group&quot;&gt;--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p><strong>按钮式下拉菜单</strong></p>\n</li>\n<li><p>单按钮下拉菜单   <code>btn-default</code>  <code>btn-success</code>  <code>btn-primary</code>   <code>btn-info</code>   <code>btn-danger</code>   <code>btn-warning</code></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Default <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>jQuery<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>分裂式按钮下拉菜单</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>Default<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>jQuery<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按钮下拉菜单的大小   <code>btn-lg</code>   <code>btn-sm</code>   <code>btn-xs</code></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default btn-lg dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Default <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>jQuery<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>向上弹出式菜单    <code>dropup</code></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group dropup&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default btn-lg dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Default <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>jQuery<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>输入框</strong></p>\n</li>\n<li><p>基本的输入框组</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>@<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输入框组的大小    <code>input-group-lg</code>  <code>input-group-xs</code>  <code>input-group-sm</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group input-group-lg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span>@<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>复选框和单选框插件</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-addon&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>/&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按钮插件   <code>input-group-btn</code></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>Go<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按钮式下拉菜单</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>dropdown<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>分裂式按钮下拉菜单</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>dropdown<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七、导航、导航条、面包屑导航组件\"><a href=\"#七、导航、导航条、面包屑导航组件\" class=\"headerlink\" title=\"七、导航、导航条、面包屑导航组件\"></a>七、导航、导航条、面包屑导航组件</h4><hr>\n<p><strong>导航（标签） <code>nav</code></strong></p>\n<ul>\n<li>标签页   <code>nav-tabs</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Message<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>胶囊式标签页 <code>nav-pills</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Message<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>垂直的胶囊式标签页  <code>nav-stacked</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills nav-stacked&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Message<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两端对齐的标签页 <code>nav-justified</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills nav-justified&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Message<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用链接  <code> disabled</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Message<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带有下拉菜单的标签</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Message <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>通讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带下拉菜单的胶囊式标签</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Message <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>通讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>导航条 <code>navbar</code>    <code>&lt;nav&gt;</code>标签中添加 <code>class</code> <code>.navbar</code>、<code>.navbar-default</code></strong></p>\n<ul>\n<li>默认的导航栏</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-brand&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>poetries blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Message <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>通讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>响应式的导航栏</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;collapse&quot;</span> <span class=\"attr\">data-target</span>=<span class=\"string\">&quot;#navbar-collapse&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-bar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-bar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-bar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-brand&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>教育<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;collapse navbar-collapse&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;navbar-collapse&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Message <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>通讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导航栏中的表单</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-form navbar-right&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Search&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>Search<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导航栏中的按钮   <code> navbar-btn</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default navbar-btn&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导航栏中的文本    <code>navbar-text</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-text&quot;</span>&gt;</span>Signed in as Thomas<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>固定到顶部、底部   <code>navbar-fixed-top</code>    <code>navbar-fixed-bottom</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar navbar-default navbar-fixed-top&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navbar-brand&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>教育<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Project<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-toggle&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span>Message <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>通讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>静态的顶部 <code>navbar-static-top</code></p>\n</li>\n<li><p>倒置的导航栏  带有黑色背景白色文本的倒置的导航栏    <code>navbar-inverse</code></p>\n</li>\n<li><p>面包屑导航</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>列表<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>详情<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件\"><a href=\"#八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件\" class=\"headerlink\" title=\"八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件\"></a>八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件</h4><hr>\n<p><strong>分页</strong></p>\n<ul>\n<li>默认的分页</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pagination&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>«<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>»<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用和激活状态</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pagination&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>«<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>»<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分页的尺寸  <code>pagination-lg</code>    <code>pagination-sm</code></p>\n</li>\n<li><p>翻页（<code>Pager</code>）</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pager&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>previous<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>next<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对齐的链接</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pager&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;previous&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>← previous<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;next&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>next →<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选的禁用状态</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pager&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;previous disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>← previous<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;next&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>next →<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p><strong>标签</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;label label-default&quot;</span>&gt;</span>Default<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;label label-primary&quot;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;label label-success&quot;</span>&gt;</span>Success<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;label label-info&quot;</span>&gt;</span>Info<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;label label-warning&quot;</span>&gt;</span>Warning<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;label label-danger&quot;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>徽章<code>badge</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Messages <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;badge&quot;</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>Messages <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;badge&quot;</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>巨幕 <code>jumbotron</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello world!!!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured</span><br><span class=\"line\">            content or information.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Learn more<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>页头 <code>page-header</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Example page header</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>Subtext for header<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>缩略图</strong></p>\n<ul>\n<li>默认样式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-3 col-sm-6&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;thumbnail&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;images/kittens.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义内容</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-3 col-sm-6&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;images/kittens.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caption&quot;</span>&gt;</span>  <span class=\"comment\">&lt;!--text-center--&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>缩略图标签<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>一些示例文本。一些示例文本。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>按钮 <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>警告框</strong></p>\n<ul>\n<li>基本默认样式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-success&quot;</span>&gt;</span>成功！很好地完成了提交。<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-info&quot;</span>&gt;</span>信息！请注意这个信息。<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-warning&quot;</span>&gt;</span>警告！请不要提交。<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span>错误！请进行一些更改。<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>可关闭的警告框<code> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt;</code></p>\n</li>\n<li><p>警告中的链接</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-success&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert-link&quot;</span>&gt;</span>成功！很好地完成了提交。<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"九、进度条、媒体对象、列表组、面板、响应式插入组件\"><a href=\"#九、进度条、媒体对象、列表组、面板、响应式插入组件\" class=\"headerlink\" title=\"九、进度条、媒体对象、列表组、面板、响应式插入组件\"></a>九、进度条、媒体对象、列表组、面板、响应式插入组件</h4><hr>\n<p><strong>进度条</strong></p>\n<ul>\n<li>默认的进度条</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:45%;&quot;</span>&gt;</span>45%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>情景变化的进度条</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar progress-bar-info&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:60%;&quot;</span>&gt;</span>60%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar progress-bar-success&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:25%;&quot;</span>&gt;</span>25%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar progress-bar-danger&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:45%;&quot;</span>&gt;</span>45%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar progress-bar-warning&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:45%;&quot;</span>&gt;</span>45%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>条纹的进度条 <code>progress-striped</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress progress-striped&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:45%;&quot;</span>&gt;</span>45%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动画的进度条<code>active</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress progress-striped active&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:45%;&quot;</span>&gt;</span>45%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>堆叠的进度条</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar progress-bar-warning&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:45%;&quot;</span>&gt;</span>45%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-bar progress-bar-success&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:25%;&quot;</span>&gt;</span>25%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>媒体对象</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;media&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-left&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;media-object&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;images/kittens.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;95&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;media-body&quot;</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;media-heading&quot;</span>&gt;</span>媒体标题<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">\t   这是一些示例文本。这是一些示例文本。</span><br><span class=\"line\">\t   这是一些示例文本。这是一些示例文本。</span><br><span class=\"line\">\t   这是一些示例文本。这是一些示例文本。</span><br><span class=\"line\">\t   这是一些示例文本。这是一些示例文本。</span><br><span class=\"line\">\t   这是一些示例文本。这是一些示例文本。</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>列表组</strong></p>\n<ul>\n<li>向列表组添加国徽</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>免费域名注册 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;badge pull-right&quot;</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>免费 Window 空间托管<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>每年更新成本<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>向列表组添加链接</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item active&quot;</span>&gt;</span>免费域名注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>免费 Window 空间托管<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>每年更新成本<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>向列表组添加自定义内容</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>Cras justo odio<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>Dapibus ac facilisis in<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>Morbi leo risus<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>Porta ac consectetur ac<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>Vestibulum at eros<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面板</strong></p>\n<ul>\n<li>面板标题</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>面板脚注</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-footer text-right&quot;</span>&gt;</span>by zichen<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>面板主题</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-primary&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-success&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-info&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-warning&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-danger&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带表格的面板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>Panel heading<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>学号<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带列表组的面板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span>面板内容显示区域<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>免费域名注册<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>免费 Window 空间托管<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>图像的数量<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>24*7 支持<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span>每年更新成本<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-footer text-right&quot;</span>&gt;</span>by zichen<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>响应式嵌入组件</strong></p>\n<ul>\n<li>根据被嵌入内容的外部容器的宽度，自动创建一个固定的比例，从而让浏览器自动确定 内容的尺寸，能够在各种设备上缩放<br> 这些规则可以直接用于<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;video&gt;</code>和<code>&lt;object&gt;</code>元素。</li>\n<li><code>16:9</code> 响应式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;embed-responsive embed-responsive-16by9&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">embed</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>4:3</code> 响应式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;embed-responsive embed-responsive-4by3&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">embed</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;embed-responsive embed-responsive-16by9&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;embed-responsive-item&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;embed-responsive embed-responsive-4by3&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;embed-responsive-item&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>well</code></strong></p>\n<ul>\n<li>基本的<code>well</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;well&quot;</span>&gt;</span>您好，我在大的 Well 中！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尺寸大小 <code>well-lg</code>   <code>well-sm</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;well well-lg&quot;</span>&gt;</span>您好，我在大的 Well 中！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;well well-sm&quot;</span>&gt;</span>您好，我在小的 Well 中！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"十、弹出框、警告框、标签页和工具提示插件插件\"><a href=\"#十、弹出框、警告框、标签页和工具提示插件插件\" class=\"headerlink\" title=\"十、弹出框、警告框、标签页和工具提示插件插件\"></a>十、弹出框、警告框、标签页和工具提示插件插件</h4><hr>\n<p><strong>弹出框</strong></p>\n<ul>\n<li>弹出框点击一个元素，弹出一个包含标题和内容的容器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//基本用法</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-lg btn-danger&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;popover&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;弹出框&quot;</span> <span class=\"attr\">data-content</span>=<span class=\"string\">&quot;这是一个弹出框插件&quot;</span>&gt;</span></span><br><span class=\"line\">\t点击弹出/隐藏弹出框</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>JavaScript</code> 初始化  <code>$(&#39;button&#39;).popover();</code></p>\n</li>\n<li><p><code>Popover</code> 插件中的属性：</p>\n<ul>\n<li><code>data-animation</code>   默认 <code>true</code>，在 <code>popover</code> 上应用一个 <code>CSS</code> <code>fade</code> 动画。 如果设置 <code>false</code>，则不应用。</li>\n<li><code>data-html</code>        默认 <code>false</code>，不允许提示内容格式为 <code>html</code>。如果设置 为 <code>true</code>，则可以设置 <code>html</code> 格式的提示内容</li>\n<li><code>data-placement</code>   默认值 <code>top</code>，还有 <code>bottom</code>、<code>left</code>、<code>right</code> 和 <code>auto</code>。 如果<code>auto</code>会自行调整合适的位置，如果是<code>auto</code> <code>left</code> 则会尽量在左边显示，但左边不行就靠右边。</li>\n<li><code>data-selector </code>   默认 <code>false</code>，可以选择绑定指定的选择器。</li>\n<li><code>data-original-title</code> 默认空字符串，弹出框的标题。优先级比 <code>title</code> 低</li>\n<li><code>title  </code>          默认字空符串，弹出框的标题。</li>\n<li><code>data-trigger</code>     默认值 <code>click</code>，表示怎么触发 <code>popover</code>，其他值为： <code>hover</code>、<code>focus</code>、<code>manual</code>。多个值用空格隔开，manual 手动不能和其他同时设置。</li>\n<li><code>data-delay</code>       默认值 <code>0</code>，延迟触发 <code>popover(毫秒)</code>，如果传数字则， 表示 <code>show</code>/<code>hide</code> 的毫秒数，如果传对象，结构为： {show:500,hide:100}</li>\n<li><code>data-container</code>   默认值 <code>false</code>，将 <code>popover</code> 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 <code>body</code> 上。<code> container : &#39;body&#39;</code></li>\n<li><code>data-template </code>   更改提示框的 <code>HTML</code> 提示语的模版，默认值为：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;popover&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;arrow&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;popover-title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;popover-content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>data-content</code>    默认值为空，弹出框的内容。</li>\n<li><code>data-viewport</code>    设置外围容器的边际，具体代码看示例。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> $(<span class=\"string\">&#x27;button&#x27;</span>).popover(&#123;</span><br><span class=\"line\"><span class=\"attr\">trigger</span>:<span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">placement</span>:<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">viewport</span> : &#123;</span><br><span class=\"line\">\t<span class=\"attr\">selector</span> : <span class=\"string\">&#x27;#view&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>Popover</code> 插件中的方法：</p>\n<ul>\n<li>显示 <code>$(&#39;button&#39;).popover(&#39;show&#39;);</code></li>\n<li>隐藏 <code>$(&#39;button&#39;).popover(&#39;hide&#39;);</code></li>\n<li>反转显示和隐藏 <code>$(&#39;button&#39;).popover(&#39;toggle&#39;);</code></li>\n<li>隐藏并销毁 <code>$(&#39;button&#39;).popover(&#39;destroy&#39;);</code></li>\n</ul>\n</li>\n<li><p><code>Popover</code> 插件中的事件：</p>\n<ul>\n<li><code>show.bs.popover</code> 在调用 <code>show</code> 方法时触发</li>\n<li><code>shown.bs.popover</code> 在显示整个弹窗时时触发</li>\n<li><code>hide.bs.popover</code> 在调用 <code>hide</code> 方法时触发</li>\n<li><code>hidden.bs.popover</code> 在完全关闭整个弹出时触发</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;button&#x27;</span>).on(<span class=\"string\">&#x27;show.bs.tab&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">&#x27;调用 show 方法时触发！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>警告框</strong></p>\n<ul>\n<li>警告框即为点击小时的信息框</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//基本实例</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-warning&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>×<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>警告：您的浏览器不支持！<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>添加淡入淡出效果   <code>&lt;div class=&quot;alert alert-warning fade in&quot;&gt;</code></p>\n</li>\n<li><p>如果用 <code>JavaScript</code>，可以代替 <code>data-dismiss=&quot;alert&quot;</code></p>\n</li>\n<li><p><code>Alert</code> 插件中的方法：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.close&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     $(<span class=\"string\">&#x27;#alert&#x27;</span>).alert(<span class=\"string\">&#x27;close&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Alert</code> 插件中的事件：<ul>\n<li><code>close.bs.alert</code>   当 <code>close</code> 方法被调用后立即触发</li>\n<li><code>closed.bs.alert</code>  当警告框被完全关闭后立即触发</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#alert&#x27;</span>).on(<span class=\"string\">&#x27;close.bs.alert&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">&#x27;当 close 方法被触发时调用！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>标签页</strong></p>\n<ul>\n<li>标签页也就是通常所说的选项卡功能</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//基本用法</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#html5&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span>HTML5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#bootstrap&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span>Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#jquery&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span>jQuery<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#extjs&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span>ExtJS<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 10px;&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-pane active&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;html5&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-pane&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bootstrap&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-pane&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jquery&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-pane&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;extjs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以设置淡入淡出效果 fade，而 in 表示首选的内容默认显示</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-pane fade in active&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;html5&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也可以换成胶囊式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>data-target</code>    使用 <code>data-target</code> 绑定或不绑定效果都是一样的</p>\n</li>\n<li><p><code>Tab</code> 插件中的方法：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#nav a&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">     e.preventDefault();</span><br><span class=\"line\">     $(<span class=\"built_in\">this</span>).tab(<span class=\"string\">&#x27;show&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Tab</code> 插件中的事件：<ul>\n<li><code>show.bs.tab</code>      在调用 <code>tab</code> 方法时触发</li>\n<li><code>shown.bs.tab</code>     在显示整个标签时触发</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#nav a&#x27;</span>).on(<span class=\"string\">&#x27;show.bs.tab&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">&#x27;调用 tab 时触发！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>工具提示</strong></p>\n<ul>\n<li>工具提示就是通过鼠标移动选定在特定的元素上时，显示相关的提示语</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//基本实例</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;tooltip&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;超文本标识符&quot;</span>&gt;</span>HTML5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>JavaScript</code> 初始化 <code> $(&#39;#section&#39;).tooltip();</code></p>\n</li>\n<li><p><code>data-animation</code>   默认 <code>true</code>，在 <code>tooltip</code> 上应用一个 <code>CSS fade</code> 动画。 如果设置 <code>false</code>，则不应用。</p>\n</li>\n<li><p><code>data-html </code>       默认 <code>false</code>，不允许提示内容格式为 <code>html</code>。如果设置 为 <code>true</code>，则可以设置 <code>html</code> 格式的提示内容。</p>\n</li>\n<li><p><code>data-placement</code>   默认值 <code>top</code>，还有 <code>bottom</code>、<code>left</code>、<code>right</code> 和 <code>auto</code>。 如果<code>auto</code>会自行调整合适的位置，如果是<code>auto</code> <code>left</code> 则会尽量在左边显示，但左边不行就靠右边。</p>\n</li>\n<li><p><code>data-selector</code>    默认 <code>false</code>，可以选择绑定指定的选择器。 <code>rel=&quot;tooltip&quot;</code></p>\n</li>\n<li><p><code>data-original-title</code> 默认空字符串，提示语的内容。优先级比 title 低</p>\n</li>\n<li><p><code>title </code>           默认字空符串，提示语的内容。</p>\n</li>\n<li><p><code>data-trigger</code>     默认值 <code>hover</code> <code>foucs</code>，表示怎么触发 <code>tooltip</code>，其 他值为：<code>click</code>、<code>manual</code>。多个值用空格隔开，<code>manual</code> 手动不能和其他同时设置。</p>\n</li>\n<li><p><code>data-delay</code>       默认值 <code>0</code>，延迟触发 <code>tooltip(毫秒)</code>，如果传数字则， 表示 <code>show</code>/<code>hide</code> 的毫秒数，如果传对象，结构为：<code>&#123;   show:500,hide:100   &#125;</code></p>\n</li>\n<li><p><code>data-containe</code>r   默认值 <code>false</code>，将<code> tooltip</code> 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 <code>body</code> 上。<code> container : &#39;body&#39;</code></p>\n</li>\n<li><p><code>data-template</code>    更改提示框的 <code>HTML</code> 提示语的模版，默认值为：</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;tooltip&#x27;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;tooltip-arrow&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;tooltip-inner&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;tooltip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;tooltip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">title</span>=<span class=\"string\">&quot;超文本标识符&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-animation</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-html</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-placement</span>=<span class=\"string\">&quot;auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-selector</span>=<span class=\"string\">&quot;a[rel=tooltip]&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-trigger</span>=<span class=\"string\">&quot;click&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-delay</span>=<span class=\"string\">&quot;500&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">data-template</span>=<span class=\"string\">&quot;&lt;b&gt;123&lt;/b&gt;&quot;</span> &gt;</span>HTML5</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#selector a&#x27;</span>).tooltip(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">delay</span> : &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">show</span> : <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">hide</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>Tooltip</code>插件中的方法：</p>\n<ul>\n<li>显示   <code>$(&#39;#section a&#39;).tooltip(&#39;show&#39;);</code></li>\n<li>隐藏              <code>$(&#39;#section a&#39;).tooltip(&#39;hide&#39;);</code></li>\n<li>反转显示和隐藏    <code>$(&#39;#section a&#39;).tooltip(&#39;toggle&#39;);</code></li>\n<li>隐藏并销毁        <code>$(&#39;#section a&#39;).tooltip(&#39;destroy&#39;);</code></li>\n</ul>\n</li>\n<li><p><code>Tooltip</code>插件中的事件：</p>\n<ul>\n<li><code>show.bs.tooltip</code>  在 <code>show</code> 方法调用时立即触发</li>\n<li><code>shown.bs.tooltip</code> 在提示框完全显示给用户之后触发</li>\n<li><code>hide.bs.tooltip</code>  在 <code>hide</code> 方法调用时立即触发</li>\n<li><code>hidden.bs.tooltip</code> 在提示框完全隐藏之后触发</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#select a&#x27;</span>).on(<span class=\"string\">&#x27;show.bs.tooltip&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">&#x27;调用 show 时触发！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//data-selector</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;#selector&quot;</span>).tooltip(&#123;</span><br><span class=\"line\">     <span class=\"attr\">selector</span>:<span class=\"string\">&quot;a[rel=&#x27;tooltip&#x27;]&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>data-container</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;超文本标记符&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;超文本标记符&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;超文本标记符&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).tooltip(&#123;</span><br><span class=\"line\">    <span class=\"attr\">delay</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>:<span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">hide</span>:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">container</span>:<span class=\"string\">&quot;body&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十一、下拉菜单、滚动监听、按钮和折叠插件\"><a href=\"#十一、下拉菜单、滚动监听、按钮和折叠插件\" class=\"headerlink\" title=\"十一、下拉菜单、滚动监听、按钮和折叠插件\"></a>十一、下拉菜单、滚动监听、按钮和折叠插件</h4><hr>\n<p><strong>下拉菜单插件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span>&gt;</span> 下拉菜单 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;caret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>资讯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果按钮在容器外部，可以通过 <code>data-target</code> 进行绑定</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;dropdown&quot;</span> <span class=\"attr\">data-target</span>=<span class=\"string\">&quot;#dropdown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>Dropdown</code>插件的方法：，但仍然需要 <code>data-*</code></p>\n<ul>\n<li><code>$(&#39;#btn&#39;).dropdown();</code></li>\n<li><code>$(&#39;#btn&#39;).dropdown(&#39;toggle&#39;);</code></li>\n</ul>\n</li>\n<li><p><code>Dropdown</code>插件的事件：</p>\n<ul>\n<li><code>show.bs.dropdown </code>    在 <code>show</code> 方法调用时立即触发。</li>\n<li><code>shown.bs.dropdown </code>   在下拉菜单完全显示出来，并且等 <code>CSS</code> 动画完成之后 触发。</li>\n<li><code>hide.bs.dropdown</code>     在 <code>hide</code> 方法调用时，但还未关闭隐藏时触发。</li>\n<li><code>hidden.bs.dropdown</code>   在下拉菜单完全隐藏之后，并且等 <code>CSS</code> 动画完成之后 触发。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#dropdown&#x27;</span>).on(<span class=\"string\">&#x27;show.bs.dropdown&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">&#x27;在调用 show 方法时立即触发！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>滚动监听插件</strong></p>\n<ul>\n<li><p><code>data-offset</code>  默认值为 <code>10</code>，固定弄内容距滚动容器 <code>10</code> 像素以内， 就高亮显示所对应的菜单</p>\n</li>\n<li><p><code>data-spy </code>    设置 <code>scroll</code>，将设置滚动容器监听</p>\n</li>\n<li><p><code>data-target</code>  设置<code>#nav</code>，绑定指定监听的菜单</p>\n</li>\n<li><p><code>scroll</code>插件的方法：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#scroll&quot;</span>).scrollspy(&#123;</span><br><span class=\"line\">     <span class=\"comment\">//offset: 0,</span></span><br><span class=\"line\">     <span class=\"attr\">target</span>: <span class=\"string\">&quot;#nav&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>activate.bs.scrollspy</code>    每当一个新条目被激活后都将由滚动监听插件触 发此事件。</li>\n<li>事件绑定在导航上</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#nav&#x27;</span>).on(<span class=\"string\">&#x27;activate.bs.scrollspy&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">&#x27;新条目被激活后触发此事件！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>滚动监听还有一个更新容器 <code>DOM</code> 的方法<ul>\n<li><code>refresh</code>  更新容器 <code>DOM</code> 的方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeSec</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(e).parents(<span class=\"string\">&#x27;.sec&#x27;</span>).remove();</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#content&#x27;</span>).scrollspy(<span class=\"string\">&#x27;refresh&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>按钮插件</strong></p>\n<ul>\n<li>单个切换</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span>单个切换<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>注：在 <code>Firefox</code> 多次页面加载时，按钮可能保持表单的禁用或选择状态。解决方案是： 添加<code> autocomplete=&quot;off&quot;。</code></p>\n</li>\n<li><p>单选按钮</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;buttons&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary active&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">checked</span>&gt;</span> 男</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span> 女</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复选按钮</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-group&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;buttons&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary active&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fa&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">checked</span>&gt;</span> 音乐</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fa&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span> 体育</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fa&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span> 美术</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fa&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span> 电脑</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加载状态</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myButton&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">data-loading-text</span>=<span class=\"string\">&quot;Loading...&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span> 加载状态 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myButton&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> btn = $(<span class=\"built_in\">this</span>).button(<span class=\"string\">&#x27;loading&#x27;</span>);</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         btn.button(<span class=\"string\">&#x27;reset&#x27;</span>);</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Button</code> 插件中的 <code>button</code> 方法中有三个参数：<code>toggle</code>、<code>reset</code>、<code>string</code>(比如 <code>loading</code>、 <code>complete</code>)。</li>\n<li>可代替    <code>data-toggle=&quot;button&quot;</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;button&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     $(<span class=\"built_in\">this</span>).button(<span class=\"string\">&#x27;toggle&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>折叠插件</strong></p>\n<ul>\n<li>基本实例</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;collapse&quot;</span> <span class=\"attr\">data-target</span>=<span class=\"string\">&quot;#content&quot;</span>&gt;</span> Bootstrap <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;collapse&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;well&quot;</span>&gt;</span></span><br><span class=\"line\">         Bootstrap 是 Twitter 推出的一个用于前端开发的开源工具包。它由 Twitter 的设计师 Mark Otto 和 Jacob Thornton 合作开发,是一个 CSS/HTML 框架。目 前,Bootstrap 最新版本为 3.0 。</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Collapse</code>插件的方法：<code>hide</code>、<code>show</code>、<code>toggle</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;button&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     $(<span class=\"string\">&#x27;#collapseOne&#x27;</span>).collapse(<span class=\"string\">&#x27;toggle&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Collapse</code>插件的事件：<ul>\n<li><code>show.bs.collapse</code>     在 <code>show</code> 方法调用时立即触发</li>\n<li><code>shown.bs.collapse </code>   折叠区完全显示出来是触发</li>\n<li><code>hide.bs.collapse </code>    在 <code>hide</code> 方法调用时触发</li>\n<li><code>hidden.bs.collapse</code>   该事件在折叠区域完全隐藏之后触发</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"十二、模态框、轮播插件\"><a href=\"#十二、模态框、轮播插件\" class=\"headerlink\" title=\"十二、模态框、轮播插件\"></a>十二、模态框、轮播插件</h4><hr>\n<p>  <strong>模态框插件</strong></p>\n<ul>\n<li>模态框的弹窗组件需要三层 <code>div</code> 容器元素，分别为 <code>modal</code>(模态声明层)、 <code>dialog</code>(窗口声明层)、<code>content</code>(内容层)</li>\n<li>在内容层里面，还有三层，分别为 <code>header</code>(头部)、<code>body</code>(主体)、<code>footer</code>(注脚)</li>\n<li>模态框去掉 <code>show</code>，增加一个 <code>id</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myModal&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 点击触发模态框显示 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary btn-lg&quot;</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">&quot;modal&quot;</span> <span class=\"attr\">data-target</span>=<span class=\"string\">&quot;#myModal&quot;</span>&gt;</span> 点击弹窗 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 弹窗的大小有三种，默认情况下是正常，还有 lg(大)和 sm(小) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-dialog modal-lg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-dialog sm-lg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可设置淡入淡出效果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal fade&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myModal&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>所有的插件，都是基于 <code>JavaScript</code>/<code>jQuery</code> 的。</p>\n</li>\n<li><p>四个要素：用法、参数、方法和事件。</p>\n</li>\n<li><p><strong>用法</strong></p>\n<ul>\n<li>可以通过 <code>data</code> 属性 <code>data-toggle</code>  <code>data-toggle=&quot;modal&quot;</code>  <code>data-target=&quot;#myModal&quot;</code></li>\n<li><code>data-toggle</code> 表示触发类型</li>\n<li><code>data-target</code> 表示触发的节点</li>\n<li>如果不是使用<code>&lt;button&gt;</code>，而是<code>&lt;a&gt;</code>，其中 <code>data-target</code> 也可以使用 <code>href=&quot;#myModal&quot;</code>取代</li>\n<li>建议使用 <code>data-target</code>。除了 <code>data-toggle</code> 和 <code>data-target</code> 两个声明 属性外，还有一些可以用选项</li>\n</ul>\n</li>\n<li><p><strong>参数</strong></p>\n<ul>\n<li><code>data-backdrop</code>    布尔值或 <code>&#39;static&#39;</code>   默认值 <code>true</code>，表示背景存在黑灰透明 遮罩，且单击空白背景可关闭弹窗；</li>\n<li>如果为 <code>false</code>，表示背景不存在黑灰 透明遮罩，且点击空白背景不可关闭 弹窗；</li>\n<li>如果是字符串<code>&#39;static&#39;</code>，表示背景存 在黑灰透明遮罩，且点击空白不可关 闭弹窗。</li>\n<li><code>data-keyboard</code>   布尔值 <code>true</code>   如果是 <code>true</code>，按 <code>esc</code> 键会关闭窗口； 如果是 <code>false</code>，按 <code>esc</code> 键会不会关闭。</li>\n<li><code>data-show</code>   布尔值 <code>true</code>   如果是 <code>true</code>，初始化时，默认显示； 如果是 <code>false</code>，初始化时，默认隐藏。</li>\n<li><code>remote</code>   <code>url</code> 路径 空值   如果值不是以<code>#</code>号开头，则表示一个 <code>url</code> 地址，加载 <code>url</code> 内容到 <code>modal-content</code> 容器里，并只加载一 次。</li>\n<li>如果是<code>#</code>号，就是取代 <code>data-target</code> 的方法。</li>\n<li>在 <code>JavaScript</code> 直接设置</li>\n<li>通过 <code>jQuery</code> 方式声明</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myModal&#x27;</span>).modal(&#123;</span><br><span class=\"line\">     <span class=\"attr\">show</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">     <span class=\"attr\">backdrop</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">     <span class=\"attr\">keyboard</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">     <span class=\"attr\">remote</span> : <span class=\"string\">&#x27;index.html&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>方法</strong><ul>\n<li><code>toggle .modal(&#39;toggle&#39;)</code>; 触发时，反转切换弹窗状态</li>\n<li><code>show .modal(&#39;show&#39;)</code>; 触发时，显示弹窗</li>\n<li><code>hide .modal(&#39;hide&#39;)</code>; 触发时，关闭弹窗</li>\n<li>点击显示弹窗<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#btn&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t$(<span class=\"string\">&#x27;#myModal&#x27;</span>).modal(<span class=\"string\">&#x27;show&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&#x27;#myModal&#x27;</span>).modal(&#123;</span><br><span class=\"line\">\t   <span class=\"attr\">show</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><strong>事件</strong></p>\n<ul>\n<li><code>show.bs.modal</code>    在<code>show</code> 方法调用时立即触发。</li>\n<li><code>shown.bs.modal</code>  在模态框完全显示出来，并且等 <code>CSS</code> 动画完成之后触 发。</li>\n<li><code>hide.bs.modal</code>    在 <code>hide</code> 方法调用时，但还未关闭隐藏时触发。</li>\n<li><code>hidden.bs.modal</code>  在模态框完全隐藏之后，并且等 <code>CSS</code> 动画完成之后触 发</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myModal&#x27;</span>).on(<span class=\"string\">&#x27;show.bs.modal&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&#x27;在 show 方法调用时立即触发！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&#x27;#myModal&#x27;</span>).on(<span class=\"string\">&#x27;loaded.bs.modal&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&#x27;远程数据加载完毕后触发！&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮播图插件</strong></p>\n<ul>\n<li><code>data</code> 属性解释：<ul>\n<li><code>data-slide</code> 接受关键字 <code>prev</code> 或 <code>next</code>，用来改变幻灯片相对于当前位置的位置；</li>\n<li><code>data-slide-to</code> 来向轮播底部创建一个原始滑动索引，<code>data-slide-to=&quot;2&quot;</code>将把滑 动块移动到一个特定的索引，索引从 0 开始计数。</li>\n<li><code>data-ride=&quot;carousel&quot;</code>属性用户标记轮播在页面加载时开始动画播放。</li>\n<li><code>data-interval </code>   默认值 <code>5000</code>，幻灯片的等待时间(毫秒)。如果为 <code>false</code>，轮播将不会自动开始循环。</li>\n<li><code>data-pause</code>       默认鼠标停留在幻灯片区域(<code>hover</code>)即暂停轮播，鼠 标离开即启动轮播。</li>\n<li><code>data-wrap</code>        默认值 <code>true</code>，轮播是否持续循环。</li>\n<li>如果在 <code>JavaScript</code> 调用就直接使用键值对方法，并去掉 <code>data-</code>；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myCarousel&#x27;</span>).carousel(&#123;  <span class=\"comment\">//设置自定义属性</span></span><br><span class=\"line\">     <span class=\"attr\">interval</span> : <span class=\"number\">2000</span>,<span class=\"comment\">//设置自动播放`/2` 秒</span></span><br><span class=\"line\">     <span class=\"attr\">pause</span> : <span class=\"string\">&#x27;hover&#x27;</span>,<span class=\"comment\">//设置暂停按钮的事件</span></span><br><span class=\"line\">     <span class=\"attr\">wrap</span> : <span class=\"literal\">false</span>,   <span class=\"comment\">//只播一次</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>方法：</strong><ul>\n<li><code>cycle</code> 循环各帧(默认从左到右)</li>\n<li><code>pause</code> 停止轮播</li>\n<li><code>number</code> 轮播到指定的图片上(小标从 <code>0</code> 开始，类似数组)</li>\n<li><code>prev</code> 循环轮播到上一个项目</li>\n<li><code>next</code> 循环轮播到下一个项目</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;button&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//点击按钮执行</span></span><br><span class=\"line\">     $(<span class=\"string\">&#x27;#myCarousel&#x27;</span>).carousel(<span class=\"string\">&#x27;cycle&#x27;</span>); <span class=\"comment\">//点击后，自动播放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>事件</strong></p>\n</li>\n<li><p><code>slide.bs.carousel</code> 当调用 <code>slide</code> 实例方式时立即触发该事件。</p>\n</li>\n<li><p><code>slid.bs.carousel</code> 当轮播完成一个幻灯片触发该事件</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myCarousel&#x27;</span>).on(<span class=\"string\">&#x27;slide.bs.carousel&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;当调用 slide 实例方式时立即触发&#x27;</span>);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">$(<span class=\"string\">&#x27;#myCarousel&#x27;</span>).on(<span class=\"string\">&#x27;slid.bs.carousel&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&#x27;当轮播完成一个幻灯片触发&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>bootstrap笔记总结【复制到浏览器打开放大】<br><img src=\"http://upload-images.jianshu.io/upload_images/1480597-0b43991d33718f5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"bootstrap笔记总结\"></li>\n</ul>\n<h4 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h4><hr>\n<ul>\n<li><a href=\"http://v3.bootcss.com/\">bootstrap中文教程</a></li>\n<li><a href=\"https://hackerthemes.com/bootstrap-cheatsheet/\">bootstrap很方便的速查表-推荐</a></li>\n</ul>\n","categories":["Html"],"tags":["BootStrap"]},{"title":"Html+css","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/HTML & CSS/","content":"<h3 id=\"第一部分-HTML\"><a href=\"#第一部分-HTML\" class=\"headerlink\" title=\"第一部分 HTML\"></a>第一部分 HTML</h3><hr>\n<h4 id=\"第一章-职业规划和前景\"><a href=\"#第一章-职业规划和前景\" class=\"headerlink\" title=\"第一章 职业规划和前景\"></a>第一章 职业规划和前景</h4><hr>\n<ul>\n<li><p><strong>职业方向规划定位：</strong></p>\n</li>\n<li><p><code>web</code>前端开发工程师</p>\n<ul>\n<li><code>web</code>网站架构师</li>\n<li>自己创业</li>\n<li>转岗管理或其他<span id=\"more\"></span></li>\n</ul>\n</li>\n<li><p><strong><code>web</code>前端开发的前景展望：</strong></p>\n<ul>\n<li>未来<code>IT</code>行业企业需求最多的人才</li>\n<li>结合最新的<code>html5</code>抢占移动端的市场</li>\n<li>自己创业做老板</li>\n<li>随着互联网的普及<code>web</code>开发成为企业的宠儿和核心</li>\n</ul>\n</li>\n<li><p> <strong><code>web</code>职业发展目标：</strong></p>\n</li>\n<li><p>第一、梳理知识架构</p>\n<ul>\n<li>负责内容的<code>HTML</code></li>\n<li>负责外观的<code>css</code>（层叠样式表）</li>\n<li>负责行为的<code>js</code></li>\n<li><code>ps</code>切图</li>\n</ul>\n</li>\n<li><p>第二、分解目标（起步阶段、提升阶段、成型阶段）</p>\n<ul>\n<li><p>起步阶段：</p>\n<ul>\n<li>基本知识的掌握</li>\n<li>常用工具的掌握</li>\n<li>沟通技巧的掌握（围绕客户的需求）</li>\n<li>良好的开发习惯（加注释、对齐方式）</li>\n</ul>\n</li>\n<li><p>提升阶段：</p>\n<ul>\n<li>熟悉掌握<code>HTML</code>基本标签和属性</li>\n<li>熟练掌握<code>css</code>的基本语法和使用</li>\n<li>浏览器兼容和w3c标准的掌握</li>\n<li>结合<code>html</code>+<code>css</code>+<code>js</code>开始系统项目的开发</li>\n</ul>\n</li>\n<li><p>成型阶段：</p>\n<ul>\n<li>精通<code>DIV</code>+<code>CCS</code>布局</li>\n<li>精通<code>css</code>样式表控制<code>html</code>标签</li>\n<li>熟悉运用<code>js</code>制作动态网站的效果</li>\n<li>能独立开发完成网站</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第二章-html基本结构\"><a href=\"#第二章-html基本结构\" class=\"headerlink\" title=\"第二章 html基本结构\"></a>第二章 html基本结构</h4><hr>\n<ul>\n<li><p>认识HTML：</p>\n<ul>\n<li><code>html</code>不是一种编程语言，是一种标志语言</li>\n<li>标记语言是由一套标识标签组成的</li>\n<li><code>html</code>使用标签来描述网页</li>\n</ul>\n</li>\n<li><p><code>html</code>结构：</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 逻辑代码 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 逻辑代码底部 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;lib/jquery/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;head&gt;</code>中添加信息</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;smile@kang.cool&quot;</span>&gt;</span>------作者</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span>------网页描述</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;a,b,c&quot;</span>&gt;</span>------关键字,“，”分隔</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;expires&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Wed, 26 Feb 1997 08：21：57 GMT&quot;</span>&gt;</span>------设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Pragma&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;no-cache&quot;</span>&gt;</span>------禁止浏览器从本地机的缓存中调阅页面内容</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Window-target&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;_top&quot;</span>&gt;</span>------用来防止别人在框架里调用你的页面</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;5;URL=http://kahn1990.com/&quot;</span>&gt;</span>------跳转页面，5指时间停留5秒 网页搜索机器人向导。用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;robots&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;none&quot;</span>&gt;</span>------content的参数有all,none,index,noindex,follow,nofollow，默认是all</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;Shortcut Icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;favicon.ico&quot;</span>&gt;</span>------收藏图标</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Cache-Control&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;no-cache, must-revalidate&quot;</span>&gt;</span>------网页不会被缓存</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>不成对出现的标签<br><code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;meta&gt;</code> <code>&lt;img&gt;</code>  <code>&lt;input..&gt;</code>  <code>&lt;option..&gt;</code>  <code>&lt;link&gt;</code></p>\n</li>\n<li><p>特殊符号：</p>\n<ul>\n<li><code>&amp;nbsp</code>; —-&gt;空格</li>\n<li><code>&amp;gt</code>; —&gt;大于号</li>\n<li><code>&amp;lt</code>；—&lt;小于号</li>\n<li><code>&amp;quot</code>；—&gt;引号</li>\n<li><code>&amp;copy</code>;–&gt;版权号</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第三章-html基本标签\"><a href=\"#第三章-html基本标签\" class=\"headerlink\" title=\"第三章 html基本标签\"></a>第三章 html基本标签</h4><hr>\n<ul>\n<li><p><code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code>标签</p>\n</li>\n<li><p><code>&lt;h1&gt;&lt;/h1</code>—-<code>&lt;h6&gt;&lt;/h6&gt;</code>标题，<em>不要为了产生粗体文本使用它们</em></p>\n</li>\n<li><p><code>&lt;p&gt;</code>标签  段落标签</p>\n</li>\n<li><p><code>&lt;strong&gt;&lt;b&gt;</code>标签</p>\n<ul>\n<li>都会让文字产生加粗效果<ul>\n<li><code>&lt;strong&gt;</code>用于强调文本，强度更深，表示重要文本—&gt;用于<code>SEO</code>优化</li>\n</ul>\n</li>\n<li><code>&lt;b&gt;</code>只是视觉加粗效果—&gt;单纯为了产生加粗</li>\n</ul>\n</li>\n<li><p><code>&lt;em&gt;</code> <code>&lt;i&gt;</code>标签</p>\n<ul>\n<li><code>em</code>用于强调文本</li>\n<li><code>i</code>只是视觉斜体效果</li>\n</ul>\n</li>\n<li><p><code>&lt;strong&gt;</code>比<code>&lt;em&gt;</code>强调更强</p>\n</li>\n<li><p><code>span</code>标签</p>\n<ul>\n<li>对被用来组合文档中的行内元素</li>\n<li>注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化</li>\n</ul>\n</li>\n<li><p><code>&lt;pre&gt;</code>标签</p>\n</li>\n<li><p>文字的格式按源码的排版来显示，我们称之为预处理格式</p>\n</li>\n<li><p><code>&lt;a&gt;</code>标签—&gt;他有一个必不可少的属性 href</p>\n<ul>\n<li><code>target</code>属性：</li>\n<li><code>_self</code>(在原来页面打开)</li>\n<li><code> _blank</code>（新窗口打开）</li>\n<li><code>_top</code>（打开时忽略所有的框架）</li>\n<li> <code>_parent</code>（在父窗口中打开）</li>\n</ul>\n</li>\n<li><p>创建锚点和锚链接</p>\n<ul>\n<li>锚点也是一种超链接，是页面内进行跳转的超链接<pre><code>- 第一步：创建锚点 `&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt;`\n- 第二步：使用创建好的锚点名称 `&lt;a href=&quot;#锚点名称&quot;&gt;内容&lt;/a&gt;`\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><code>marquee</code>标签</p>\n<ul>\n<li>可以创建一个内容滚动效果<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">marquee</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;down&quot;</span> <span class=\"attr\">loop</span>=<span class=\"string\">&quot;4&quot;</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">this.stop()</span> <span class=\"attr\">onmouseout</span>=<span class=\"string\">this.start()</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><code>direction</code> 表示滚动方向，取值有（left,right,up,down,默认left）</li>\n<li><code>loop </code>表示滚动循环的次数，默认为无限循环</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">onmouseover=<span class=\"built_in\">this</span>.stop()  onmouseover=<span class=\"built_in\">this</span>.start()  scrollamout=<span class=\"string\">&quot;1&quot;</span>(滚动速度)</span><br></pre></td></tr></table></figure></li>\n<li><p>表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"第四章-img图片标签与路径\"><a href=\"#第四章-img图片标签与路径\" class=\"headerlink\" title=\"第四章 img图片标签与路径\"></a>第四章 img图片标签与路径</h4><hr>\n<ul>\n<li><p>图片标签与路径：</p>\n<ul>\n<li>常见图片格式 <code>jpg</code> <code>png</code> <code>gif</code></li>\n<li><code>Gif</code>     （只支持全透明）</li>\n<li><code>Jpeg</code> /<code>jpg</code></li>\n<li><code>Png</code> 半/全透明都支持</li>\n</ul>\n</li>\n<li><p>图片标签写法 ：</p>\n<ul>\n<li><code>&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;</code></li>\n</ul>\n</li>\n<li><p>图片四要素：</p>\n<ul>\n<li><code>src=&quot;&quot;</code>        图片路径</li>\n<li><code>alt=&quot;&quot; </code>       图片含义</li>\n<li><code>width=&quot;&quot;</code>     图片宽度 和图片大小保持一致</li>\n<li><code> height=&quot;&quot;</code>     图片高度 和图片大小保持一致</li>\n<li><code>title=&quot;&quot;</code></li>\n</ul>\n</li>\n<li><p>路径知识：</p>\n<ul>\n<li><p>相对路径、绝对路径：</p>\n<ul>\n<li>相对路径：(Relative Path) 相对于该文件的路径；</li>\n<li>绝对路径：(Absolute Path) 从磁盘出发的路径；</li>\n</ul>\n</li>\n<li><p><code>&lt;img src=&quot;&quot; …… align=&quot;&quot; /&gt;</code> <code>align</code>属性–设置图片与后面文字的位置关系<br>值–<code>top</code>、<code>bottom</code>、<code>middle</code>、<code>absmiddle</code>、<code>left</code>、<code>right</code></p>\n</li>\n</ul>\n</li>\n<li><p>在静态页面中：</p>\n<ul>\n<li><p><code>/</code>开头表示根目录；</p>\n</li>\n<li><p><code>./</code>表示当前目录；（斜画线前面一个点）</p>\n</li>\n<li><p><code>../</code>上级目录；（斜画线前面两个点）</p>\n</li>\n<li><p>直接用文件名不带/也表示同一目录</p>\n</li>\n<li><p>这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第五章-三种列表的讲解\"><a href=\"#第五章-三种列表的讲解\" class=\"headerlink\" title=\"第五章 三种列表的讲解\"></a>第五章 三种列表的讲解</h4><hr>\n<ul>\n<li>三种列表的知识讲解：<ul>\n<li><code>&lt;ul&gt;</code>无序列表<ul>\n<li>无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol>有序列表\n  - 有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 `<ol>` 标签。每个列表项始于 `<li> `标签。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">   &lt;li&gt;内容一&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;内容二&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;内容三&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>列表符号</p>\n<ul>\n<li><p>无序列表-列表符号:</p>\n<ul>\n<li><code>type=&quot;circle&quot;</code>  空心圆 <code>type=“disc” </code> 实心圆  默认值 <code>type=&quot;square&quot; </code> 方块符</li>\n</ul>\n</li>\n<li><p>有序列表-列表符号</p>\n<ul>\n<li><code>type=&quot;A&quot;</code>    A B C D</li>\n<li><code>type=&quot;a&quot;</code>    a b c d</li>\n<li><code>type=&quot;1&quot;</code>    1 2 3 4  默认值type=”I”    I II III type=”i”     i ii iii</li>\n</ul>\n</li>\n<li><p>列表嵌套</p>\n</li>\n<li><p>无序列表-嵌套</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\"> &lt;li&gt;柚子</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;沙田柚&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;蜜柚&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\"> &lt;/li&gt;</span><br><span class=\"line\"> &lt;li&gt;荔枝&lt;/li&gt;</span><br><span class=\"line\"> &lt;li&gt;苹果&lt;/li&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有序列表-嵌套</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\"> &lt;li&gt;茶</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;红茶&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;绿茶&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\"> &lt;/li&gt;</span><br><span class=\"line\"> &lt;li&gt;果汁&lt;/li&gt;</span><br><span class=\"line\"> &lt;li&gt;牛奶&lt;/li&gt;&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义列表<ul>\n<li>定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个定义列表项以 <code>&lt;dt&gt; </code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dl&gt;</span><br><span class=\"line\">     &lt;dt&gt;pc网页制作&lt;/dt&gt;</span><br><span class=\"line\">     &lt;dd&gt;学习DIV+CSS JS JQ 项目实战&lt;/dd&gt;</span><br><span class=\"line\">     &lt;dt&gt;手机网页制作&lt;/dt&gt;</span><br><span class=\"line\">     &lt;dd&gt;手机网页制作实战&lt;/dd&gt;</span><br><span class=\"line\">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>dd</code>是对<code>dt</code>的解释</p>\n<ul>\n<li><code>&lt; dl&gt;&lt; /dl&gt;</code>用来创建一个普通的列表,</li>\n<li><code>&lt; dt&gt;&lt; /dt&gt;</code>用来创建列表中的上层项目，</li>\n<li><code>&lt; dd&gt;&lt; /dd&gt;</code>用来创建列表中最下层项目，</li>\n<li><code>&lt; dt&gt;&lt; /dt&gt;</code>和<code>&lt; dd&gt;&lt; /dd&gt;</code>都必须放在<code>&lt; dl&gt;&lt; /dl&gt;</code>标志对之间。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dl&gt;</span><br><span class=\"line\">    &lt;dt&gt;中国城市&lt;/dt&gt;</span><br><span class=\"line\">    &lt;dd&gt;北京 &lt;/dd&gt;</span><br><span class=\"line\">    &lt;dd&gt;上海 &lt;/dd&gt;</span><br><span class=\"line\">    &lt;dd&gt;广州 &lt;/dd&gt;</span><br><span class=\"line\">    &lt;dt&gt;美国城市&lt;/dt&gt;</span><br><span class=\"line\">    &lt;dd&gt;华盛顿 &lt;/dd&gt;</span><br><span class=\"line\">    &lt;dd&gt;芝加哥 &lt;/dd&gt;</span><br><span class=\"line\">    &lt;dd&gt;纽约 &lt;/dd&gt;</span><br><span class=\"line\">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>dl</code>是d<code>efinition list</code>的缩写</li>\n<li><code>dt</code>是<code>definition title</code>的缩写</li>\n<li><code>dd</code>是d<code>efinition description</code>的缩写</li>\n</ul>\n<ul>\n<li><code>list-style</code>属性具有三个属性分量：</li>\n<li><code>list-style-position</code> ：设置列表项图标的位置，位于文本内或者文本外</li>\n<li><code>list-style-type</code>： 设置列表项图标的类型</li>\n<li><code>list-style-image </code>：使用图像设置列表项图标</li>\n</ul>\n<hr>\n<h4 id=\"第六章-表单元素-上\"><a href=\"#第六章-表单元素-上\" class=\"headerlink\" title=\"第六章 表单元素(上)\"></a>第六章 表单元素(上)</h4><hr>\n<ul>\n<li><p>表单标签:</p>\n<ul>\n<li><p><code>&lt;form&gt;</code>表单标签</p>\n<ul>\n<li><code>&lt;form&gt;</code>表单是一个包含表单元素的区域，包括起来的都是表单的内容<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form&gt;</span><br><span class=\"line\"> &lt;input type=&quot;text&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HTML标签 - <code>Action</code>和确认按钮：</p>\n<ul>\n<li>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;html.do&quot; method=&quot;get&quot;&gt;</span><br><span class=\"line\">        username:  &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt;</span><br><span class=\"line\">        &lt;input type=&quot;submit&quot; value=&quot;提  交&quot; /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p><code>HTML</code>标签 - 隐藏域隐藏标签：</p>\n</li>\n<li><p>隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form&gt;</span><br><span class=\"line\">     &lt;input type=&quot;hidden&quot; name=&quot;hid&quot; value=&quot;value&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>&lt;input&gt;</code>标签的掌握</p>\n<ul>\n<li><p>常用<code>type</code>类型：</p>\n<ul>\n<li><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; /&gt;</code></li>\n<li><code>type=&quot;text&quot; </code>       单行文本输入框</li>\n<li><code>type=&quot;password&quot;</code>    密码（<code>maxlength=&quot;&quot;</code>）</li>\n<li><code>type=&quot;radio&quot;  </code>     单项选择（<code>checked=&quot;checked&quot;</code>）</li>\n<li><code>type=&quot;checkbox&quot; </code>   多项选择</li>\n<li><code>type=&quot;button&quot;  </code>    按钮</li>\n<li><code>type=&quot;submit&quot;</code>    提交 <code>type=&quot;image&quot;</code>图片提交</li>\n<li><code>type=&quot;file&quot;</code>    上传文件</li>\n<li><code>type=&quot;reset&quot;    </code>重置</li>\n<li><code>type=&quot;hidden&quot;</code>    隐藏</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>关于表单中的设置默认值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;今天心情不错&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;radio&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;select name=&quot;&quot; &gt;</span><br><span class=\"line\"> &lt;option  value=&quot;&quot;&gt;&lt;/option&gt;</span><br><span class=\"line\"> &lt;option  value=&quot;&quot; selected=&quot;selected&quot;&gt;&lt;/option&gt;</span><br><span class=\"line\">&lt;select&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>textarea</code>没有默认值</p>\n</li>\n<li><p><code>&lt;label&gt;</code>标签的使用</p>\n<ul>\n<li><p><code>&lt;label&gt;&lt;/label&gt;</code></p>\n<ul>\n<li><code>label</code> 元素不会向用户呈现任何特殊效果。</li>\n<li>不过，它为鼠标用户改进了可用性。</li>\n<li>如果您在 <code>label</code> 元素内点击文本，就会触发此控件。</li>\n<li>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</li>\n</ul>\n</li>\n<li><p><code>&lt;label&gt;</code> 标签的<code> for</code> 属性应当与相关元素的 <code>id </code>属性相同。</p>\n</li>\n<li><p>例子：（重要—注册表单–用户体验–必做）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;单向选择&lt;/p&gt;</span><br><span class=\"line\">&lt;label for=&quot;male&quot;&gt;男：&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;male&quot;/&gt;</span><br><span class=\"line\">&lt;label for=&quot;nv&quot;&gt;女：&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot;checked=&quot;check&quot;/&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第七章-表单和表格-下\"><a href=\"#第七章-表单和表格-下\" class=\"headerlink\" title=\"第七章 表单和表格(下)\"></a>第七章 表单和表格(下)</h4><hr>\n<ul>\n<li><p>表单和表格标签：</p>\n<ul>\n<li><code>&lt;textarea&gt;</code>文本域标签</li>\n<li><code>&lt;textarea&gt;</code>标签：</li>\n<li><code>&lt;textarea&gt;&lt;/textarea&gt;</code>是文本域标签，可以在其中插入一段文字内容，它有两个常用属性<code>rows</code>和<code>cols</code></li>\n</ul>\n</li>\n<li><p>注意：</p>\n<ul>\n<li><code>rows</code>表示这个文本域有多少行</li>\n<li><code>cols</code>表示这个文本域有多少列</li>\n</ul>\n</li>\n<li><p>除了这两个属性它还有<code>readonly</code>（只读，文本域的内容无法改变，相当于协议）和<code>title</code>（鼠标放上提示）</p>\n</li>\n<li><p><code>&lt;select&gt;</code>标签的掌握</p>\n<ul>\n<li>注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 <code>&lt;select&gt;</code> 表单数据提交给服务器时包括 <code>name </code>属性<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form&gt;</span><br><span class=\"line\">    &lt;select name=&quot;&quot;  id=&quot;&quot;&gt;</span><br><span class=\"line\">         &lt;option value=&quot;1&quot;&gt;1月&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;2&quot;&gt;2月&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>常用到的属性：<code>disabled=“disabled”  name=&quot;sel&quot;  size=&quot;2&quot;</code></p>\n</li>\n</ul>\n<ul>\n<li><p><code>&lt;table&gt;</code>表格标签</p>\n</li>\n<li><p><code> &lt;table&gt;</code>表格标签：<code>&lt;table&gt;</code>是表格标签，可以用它定义一个表格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;table border=&quot;1&quot;&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;姓名&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;性别&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>注意：<code>&lt;table&gt;</code>的<code>border</code>属性不能少</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code>标签的使用</p>\n<ul>\n<li><p><code>&lt;tr&gt;</code>行标签：</p>\n<ul>\n<li><code>&lt;tr&gt;</code>可以定义表格中的一行，一个&lt;<code>tr&gt;&lt;/tr&gt;</code>表示一行。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;table border=&quot;1&quot;&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\"> &lt;td&gt;姓名&lt;/td&gt;</span><br><span class=\"line\"> &lt;td&gt;性别&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\"> &lt;td&gt;姓名&lt;/td&gt;</span><br><span class=\"line\"> &lt;td&gt;性别&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>&lt;td&gt;</code>单元格标签:</p>\n<ul>\n<li><code>&lt;td&gt;</code>可以定义表格中的一个单元格，<code>&lt;td&gt;&lt;/td&gt;</code>表示一个单元格。<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;table border=&quot;1&quot;&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td &gt;姓名&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;性别&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li>\n<li><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：</li>\n<li><code>border-collapse:collapse</code>;</li>\n<li><code>colspan</code>左右合并</li>\n<li><code>rowspan</code>上下合并</li>\n</ul>\n</li>\n</ul>\n<p><strong>第一部分总结</strong>：</p>\n<ul>\n<li><p>非可视化标签：<code>head</code>  <code>meta</code>  <code>style</code>  <code>scrpit.</code>..</p>\n</li>\n<li><p>可视化标签：<code>img</code>  <code>div</code> <code>span</code> <code>a</code> <code>ul</code> <code>li</code>…</p>\n</li>\n<li><p>只有可视化标签，才能用<code>css</code>改变它</p>\n</li>\n<li><p>单标签：<code>meta</code>  <code>link</code>  <code>base</code>  <code>img</code>  <code>input</code> <code>br</code> <code>hr</code></p>\n</li>\n<li><p>双标签：<code>html</code> <code>head</code> <code>body</code>  <code>div</code>  <code>a</code>  <code>p</code>  <code>span</code> ..<code>ul</code> <code>li</code> <code>ol</code> <code> dl</code> ….</p>\n</li>\n<li><p><strong>常用可视化标签</strong></p>\n</li>\n<li><p>** <code>div</code>**</p>\n<pre><code>  - 一般用它来布局\n</code></pre>\n<ul>\n<li><strong>a</strong>  超链接标签<ul>\n<li><code>href</code>*属性：设置跳转的网页地址</li>\n<li><code>target</code>属性：设置跳转的目标</li>\n<li>结论：凡事页面可以点击跳转或者表单提交的文字，都用<code>a</code>标签</li>\n</ul>\n</li>\n<li><strong><code>img</code></strong><ul>\n<li><code>src</code>*属性用来设置图片的url数据</li>\n<li><code>alt</code>提供给搜索引擎搜索的</li>\n<li><code>width</code></li>\n<li><code>height</code></li>\n<li>结论 ：显示图片</li>\n</ul>\n</li>\n<li><strong>ul li</strong><ul>\n<li>列表</li>\n<li>结论：只要将来设计页面中有固定样式的列表，就用ul和li</li>\n</ul>\n</li>\n<li><strong><code>table</code> <code>caption</code> <code>tr</code> <code>td (th)</code></strong><ul>\n<li>慢慢已经被淘汰了 被ul li代替</li>\n<li>如果是合并竖排的就是合并行（<code>rowspan</code>）</li>\n<li>如果是合并横排的就是合并列（<code>colspan</code>）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>HTML部分导图总结</strong></p>\n<hr>\n<ul>\n<li><a href=\"http://www.html5star.com/manual/html5label-meaning/\">HTML5标签集合</a></li>\n</ul>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/1.jpg\"></p>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/2.png\"></p>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/3.jpeg\"></p>\n<hr>\n<h3 id=\"第二部分-CSS\"><a href=\"#第二部分-CSS\" class=\"headerlink\" title=\"第二部分 CSS\"></a>第二部分 CSS</h3><hr>\n<h4 id=\"第八章-css基础知识\"><a href=\"#第八章-css基础知识\" class=\"headerlink\" title=\"第八章 css基础知识\"></a>第八章 css基础知识</h4><hr>\n<ul>\n<li><p><code>css</code>基础知识：</p>\n<ul>\n<li><code>css</code>样式表的定义</li>\n<li><code>css</code>：（Cascading Style Sheets）层叠样式表；</li>\n</ul>\n</li>\n<li><p>分类及位置：内部样式<code>-head</code>区域<code>style</code>标签里面</p>\n<ul>\n<li>外部样式-<code>link</code>调用</li>\n<li>内联样式-标签元素里面</li>\n</ul>\n</li>\n<li><p><code>css</code>内的注释：/<code>*</code>注释内容<code>*</code>/</p>\n</li>\n<li><p><code>css</code>样式表的语法</p>\n<ul>\n<li><p><code>CSS</code>规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。</p>\n</li>\n<li><p>盒子名或者标签名{属性:值;}</p>\n</li>\n<li><p><strong>CSS中几种颜色的表示方法</strong></p>\n<ul>\n<li><strong>用颜色名表示</strong><ul>\n<li>有17个预先确定的颜色，它们是<ul>\n<li><code>aqua</code>, <code>black</code>, <code>blue</code>, <code>fuchsia</code>, <code>gray</code>, <code>green</code>, <code>lime</code>, <code>maroon</code>, <code>navy</code>,<br>　　<code>olive</code>, <code>orange,</code> <code>purple</code>, <code>red</code>, <code>silver</code>, <code>teal</code>, <code>white</code>, and <code>yellow</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>用十六进制的颜色值表示(红、绿、蓝)</strong></p>\n<ul>\n<li><code>#FF0000</code>或者<code>#F00 </code></li>\n</ul>\n</li>\n<li><p><strong>用rgb(r,g,b)函数表示</strong></p>\n<ul>\n<li>如：<code>rgb(255,255,0)</code></li>\n</ul>\n</li>\n<li><p><strong>用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)</strong></p>\n<ul>\n<li>如：<code>hsl(120,100%,100%)</code>,色调0代表红色，<code>120</code>代表绿色，<code>240</code>代表<br>蓝色</li>\n</ul>\n</li>\n<li><p>**用<code>rgba(r,g,b,a)</code>函数表示 **</p>\n<ul>\n<li>其中<code>a</code>表示的是改颜色的透明度，取值范围是<code>0~1</code>，其中<code>0</code>代表完全透明</li>\n</ul>\n</li>\n<li><p><strong>用hsla(Hue,Saturation,Lightness,alpha)函数表示</strong></p>\n<ul>\n<li>色调、饱和度、亮度、透明度</li>\n</ul>\n</li>\n<li><p>例子</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;position:absolute;top:0px&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:gray;&quot;</span>&gt;</span>background-color:gray<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:#F00;&quot;</span>&gt;</span>background-color:#F00<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:#ffff00;&quot;</span>&gt;</span>background-color:#ffff00<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:rgb(255,0,255);&quot;</span>&gt;</span>background-color:rgb(255,0,255)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:hsl(120,80%,50%);&quot;</span>&gt;</span>background-color:hsl(120,80%,50%)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:rgba(255,0,255,0.5);&quot;</span>&gt;</span>background-color:rgba(255,0,255,0.5)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:hsla(120,80%,50%,0.5);&quot;</span>&gt;</span>background-color:hsla(120,80%,50%,0.5)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1480597-39e61a813f637282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li>内部样式表<ul>\n<li>当单个页面需要设置样式时，就应该使用内部样式表。</li>\n<li>使用 <code>&lt;style&gt;&lt;/style&gt;</code>标签在文档<code>&lt;head&gt;&lt;/head&gt;</code>里面定义内部样式表</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\"> &lt;style type=&quot;text/css&quot; &gt;</span><br><span class=\"line\">  p&#123;color:red;&#125;</span><br><span class=\"line\"> &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>从外部引入到样式分为两种：（注意写在<code>head</code>标签里面）</p>\n</li>\n<li><p>当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个<code>css</code>文件，然后引用到我们的页面中。</p>\n</li>\n<li><p><code>Link</code>样式表式：  <code>&lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)&gt;  </code></p>\n</li>\n<li><p><code>Html</code>式：  <code>&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css.css&quot;);&gt;&lt;/style&gt; </code></p>\n</li>\n</ul>\n<ul>\n<li><p>内联样式表（优先级高）</p>\n<ul>\n<li><p>写在标签里面的样式</p>\n</li>\n<li><p>如：<code>&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</code></p>\n</li>\n</ul>\n</li>\n<li><p>表示给<code>p</code>标签里面的文字颜色设置为红色</p>\n</li>\n<li><p>区别：外链样式与导入样式</p>\n<ul>\n<li><p><code>link</code>标签是属于<code>xhtml</code>范畴，而<code>@import</code>则是<code>css2.1</code>中特有的。<code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它的事情，比如定义<code>RSS</code>，定义<code>rel</code>连接属性等，<code>@import</code>就只能加载<code>CSS</code>了。</p>\n</li>\n<li><p>加载的顺序的区别，<code>link</code>加载的<code>css</code>时，是一种并行(没有尝试是否是这样)加载<code>CSS</code>方式，而<code>@impor</code>则在整个页面加载完成后才加载。</p>\n</li>\n<li><p>兼容性的区别，因<code>@import``CSS2.1</code>才特有的，所以对于不兼容<code>CSS2.1</code>的浏览器来说，无效。</p>\n</li>\n<li><p>在样式控制上(比如动态改变网页的布局时,使用<code>javascript</code>操作<code>DOM</code>)的区别，此时<code>@import</code>就无能为力了。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong>样式的优先级补充</strong></p>\n<ul>\n<li>相同权值情况下，<code>CSS</code>样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：<ul>\n<li><code>内联样式表（标签内部）</code> &gt; <code>嵌入样式表（当前文件中）</code>&gt; <code>外部样式表（外部文件中）</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>权值不同时，浏览器是根据权值来判断使用哪种<code>css</code>样式的，哪种样式权值高就使用哪种样式</p>\n</li>\n<li><p>层叠优先级是:</p>\n</li>\n<li><p> <code>浏览器缺省</code>&lt; <code>外部样式表</code> &lt; <code>内部样式表</code> &lt; <code>内联样式</code></p>\n</li>\n<li><p>其中样式表又有:<code>类选择器</code> &lt; <code>类派生选择器 </code>&lt;<code> ID选择器</code> &lt; <code>ID派生选择器</code></p>\n</li>\n<li><p>派生选择器以前叫上下文选择器，所以完整的层叠优先级是:</p>\n</li>\n<li><p><code>浏览器缺省</code> &lt;<code> 外部样式表</code> &lt; <code>外部样式表类选择器</code> &lt; <code>外部样式表类派生选择器 </code>&lt; <code>外部样式表ID选择器</code> &lt; <code>外部样式表ID派生选择器 </code>&lt; <code>内部样式表</code> &lt; <code>内部样式表类选择器</code> &lt; <code>内部样式表类派生选择器</code> &lt; <code>内部样式表ID选择器</code> &lt; <code>内部样式表ID派生选择器</code> &lt; <code>内联样式</code>…共<code>12</code>个优先级</p>\n</li>\n<li><p>另外，如果同一个元素在没有其他样式的作用影响下，其<code>Class</code>定义了多个并以空格分开，其优先级顺序为：</p>\n</li>\n<li><p>一个元素同时应用多个<code>class</code>，后定义的优先（即近者优先），加上<code>!important</code>者最优先！</p>\n</li>\n<li><p>选择器权重</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>权重值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!important</td>\n<td>infinity（正无穷）</td>\n</tr>\n<tr>\n<td>行间样式</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>class、属性、伪类选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>标签选择器、伪元素选择器</td>\n<td>1</td>\n</tr>\n<tr>\n<td>通配符选择器</td>\n<td>0</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<hr>\n<h4 id=\"第九章-css选择器-上\"><a href=\"#第九章-css选择器-上\" class=\"headerlink\" title=\"第九章 css选择器(上)\"></a>第九章 css选择器(上)</h4><p><strong>什么是选择器：css选择器就是要改变样式的对象</strong></p>\n<ul>\n<li><p><code>class</code>选择器：</p>\n<ul>\n<li><code>class</code>类选择器可以重复利用</li>\n<li>选择<code>class</code>命名的元素 以 <code>.</code> 开头   <code>.p1&#123;color:#0f0;&#125;</code> <code>id</code>选择器唯一</li>\n</ul>\n</li>\n<li><p>属性选择器</p>\n<ul>\n<li><code>&#123;属性:值;属性:值;&#125;</code></li>\n<li>例：<code>[name=&#39;value&#39;]&#123;color:red&#125;</code></li>\n</ul>\n</li>\n<li><p>标签选择器</p>\n<ul>\n<li>页面中所有的标签都是一个选择器  如：<code>p&#123;color:red;&#125;</code></li>\n</ul>\n</li>\n<li><p>通配符选择器 <code>*</code></p>\n<ul>\n<li>选择全部的元素 以 <code>*</code> 开头，如: <code>*&#123;color:#0f0;&#125;</code></li>\n</ul>\n</li>\n<li><p><code>ID</code>选择器</p>\n<ul>\n<li>选择<code>id</code>命名的元素 以 <code>#</code> 开头   <code>#p1&#123;color:#0f0;&#125;</code></li>\n</ul>\n</li>\n<li><p>类选择器</p>\n<ul>\n<li><code>class</code>选择器，选择<code>clas</code>命名的元素 以<code>.</code>开头  <code>.first&#123;color:#00f;&#125;</code></li>\n</ul>\n</li>\n<li><p>群组选择器</p>\n<ul>\n<li>选择多个元素,以逗号隔开 <code>#main,.first,span,a,h1&#123;color:red;&#125;</code></li>\n</ul>\n</li>\n<li><p>包含选择器</p>\n<ul>\n<li>选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开<code>p</code><ul>\n<li><code>span&#123;color:red;&#125;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>属性选择器</p>\n<ul>\n<li>选择包含某一属性的元素</li>\n<li><code>a[title]&#123;color:red;&#125;</code>  选择包含<code>title</code>的<code>a</code>标签</li>\n<li><code>a[title][href]&#123;color:red;&#125;</code> 选择包含<code>title</code>和<code>href</code>的<code>a</code>标签</li>\n</ul>\n</li>\n<li><p><code>&gt; </code> <code>+</code> 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）</p>\n<ul>\n<li><code>p &gt; span&#123;color:red;&#125;</code></li>\n</ul>\n</li>\n<li><p>相邻兄弟选择器：只选择后面的相邻兄弟元素</p>\n<ul>\n<li><code>p + span&#123;color:red;&#125;</code></li>\n</ul>\n</li>\n<li><p><code>css</code>代码写完后上线前要经过压缩处理</p>\n</li>\n<li><p>本地和服务器分两个<code>css</code>版本（备份）</p>\n</li>\n<li><p>压缩后注释都清除，空间体积减少</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十章-css选择器-下\"><a href=\"#第十章-css选择器-下\" class=\"headerlink\" title=\"第十章 css选择器(下)\"></a>第十章 css选择器(下)</h4><hr>\n<ul>\n<li><p><code>&lt;a&gt;</code>伪类选择器</p>\n<ul>\n<li><p><code>a:link &#123;color:#FF0000;&#125;</code>    /* 超链接未访问时的状态 */ （只用于a标签）</p>\n</li>\n<li><p><code>a:visited &#123;color:#00FF00;&#125;</code>    /* 超链接访问过后的状态 */ （只用于a标签）</p>\n</li>\n<li><p><code>a:hover &#123;color:#FF00FF;&#125;    </code>/* 鼠标悬停状态</p>\n</li>\n<li><p><code>*/</code>（可和其他标签结合一起用）</p>\n</li>\n<li><p><code>a:active &#123;color:#0000FF;&#125;</code>    /* 激活状态，鼠标按下状态 */</p>\n</li>\n<li><p><strong>注意</strong></p>\n<ul>\n<li>伪类选择器的排序很重要，<code>a:link</code> <code>a:visited</code> <code>a:hover</code> <code>a:active</code>，记作<code>lvha</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>输入伪类选择器（针对表单）</p>\n<ul>\n<li><code>input:focus&#123;color:red;&#125; </code>      /* 键盘输入焦点 */</li>\n</ul>\n</li>\n<li><p>位置伪类选择器（针对表单）</p>\n<ul>\n<li><code>p:first-child&#123;color:red;&#125;</code>     /<code>* 第一个p *</code>/</li>\n<li><code>p:last-child&#123;color:red;&#125;</code>     /<code>* 最后一个p *</code>/</li>\n</ul>\n</li>\n<li><p>伪元素选择器</p>\n<ul>\n<li><code>:before</code> 在元素之前添加内容。</li>\n<li><code>:after</code> 在元素之后添加内容。</li>\n</ul>\n</li>\n<li><p><code>css</code>优先规则</p>\n<ul>\n<li>内联样式表-&gt; <code>ID</code> 选择器—&gt; <code>Class</code> 类选择器-&gt;标签选择器</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十一章-背景属性\"><a href=\"#第十一章-背景属性\" class=\"headerlink\" title=\"第十一章 背景属性\"></a>第十一章 背景属性</h4><hr>\n<ul>\n<li><p>背景属性：</p>\n<ul>\n<li><p>背景的添加 ：</p>\n</li>\n<li><p>背景颜色的添加:</p>\n<ul>\n<li><code>background:red;</code></li>\n<li><code>backgronnd-color:red;</code></li>\n</ul>\n</li>\n<li><p>背景图片的添加：</p>\n<ul>\n<li><code>background:url(“images/1.jpg”);</code></li>\n<li><code>backgronnd-image:url(“images/1.jpg”);</code></li>\n</ul>\n</li>\n<li><p>背景的平铺</p>\n</li>\n<li><p>什么是平铺？平铺就是图片是否重复出现</p>\n<ul>\n<li>不平铺：<code>background-repeat:no-repeat;</code></li>\n<li>水平方向平铺：<code>background-repeat:repeat-x;</code></li>\n<li>垂直方向平铺：<code>background-repeat:repeat-y;</code></li>\n<li>完全平铺：默认为完全平铺</li>\n</ul>\n</li>\n<li><p>背景图片的定位</p>\n<ul>\n<li>背景图片的定位就是可以设置显示背景图片的位置，通过属性<code>background-position</code>来实现</li>\n<li><code>background-position</code>的取值可为英文单词或者数值和百分值。</li>\n<li><code>background-positon</code>的英文单词取值</li>\n<li><code>top left </code></li>\n<li><code>top  center  </code></li>\n<li><code>top  right</code></li>\n<li><code>center left  </code></li>\n<li><code>center  center </code></li>\n<li><code>center right</code></li>\n<li><code>bottom left  </code></li>\n<li><code>bottom  center </code></li>\n<li><code>bottom right</code></li>\n<li><code>background-position</code>的数值取值<ul>\n<li><code>background-position:x  y;</code></li>\n</ul>\n</li>\n<li><code>positon</code>的百分值取值<ul>\n<li><code>background-position:x%  y%; </code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>背景图片的大小</p>\n<ul>\n<li><p>背景图片的大小可以通过属性<code>background-size</code>来设置<code>background-size</code>的取值可为数值和百分值。</p>\n</li>\n<li><p><code>background-size</code>的数值取值</p>\n<ul>\n<li><code>background-size:x  y;</code></li>\n</ul>\n</li>\n<li><p><code>background-size</code>的数值取值</p>\n<ul>\n<li><code>background-size:x%  y%;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>背景图片的滚动</p>\n<ul>\n<li><p>背景图片是否随着内容的滚动而滚动由<code>background-attachment</code>设置</p>\n</li>\n<li><p><code>background-attachment:fixed; </code>  固定，不随内容的滚动而滚动</p>\n</li>\n<li><p><code>background-attachment:scroll; </code> 滚动，随内容的滚动而滚动</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十二章-文字文本属性\"><a href=\"#第十二章-文字文本属性\" class=\"headerlink\" title=\"第十二章 文字文本属性\"></a>第十二章 文字文本属性</h4><hr>\n<ul>\n<li><code>css</code>文字文本属性：</li>\n<li><strong>文字属性</strong></li>\n<li><code>color:red;</code>    文字颜色<ul>\n<li><code>font-size:12px</code>;    文字大小</li>\n<li><code>font-weight:“bold”</code>    文字粗细(<code>bold/normal</code>)</li>\n<li><code>font-family:“宋体”</code>    文字类别</li>\n<li><code>font-variant:small-caps </code>小写字母以大写字母显示</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>文本属性</strong></p>\n<ul>\n<li><code>text-align:center;</code>   文本对齐(<code>right</code>/<code>left</code>/<code>center</code>)</li>\n<li><code>line-height:10px; </code> 行间距(可通过它实现文本的垂直居中)</li>\n<li><code>text-indent:20px;</code>  首行缩进</li>\n<li><code>text-decoration:none; </code><ul>\n<li>文本线(<code>none</code>/<code>underline</code>/<code>overline</code>/<code>line-through</code>)</li>\n</ul>\n</li>\n<li><code>letter-spacing</code>:   字间距</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十三章-盒子模型\"><a href=\"#第十三章-盒子模型\" class=\"headerlink\" title=\"第十三章 盒子模型\"></a>第十三章 盒子模型</h4><hr>\n<ul>\n<li><p><strong>盒子模型</strong></p>\n<ul>\n<li>盒子模型就是一个有高度和宽度的矩形区域</li>\n<li>所有<code>html</code>标签都是盒子模型</li>\n<li><code>div</code>标签自定义盒子模型</li>\n</ul>\n</li>\n<li><p>所有的标签都是盒子模型</p>\n<ul>\n<li><code>class</code>和<code>id</code>的主要差别是：<code>class</code>用于元素组（类似的元素，或者可以理解为某一类元素），而<code>id</code>用于标识单独的唯一的元素。</li>\n</ul>\n</li>\n<li><p><strong>盒子模型的组成</strong></p>\n<ul>\n<li>盒子模型组成部分：<ul>\n<li>自身内容：<code> width</code>、h<code>eight</code> 宽高</li>\n<li>内边距：   <code>padding</code></li>\n<li>盒子边框： <code>border</code> 边框线</li>\n<li>与其他盒子距离：  <code>margin </code>外边距</li>\n<li>内容+内边距+边框+外边距=面积</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>border</code> 边框</p>\n<ul>\n<li>常见写法  <code>border:1px solid #f00;</code></li>\n</ul>\n</li>\n<li><p>单独属性：</p>\n</li>\n<li><p><code>border-width</code>:</p>\n</li>\n<li><p><code>border-style:</code></p>\n<ul>\n<li><code>dotted </code> 点状虚线</li>\n<li><code>dashed</code>（虚线）</li>\n<li><code>solid</code>（实线）</li>\n<li><code>double</code>（双实线）</li>\n</ul>\n</li>\n<li><p><code>border-color</code> (颜色)</p>\n</li>\n<li><p><code>padding</code> 内边距</p>\n<ul>\n<li><p>值：<code>像素</code>/<code>厘米</code>等长度单位、百分比</p>\n<ul>\n<li><code>padding:10px; </code>                      上下左右</li>\n<li><code>padding:10px 10px; </code>                 上下  左右</li>\n<li><code>padding:10px 10px 10px; </code>         上 左右 下</li>\n<li><code>padding:10px 10px 10px 10px; </code> 上 右 下 左（设置4个点–&gt;顺时针方向）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>单独属性：</p>\n<ul>\n<li><code>padding-top:</code></li>\n<li><code>padding-right:</code></li>\n<li><code>padding-bottom:</code></li>\n<li><code> padding-left:</code></li>\n</ul>\n</li>\n<li><p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据<code>width</code>和<code>height</code>减小</p>\n</li>\n<li><p>margin 外边距</p>\n<ul>\n<li><p>值：与<code>padding</code>相同</p>\n</li>\n<li><p>单独属性：与<code>padding</code>相同</p>\n</li>\n</ul>\n</li>\n<li><p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p>\n</li>\n</ul>\n<hr>\n<p><strong>补充盒子模型内容</strong></p>\n<hr>\n<ul>\n<li><p><strong>标准盒子模型</strong></p>\n</li>\n<li><p>盒子模型是<code>css</code>中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 <code>ie </code>盒子模型和标准 <code>w3c</code> 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</p>\n</li>\n</ul>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/w3c.jpg\"></p>\n<ul>\n<li><p>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content </code>部分不包含其他部分</p>\n</li>\n<li><p>** IE盒子模型**</p>\n</li>\n</ul>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/ie.jpg\"></p>\n<ul>\n<li><p>从上图可以看到 <code>ie </code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></p>\n</li>\n<li><p>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border </code>和 <code>padding</code></p>\n</li>\n<li><p><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></p>\n</li>\n<li><p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p>\n</li>\n<li><p>例：</p>\n</li>\n<li><p>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding </code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></p>\n</li>\n<li><p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c </code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p>\n</li>\n<li><p>假如不加<code> doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie </code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff </code>会采用标准<code> w3c</code> 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</p>\n</li>\n<li><p>反之，假如加上了 <code>doctype</code> 声明，那么所有浏览器都会采用标准 <code>w3c </code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>用 <code>jquery</code> 做的例子来证实一下</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;你用的盒子模型是？&lt;/title&gt;</span><br><span class=\"line\">&lt;script language=&quot;javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class=\"line\">var sbox = $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class=\"line\">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>　上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html public &quot;-//w3c//dtd xhtml 1.0 transitional//en&quot; &quot;http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;你用的盒子模型是标准w3c盒子模型&lt;/title&gt;</span><br><span class=\"line\">&lt;script language=&quot;javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class=\"line\">var sbox = $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class=\"line\">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>　代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype </code>声明。在所有浏览器中都显示“标准 <code>w3c </code>盒子模型”</li>\n</ul>\n<ul>\n<li><p> 所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</p>\n</li>\n<li><p>扩展</p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/e2eb0d8c9de6\">学会使用box-sizing布局</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十四章-块元素、行元素与溢出\"><a href=\"#第十四章-块元素、行元素与溢出\" class=\"headerlink\" title=\"第十四章 块元素、行元素与溢出\"></a>第十四章 块元素、行元素与溢出</h4><hr>\n<ul>\n<li><p>基本概念</p>\n<ul>\n<li>块级元素：默认情况下独占一行的元素，可控制宽高、上下边距；</li>\n<li>行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距</li>\n</ul>\n</li>\n<li><p>行块转换</p>\n<ul>\n<li><code>display:none</code>;  不显示</li>\n<li><code>display:block</code>; 变成块级元素</li>\n<li><code>display:inline</code>; 变成行级元素</li>\n<li><code>display:inline-block</code>; 以块级元素样式展示，以行级元素样式排列，称行级块元素</li>\n</ul>\n</li>\n<li><p>溢出</p>\n<ul>\n<li><code>overflow:hidden</code>;   溢出隐藏</li>\n<li><code>overflow:scroll</code>;   内容会被修剪，浏览器会显示滚动条</li>\n<li><code>overflow:auto</code>;   如果内容被修剪，则产生滚动条</li>\n</ul>\n</li>\n<li><p>文本不换行：<code>white-space:nowrap</code>;</p>\n</li>\n<li><p>长单词换行：<code>word-wrap:break-word</code>;</p>\n</li>\n</ul>\n<ul>\n<li>行内元素和快级元素小结</li>\n</ul>\n<ul>\n<li><p>一、<strong>块级元素</strong>：block element</p>\n<ul>\n<li>每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（<code>float</code>浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；</li>\n<li>块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。</li>\n</ul>\n</li>\n<li><p><code>DIV</code> 是最常用的块级元素，元素样式的<code>display:block</code>都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。</p>\n</li>\n<li><p>二、<strong>行内元素</strong>：inline element</p>\n<ul>\n<li>也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 <code>SPAN </code>元素，<code>IFRAME</code>元素和元素样式的<code>display : inline</code>的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。</li>\n</ul>\n</li>\n<li><p>三、<strong>行级块元素</strong>：inline-block</p>\n<ul>\n<li>也叫行级块元素，常见的元素有img，它是随着内容的宽高改变</li>\n</ul>\n</li>\n<li><p>四、<strong>block（块）元素的特点:</strong></p>\n<ul>\n<li>①、总是在新行上开始；</li>\n<li>②、高度，行高以及外边距和内边距都可控制；</li>\n<li>③、宽度缺省是它的容器的100%，除非设定一个宽度。</li>\n<li>④、它可以容纳内联元素和其他块元素</li>\n</ul>\n</li>\n<li><p>五、<strong>inline元素的特点</strong></p>\n<ul>\n<li>①、和其他元素都在一行上；</li>\n<li>②、高，行高及外边距和内边距不可改变；</li>\n<li>③、宽度就是它的文字或图片的宽度，不可改变</li>\n<li>④、内联元素只能容纳文本或者其他内联元素（行元素）</li>\n</ul>\n</li>\n<li><p>六、inline-block元素的特点</p>\n<ul>\n<li>①、和其它元素都在一行</li>\n<li>宽高行高等等可以改变</li>\n<li>宽高是内容的宽高，但是可以改变</li>\n<li>可以容纳行级元素和块级元素</li>\n</ul>\n</li>\n<li><p><strong>对行内元素，需要注意如下</strong>:</p>\n<ul>\n<li>设置宽度<code>width</code> 无效。 设置高度<code>height </code>无效，可以通过<code>line-height</code>来设置。 设置<code>margin</code></li>\n<li>只有左右<code>margin</code>有效，上下无效。</li>\n<li>设置<code>padding</code>只有左右<code>padding</code>有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。</li>\n</ul>\n</li>\n<li><p>七、<strong>常见的块状元素</strong></p>\n<ul>\n<li><code>address</code> – 地址</li>\n<li><code>blockquote</code> – 块引用</li>\n<li><code>center</code> – 举中对齐块</li>\n<li><code>dir</code> – 目录列表</li>\n<li><code>div</code> – 常用块级容易，也是<code>CSS layout</code>的主要标签</li>\n<li><code>dl</code> – 定义列表</li>\n<li><code>fieldset</code> – <code>form</code>控制组</li>\n<li><code>form</code> – 交互表单</li>\n<li><code>h1</code> – 大标题</li>\n<li><code>h2</code> – 副标题</li>\n<li><code>h3</code> – 3级标题</li>\n<li><code>h4</code> – 4级标题</li>\n<li><code>h5</code> – 5级标题</li>\n<li><code>h6</code> – 6级标题</li>\n<li><code>hr</code> – 水平分隔线</li>\n<li><code>isindex</code> – <code>input prompt</code></li>\n<li><code>menu</code> – 菜单列表</li>\n<li><code>noframes</code> – <code>frames</code>可选内容，（对于不支持frame的浏览器显示此区块内容</li>\n<li><code>noscript</code> – 可选脚本内容（对于不支持<code>script</code>的浏览器显示此内容）</li>\n<li><code>ol</code> – 有序表单</li>\n<li><code>p</code> – 段落</li>\n<li><code>pre</code> – 格式化文本</li>\n<li><code>table</code> – 表格</li>\n<li><code>ul</code> – 无序列表</li>\n</ul>\n</li>\n<li><p>八、<strong>常见的内联元素</strong></p>\n<ul>\n<li><code>a</code> – 锚点</li>\n<li><code>abbr</code> – 缩写</li>\n<li><code>acronym</code> – 首字</li>\n<li><code>b</code> – 粗体(不推荐)</li>\n<li><code>bdo</code> – <code>bidi override</code></li>\n<li><code>big</code> – 大字体</li>\n<li><code>br</code> – 换行</li>\n<li><code>cite</code> – 引用</li>\n<li><code>code</code> – 计算机代码(在引用源码的时候需要)</li>\n<li><code>dfn</code> – 定义字段</li>\n<li><code>em</code> – 强调</li>\n<li><code>font</code> – 字体设定(不推荐)</li>\n<li><code>i</code> – 斜体</li>\n<li><code>img</code> – 图片</li>\n<li><code>input</code> – 输入框</li>\n<li><code>kbd</code> – 定义键盘文本</li>\n<li><code>label</code> – 表格标签</li>\n<li><code>q</code> – 短引用</li>\n<li><code>s</code> – 中划线(不推荐)</li>\n<li><code>samp</code> – 定义范例计算机代码</li>\n<li><code>select</code> – 项目选择</li>\n<li><code>small</code> – 小字体文本</li>\n<li><code>span</code> – 常用内联容器，定义文本内区块</li>\n<li><code>strike</code> – 中划线</li>\n<li><code>strong</code> – 粗体强调</li>\n<li><code>sub</code> – 下标</li>\n<li><code>sup</code> – 上标</li>\n<li><code>textarea</code> – 多行文本输入框</li>\n<li><code>tt</code> – 电传文本</li>\n<li><code>u</code> – 下划线</li>\n</ul>\n</li>\n<li><p>九，<strong>可变元素</strong></p>\n<ul>\n<li>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</li>\n<li><code>applet</code> - <code>java applet</code></li>\n<li><code>button</code> - 按钮</li>\n<li><code>del </code>- 删除文本</li>\n<li><code>iframe</code> - <code>inline frame</code></li>\n<li><code>ins</code> - 插入的文本</li>\n<li><code>map</code> - 图片区块(<code>map</code>)</li>\n<li><code>object</code> - <code>object</code>对象</li>\n<li><code>script</code> - 客户端脚本</li>\n</ul>\n</li>\n<li><p>十、<strong>行内元素与块级元素有什么不同</strong></p>\n<ul>\n<li><p>区别一：</p>\n<ul>\n<li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li>\n<li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li>\n</ul>\n</li>\n<li><p>区别二：</p>\n<ul>\n<li>块级：块级元素可以设置宽高</li>\n<li>行内：行内元素不可以设置宽高</li>\n</ul>\n</li>\n<li><p>区别三：</p>\n<ul>\n<li>块级：块级元素可以设置<code>margin</code>，<code>padding</code></li>\n<li>行内：行内元素水平方向的<code>margin-left;</code> <code>margin-right;</code></li>\n</ul>\n</li>\n<li><p><code>padding-left;</code> <code>padding-right</code>;可以生效。但是竖直方向的<code>margin-bottom</code>; <code>margin-top</code>; <code>padding-top</code>; <code>padding-bottom</code>;却不能生效。</p>\n</li>\n<li><p>区别四：</p>\n</li>\n<li><p>块级：<code>display:block</code>;</p>\n</li>\n<li><p>行内：<code>display:inline</code>;    - 替换元素有如下：（和<code>img</code>一样的设置方法）</p>\n</li>\n<li><p><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code></p>\n</li>\n<li><p><code>&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容</p>\n</li>\n</ul>\n</li>\n<li><p>可以通过修改<code>display</code>属性来切换块级元素和行内元素</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十五章-定位\"><a href=\"#第十五章-定位\" class=\"headerlink\" title=\"第十五章 定位\"></a>第十五章 定位</h4><hr>\n<ul>\n<li><strong>position 属性</strong><ul>\n<li>值：</li>\n<li>**static **静态定位（不对它的位置进行改变，在哪里就在那里）<ul>\n<li> 默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>,<code> bottom,</code>  <code>left, right</code> 或者 <code>z-index</code> 声明）。</li>\n</ul>\n</li>\n<li><strong>fixed</strong> 固定定位（参照物–浏览器窗口）—做 弹窗广告用到<ul>\n<li>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot; </code>以及 <code>&quot;bottom&quot; </code>属性进行规定。</li>\n</ul>\n</li>\n<li><strong>relative</strong>（相对定位 ）（参照物以他本身）<ul>\n<li>生成相对定位的元素，相对于其正常位置进行定位。</li>\n</ul>\n</li>\n<li><strong>absolute</strong>（绝对定位）(除了<code>static</code>都可以，找到参照物–&gt;与它最近的已经有定位的父元素进行定位)</li>\n<li>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。</li>\n<li>元素的位置通过 “<code>left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code> 以及 <code>&quot;bottom&quot;</code> 属性进行规定</li>\n<li><strong>z-index</strong><ul>\n<li><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li>\n<li>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</li>\n</ul>\n</li>\n<li>一切皆为框<ul>\n<li>块级元素: <code>div</code>、<code>h1</code>或<code>p</code>元素 即：显示为一块内容称之为 “块框“ ;</li>\n<li>行内元素: <code>span</code>,<code>strong</code>,<code>a</code>等元素 即：内容显示在行中称 “行内框”;</li>\n<li>使用display属性改变成框的类型 即：<code>display:block</code>; 让行内元素设置为块级元素，<code>display:none;</code> 没有框</li>\n</ul>\n</li>\n<li>相对定位：<ul>\n<li>如果对一个元素进行相对定位，它将出现在它所在的位置上。</li>\n<li>通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动</li>\n<li><code>.adv_relative &#123;  position: relative;  left: 30px;  top: 20px; &#125;</code></li>\n</ul>\n</li>\n<li>绝对定位：<ul>\n<li>元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 <code>.adv_absolute &#123;  position: absolute;  left: 30px;  top: 20px; &#125;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/danci.png\"><br><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/position.png\"></p>\n<hr>\n<h4 id=\"第十六章-框架\"><a href=\"#第十六章-框架\" class=\"headerlink\" title=\"第十六章 框架\"></a>第十六章 框架</h4><hr>\n<ul>\n<li><p><code>frameset</code>框架：</p>\n<ul>\n<li><code>&lt;frameset&gt; </code> —-  用来定义一个框架；双标签<br>不能和  <code>&lt;body&gt;</code>  一起使用</li>\n</ul>\n</li>\n<li><p><code>rows</code>、<code>cols</code>属性</p>\n<ul>\n<li><code>rows </code> 定义行表示框架有多少行（取值 <code>px </code>/<code>%</code>/ <code>*</code> ）</li>\n<li><code>cols</code>   定义列表示框架有多少列（取值<code>px</code>/ <code>% </code>/ <code>*</code> ）</li>\n</ul>\n</li>\n<li><p>frame子框架</p>\n<ul>\n<li>&lt;<code>frame</code>&gt;  —-  表示框架中的某一个部分；单标签，要跟结束标志<ul>\n<li><code>src</code> 显示的网页的路径</li>\n<li><code>name</code> 框架名</li>\n<li><code>frameborder</code>  边框线（取值 0 / 1）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>&lt;<code>noframes</code>&gt;属性</p>\n</li>\n<li><p>&lt;<code>noframes</code>&gt; 提供不支持框架的浏览器显示<code>body</code>的内容；双标签</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;frameset&gt;</span><br><span class=\"line\">     &lt;frame  src=“”  /&gt;</span><br><span class=\"line\">     &lt;frame  src=“” /&gt;</span><br><span class=\"line\">     &lt;frame  src=“” /&gt;</span><br><span class=\"line\">     &lt;noframes&gt;</span><br><span class=\"line\">      &lt;body&gt;内容&lt;/body&gt;</span><br><span class=\"line\">     &lt;/noframes&gt;</span><br><span class=\"line\">&lt;/frameset&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;iframe&gt;</code>内联框架<ul>\n<li><code>iframe </code>元素会创建包含另外一个文档的内联框架（即行内框架）</li>\n<li>允许和 <code>body</code> 一起使用</li>\n<li><code>width</code> 宽（取值 px / %）</li>\n<li><code>height</code> 高（取值 px / %）</li>\n<li><code>name</code> 框架名</li>\n<li><code>frameborder </code> 边框线（取值 0 / 1）</li>\n<li><code>src</code> 显示的网页的路径</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"第十七章-css高级属性\"><a href=\"#第十七章-css高级属性\" class=\"headerlink\" title=\"第十七章 css高级属性\"></a>第十七章 css高级属性</h4><hr>\n<ul>\n<li><code>opacity</code>透明属性</li>\n<li><code>opacity</code><ul>\n<li>对于<code>IE6/7/</code>，使用<code>filter:alpha(opacity:值;</code>)  值为<code>0-100</code></li>\n<li>对于<code>Webkit</code>，<code>Opera</code>，<code>Firefox</code>，<code>IE9+</code>，使用<code>opacity</code>:值; 值为<code>0-1</code></li>\n<li>对于早期火狐，使用<code>-moz-opacity</code>:值; 值为<code>0-1</code></li>\n<li>所以写透明属性时，一般写法是</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">    opacity:0.5;</span><br><span class=\"line\">   filter:alpha(opacity：50);/*0-100*/</span><br><span class=\"line\">   -moz-opacity:0.5;\t/*取值0-1*/--&gt;针对早起版本的火狐兼容问题的解决</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>border-radius</code>圆角边框属性</p>\n<ul>\n<li>向 <code>div</code> 元素添加圆角边框<ul>\n<li><code>border-radius:10px</code>;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>box-shadow</code>阴影属性</p>\n<ul>\n<li><p><code>box-shadow </code>属性向框添加阴影效果,后面跟4个参数。</p>\n</li>\n<li><p><code>box-shadow:0px   0px   10px   #000;</code></p>\n</li>\n</ul>\n</li>\n<li><p><code>&lt;embed&gt;</code>属性</p>\n<ul>\n<li><p>是<code>HTML5</code>中新增的标签,媒体嵌入插件标签，可以通过<code>&lt;embed&gt;</code>插入音频或视频</p>\n</li>\n<li><p><code>&lt;embed src=“media/music.mp3” /&gt;</code></p>\n</li>\n<li><p>格式<code>.mid </code> <code>.wav</code> <code>.mp3</code>等</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<hr>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/overflow.png\"></p>\n<hr>\n<ul>\n<li><a href=\"https://yunpan.cn/cM9va2bHD4wwu\">原文件下载地址</a>   访问密码 342a</li>\n</ul>\n<hr>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/csstixi.png\"></p>\n<hr>\n<ul>\n<li><code>css</code>常见简写</li>\n</ul>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/main/Web/H4C2/sucha.png\" alt=\"css简写速查\"></p>\n<hr>\n<h3 id=\"第三部分-附录\"><a href=\"#第三部分-附录\" class=\"headerlink\" title=\"第三部分 附录\"></a>第三部分 附录</h3><hr>\n<h4 id=\"附录一-CSS书写规范\"><a href=\"#附录一-CSS书写规范\" class=\"headerlink\" title=\"附录一 CSS书写规范\"></a>附录一 CSS书写规范</h4><blockquote>\n<p>为了欺骗W3C的验证工具,可将代码分为两个文件，一个是针对所有浏览器,一个只针对IE。即将所有符合W3C的代码写到一个文件中,而一些IE中必须而又不能通过W3C验证的代码（如:cursor:hand;）放到另一个文件中，再用下面的方法导入</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 放置所有浏览器样式--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只放置IE必须，而不能通过w3c的--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE]</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS样式新建或修改尽量遵循以下原则</p>\n<p>根据新建样式的适用范围分为三级：全站级、产品级、页面级。 尽量通过继承和层叠重用已有样式。 不要轻易改动全站级CSS。改动后，要经过全面测试。</p>\n<hr>\n<ul>\n<li><p>属性显示顺序（规范写法）</p>\n<ul>\n<li>显示属性</li>\n<li>元素位置</li>\n<li>元素属性</li>\n<li>元素内容属性</li>\n</ul>\n</li>\n<li><p>CSS书写顺序</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/* 显示属性 */</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span> || <span class=\"attribute\">visibility</span></span><br><span class=\"line\">    <span class=\"attribute\">list-style</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span> <span class=\"attribute\">top</span> || <span class=\"attribute\">right</span> || <span class=\"attribute\">bottom</span> || <span class=\"attribute\">left</span></span><br><span class=\"line\">    <span class=\"attribute\">z-index</span></span><br><span class=\"line\">    <span class=\"attribute\">clear</span></span><br><span class=\"line\">    <span class=\"attribute\">float</span></span><br><span class=\"line\"><span class=\"comment\">/* 自身属性 */</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span> <span class=\"attribute\">max-width</span> || <span class=\"attribute\">min-width</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span> <span class=\"attribute\">max-height</span> || <span class=\"attribute\">min-height</span></span><br><span class=\"line\">    <span class=\"attribute\">overflow</span> || <span class=\"attribute\">clip</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span></span><br><span class=\"line\">    <span class=\"attribute\">outline</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span></span><br><span class=\"line\"><span class=\"comment\">/* 文本属性 */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span></span><br><span class=\"line\">    <span class=\"attribute\">font</span></span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align</span></span><br><span class=\"line\">    <span class=\"attribute\">text-indent</span></span><br><span class=\"line\">    <span class=\"attribute\">line-height</span></span><br><span class=\"line\">    <span class=\"attribute\">white-space</span></span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span></span><br><span class=\"line\">    <span class=\"attribute\">cursor</span></span><br><span class=\"line\">    <span class=\"attribute\">content</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>兼容多个浏览器时，将标准属性写在底部</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-moz-border-radius: 15px; /* Firefox */</span><br><span class=\"line\">-webkit-border-radius: 15px; /* Safari和Chrome */</span><br><span class=\"line\">border-radius: 15px; /* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 *//标准属性</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用选择器时，命名比较短的词汇或者缩写的不允许直接定义样式</li>\n</ul>\n<p><code>.hd,.bd,.td&#123;&#125;;//如这些命名</code></p>\n<ul>\n<li>可用上级节点进行限定</li>\n</ul>\n<p><code>.recommend-mod .hd</code></p>\n<ul>\n<li>多选择器规则之间换行，即当样式针对多个选择器时每个选择器占一行。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-class\">.btn</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-class\">.btn</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;button&quot;</span>]</span> &#123;…&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优化CSS选择器</li>\n</ul>\n<p><code>#header a &#123; color: #444; &#125;;/*CSS选择器是从右边到左边进行匹配*/</code></p>\n<p>浏览器将检查整个文档中的所有链接和每个链接的父元素，并遍历文档树去查找ID为header的祖先元素，如果找不到header将追溯到文档的根节点，解决方法如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">避免使用通配规则和相邻兄弟选择符、子选择符,、后代选择符、属性选择符等选择器</span><br><span class=\"line\">不要限定id选择符，如<span class=\"selector-tag\">div</span><span class=\"selector-id\">#header</span>（提权的除外）</span><br><span class=\"line\">不要限定类选择器，如<span class=\"selector-tag\">ul</span><span class=\"selector-class\">.recommend</span>（提权的除外）</span><br><span class=\"line\">不要使用 <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> 这样长的选择符</span><br><span class=\"line\">避免使用标签子选择符，如<span class=\"selector-id\">#header</span> &gt; <span class=\"selector-tag\">li</span> &gt; <span class=\"selector-tag\">a</span></span><br></pre></td></tr></table></figure>\n\n<p>使用z-index属性尽量z-index的值不要超过150（通用组的除外），页面中的元素内容的z-index不能超过10（提示框等模块除外但维持在150以下），不允许直接使用（999~9999）之间大值。 尽量避免使用CSS Hack</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">property:value; <span class=\"comment\">/* 所有浏览器 */</span></span><br><span class=\"line\">+property:value; <span class=\"comment\">/* IE7 */</span></span><br><span class=\"line\">_property:value; <span class=\"comment\">/* IE6 */</span></span><br><span class=\"line\">*property:value; <span class=\"comment\">/* IE6/7 */</span></span><br><span class=\"line\">property:value\\<span class=\"number\">9</span>; <span class=\"comment\">/* IE6/7/8/9，即所有IE浏览器 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\* <span class=\"selector-tag\">html</span> selector &#123; … &#125;; <span class=\"comment\">/* IE6 */</span></span><br><span class=\"line\">\\*<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> selector &#123; … &#125;; <span class=\"comment\">/* IE7 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"selector-tag\">body</span> selector &#123; … &#125;; <span class=\"comment\">/* 非IE6 */</span></span><br><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; … &#125;; <span class=\"comment\">/* firefox */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; … &#125;; <span class=\"comment\">/* saf3+/chrome1+ */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>),<span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; … &#125;; <span class=\"comment\">/* opera */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-device-width</span>: <span class=\"number\">480px</span>) &#123; … &#125;; <span class=\"comment\">/* iPhone/mobile webkit */</span></span><br></pre></td></tr></table></figure>\n\n<p>避免使用低效的选择器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; * &#123;…&#125;;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span> &gt; <span class=\"selector-tag\">a</span> &#123;…&#125;;</span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &gt; <span class=\"selector-tag\">h3</span> &#123;…&#125;;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-id\">#top_blue_nav</span> &#123;…&#125;;</span><br><span class=\"line\"><span class=\"selector-id\">#searbar</span> <span class=\"selector-tag\">span</span><span class=\"selector-class\">.submit</span> <span class=\"selector-tag\">a</span> &#123; … &#125;; <span class=\"comment\">/* 反面示例 */</span></span><br></pre></td></tr></table></figure>\n\n<p>六个不要三个避免一个使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">不要在标签上直接写样式</span><br><span class=\"line\">不要在CSS中使用expression</span><br><span class=\"line\">不要在CSS中使用<span class=\"keyword\">@import</span></span><br><span class=\"line\">不要在CSS中使用!important</span><br><span class=\"line\">不要在CSS中使用“*”选择符</span><br><span class=\"line\">不要将CSS样式写为单行</span><br><span class=\"line\">避免使用filter</span><br><span class=\"line\">避免使用行内（inline）样式</span><br><span class=\"line\">避免使用“*”设置&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">使用after或<span class=\"attribute\">overflow</span>的方式清浮动</span><br></pre></td></tr></table></figure>\n\n<p>减少使用影响性能的属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">position:absolute;</span><br><span class=\"line\">float:left;//如这些定位或浮动属性</span><br></pre></td></tr></table></figure>\n\n<p>减少在CSS中使用滤镜表达式和图片repeat,尤其在body当中,渲染性能极差, 如果需要用repeat的话,图片的宽或高不能少于8px</p>\n<hr>\n<h4 id=\"附录二-DIV命名规范\"><a href=\"#附录二-DIV命名规范\" class=\"headerlink\" title=\"附录二 DIV命名规范\"></a>附录二 DIV命名规范</h4><hr>\n<ul>\n<li><p>企业<code>DIV</code>使用频率高的命名方法</p>\n</li>\n<li><p><strong>网页内容类</strong></p>\n<ul>\n<li><p>标题: <code>title</code></p>\n<ul>\n<li>摘要: <code>summary</code></li>\n<li>箭头： <code>arrow</code></li>\n<li>商标： <code>label</code></li>\n<li>网站标志： <code>logo</code></li>\n<li>转角/圆角：<code> corner</code></li>\n<li>横幅广告： <code>banner</code></li>\n<li>子菜单： <code>subMenu</code></li>\n<li>搜索： <code>search</code></li>\n<li>搜索框： <code>searchBox</code></li>\n<li>登录： <code>login</code></li>\n<li>登录条：<code>loginbar</code></li>\n<li>工具条： <code>toolbar</code></li>\n<li>下拉： <code>drop</code></li>\n<li>标签页： <code>tab</code></li>\n<li>当前的： <code>current</code></li>\n<li>列表： <code>list</code></li>\n<li>滚动： <code>scroll</code></li>\n<li>服务： <code>service</code></li>\n<li>提示信息： <code>msg</code></li>\n<li>热点：<code>hot</code></li>\n<li>新闻： <code>news</code></li>\n<li>小技巧： <code>tips</code></li>\n<li>下载： <code>download</code></li>\n<li>栏目标题： <code>title</code></li>\n<li>热点： <code>hot</code></li>\n<li>加入：<code> joinus</code></li>\n<li>注册： <code>regsiter</code></li>\n<li>指南： <code>guide</code></li>\n<li>友情链接： <code>friendlink</code></li>\n<li>状态： <code>status</code></li>\n<li>版权： <code>copyright</code></li>\n<li>按钮： <code>btn</code></li>\n<li>合作伙伴： <code>partner</code></li>\n<li>投票： <code>vote</code></li>\n<li>左右中：<code>left</code>  <code>right</code>  <code>center</code></li>\n</ul>\n<hr>\n</li>\n<li><p>注释的写法: <code>/* Footer */ </code> 内容区<code>/* End Footer */</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>id的命名:</strong></p>\n<ul>\n<li><p>页面结构</p>\n<ul>\n<li>容器: <code>container</code></li>\n<li>页头：<code>header</code></li>\n<li>内容：<code>content</code>/<code>container</code></li>\n<li>页面主体：<code>main</code></li>\n<li>页尾：<code>footer</code></li>\n<li>导航：<code>nav</code></li>\n<li>侧栏：<code>sidebar</code></li>\n<li>栏目：<code>column</code></li>\n<li>页面外围控制整体布局宽度：<code>wrapper</code></li>\n<li>左右中：<code>left</code> <code>right</code> <code>center</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>导航</p>\n<ul>\n<li>导航：<code>nav</code></li>\n<li>主导航：<code>mainbav</code></li>\n<li>子导航：<code>subnav</code></li>\n<li>顶导航：<code>topnav</code></li>\n<li>边导航：<code>sidebar</code></li>\n<li>左导航：<code>leftsidebar</code></li>\n<li>右导航：<code>rightsidebar</code></li>\n<li>菜单：<code>menu</code></li>\n<li>子菜单：<code>submenu</code></li>\n<li>标题: <code>title</code></li>\n<li>摘要: <code>summary</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>功能</p>\n<ul>\n<li>标志：<code>logo</code></li>\n<li>广告：<code>banner</code></li>\n<li>登陆：<code>login</code></li>\n<li>登录条：<code>loginbar</code></li>\n<li>注册：<code>regsiter</code></li>\n<li>搜索：<code>search</code></li>\n<li>功能区：<code>shop</code></li>\n<li>标题：<code>title</code></li>\n<li>加入：<code>joinus</code></li>\n<li>状态：<code>status</code></li>\n<li>按钮：<code>btn</code></li>\n<li>滚动：<code>scroll</code></li>\n<li>标签页：<code>tab</code></li>\n<li>文章列表：<code>list</code></li>\n<li>提示信息：<code>msg</code></li>\n<li>当前的:<code> current</code></li>\n<li>小技巧：<code>tips</code></li>\n<li>图标: <code>icon</code></li>\n<li>注释：<code>note</code></li>\n<li>指南：<code>guild</code></li>\n<li>服务：<code>service</code></li>\n<li>热点：<code>hot</code></li>\n<li>新闻：<code>news</code></li>\n<li>下载：<code>download</code></li>\n<li>投票：<code>vote</code></li>\n<li>合作伙伴：<code>partner</code></li>\n<li>友情链接：<code>link</code></li>\n<li>版权：<code>copyright</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>class</code>的命名:</strong></p>\n</li>\n<li><p>颜色:使用颜色的名称或者16进制代码,如</p>\n<ul>\n<li><code>.red &#123; color: red; &#125;</code></li>\n<li><code>.f60 &#123; color: #f60; &#125;</code></li>\n<li><code>.ff8600 &#123; color: #ff8600; &#125;</code></li>\n</ul>\n</li>\n<li><p>字体大小,直接使用”font+字体大小”作为名称,如</p>\n<ul>\n<li><code>.font12px &#123; font-size: 12px; &#125;</code></li>\n<li><code>.font9px &#123;font-size: 9pt; &#125;</code></li>\n</ul>\n</li>\n<li><p>对齐样式,使用对齐目标的英文名称,如</p>\n<ul>\n<li><code>.left &#123; float:left; &#125;</code></li>\n<li><code>.bottom &#123; float:bottom; &#125;</code></li>\n</ul>\n</li>\n<li><p>标题栏样式,使用”类别+功能”的方式命名,如</p>\n<ul>\n<li><code> .barnews &#123; &#125;</code></li>\n<li><code>.barproduct &#123; &#125;</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong>注意事项::</strong></p>\n<ul>\n<li>一律小写;</li>\n<li>尽量用英文;</li>\n<li>不加中杠和下划线;</li>\n<li>尽量不缩写，除非一看就明白的单词.</li>\n</ul>\n</li>\n<li><p>–</p>\n</li>\n</ul>\n</li>\n<li><p><strong>推荐的 <code>CSS</code> 书写顺序：</strong></p>\n<ul>\n<li><p>显示属性</p>\n<ul>\n<li><code>display</code></li>\n<li><code>list-style</code></li>\n<li><code>position</code></li>\n<li><code>float</code></li>\n<li><code>clear</code></li>\n</ul>\n</li>\n<li><p>自身属性</p>\n<ul>\n<li><code> width</code></li>\n<li><code>height</code></li>\n<li><code>margin</code></li>\n<li><code>padding</code></li>\n<li><code>border</code></li>\n<li><code>background</code></li>\n</ul>\n</li>\n<li><p>文本属性</p>\n<ul>\n<li><code>color</code></li>\n<li><code> font</code></li>\n<li><code>text-decoration</code></li>\n<li><code>text-align</code></li>\n<li><code>vertical-align</code></li>\n<li><code>white-space</code></li>\n<li><code>other text</code></li>\n<li><code>content </code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"附录三-CSS精灵\"><a href=\"#附录三-CSS精灵\" class=\"headerlink\" title=\"附录三 CSS精灵\"></a>附录三 CSS精灵</h4><hr>\n<ul>\n<li><strong>CSS精灵原理以及应用</strong><ul>\n<li><code>CSS</code>雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。<ul>\n<li>该图片使用<code>CSS</code>   <code>background和background-position</code>属性渲染，这也就意味着你的标签变得更加复杂了，图片是在<code>CSS</code>中定义，而非<code>&lt;img&gt;</code>标签。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>一个简单的例子</strong>：<ul>\n<li>一张图片作出一个按钮的三个状态</li>\n<li>一个链接用<code>CSS</code>做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，<code>a:link</code>，<code>a:hover</code>，<code>a:active</code> <code>&lt;a class=&quot;button&quot; href=&quot;#&quot;&gt;链接&lt;/a&gt;</code></li>\n<li>加入右侧的图片为：<code>200px 65px</code>的三个按钮图拼合而成的图片<code>button.png</code>，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用<code>CSS</code>进行定义。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a &#123;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    height:65px;</span><br><span class=\"line\">    line-height:65px; /*定义状态*/</span><br><span class=\"line\">    text-indent:-2015px; /*隐藏文字*/</span><br><span class=\"line\">    background-image:url(button.png); /*定义背景图片*/</span><br><span class=\"line\">    background-position:0 0;</span><br><span class=\"line\">    /*定义链接的普通状态，此时图像显示的是顶上的部分*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a:hover &#123;</span><br><span class=\"line\">    background-position:0 -66px;</span><br><span class=\"line\">    /*定义链接的滑过状态，此时显示的为中间部分，向下取负值*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a:active &#123;</span><br><span class=\"line\">    background-position:0 -132px;</span><br><span class=\"line\">    /*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更多的<code>CSS</code>雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值<ul>\n<li>如：<code>background:url(nav.png) -180px 24pxno-repeat</code>; 来达到更精确的定位</li>\n</ul>\n</li>\n<li><strong>优点：</strong><ul>\n<li>减少加载网页图片时对服务器的请求次数</li>\n<li>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</li>\n<li>提高页面的加载速度</li>\n<li><code>sprite </code>技术的其中一个好处是图片的加载时间(在有许多 <code>sprite</code> 时，单张图片的加载时间)。由所需图片拼成的一张 <code>GIF</code>图片的尺寸会明显小于所有图片拼合前的大小。单张的 <code>GIF</code>只有相关的一个色表，而单独分割的每一张 <code>GIF</code> 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 <code>JPEG</code> 或者 <code>PNG</code> <code>sprite</code> 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</li>\n<li>减少鼠标滑过的一些<code>bug</code></li>\n<li><code>IE6</code>不会主动预加载鼠标滑过即<code>a:hover</code>中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用<code>CSS</code>雪碧，由于一张图片即可，所以不会出现这种现象。</li>\n</ul>\n</li>\n<li><strong>不足：</strong><ul>\n<li><code>CSS</code>雪碧的最大问题是内存使用</li>\n<li>影响浏览器的缩放功能</li>\n<li>拼图维护比较麻烦</li>\n<li>使<code>CSS</code>的编写变得困难</li>\n<li><code>CSS</code> 雪碧调用的图片不能被打印</li>\n<li>错误得使用 <code>Sprites</code> 影响可访问性</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"附录四-一些tips解决方案\"><a href=\"#附录四-一些tips解决方案\" class=\"headerlink\" title=\"附录四 一些tips解决方案\"></a>附录四 一些tips解决方案</h4><hr>\n<h5 id=\"页面优化实践\"><a href=\"#页面优化实践\" class=\"headerlink\" title=\"页面优化实践\"></a>页面优化实践</h5><hr>\n<ul>\n<li><p>从下面的几个方面可以进行页面的优化：</p>\n<ul>\n<li>减少请求数</li>\n<li>图片合并</li>\n<li><code>CSS </code>文件合并</li>\n<li>减少内联样式</li>\n<li>避免在 <code>CSS </code>中使用 <code>import</code></li>\n<li>减少文件大小</li>\n<li>选择适合的图片格式</li>\n<li>图片压缩</li>\n<li><code>CSS</code> 值缩写（<code>Shorthand Property</code>)</li>\n<li>文件压缩</li>\n<li>页面性能</li>\n<li>调整文件加载顺序</li>\n<li>减少标签数量</li>\n<li>调整选择器长度</li>\n<li>尽量使用<code> CSS</code> 制作显示表现</li>\n<li>增强代码可读性与可维护性</li>\n<li>规范化</li>\n<li>语义化</li>\n<li>模块化</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"写DIV-CSS-的一些常识\"><a href=\"#写DIV-CSS-的一些常识\" class=\"headerlink\" title=\"写DIV+CSS 的一些常识\"></a>写DIV+CSS 的一些常识</h5><hr>\n<ul>\n<li><p>不要使用过小的图片做背景平铺</p>\n<ul>\n<li>这就是为何很多人都不用 <code>1px</code> 的原因，这才知晓。宽高 <code>1px</code> 的图片平铺出一个宽高 <code>200px</code> 的区域，需要 <code>200200=40, 000</code> 次，占用资源</li>\n</ul>\n</li>\n<li><p>无边框</p>\n<ul>\n<li>推荐的写法是 <code>border:none</code>;，哈哈，我一直在用这个。 <code>border:0;</code> 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源</li>\n</ul>\n</li>\n<li><p>慎用 通配符</p>\n<ul>\n<li>所谓通配符，就是将<code> CSS</code> 中的所有标签均初始化，不管用的不用的，过时的先进的，一视同仁，这样，大大的占用资源。要有选择的初始化标签。</li>\n</ul>\n</li>\n<li><p><code>CSS </code>的十六进制颜色代码缩写</p>\n<ul>\n<li>习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考证。</li>\n</ul>\n</li>\n<li><p> 样式放头上，脚本放脚下。不内嵌，只外链</p>\n</li>\n<li><p> 坚决不用 <code>CSS </code>表达式</p>\n</li>\n<li><p>使用 引用样式表，而不是通过<code> @import</code> 导入。</p>\n</li>\n<li><p> 一般来说，<code>PNG </code>比 <code>GIF</code> 要小，小得多。再者，<code>GIF</code> 中有多少颜色是被浪费的，很值得优化。</p>\n</li>\n<li><p>千万不要在 <code>HTML </code>中缩放图片，一者不好看，二者占资源。</p>\n</li>\n<li><p>正文字体最好用偶数</p>\n<ul>\n<li><code>12px</code>、<code>14px</code>、<code>16px</code>，效果非常好。特例，<code>15px</code>。</li>\n</ul>\n</li>\n<li><p><code>block</code>、<code>ul</code>、<code>ol </code>等上下留出至少一倍行距，左侧至少两倍行距，右侧随意。</p>\n</li>\n<li><p>段落之间，至少要有一倍行距</p>\n</li>\n<li><p>强行指定某些元素的 <code>line-height</code>，正文 <code>1.6 </code>倍于文字大小，标题<code>1.3 </code>倍。</p>\n</li>\n<li><p>中文标点用全角</p>\n<ul>\n<li>英文夹杂在中文中，左右空格，半角。</li>\n</ul>\n</li>\n<li><p>中文字体的粗体和斜体，远离较好</p>\n</li>\n</ul>\n<h5 id=\"常用代码片段\"><a href=\"#常用代码片段\" class=\"headerlink\" title=\"常用代码片段\"></a>常用代码片段</h5><hr>\n<ul>\n<li>雅虎工程师提供的<code>CSS</code>初始化示例代码【仅供参考】<ul>\n<li>可以在<code>html</code>头文件中直接引用，从而避免浏览器的不兼容带来的错误。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dt</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span>,</span><br><span class=\"line\">pre,</span><br><span class=\"line\"><span class=\"selector-tag\">code</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">form</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">fieldset</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">legend</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">th</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>; <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#555</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Verdana, Arial, Helvetica, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">td</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">th</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">caption</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">address</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">caption</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">cite</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">code</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dfn</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">em</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">strong</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">th</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>:normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#555</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span>,</span><br><span class=\"line\">select,</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>:<span class=\"number\">14px</span> Verdana,Helvetica,Arial,sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>:collapse;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-y</span>: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    *zoom:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>mobile meta </code>标签</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”viewport”</span> <span class=\"attr\">content</span>=<span class=\"string\">”width</span>=<span class=\"string\">320,target-densitydpi</span>=<span class=\"string\">dpi_value,initial-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">user-scalable</span>=<span class=\"string\">no”/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>表格不被撑开</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">table-layout</span>: fixed;</span><br><span class=\"line\"><span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\"><span class=\"attribute\">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不设宽高居中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">”abc”</span> <span class=\"attr\">style</span>=<span class=\"string\">”display:table;text-align:center;width:100%;height:100%;”</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">”background:#f00;</span> <span class=\"attr\">display:table-cell</span>; <span class=\"attr\">vertical-align:middle</span>;”&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">”button”</span> <span class=\"attr\">value</span>=<span class=\"string\">”item1″</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>透明度的兼容代码</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>:<span class=\"built_in\">alpha</span>(opacity=<span class=\"number\">50</span>); <span class=\"comment\">/*1-100*/</span></span><br><span class=\"line\">-moz-<span class=\"attribute\">opacity</span>:<span class=\"number\">0.5</span>; <span class=\"comment\">/*0-1.0*/</span></span><br><span class=\"line\">-khtml-<span class=\"attribute\">opacity</span>:<span class=\"number\">0.5</span>; <span class=\"comment\">/*0-1.0*/</span></span><br><span class=\"line\"><span class=\"attribute\">opacity</span>:<span class=\"number\">0.5</span>; <span class=\"comment\">/*0-1.0*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>文字溢出点点省略</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>清除浮动的几种方法</p>\n<ul>\n<li>方法一：<code>投机取巧法</code> – 不推荐</li>\n<li>直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强</li>\n</ul>\n</li>\n<li><p>方法二：<code>overflow + zoom</code>方法  –不推荐<br>  <code>.fix&#123;overflow:hidden; zoom:1;&#125;</code></p>\n<ul>\n<li>此方法优点在于代码简洁，涵盖所有浏览器</li>\n</ul>\n</li>\n<li><p>方法三：<code>after + zoom</code>方法 -推荐–此方法可以说是综合起来最好的方法了</p>\n<ul>\n<li><code>clearfix</code>只应用在包含浮动子元素的父级元素上</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fix</span>&#123;zoom:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.fix</span>:after&#123;</span><br><span class=\"line\">     display:block;</span><br><span class=\"line\">     <span class=\"attribute\">content</span>:<span class=\"string\">&#x27;clear&#x27;</span>;</span><br><span class=\"line\">     <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">     <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更多代码片段详情<ul>\n<li><a href=\"http://www.jianshu.com/p/e878122a92a3\">实用的60个CSS代码片段</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"一些总结\"><a href=\"#一些总结\" class=\"headerlink\" title=\"一些总结\"></a>一些总结</h5><hr>\n<ul>\n<li><p>自动继承属性：</p>\n<ul>\n<li><code>color</code></li>\n<li><code>font</code></li>\n<li><code>text-align</code></li>\n<li><code>list-style</code><br>…</li>\n</ul>\n</li>\n<li><p>非继承属性：</p>\n<ul>\n<li><code>background</code></li>\n<li><code>border</code></li>\n<li><code>position</code><br>…</li>\n</ul>\n</li>\n<li><p>具有破坏性的元素：</p>\n<ul>\n<li><code>float</code></li>\n<li><code>display:none;</code></li>\n<li><code>position:absoblute/fixed/sticky;</code></li>\n</ul>\n</li>\n<li><p>具有包裹性的元素：</p>\n<ul>\n<li><p><code>display:inline-block/table-cell</code></p>\n</li>\n<li><p><code>position:absolute/fixed/sticky</code></p>\n</li>\n<li><p><code>overflow:hidden/scroll</code></p>\n</li>\n</ul>\n</li>\n<li><p>消除图片底部间隙的方法</p>\n<ul>\n<li><p>图片块状化-无基线对齐<br><code>img&#123;display:block;&#125;</code></p>\n</li>\n<li><p>图片底线对齐<br><code>img&#123;vertical-align:bottom;&#125;</code></p>\n</li>\n<li><p>行高足够小 - 基线位置上移<br><code>.box&#123;line-height:0;&#125;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h5><hr>\n<ul>\n<li><p>BFC</p>\n<ul>\n<li><p>BFC全称<code>”Block Formatting Context”</code> 中文为“块级格式化上下文”</p>\n</li>\n<li><p>记住这么一句话：<code>BFC</code>元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素</p>\n</li>\n<li><p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</p>\n</li>\n</ul>\n</li>\n<li><p>扩展阅读</p>\n<ul>\n<li><a href=\"https://github.com/dwqs/blog/issues/22\">CSS中的BFC</a></li>\n</ul>\n</li>\n<li><p>优雅降级(<code>graceful degradation</code>)</p>\n<ul>\n<li>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li>\n</ul>\n</li>\n<li><p>渐进增强 <code>progressive enhancement</code>：</p>\n<ul>\n<li>是在浏览器开启<code>JavaScript</code>功能后，如果浏览器版本不支持某些  <code>JavaScript</code>  能力，我们解决这种问题的方式</li>\n</ul>\n</li>\n<li><p>平稳退化</p>\n<ul>\n<li>是在浏览器没有<code>JavaScript</code>功能，或没有开启<code>JavaScript</code>功能情况下，我们解决这种问题的方式；</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"方案荟萃扩展阅读\"><a href=\"#方案荟萃扩展阅读\" class=\"headerlink\" title=\"方案荟萃扩展阅读\"></a>方案荟萃扩展阅读</h5><hr>\n<ul>\n<li><p><strong>关于布局</strong></p>\n</li>\n<li><p><a href=\"http://www.qianduan.net/css-to-achieve-the-vertical-center-of-the-five-kinds-of-methods/\">垂直居中</a></p>\n</li>\n<li><p><a href=\"http://codepen.io/shshaw/full/gEiDt\">css完全居中</a></p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/collective-5.html\">居中之美</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/35290742#answer-20340542\">网页中的底部foot定位</a></p>\n</li>\n<li><p><a href=\"http://www.webhek.com/css-100-percent-height\">页面高度100%</a></p>\n</li>\n<li><p><a href=\"https://github.com/phoetry/textareaAutoHeight\">textarea高度自适应</a></p>\n</li>\n<li><p><a href=\"http://dotdotdot.frebsite.nl/\">多行溢出省略</a></p>\n</li>\n<li><p><a href=\"http://jinlong.github.io/2015/05/24/css-retina-hairlines/\">Retina屏1px线</a></p>\n</li>\n<li><p><a href=\"https://github.com/philipwalton/flexbugs\">Flexbugs</a></p>\n</li>\n<li><p><strong>其他</strong></p>\n</li>\n<li><p><a href=\"http://www.stepday.com/topic/?690\">IF IE ENDIF条件判断之IE10</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/20158063\">Chrome 翻译插件</a></p>\n</li>\n<li><p><a href=\"http://blog.netsh.org/posts/website-retina_1779.netsh.html\">网页retina优化</a></p>\n</li>\n<li><p><a href=\"http://segmentfault.com/a/1190000002407912\">常用meta</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/mq0036/p/3531848.html\">树状菜单</a></p>\n</li>\n<li><p><a href=\"http://www.w3ctrain.com/2015/07/24/comprehensive-guide-when-to-use-em-vs-rem/\">em vs rem</a></p>\n</li>\n<li><p><a href=\"https://github.com/classicemi/blog/issues/3#issuecomment-113861251\">css vs js</a></p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/solution/index/index.html\">css解决方案（w3cplus）</a></p>\n</li>\n<li><p><a href=\"http://riccardoscalco.github.io/textures/\">Textures生成纹理</a></p>\n</li>\n<li><p><a href=\"http://una.im/CSSgram/\">CSSgram</a></p>\n</li>\n<li><p><a href=\"http://zmoazeni.github.io/csscss/\">Csscss（检查重复声明等）</a></p>\n</li>\n</ul>\n<h4 id=\"附录五-部分工具资源\"><a href=\"#附录五-部分工具资源\" class=\"headerlink\" title=\"附录五 部分工具资源\"></a>附录五 部分工具资源</h4><hr>\n<ul>\n<li><a href=\"http://blog.poetries.top/2016/03/14/Emmet%EF%BC%9AHTML-CSS%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/\">学会使用Emmet插件快速编码</a></li>\n<li><a href=\"http://blog.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#more\">Emmet常用快捷键</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md\">Sublime专题</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md\">Sublime常用插件总结</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md\">Front-End -Develop -Tools</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md\">ToolsBox-自己整理的一份工具列表</a></li>\n</ul>\n<h4 id=\"附录六-编码规范\"><a href=\"#附录六-编码规范\" class=\"headerlink\" title=\"附录六 编码规范\"></a>附录六 编码规范</h4><hr>\n<ul>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">编码规范</a></li>\n<li><a href=\"http://front-end-standards.com/\">前端规范</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/wiki/web-develop-standard\">web develop standard</a></li>\n<li><a href=\"http://codecloud.net/5622.html\">Web 前端开发规范文档</a></li>\n<li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/index.html\">前端开发规范手册</a></li>\n</ul>\n<h4 id=\"附录七-进阶学习\"><a href=\"#附录七-进阶学习\" class=\"headerlink\" title=\"附录七 进阶学习\"></a>附录七 进阶学习</h4><hr>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/1e638b7da640\">DOM编程之API学习</a></li>\n<li><a href=\"http://www.jianshu.com/p/1f2314552e23\">JavaScript基础学习</a></li>\n</ul>\n<h4 id=\"附录八-其他资源\"><a href=\"#附录八-其他资源\" class=\"headerlink\" title=\"附录八 其他资源\"></a>附录八 其他资源</h4><hr>\n<ul>\n<li><a href=\"https://github.com/poetries/mywiki\">Github上前端学习资源汇总</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/tree/master/front-end\">WEB 前端开发学习笔记</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/wiki/%E6%94%B6%E9%9B%86%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7\">前端开发工具箱</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006689923\">148个资源让你成为CSS专家</a></li>\n<li><a href=\"http://zh.learnlayout.com/\">学习CSS布局-经典必看</a></li>\n</ul>\n<h4 id=\"附录九-常见问题\"><a href=\"#附录九-常见问题\" class=\"headerlink\" title=\"附录九 常见问题\"></a>附录九 常见问题</h4><hr>\n<ul>\n<li><p>前端指路</p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/css/write-to-front-end-developer-interview.html\">写给前端面试者（w3cplus）</a></p>\n</li>\n<li><p><a href=\"http://jiongks.name/blog/how-to-become-a-great-front-end-engineer/\">如何成为一名卓越的前端工程师（勾三股四博客）</a></p>\n</li>\n<li><p><a href=\"http://www.epubit.com.cn/article/144\">什么是全栈工程师</a></p>\n</li>\n<li><p><a href=\"https://uptodate.frontendrescue.org/zh/\">如何跟上前端开发的最新前沿</a></p>\n</li>\n<li><p><a href=\"http://blog.jobbole.com/12749/\">浏览器的工作原理</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/20269059#answer-19718763\">移动前端开发和 Web 前端开发的区别</a></p>\n</li>\n<li><p><a href=\"http://segmentfault.com/q/1010000003723038?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly\">大型网站CSS编写与维护</a></p>\n</li>\n<li><p><a href=\"http://segmentfault.com/q/1010000003059724\">CSS核心技术关键字</a></p>\n</li>\n<li><p>性能/规范/实践</p>\n</li>\n<li><p><a href=\"http://www.chinaw3c.org/how-to-read-spec-wxx.html\">如何阅读W3c规范(王晓轩)</a></p>\n</li>\n<li><p><a href=\"http://www.chinaw3c.org/how-to-read-spec-gb.html\">如何阅读W3c规范(高博)</a></p>\n</li>\n<li><p><a href=\"https://developer.yahoo.com/performance/rules.html\">雅虎web性能优化军规</a></p>\n</li>\n<li><p><a href=\"http://browserdiet.com/zh/\">权威前端性能指南</a></p>\n</li>\n<li><p><a href=\"http://www.html-js.com/article/Front-end-home-best-practice-in-front-of-the-web-high-performance-CSS\">高性能css</a></p>\n</li>\n<li><p>一些问答社区</p>\n</li>\n<li><p><a href=\"https://www.quora.com/\">quora</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/\">stackoverflow</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/\">知乎</a></p>\n</li>\n<li><p><a href=\"http://www.html-js.com/qa\">前端乱炖问答区</a></p>\n</li>\n<li><p><a href=\"http://segmentfault.com/questions/newest\">segmentfault问答区</a></p>\n</li>\n</ul>\n","categories":["Html"],"tags":["Html+css"]},{"title":"Touch","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/Touch 事件/","content":"<h1 id=\"移动端-js-touch事件\"><a href=\"#移动端-js-touch事件\" class=\"headerlink\" title=\"移动端 js touch事件\"></a><a href=\"https://www.cnblogs.com/fengfan/p/4506555.html\">移动端 js touch事件</a></h1><p>随着智能手机和平板电脑的普及, 越来越多的人用移动设备浏览网页，我们平时在<code>pc</code>浏览器上用的鼠标事件，比如：<code>click</code>, <code>mouseover</code>等， 已经无法满足移动设备触摸屏的特点，触摸时代的到来，离不开那些触摸事件。</p>\n<h3 id=\"触摸事件包含4个接口。\"><a href=\"#触摸事件包含4个接口。\" class=\"headerlink\" title=\"触摸事件包含4个接口。\"></a>触摸事件包含4个接口。</h3><p><strong>TouchEvent</strong></p>\n<ul>\n<li>代表当触摸行为在平面上变化的时候发生的事件.</li>\n</ul>\n<p><strong>Touch</strong></p>\n<ul>\n<li>代表用户手指与触摸平面间的一个接触点.</li>\n</ul>\n<p><strong>TouchList</strong></p>\n<ul>\n<li>代表一系列的<code>Touch</code>; 一般在用户多个手指同时接触触控平面时使用这个接口.</li>\n</ul>\n<p><strong>DocumentTouch</strong></p>\n<ul>\n<li><p>包含了一些创建 <code>Touch</code>对象与<code>TouchList</code>对象的便捷方法.</p>\n</li>\n<li><p>（参考于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Touch_events\">https://developer.mozilla.org/zh-CN/docs/Web/API/Touch_events</a> ）</p>\n</li>\n<li><p><code>TouchEvent</code>接口可以响应基本触摸事件（如单个手指点击），它包含了一些具体的事件， </p>\n</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><ul>\n<li><p><code>touchstart</code> : 触摸开始（手指放在触摸屏上）</p>\n</li>\n<li><p><code>touchmove</code> : 拖动（手指在触摸屏上移动）</p>\n</li>\n<li><p><code>touchend</code>: 触摸结束（手指从触摸屏上移开）</p>\n</li>\n<li><p><code>touchenter</code> ：移动的手指进入一个<code>dom</code>元素。</p>\n</li>\n<li><p><code>touchleave</code> ：移动的手指离开一个<code>dom</code>元素。</p>\n</li>\n<li><p>还有一个<code>touchcancel</code>，是在拖动中断时候触发。</p>\n</li>\n</ul>\n<h3 id=\"事件属性\"><a href=\"#事件属性\" class=\"headerlink\" title=\"事件属性\"></a>事件属性</h3><ul>\n<li><code>altKey </code> : 该属性返回一个布尔值，表示在指定的事件发生时，<code>Alt</code> 键是否处于按下状态， <code>event.altKey=true|false|1|0</code></li>\n<li><code>type</code> : 触摸时触发的事件类型，比如<code>touchstart</code></li>\n<li><strong>每个触摸事件都包括了三个触摸属性列表：</strong></li>\n<li><code>touches</code>：当前位于屏幕上的所有手指触摸点的一个列表。</li>\n<li><code>targetTouches</code>：当前元素对象上所有触摸点的列表。</li>\n<li><code>changedTouches</code>：涉及当前事件的触摸点的列表。</li>\n<li>它们都是一个数组，每个元素代表一个触摸点。</li>\n<li>每个触摸点对应的Touch都有三对重要的属性，<code>clientX/clientY</code>、<code>pageX/pageY</code>、<code>screenX/screenY</code>。</li>\n</ul>\n","categories":["Javascript"],"tags":["Touch"]},{"title":"Html+css3","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/HTML5 & CSS3/","content":"<h1 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h1><h2 id=\"HTML5结构\"><a href=\"#HTML5结构\" class=\"headerlink\" title=\"HTML5结构\"></a>HTML5结构</h2><hr>\n<ul>\n<li><code>HTML5</code> 是新一代的 <code>HTML</code></li>\n<li><code>DTD</code>声明改变    <code>&lt;!DOCTYPE html&gt;</code><ul>\n<li>新的结构标签            </li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/1.png\" alt=\"一些总结--from-dunitian\"></p>\n<h3 id=\"常用的一些新的结构标签\"><a href=\"#常用的一些新的结构标签\" class=\"headerlink\" title=\"常用的一些新的结构标签\"></a>常用的一些新的结构标签</h3><hr>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/2.png\" alt=\"结构标签\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/3.png\" alt=\"多媒体交互标签\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/4.png\" alt=\"特殊样式标签\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/5.png\" alt=\"兼容性不是很好的标签\"></p>\n<ul>\n<li>补充说明<ul>\n<li><code>small</code> 这个元素表示边栏评论，如附属细则</li>\n<li><code>cite</code>这个元素可用于显示作品标题（图书、电影、诗歌等）</li>\n<li><code>adress</code>这个元素显示<code>article</code>或整个文档的合同信息，且位于<code>footer</code>这个元素之中</li>\n<li><code>time</code>显示人和机器可读的日期和时间，而且机器可读的时间戳是属性<code>datetime</code>的值第二个可选的是<code>pubtime</code>用于表示出版日期值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"删除的HTML标签\"><a href=\"#删除的HTML标签\" class=\"headerlink\" title=\"删除的HTML标签\"></a>删除的<code>HTML</code>标签</h3><hr>\n<ul>\n<li><p>纯表现的元素：</p>\n<ul>\n<li><code>basefont</code></li>\n<li><code>big</code></li>\n<li><code>center</code></li>\n<li><code>font</code></li>\n<li><code>s</code></li>\n<li><code>strike</code></li>\n<li><code>tt</code></li>\n<li><code>u</code></li>\n</ul>\n</li>\n<li><p>对可用性产生负面影响的元素：</p>\n<ul>\n<li><code>frame</code></li>\n<li><code>frameset</code></li>\n<li><code>noframes</code></li>\n<li>产生混淆的元素：<ul>\n<li><code>acronym</code></li>\n<li><code>applet</code></li>\n<li><code>isindex</code></li>\n<li><code>dir</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>重新定义的<code>HTML</code>标签</strong></p>\n<ul>\n<li><code>&lt;b&gt;</code>  代表内联文本，通常是粗体，没有传递表示重要的意思</li>\n<li><code>&lt;i&gt; </code> 代表内联文本，通常是斜体，没有传递表示重要的意思</li>\n<li><code>&lt;dd&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，定义包含文本，<code>ialog</code>也可用</li>\n<li><code>&lt;dt&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，汇总细节，<code>dialog</code>也可用</li>\n<li><code>&lt;hr&gt; </code>表示主题结束，而不是水平线，虽然显示相同</li>\n<li><code>&lt;menu&gt;</code> 重新定义用户界面的菜单，配合<code>commond</code>或者<code>menuitem</code>使用</li>\n<li><code>&lt;small&gt;</code> 表示小字体，例如打印注释或者法律条款</li>\n<li><code>&lt;strong&gt;</code> 表示重要性而不是强调符号</li>\n</ul>\n</li>\n<li><p>崭新新的页面布局</p>\n</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/body.jpg\" alt=\"传统的布局\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/jia.png\" alt=\"实例-from-dunitian\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/kuang.png\" alt=\"草图--from-dunitian\"></p>\n<h2 id=\"HTML5智能表单\"><a href=\"#HTML5智能表单\" class=\"headerlink\" title=\"HTML5智能表单\"></a>HTML5智能表单</h2><hr>\n<h3 id=\"HTML4-01-form表单复习\"><a href=\"#HTML4-01-form表单复习\" class=\"headerlink\" title=\"HTML4.01 form表单复习\"></a>HTML4.01 form表单复习</h3><hr>\n<ul>\n<li><code>input</code>表单<code>type</code>属性值<ul>\n<li><code>type=&quot;text&quot;  </code>          单行文本输入框</li>\n<li><code>type=&quot;password&quot; </code>  密码（<code>maxlength=&quot;&quot;</code>）</li>\n<li><code>type=&quot;radio&quot;   </code>       单项选择（<code>checked=&quot;checked&quot;</code>）</li>\n<li><code>type=&quot;checkbox&quot; </code>  多项选择</li>\n<li><code>type=&quot;button&quot; </code>     按钮</li>\n<li><code>type=&quot;submit&quot;</code>         提交</li>\n<li><code>type=&quot;file&quot;</code>           上传文件</li>\n<li><code>type=&quot;reset&quot;     </code>    重置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HTML5智能表单-1\"><a href=\"#HTML5智能表单-1\" class=\"headerlink\" title=\"HTML5智能表单\"></a>HTML5智能表单</h3><hr>\n<ul>\n<li><code>input</code>表单<code>type</code>属性值：<ul>\n<li><code>type = &quot;email&quot; </code> 限制用户输入必须为<code>Email</code>类型</li>\n<li><code>type=&quot;url&quot;</code>          限制用户输入必须为<code>URL</code>类型</li>\n<li><code>type=&quot;date&quot; </code>     限制用户输入必须为日期类型</li>\n<li><code>type=&quot;datetime&quot;</code> 显示完整日期 含时区</li>\n<li><code>type=&quot;datetime-local&quot; </code> 显示完整日期 不含时区</li>\n<li><code>type=&quot;time&quot;  </code>    限制用户输入必须为时间类型</li>\n<li><code>type=&quot;month&quot; </code>  限制用户输入必须为月类型</li>\n<li><code>type=&quot;week&quot; </code>    限制用户输入必须为周类型</li>\n<li><code>type=&quot;number&quot;</code> 限制用户输入必须为数字类型</li>\n<li><code>type=&quot;range&quot;</code>    生成一个滑动条</li>\n<li><code>type=&quot;search&quot;</code>  具有搜索意义的表单<code>results=&quot;n&quot;</code>属性</li>\n<li><code>type=&quot;color&quot; </code>    生成一个颜色选择表单</li>\n<li><code>type=&quot;tel&quot; </code>    显示电话号码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Input-类型-Date-Pickers（日期选择器）\"><a href=\"#Input-类型-Date-Pickers（日期选择器）\" class=\"headerlink\" title=\"Input 类型 - Date Pickers（日期选择器）\"></a>Input 类型 - Date Pickers（日期选择器）</h3><hr>\n<ul>\n<li><p>**<code>HTML5</code> 拥有多个可供选取日期和时间的新输入类型：</p>\n</li>\n<li><p><code>date</code> 选取日、月、年</p>\n</li>\n<li><p><code>month</code> 选取月、年</p>\n</li>\n<li><p><code>week</code>  选取周和年</p>\n</li>\n<li><p><code>time </code>  选取时间（小时和分钟）</p>\n</li>\n<li><p>以下两个没有作用</p>\n<ul>\n<li><code>datetime</code>  选取时间、日、月、年（UTC 时间）</li>\n<li><code>datetime-local</code>  选取时间、日、月、年（本地时间）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HTML5新增表单属性\"><a href=\"#HTML5新增表单属性\" class=\"headerlink\" title=\"HTML5新增表单属性\"></a>HTML5新增表单属性</h3><hr>\n<ul>\n<li><code>required:</code> <code>required </code>内容不能为空</li>\n<li><code>placeholder:</code> 表单提示信息</li>\n<li><code>autofocus:</code>自动聚焦</li>\n<li><code>pattern:</code> 正则表达式  输入的内容必须匹配到指定正则范围</li>\n<li><code>autocomplete:</code>是否保存用户输入值<ul>\n<li>默认为<code>on</code>，关闭提示选择<code>off</code></li>\n</ul>\n</li>\n<li><code>formaction:</code> 在<code>submit</code>里定义提交地址</li>\n<li><code>datalist:</code> 输入框选择列表配合<code>list</code>使用 <code> list</code>值为<code>datalist</code>的<code>id</code>值</li>\n<li><code>output:</code> 计算或脚本输出</li>\n</ul>\n<h3 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h3><hr>\n<ul>\n<li><p><code>validity</code>对象，通过下面的<code>valid</code>可以查看验证是否通过，如果八种验证都返回<code>true</code>,一种验证失败返回<code>false</code></p>\n<ul>\n<li><code>oText.addEventListener(&quot;invalid&quot;,fn1,false)</code></li>\n<li><code>ev.preventDefault()</code>: 阻止默认事件</li>\n<li><code>valueMissing</code>: 当输入值为空的时候，返回<code>true</code></li>\n<li><code>typeMismatch</code>: 控件值与预期不吻合，返回<code>true</code></li>\n<li><code>patternMismatch</code>: 输入值不满足<code>pattern</code>正则，返回<code>true</code></li>\n<li><code>cusomError</code><ul>\n<li><code>setCustomValidity()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"视频-音频\"><a href=\"#视频-音频\" class=\"headerlink\" title=\"视频/音频\"></a>视频/音频</h2><hr>\n<ul>\n<li><p>视频音频格式的简单介绍</p>\n<ul>\n<li>常见的视频格式<ul>\n<li>视频的组成部分：画面、音频、编码格式</li>\n<li>视频编码：H.264、Theora、VP8(google开源)</li>\n</ul>\n</li>\n<li>常见的音频格式<ul>\n<li>视频编码：ACC、MP3、Vorbis</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>HTML5</code>支持的格式</strong></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><code>HTML5</code>能在完全脱离插件的情况下播放音视频,但是不是所有格式都支持。</li>\n<li><strong>支持的视频格式：</strong><ul>\n<li><code>Ogg=</code>带有<code>Theora</code>视频编码<code>+Vorbis</code>音频编码的<code>Ogg</code>文件</li>\n<li><code>MEPG4=</code>带有H.264视频编码<code>+AAC</code>音频编码的<code>MPEG4</code>文件</li>\n<li><code>WebM=</code>带有<code>VP8</code>视频编码<code>+Vorbis</code>音频编码的<code>WebM</code>格式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Video的使用\"><a href=\"#Video的使用\" class=\"headerlink\" title=\"Video的使用\"></a><code>Video</code>的使用</h3><hr>\n<ul>\n<li><strong>单独用法</strong><ul>\n<li><code>&lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</code></li>\n</ul>\n</li>\n<li><strong>带提示用法</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt; video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;</span><br><span class=\"line\">\t您的浏览器暂不支持video标签。播放视频</span><br><span class=\"line\">&lt;/ video &gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>兼容用法</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt; video  controls=&quot;controls&quot;  width=&quot;300&quot;&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;move.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;move.mp4&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class=\"line\">\t您的浏览器暂不支持video标签。播放视频</span><br><span class=\"line\">&lt;/ video &gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>Video</code>的常见属性</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Autoplay</td>\n<td>Autoplay</td>\n<td>视频就绪自动播放</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>向用户显示播放控件</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Pixels(像素)</td>\n<td>设置播放器宽度</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>Pixels(像素)</td>\n<td>设置播放器高度</td>\n</tr>\n<tr>\n<td>Loop</td>\n<td>Loop</td>\n<td>播放完是否继续播放该视频，循环播放</td>\n</tr>\n<tr>\n<td>Preload</td>\n<td>load{auto,meta,none}</td>\n<td>规定是否预加载视频。</td>\n</tr>\n<tr>\n<td>Src</td>\n<td>url</td>\n<td>视频url地址</td>\n</tr>\n<tr>\n<td>Poster</td>\n<td>Imgurl</td>\n<td>加载等待的画面图片</td>\n</tr>\n<tr>\n<td>Autobuffer</td>\n<td>Autobuffer</td>\n<td>设置为浏览器缓冲方式，不设置autoply才有效</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong><code>Video</code>的<code>API</code>方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>属性</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>play()</td>\n<td>currentSrc</td>\n<td>play</td>\n</tr>\n<tr>\n<td>pause()</td>\n<td>currentTime</td>\n<td>pause</td>\n</tr>\n<tr>\n<td>load()</td>\n<td>videoWidth</td>\n<td>progress</td>\n</tr>\n<tr>\n<td>canPlayType()</td>\n<td>videoHeight</td>\n<td>error</td>\n</tr>\n</tbody></table>\n<h2 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h2><hr>\n<ul>\n<li>标签 <code>&lt;canvas&gt;</code><ul>\n<li>不支持<code>canvas</code> 的浏览器可以看到的内容</li>\n<li>默认宽度<code>300px</code>，默认高度<code> 150px</code></li>\n<li>注意：<code>canvas</code>宽高需要设置在标签中 否则绘制的东西可能出错</li>\n</ul>\n</li>\n<li><code>&lt;canvas&gt;</code> 绘制环境<ul>\n<li><code>getContext(&quot;2d&quot;)</code>;目前支持<code>2d</code>的场景</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t您的浏览器不支持canvas，请更换浏览器！</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>绘制矩形</strong></p>\n<ul>\n<li><code>rect(L,T,W,H)</code>:创建一个矩形</li>\n<li><code>fillRect(L,T,W,H)</code>:绘制填充的矩形</li>\n<li><code>clearRect(x,y,w,h) </code> 清除矩形选区</li>\n<li><code>strokeRect(L,T,W,H)</code>绘制空心矩形(无填充)<ul>\n<li>默认一像素黑色边框</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>设置绘图样式</strong></p>\n<ul>\n<li><code>fillStyle</code>:填充颜色(绘制<code>canvas</code>是有顺序的)</li>\n<li><code>lineWidth</code>:触笔宽度(线宽)</li>\n<li><code>strokeStyle</code>:触笔颜色</li>\n</ul>\n</li>\n<li><p><strong>绘制路径</strong></p>\n<ul>\n<li><code>beginPath()</code> :开始路径</li>\n<li><code>closePath():</code>结束路径</li>\n<li><code>moveTo(x,y)</code>:将触笔移动到x,y点</li>\n<li><code>lineTo(x,y)</code>:绘制到x,y点</li>\n<li><code>stroke():</code> 触笔方法 画线  默认为黑色</li>\n<li><code>fill()</code>:填充方法 </li>\n<li><code>rect(x,y,w,h)</code>:矩形路径</li>\n<li><code>save()</code>:保存路径</li>\n<li><code>restore()</code>:恢复路径</li>\n</ul>\n</li>\n<li><p><strong>绘制曲线</strong> </p>\n<ul>\n<li><code>arcTo(x1,y1,x2,y2,r)</code><ul>\n<li><code>x1</code>,<code>y1</code> 坐标一  <code>x2</code>,<code>y2</code>坐标二   r圆弧半斤</li>\n</ul>\n</li>\n<li><code>quadraticCurveTo(dx,dy,x1,y1)</code><ul>\n<li>贝塞尔曲线:<code>dx</code>,<code>dy</code>控制点  <code>x1</code>,<code>y1</code>结束坐标</li>\n</ul>\n</li>\n<li><code>bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)</code><ul>\n<li>贝塞尔曲线:<code>dx1,dy1</code> 控制点一 <code>dx2,dy2</code>控制点二 </li>\n<li><code>x1,y1</code>结束坐标</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>绘制圆形</strong></p>\n<ul>\n<li><code>arc(x,y,半径,起始弧度,结束弧度,旋转方向)</code><ul>\n<li><code>x</code>，<code>y</code>起始位置</li>\n<li>弧度与角度：<code>弧度=角度值*Math.PI/180</code></li>\n<li>旋转方向：顺时针（默认：<code>false</code>），逆时针（<code>true</code>）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>绘制文本</strong></p>\n<ul>\n<li><code>strokeText(文本,x,y)</code>;  绘制空心文本</li>\n<li><code>fillText(文本,x,y)</code>; 绘制实心文本</li>\n<li><code>font = &quot;font-size  font-family&quot; </code>注:尺寸 字体缺一不可<ul>\n<li><code>textAlign = &quot;&quot;;</code>文本左右对齐方式  <code>start center end  left right</code></li>\n<li><code>textBaseline</code>文本上下对齐方式 <ul>\n<li><code>alphabetic</code>默认。文本基线是普通的字母基线。</li>\n<li><code>top</code>    文本基线是 <code>em</code> 方框的顶端。。</li>\n<li><code>hanging</code>    文本基线是悬挂基线。</li>\n<li><code>middle</code>    文本基线是<code>em</code> 方框的正中。</li>\n<li><code>ideographic</code>    文本基线是表意基线。</li>\n<li><code>bottom</code>    文本基线是 <code>em</code> 方框的底端。</li>\n<li><code>measureText(文本).width;</code> 文本实际宽度(只有宽度值)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>图形边界样式</strong></p>\n<ul>\n<li><code>lineJoin</code>: 边界连接点样式<ul>\n<li><code>miter</code>(默认值),<code>round</code>(圆角),<code>bevel</code>(斜角)</li>\n</ul>\n</li>\n<li><code>lineCap</code>: 端点样式<ul>\n<li><code>butt</code>(默认值),<code>round</code>(圆角),<code>square</code>(高度多出线宽一半)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>绘制图片</strong></p>\n<ul>\n<li><p>图片预加载，获取图片文件</p>\n<ul>\n<li><code>onload</code>中调用</li>\n<li><code>drawImage(img,x,y,w,h);</code>绘制图片(图片,坐标<code>x</code>,坐标<code>y</code>,宽度,高度)</li>\n</ul>\n</li>\n<li><p>设置背景</p>\n<ul>\n<li><code>createPattern(img,平铺方式)</code></li>\n<li>平铺方式:<code>repeat</code>,<code>repeat-x</code>,<code>repeat-y</code>,<code>no-repeat</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>canvas变换</strong></p>\n<ul>\n<li><code>translate(x,y)</code></li>\n<li>坐标基准点偏移 : 从起始点为基准，移动到当前位置</li>\n<li><code>rotate(弧度)</code>: 旋转  <code>弧度公式 = 角度*PI/180</code></li>\n<li><code>scale(wb,hb)</code>缩放比例(缩放<code>canvas</code>绘制的图片)</li>\n</ul>\n</li>\n<li><p><strong>颜色渐变</strong></p>\n<ul>\n<li>线性渐变:<code>createLinearGradient(x1,y1,x2,y2)</code><ul>\n<li><code>x1</code>,<code>y1</code>起始坐标点</li>\n<li><code>x2</code>,<code>y2</code>结束坐标点</li>\n</ul>\n</li>\n<li>径向渐变:<code>createRadialGradient(x1,y1,r1,x2,y2,r2)</code><ul>\n<li><code>x1</code>,<code>y1</code>,<code>r1</code>内圆坐标及半径</li>\n<li><code>x2</code>,<code>y2</code>,<code>r2</code>外圆坐标及半径</li>\n<li><code>addColorStop</code>(位置,颜色)  位置:渐变点  <code>0-1</code>之间 可多个</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>阴影</strong></p>\n<ul>\n<li><code>shadowOffsetX</code>,<code>shadowOffsetY</code>    <code>x</code>轴、<code>y</code>轴偏移</li>\n<li><code>shadowBlur</code>    阴影模糊度</li>\n<li><code>shadowColor</code>  阴影颜色 默认颜色:<code>rgba(0,0,0,0)</code></li>\n</ul>\n</li>\n<li><p><strong>像素</strong></p>\n<ul>\n<li><code>createImageData(sx,sy)</code> 创建新的、空白的 <code>ImageData</code> 对象</li>\n<li><code>getImageData(x1,y1,sx,sy)</code><ul>\n<li>返回<code>ImageData</code>对象，该对象为画布上指定的矩形复制像素数据<code>    putImageData(img,x2,y2)</code></li>\n<li>把图像数据（从指定的 <code>ImageData</code> 对象）放回画布上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>合成</strong></p>\n<ul>\n<li><code>globalAlpha</code>  设置或返回绘图的当前<code>alpha</code>或透明值</li>\n<li><code>globalCompositeOperation</code> 设置或返回新图像如何绘制到已有的图像上</li>\n<li><code>source-over</code>默认。在目标图像上显示源图像。</li>\n<li><code>source-atop</code>在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。</li>\n<li><code>source-in</code>    在目标图像中显示源图像。只有目标图像内的源图像部分会显示，目标图像是透明的。</li>\n<li><code>source-out    </code>在目标图像之外显示源图像。只会显示目标图像之外源图像部分，目标图像是透明的。</li>\n<li><code>destination-over</code>在源图像上方显示目标图像。</li>\n<li><code>destination-atop</code>在源图像顶部显示目标图像。源图像之外的目标图像部分不会被显示。</li>\n<li><code>destination-in</code>在源图像中显示目标图像。只有源图像内的目标图像部分会被显示，源图像是透明的。</li>\n<li><code>destination-out</code>在源图像外显示目标图像。只有源图像外的目标图像部分会被显示，源图像是透明的。</li>\n<li><code>lighter</code>显示源图像 + 目标图像。</li>\n<li><code>copy</code>显示源图像。忽略目标图像。</li>\n<li><code>xor</code>使用异或操作对源图像与目标图像进行组合。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>扩展阅读<ul>\n<li><a href=\"http://luckykun.com/work/2016-09-01/canvas-study01.html\">canvas学习之API整理笔记（一）</a></li>\n<li><a href=\"http://jartto.wang/2016/07/25/make-an-inventory-of-html5-api/\">HTML5 API大盘点</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SVG绘图\"><a href=\"#SVG绘图\" class=\"headerlink\" title=\"SVG绘图\"></a>SVG绘图</h2><hr>\n<ul>\n<li><p><strong>svg是什么</strong></p>\n<ul>\n<li>矢量图</li>\n<li>与<code>canvas</code>的区别</li>\n</ul>\n</li>\n<li><p><strong>svg的引入方式</strong></p>\n</li>\n<li><p>方式一：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.1&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">svg</span> </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//W3C//DTD SVG 1.1//EN&quot;</span>  <span class=\"meta-string\">&quot;http://www.w3.org/</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">Graphics/SVG/1.1/DTD/svg11.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>方式二：</p>\n<ul>\n<li>图片、背景、框架</li>\n</ul>\n</li>\n<li><p>方式三: </p>\n<ul>\n<li><code>html</code>页面中添加<code>svg</code></li>\n</ul>\n</li>\n<li><p><strong><code>circle</code>:圆形</strong></p>\n<ul>\n<li>圆心坐标  <code>cx</code>,<code>cy</code></li>\n<li>半径  <code>r</code></li>\n<li><code>fill</code>   <code>stroke </code>  <code>stroke-width</code>     <code>stlye</code>样式 </li>\n<li><code>fill = &quot;none/transparent&quot; </code></li>\n</ul>\n</li>\n<li><p><strong>ellipse:椭圆</strong></p>\n<ul>\n<li><code>cx</code>属性定义的椭圆中心的x坐标</li>\n<li><code>cy</code>属性定义的椭圆中心的y坐标</li>\n<li><code>rx</code>属性定义的水平半径</li>\n<li><code>ry</code>属性定义的垂直半径</li>\n</ul>\n</li>\n<li><p><strong>rect : 矩形</strong></p>\n<ul>\n<li><code>width</code>  <code>height </code> 宽高   </li>\n<li>坐标 <code> x</code>,<code> y</code> </li>\n<li>圆角  <code>rx</code>,<code>ry</code></li>\n</ul>\n</li>\n<li><p><strong><code>line </code>:线条</strong></p>\n<ul>\n<li><code>x1</code>,<code>y1</code>,<code>x2</code>,<code>y2</code></li>\n<li><code>stroke-opacity</code>  透明  <code>fill-opacity</code></li>\n</ul>\n</li>\n<li><p><strong>polyline:折线</strong></p>\n<ul>\n<li><code>points</code>:点坐标（<code>x1 y1 x2 y2...</code>）或(<code>x1,y1,x2,y2....</code>)    </li>\n</ul>\n</li>\n<li><p><strong>polygon:多边形</strong></p>\n<ul>\n<li>折线闭合  <code>fill-rule:evenodd/nonzero</code>;</li>\n</ul>\n</li>\n<li><p><strong>path: 路劲</strong></p>\n<ul>\n<li><code>d</code>属性</li>\n<li><code>M(起始坐标)</code>,<code>L(结束坐标)</code>,<code>H(水平线)</code>,<code>V(垂直线)</code>,<code>A(圆弧)</code>,<code>Z(闭合路劲)</code><ul>\n<li><code>C</code>,<code>S</code>,<code>Q</code>,<code>T</code> 贝塞尔曲线</li>\n<li>大写为绝对坐标(具体的坐标位置)</li>\n<li>小写为相对坐标(相对起始坐标点的具体长度)</li>\n</ul>\n</li>\n<li>A命令<ul>\n<li><code>x</code>半径 <code>y</code>半径 角度  弧长(0 小弧 1大弧)  方向(0逆时针 1顺时针)</li>\n<li>终点<code>(x y)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>C命令：三次贝塞尔曲线</strong></p>\n<ul>\n<li><code>(x1,y1,x2,y2,x,y)</code>    <code>x1</code>,<code>y1 </code>控制点一    <code>x2</code>,<code>y2 </code>控制点二   <code> x</code>,<code>y </code>结束点</li>\n</ul>\n</li>\n<li><p><strong>S命令：平滑贝塞尔曲线(自动对称一个控制点)</strong></p>\n<ul>\n<li><code>(x2,y2,x,y) </code>  <code>x2</code>,<code>y2</code>控制点    x,y结束点</li>\n</ul>\n</li>\n<li><p><strong>Q命令：二次贝塞尔曲线</strong></p>\n<ul>\n<li><code>(x1,y1,x,y)</code>   x1,y1控制点  x,y结束点</li>\n</ul>\n</li>\n<li><p><strong>T命令：一次贝塞尔曲线</strong></p>\n<ul>\n<li><code>(x,y)</code>结束点</li>\n</ul>\n</li>\n<li><p><strong><code>g</code>标签:组合元素  设置元素公共属性</strong></p>\n<ul>\n<li>共用属性</li>\n<li><code>transform = &quot;translate(0,0)&quot;</code></li>\n</ul>\n</li>\n<li><p><strong><code>text</code>标签</strong></p>\n<ul>\n<li><code>x</code>, <code>y</code>, <code>text-anchor</code>(对齐start end middle)    <code>font-size </code></li>\n</ul>\n</li>\n<li><p><strong><code>image</code> 标签</strong></p>\n<ul>\n<li><code>x</code>, <code>y</code>, <code>width</code>  <code>height </code></li>\n<li><code>xlink:href</code>(图片地址)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"地理信息与本地存储\"><a href=\"#地理信息与本地存储\" class=\"headerlink\" title=\"地理信息与本地存储\"></a>地理信息与本地存储</h2><hr>\n<h3 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h3><hr>\n<ul>\n<li><p>经度  :   南北极的连接线</p>\n</li>\n<li><p>纬度  :   东西连接的线</p>\n</li>\n<li><p>位置信息从何而来</p>\n<ul>\n<li><code>IP</code>地址</li>\n<li><code>GPS</code>全球定位系统</li>\n<li><code>Wi-Fi</code>无线网络</li>\n<li>基站</li>\n</ul>\n</li>\n<li><p><code>avigator.geolocation</code></p>\n<ul>\n<li><p>单次定位请求  ：<code>getCurrentPosition</code>(请求成功,请求失败,数据收集方式)</p>\n</li>\n<li><p><strong>请求成功函数</strong></p>\n<ul>\n<li>经度 :  <code>coords.longitude</code></li>\n<li>纬度 :  <code>coords.latitude</code></li>\n<li>准确度 :  <code>coords.accuracy</code></li>\n<li>海拔 : <code> coords.altitude</code></li>\n<li>海拔准确度 :  <code>coords.altitudeAcuracy</code></li>\n<li>行进方向 :  <code>coords.heading</code></li>\n<li>地面速度 :  <code>coords.speed</code></li>\n<li>请求的时间: <code>new Date(position.timestamp)</code></li>\n</ul>\n</li>\n<li><p><strong>请求失败函数</strong></p>\n<ul>\n<li>失败编号  ：<code>code</code><ul>\n<li>0  :  不包括其他错误编号中的错误</li>\n<li>1  :  用户拒绝浏览器获取位置信息</li>\n<li>2  :  尝试获取用户信息，但失败了</li>\n<li>3  :   设置了<code>timeout</code>值，获取位置超时了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>数据收集 :  json的形式</strong></p>\n<ul>\n<li><code>enableHighAcuracy</code>  :  更精确的查找，默认<code>false</code></li>\n<li><code>timeout </code> :  获取位置允许最长时间，默认<code>infinity</code></li>\n<li><code>maximumAge</code> :  位置可以缓存的最大时间，默认<code>0</code></li>\n</ul>\n</li>\n<li><p><strong>多次定位请求</strong>*  : <code> watchPosition</code></p>\n<ul>\n<li>移动设备有用，位置改变才会触发</li>\n<li>配置参数：<code>frequency</code> 更新的频率</li>\n<li>关闭更新请求  :  <code>clearWatch</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>examp01 getCurrentPosition</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>请求位置信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tnavigator.geolocation.getCurrentPosition(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;经度：&quot;</span>+position.coords.longitude + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;纬度：&quot;</span>+position.coords.latitude + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;海拔：&quot;</span>+position.coords.accuracy + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;海拔的准确度：&quot;</span>+position.coords.altitudeAccuracy + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;地面速度&quot;</span>+position.coords.speed + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;行进方向&quot;</span>+position.coords.heading + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;请求时间&quot;</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(position.timestamp) + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\talert(err.code);</span><br><span class=\"line\">\t\t\t&#125;,&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">enableHighAccuracy</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//精确请求</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">timeout</span>:<span class=\"number\">5000</span>,<span class=\"comment\">//设置超时</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maximumAge</span>:<span class=\"number\">1000</span><span class=\"comment\">//缓存时间</span></span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://codepen.io/poetries/pen/RKPWMg\">在线演示</a></p>\n<ul>\n<li>**examp02 **</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tnavigator.geolocation.watchPosition(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;经度：&quot;</span>+position.coords.longitude + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;纬度：&quot;</span>+position.coords.latitude + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;海拔：&quot;</span>+position.coords.accuracy + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;海拔的准确度：&quot;</span>+position.coords.altitudeAccuracy + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;地面速度&quot;</span>+position.coords.speed + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;行进方向&quot;</span>+position.coords.heading + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t\tbox.innerHTML +=<span class=\"string\">&quot;请求时间&quot;</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(position.timestamp) + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\talert(err.code);</span><br><span class=\"line\">\t\t\t&#125;,&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">enableHighAccuracy</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//精确请求</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">timeout</span>:<span class=\"number\">5000</span>,<span class=\"comment\">//设置超时</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maximumAge</span>:<span class=\"number\">1000</span><span class=\"comment\">//缓存时间</span></span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/poetries/pen/zNGvjY\">在线演示</a></p>\n<ul>\n<li><strong>example03 高德地图应用</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">600px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">40px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">src</span>=<span class=\"string\">&quot;http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">&#x27;container&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://codepen.io/poetries/pen/qRdOKZ\">在线演示</a></p>\n<ul>\n<li><strong>examp04  搜索城市</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">500px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>; <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.menu</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>:pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>:-<span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">38px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>:none;</span><br><span class=\"line\">\t<span class=\"attribute\">outline</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#btn</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入城市...&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">src</span>=<span class=\"string\">&quot;http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> city = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;city&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">&#x27;container&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> toolBar,mouseTool,contextMenu;</span><br><span class=\"line\"><span class=\"comment\">//在地图中添加操作toolBar插件、mouseTool插件</span></span><br><span class=\"line\">map.plugin([<span class=\"string\">&quot;AMap.ToolBar&quot;</span>,<span class=\"string\">&quot;AMap.MouseTool&quot;</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ttoolBar = <span class=\"keyword\">new</span> AMap.ToolBar();</span><br><span class=\"line\">\tmap.addControl(toolBar);</span><br><span class=\"line\">\tmouseTool = <span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> menuContext = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">menuContext.innerHTML = <span class=\"string\">&quot;&lt;div class=menu&gt;&lt;ul&gt;&lt;li onclick=&#x27;zoomMenu(0)&#x27;&gt;缩小&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;li onclick=&#x27;zoomMenu(1)&#x27;&gt;放大&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;li onclick=&#x27;distanceMeasureMenu()&#x27;&gt;距离量测&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;li onclick = &#x27;addMarkerMenu()&#x27;&gt;添加标记&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建一个自定义的右键菜单</span></span><br><span class=\"line\">contextMenu = <span class=\"keyword\">new</span> AMap.ContextMenu(&#123;<span class=\"attr\">isCustom</span>:<span class=\"literal\">true</span>,<span class=\"attr\">content</span>:menuContext&#125;);</span><br><span class=\"line\"><span class=\"comment\">//给地图绑鼠标右键功能弹出右键菜单</span></span><br><span class=\"line\">AMap.event.addListener(map,<span class=\"string\">&quot;rightclick&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\tcontextMenu.open(map,e.lnglat);<span class=\"comment\">//e.lnglat鼠标点击的经纬度</span></span><br><span class=\"line\">\tcontextMenuPosition = e.lnglat;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//右键菜单缩放地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomMenu</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>)&#123;map.zoomOut();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n === <span class=\"number\">1</span>)&#123;map.zoomIn();&#125;</span><br><span class=\"line\">\tcontextMenu.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">contextMenu.close();</span><br><span class=\"line\"><span class=\"comment\">//测量距离功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">distanceMeasureMenu</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tmouseTool.rule();</span><br><span class=\"line\">\tcontextMenu.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加标注功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMarkerMenu</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tmouseTool.close();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> marker = <span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">map</span>: map,</span><br><span class=\"line\">\t\t<span class=\"attr\">position</span>: contextMenuPosition, <span class=\"comment\">//基点位置</span></span><br><span class=\"line\">\t\t<span class=\"attr\">offset</span>: &#123;<span class=\"attr\">x</span>:-<span class=\"number\">5</span>,<span class=\"attr\">y</span>:-<span class=\"number\">10</span>&#125; <span class=\"comment\">//相对于基点位置</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tcontextMenu.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//搜索城市</span></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> val = city.value;</span><br><span class=\"line\">\tmap.setCity(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://codepen.io/poetries/pen/xgGwaZ\">在线演示</a></p>\n<h3 id=\"本地存储\"><a href=\"#本地存储\" class=\"headerlink\" title=\"本地存储\"></a>本地存储</h3><hr>\n<ul>\n<li><strong><code>Storage</code></strong><ul>\n<li><code>sessionStorage</code><ul>\n<li><code>session</code>临时回话，从页面打开到页面关闭的时间段</li>\n<li>窗口的临时存储，页面关闭，本地存储消失</li>\n</ul>\n</li>\n<li><code>localStorage</code><ul>\n<li>永久存储（可以手动删除数据）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>Storage</code>的特点</strong><ul>\n<li>存储量限制 ( 5M )</li>\n<li>客户端完成，不会请求服务器处理</li>\n<li><code>sessionStorage</code>数据是不共享、 <code>localStorage</code>共享</li>\n</ul>\n</li>\n<li><strong><code>Storage API</code></strong><ul>\n<li><code>setItem()</code>:<ul>\n<li>设置数据，(<code>key</code>,<code>value</code>)类型，类型都是字符串</li>\n<li>可以用获取属性的形式操作</li>\n</ul>\n</li>\n<li><code>getItem():</code><ul>\n<li>获取数据，通过<code>key</code>来获取到相应的<code>value</code></li>\n</ul>\n</li>\n<li><code>removeItem()</code>:<ul>\n<li>删除数据，通过key来删除相应的<code>value</code></li>\n</ul>\n</li>\n<li><code>clear()</code>:<ul>\n<li>删除全部存储的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>存储事件:</strong><ul>\n<li>当数据有修改或删除的情况下，就会触发<code>storage</code>事件</li>\n<li>在对数据进行改变的窗口对象上是不会触发的`</li>\n<li><code>Key</code> : 修改或删除的<code>key</code>值，如果调用<code>clear()</code>,<code>key</code>为<code>null</code></li>\n<li><code>newValue</code>  :  新设置的值，如果调用<code>removeStorage()</code>,<code>key</code>为<code>null</code></li>\n<li><code>oldValue</code> :  调用改变前的<code>value</code>值</li>\n<li><code>storageArea</code> : 当前的<code>storage</code>对象</li>\n<li><code>url</code> :  触发该脚本变化的文档的url</li>\n<li>注：<code>session</code>同窗口才可以,例子：<code>iframe</code>操作</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTML5新增JS方法\"><a href=\"#HTML5新增JS方法\" class=\"headerlink\" title=\"HTML5新增JS方法\"></a>HTML5新增JS方法</h2><hr>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/14.png\" alt=\"H5在JavaScript中新增的方法一览\"></p>\n<ul>\n<li><p><strong>新增选择器</strong></p>\n<ul>\n<li><code>document.querySelector() </code> 选择单个元素</li>\n<li><code>document.querySelectorAll() </code> 选择所有的</li>\n<li><code>document.getElementsByClassName()</code> 通过类名选择</li>\n</ul>\n</li>\n<li><p><strong>延迟加载JS</strong></p>\n<ul>\n<li><code>JS</code>的加载会影响后面的内容加载<ul>\n<li>很多浏览器都采用了并行加载JS，但还是会影响其他内容</li>\n</ul>\n</li>\n<li><code>Html5</code>的<code>defer</code>和<code>async</code><ul>\n<li><code>defer=“defer ”</code>: 延迟加载，会按顺序执行，在<code>onload</code>执行前被触发</li>\n<li><code>async =“async”</code>: 异步加载，加载完就触发，有顺序问题</li>\n</ul>\n</li>\n<li>浏览器兼容性：<code>Labjs</code>库</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 动态加载script文件 （推荐方法） 只需请求一次 可加载多个JavaScript文件，减少请求次数以及页面的加载阻塞</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">\tscript.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(script.readyState)&#123;<span class=\"comment\">//IE</span></span><br><span class=\"line\">\t\tscript.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">&quot;loaded&quot;</span> || script.readyState == <span class=\"string\">&quot;complete&quot;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tonreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\tcallback();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tscript.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tscript.src = url;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;head&quot;</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadScript(<span class=\"string\">&quot;js/defer.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;加载成功&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//  加载成功回调</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">loadScript(<span class=\"string\">&quot;js/async.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;加载成功&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//  加载成功回调</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>获取<code>class</code>列表属性</strong></p>\n<ul>\n<li><code>classList</code><ul>\n<li><code>length</code> :  <code>class</code>的长度</li>\n<li><code>add() </code> :  添加<code>class</code>方法</li>\n<li><code>remove()</code>  :  删除<code>class</code>方法</li>\n<li><code>toggle()</code> :  切换<code>class</code>方法 </li>\n<li><code>contains()</code> : 判断类名是否存在返回<code>bool</code>值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>JSON</code>的新方法</strong></p>\n<ul>\n<li><p><code>parse()</code> : 把字符串转成<code>json</code></p>\n<ul>\n<li>字符串中的属性要严格的加上引号</li>\n</ul>\n</li>\n<li><p><code>stringify()</code> : 把<code>json</code>转化成字符串</p>\n<ul>\n<li>会自动的把双引号加上</li>\n</ul>\n</li>\n<li><p>与<code>eval</code>的区别</p>\n<ul>\n<li><code>eval()</code>：对任何的字符串进行解析变成js</li>\n<li><code>parse()</code>：字符串中的属性要严格的加上引号</li>\n</ul>\n</li>\n<li><p>其他浏览器兼容</p>\n<ul>\n<li><a href=\"http://www.json.org/\">去下载json2.js</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>历史管理</strong></p>\n<ul>\n<li><code>onhashchange</code> ：改变hash值来管理</li>\n<li><code>history</code>  ：<ul>\n<li>服务器下运行<ul>\n<li><code>pushState</code> :  三个参数 ：数据  标题(都没实现)  地址(可选)</li>\n<li><code>onpopstate</code>事件 :  读取数据   <code>event.state</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTML5拖拽事件\"><a href=\"#HTML5拖拽事件\" class=\"headerlink\" title=\"HTML5拖拽事件\"></a>HTML5拖拽事件</h2><hr>\n<ul>\n<li><p>图片自带拖拽功能</p>\n</li>\n<li><p>其他元素可设置<code>draggable</code>属性</p>\n</li>\n<li><p><strong><code>draggable ：true</code></strong></p>\n<ul>\n<li>拖拽元素(被拖拽元素对象)事件 :  <ul>\n<li><code>ondragstart</code> : 拖拽前触发 </li>\n<li><code>ondrag</code> :拖拽前、拖拽结束之间，连续触发</li>\n<li><code>ondragend</code> :拖拽结束触发</li>\n</ul>\n</li>\n<li>目标元素(拖拽元素被拖到的对象)事件 :  <ul>\n<li><code>ondragenter</code> :进入目标元素触发</li>\n<li><code>ondragover </code>:进入目标、离开目标之间，连续触发</li>\n<li><code>ondragleave</code> :离开目标元素触发</li>\n<li><code>ondrop</code> :在目标元素上释放鼠标触发<ul>\n<li>需要在<code>ondragover</code>事件里面阻止默认事件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>拖拽兼容问题</strong></p>\n<ul>\n<li>火狐浏览器下需设置<code>dataTransfer</code>对象才可以拖拽除图片外的其他标签<ul>\n<li><p><code>dataTransfer</code>对象</p>\n</li>\n<li><p><code>setData()</code> : 设置数据 <code>key</code>和<code>value</code>(必须是字符串)</p>\n</li>\n<li><p><code>getData()</code> : 获取数据，根据<code>key</code>值，获取对应的<code>value</code></p>\n</li>\n<li><p><code>effectAllowed</code> : 设置光标样式(<code>none</code>, <code>copy</code>, <code>copyLink</code>, <code>copyMove</code>, <code>link</code>, <code>linkMove</code>,<code> move</code>, <code>all</code> 和<code> uninitialized</code>)</p>\n</li>\n<li><p><code>setDragImage</code> ：三个参数（指定的元素，坐标<code>X</code>，坐标<code>Y</code>）</p>\n</li>\n<li><p><code>files</code>： 获取外部拖拽的文件，返回一个<code>filesList</code>列表</p>\n<ul>\n<li><code>filesList</code>下有个<code>type</code>属性，返回文件的类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>读取文件信息</strong></p>\n<ul>\n<li><code>FileReader</code>(读取文件信息)<ul>\n<li><code>readAsDataURL</code></li>\n</ul>\n</li>\n<li>参数为要读取的文件对象<ul>\n<li><code>onload</code>当读取文件成功完成的时候触发此事件</li>\n<li><code>this. result</code> 获取读取的文件数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>examp01 拖拽案例</strong></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;drap&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#drap</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//被拖拽元素事件</span></span><br><span class=\"line\">drap.ondragstart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123; <span class=\"comment\">// 拖拽前</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ev = ev || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//火狐浏览器下需设置dataTransfer对象才可以拖拽除图片外的其他标签</span></span><br><span class=\"line\">\tev.dataTransfer.setData(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;poetries&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//effectAllowed : 设置光标样式(none, copy, copyLink, copyMove, link, linkMove,move, all 和uninitialized)</span></span><br><span class=\"line\">\tev.dataTransfer.effectAllowed = <span class=\"string\">&quot;copy&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置被拖拽的小元素 setDragImage ：三个参数（指定的元素，坐标X，坐标Y）</span></span><br><span class=\"line\">\tev.dataTransfer.setDragImage(pic,<span class=\"number\">25</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;green&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drap.ondrag = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 拖拽过程中</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.innerText = <span class=\"string\">&quot;被拖拽中...&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drap.ondragend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 拖拽结束</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.innerHTML = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//目标元素事件</span></span><br><span class=\"line\">box.ondragenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//进入目标元素触发</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.innerHTML = <span class=\"string\">&quot;可将文件拖放到这里!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">box.ondragover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123; <span class=\"comment\">//进入目标、离开目标之间，连续触发</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ev = ev || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\tev.preventDefault(); </span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;pink&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">box.ondragleave = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//离开目标元素触发</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.innerHTML = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">box.ondrop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;<span class=\"comment\">//在目标元素上释放鼠标触发</span></span><br><span class=\"line\">\t<span class=\"comment\">//alert(&quot;拖放结束&quot;)</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.innerHTML = ev.dataTransfer.getData(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://codepen.io/poetries/pen/Ndqaxx\">在线演示</a></p>\n<ul>\n<li><strong>example02 拖拽相册</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>请拖拽图片到红框中<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>可以将文件拖放到这里！！<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dustbin&quot;</span>&gt;</span>垃圾回收站<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>:<span class=\"number\">2px</span> solid red;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#box</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">192px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#dustbin</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dusTbin = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dustbin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> span = box.getElementsByTagName(<span class=\"string\">&quot;span&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">//目标元素事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">box.ondragenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//进入目标元素触发</span></span><br><span class=\"line\">\tspan.style.display = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">box.ondragover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;<span class=\"comment\">//在目标元素上连续触发</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ev = ev||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\tev.preventDefault();<span class=\"comment\">//阻止默认事件</span></span><br><span class=\"line\">\tspan.style.display = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">box.ondragleave = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//离开目标元素</span></span><br><span class=\"line\">\tspan.style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">box.ondrop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;<span class=\"comment\">//在目标元素上面释放鼠标触发</span></span><br><span class=\"line\">\t<span class=\"comment\">//alert(&quot;拖拽结束！！&quot;);</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ev = ev||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\tev.preventDefault();<span class=\"comment\">//阻止默认事件</span></span><br><span class=\"line\">\tspan.style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> file = ev.dataTransfer.files;</span><br><span class=\"line\">\t<span class=\"comment\">//alert(file[0].type);</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;file.length ;i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (file[i].type.indexOf(<span class=\"string\">&quot;image&quot;</span>)!=-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> read = <span class=\"keyword\">new</span> FileReader();<span class=\"comment\">//新建一个读取文件对象</span></span><br><span class=\"line\">\t\t\tread.readAsDataURL(file[i]);<span class=\"comment\">//读取文件</span></span><br><span class=\"line\">\t\t\tread.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//读取文件成功之后调用什么函数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//alert(this.result);</span></span><br><span class=\"line\">\t\t\t\timg.src = <span class=\"built_in\">this</span>.result;</span><br><span class=\"line\">\t\t\t\tbox.appendChild(img);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取img节点 实现删除功能</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> oImg = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (oImg)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;oImg.length ;j++ )</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\toImg[j].ondragstart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tev.dataTransfer.setData(<span class=\"string\">&quot;data&quot;</span>,ev.target.innerHTML);</span><br><span class=\"line\">\t\t\t\t\t\t\timg = ev.target;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\toImg[j].ondragend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tev.dataTransfer.clearData(<span class=\"string\">&quot;data&quot;</span>);<span class=\"comment\">//清楚数据</span></span><br><span class=\"line\">\t\t\t\t\t\t\timg = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//实现删除功能(移除img节点)</span></span><br><span class=\"line\">\t\t\t\tdusTbin.ondragover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tev.preventDefault();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tdusTbin.ondrop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (img)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\timg.parentNode.removeChild(img);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;请上传图片！&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://codepen.io/poetries/pen/Ndqagr\">在线演示</a></p>\n<ul>\n<li><strong>example03 拖拽排序</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#f3f&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#ff6&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#c60&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#903&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#0f6&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#636&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#36f&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background:#033&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oUl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> oLi = oUl.getElementsByTagName(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> curr = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; oLi.length;i++) &#123;</span><br><span class=\"line\">    oLi[i].index = i;</span><br><span class=\"line\">    oLi[i].ondragstart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ev = ev || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">      ev.dataTransfer.setData(<span class=\"string\">&quot;data&quot;</span>,<span class=\"built_in\">this</span>.innerHTML);</span><br><span class=\"line\">      <span class=\"comment\">//this.innerHTML = &quot;被拖拽中...&quot;;</span></span><br><span class=\"line\">      curr = <span class=\"built_in\">this</span>.index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    oLi[i].ondragenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; oLi.length;i++)&#123;</span><br><span class=\"line\">        oLi[i].style.border = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(curr != <span class=\"built_in\">this</span>.index)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.style.border = <span class=\"string\">&quot;2px solid #000&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    oLi[i].ondragover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    oLi[i].ondrop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123; <span class=\"comment\">//鼠标释放的时候</span></span><br><span class=\"line\">      <span class=\"comment\">//oUl.insertBefore(oLi[curr],this);//insertBefore(新节点，目标节点)</span></span><br><span class=\"line\">      inserAfter(oLi[curr],<span class=\"built_in\">this</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.style.border = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">      <span class=\"comment\">//oLi[curr].innerHTML = ev.DataTransfer.getData(&quot;data&quot;);</span></span><br><span class=\"line\">      sort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inserAfter</span>(<span class=\"params\">newItem,targerItem</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentItem = targerItem.parentNode;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(parentItem.lastChild == targerItem)&#123;</span><br><span class=\"line\">    parentItem.appendChild(newItem);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    parentItem.insertBefore(newItem,targerItem.nextSibling);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://codepen.io/poetries/pen/XpbEOW\">在线演示</a></p>\n<h2 id=\"跨文档操作\"><a href=\"#跨文档操作\" class=\"headerlink\" title=\"跨文档操作\"></a>跨文档操作</h2><hr>\n<ul>\n<li><p><strong>跨文档请求</strong></p>\n</li>\n<li><p>同域跨文档</p>\n<ul>\n<li><code>iframe</code>内页：<ul>\n<li>父页面操作子页面：<code>contentWindow</code></li>\n<li>子页面操作父页面：<code>window.top</code>(找到最顶级的父页面)/<code>parent</code>(第一父页面)</li>\n<li>新窗口页：<ul>\n<li>父页面操作子页面：<code>window.open</code></li>\n<li>子页面操作父页面：<code>window.opener</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>不同域跨文档</strong></p>\n<ul>\n<li><code>postMessage（“发送的数据”,”接收的域”）</code><ul>\n<li><code>message</code>事件监听</li>\n<li><code>ev.origin </code>发送数据来源的域</li>\n<li><code>ev.data </code> 发送的数据</li>\n</ul>\n</li>\n<li>通过判断发送的数据来执行相应的需求</li>\n</ul>\n</li>\n<li><p><strong>ajax跨域</strong></p>\n<ul>\n<li><p><code>XMLHttpRequest</code> 新增功能</p>\n<ul>\n<li>跨域请求：修改服务端头信息<ul>\n<li>I<code>E</code>兼容：<code>XDomaiRequest</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进度事件：</p>\n<ul>\n<li><code>upload.onprogress(ev) </code> 上传进度(实现文件上传进度条)<ul>\n<li><code>ev.total</code>  发送文件的总量</li>\n<li><code>ev.loaded</code> 已发送的量</li>\n</ul>\n</li>\n<li><code>FormData</code>  构建提交二进制数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>拓展阅读</p>\n<ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0ODA2ODU2NQ==&mid=2651130595&idx=2&sn=3d0f546f1867992729b3ace5d03766fc&chksm=f257ca59c520434f08e215b3bdcec3764712f73301b738c18163359e5aa5e949ff019616ffca&mpshare=1&scene=23&srcid=11289XUSBAQzrCp3Io55aoS1#rd\">HTML5 API 大盘点</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录二-HTML5速查表\"><a href=\"#附录二-HTML5速查表\" class=\"headerlink\" title=\"附录二　HTML5速查表\"></a>附录二　HTML5速查表</h2><hr>\n<ul>\n<li><a href=\"http://caniuse.com/#search=canvas\">可以查阅支持H5+CSS3的属性</a></li>\n<li><a href=\"http://www.html5star.com/manual/html5label-meaning/\">HTML5 标签含义之元素周期表</a></li>\n<li><a href=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/15.png\">HTML5标签速查表</a></li>\n<li><a href=\"chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fjonibologna.com%2Fcontent%2Fimages%2Fflexboxsheet.pdf\">展示 flexbox 属性的作用–推荐</a></li>\n<li><a href=\"https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/\">Flexbox 视觉指南–更好更容易地理解 Flexbox 某个属性的作用</a></li>\n</ul>\n<h1 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li><p><code>CSS3</code>发展史简介</p>\n<ul>\n<li><code>HTML</code>的诞生 20世纪90年代初</li>\n<li><code>1996</code>年底，    <code>CSS</code>第一版诞生</li>\n<li><code>1998</code>年<code>5</code>月     <code>CSS2</code>正式发布</li>\n<li><code>2004</code>年     <code>CSS2.1</code>发布</li>\n<li><code>CSS3</code>的发布    <code>2002 </code> <code>2003</code>  <code>2004</code> <code>2005</code>  <code>2007</code> <code>2009</code> <code>2010</code></li>\n</ul>\n</li>\n<li><p><strong>what is CSS3？</strong></p>\n<ul>\n<li>CSS3是CSS2的升级版本，3只是版本号，它在CSS2.1的基础上增加了很多强大的新功能。目前主流浏览器chrome、safari、firefox、opera、甚至360、QQ浏览器都已经支持了CSS3的大部分功能了，IE10以后也开始全面支持CSS3了。</li>\n<li>标准写法：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>前缀</th>\n<th>浏览器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-webkit-</td>\n<td>chrome / safari</td>\n</tr>\n<tr>\n<td>-moz-</td>\n<td>firefox</td>\n</tr>\n<tr>\n<td>-ms-</td>\n<td>IE</td>\n</tr>\n<tr>\n<td>-o-</td>\n<td>opera-</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><strong>CSS的功能</strong></li>\n<li>提供了更加强大且精准的选择器，提供多种背景填充方案，可以实现渐变颜色，可以改变元素的形状、角度等，可以加阴影效果，报纸布局，弹性盒子，ie6混杂模式的盒模型，新的计量单位，动画效果等等……<ul>\n<li>但是css3的兼容性的问题同样也显得格外重要，并不是所有的css3属性都通过了w3c标准，所以……我们需要全面性的查阅兼容性手册<ul>\n<li><a href=\"http://www.runoob.com/cssref/css3-browsersupport.html\">http://www.runoob.com/cssref/css3-browsersupport.html</a></li>\n<li><a href=\"https://caniuse.com/\">https://caniuse.com/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>模块化开发</strong></li>\n<li><code>CSS1</code> 中定义了网页的基本属性：<ul>\n<li>字体、颜色、基本选择器等</li>\n<li><code>CSS2</code>中在<code>CSS1</code>的基础上添加了高级功能<ul>\n<li>浮动和定位、高级选择器等(子选择器、相邻选择器、通用选择器)</li>\n</ul>\n</li>\n<li><code>CSS3</code>遵循的是模块化开发。发布时间并不是一个时间点，而是一个时间段</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><ul>\n<li><strong>伪元素选择器：</strong><ul>\n<li><code>::first-line</code> ：匹配文本块的首行</li>\n<li><code>::first-letter</code> ：选择文本块的首字母</li>\n<li><code>::selection </code>：鼠标光标选择元素内容</li>\n<li><code>::user-selection:none</code>：不让用户选中</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>CSS3结构选择器</strong></p>\n<ul>\n<li><code>nth-child(n)</code>：父元素下的第n个子元素</li>\n<li><code>nth-child(odd)</code>：奇数子元素同<code>nth-child(2n-1)</code></li>\n<li><code>nth-child(even)</code>：偶数子元素同<code>nth-child(2n)</code></li>\n<li><code>nth-child(an+b)</code>：公式</li>\n<li><code>nth-last-child(n)</code>：倒数第n个子元素</li>\n<li><code>first-of-type</code>：父元素下指定类型的第一个元素</li>\n<li><code>last-of-type</code>：父元素下指定类型的最后一个元素</li>\n<li><code>nth-of-type(n)</code>：父元素下的指定类型的元素的第n个元素</li>\n<li><code>nth-last-of-type</code>：父元素下的倒数第几个指定类型的子元素</li>\n<li><code>first-child</code>：父元素下的第一个子元素、</li>\n<li><code>last-child</code>：父元素下的最后一个子元素</li>\n<li><code>only-child</code>：父元素下的唯一的子元素</li>\n<li><code>only-of-type</code>：选择父元素下指定类型的唯一子元素</li>\n<li><code>E &gt; F</code> E的第一代子元素中是F的</li>\n<li><code>E + F</code>E后面紧挨着的F兄弟节点</li>\n<li><code>E ~ F</code>E后面所有的兄弟节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong><code>Css3</code> 属性选择器</strong></p>\n<ul>\n<li><code>E[attr]</code>：属性名，不确定具体值</li>\n<li><code>E[attr=&#39;value&#39;]</code>：指定属性名，并指定对应属性值</li>\n<li><code>E[attr~=&quot;value&quot;]</code>：指定属性名，其具有多个属性值空格隔开，并包含<code>value</code>值，意思就是在<code>class</code>属性中任意一个位置有<code>value</code>就可以，不必要第一个</li>\n<li><code>E[attr^=&quot;value&quot;]</code>：指定属性名，属性值以<code>value</code>值开头</li>\n<li><code>E[attr$=&quot;value&quot;]</code>：指定属性名，属性值以<code>value</code>值结束</li>\n<li><code>E[attr*=&quot;value&quot;]</code>：指定了属性名，属性值中包含了<code>value</code></li>\n<li><code>E[attr|=&quot;value&quot;]</code>：指定属性名，属性值以<code>value</code>开头</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong><code>CSS3</code>伪类选择器</strong></li>\n<li><code>:before</code>,<code>:after</code>在元素内容前面、后面添加内容(相当于行内元素)<ul>\n<li><strong>UI状态伪类选择器：</strong></li>\n<li><code>:enabled </code>选择启用状态元素<ul>\n<li><code>:disabled</code> 选择禁用状态元素</li>\n<li><code>:checked </code>选择被选中的<code>input</code>元素（单选按钮或复选框）</li>\n<li><code>:default</code> 选择默认元素</li>\n<li><code>:valid</code>、<code>invalid</code> 根据输入验证选择有效或无效的<code>input</code>元素</li>\n<li><code>:in-range</code>、<code>out-of-range</code>选择指定范围之内或者之外受限的元素</li>\n<li><code>:required</code>、<code>optional </code>根据是否允许:<code>required</code>属性选择<code>input</code>元素</li>\n<li><code>:read-only</code>选择只读的元素</li>\n<li><code>read-write</code>选择非只读的元素</li>\n<li><strong>动态伪类选择器：</strong></li>\n<li><code>:link </code>选择链接元素<ul>\n<li><code>:visited</code> 选择用户以访问的元素</li>\n<li><code>:hover</code> 鼠标悬停其上的元素</li>\n<li><code>:active </code>鼠标点击时触发的事件</li>\n<li><code>:focus</code> 当前获取焦点的元素</li>\n</ul>\n</li>\n<li><strong>其他伪类选择器</strong>：<ul>\n<li><code>root</code>：选择文档的根目录、返回<code>html</code></li>\n<li><code>:not(&lt;选择器&gt;) </code>对括号内选择器的选择取反</li>\n<li><code>:lang(&lt;目标语言&gt;)</code> 基于<code>lang</code>全局属性的元素</li>\n<li><code>:target</code> <code>url</code>片段标识符指向的元素</li>\n<li><code>:empty</code>选择内容为空的元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><hr>\n<ul>\n<li><p><strong>CSS文本属性复习</strong></p>\n<ul>\n<li><p><strong>white-space</strong>：对象内空格的处理方式</p>\n<ul>\n<li><p><code>nowrap</code> 控制文本不换行</p>\n</li>\n<li><p><code>pre</code> 空白会被浏览器保留</p>\n</li>\n<li><p><code>pre-line</code> 合并空白  保留换行符</p>\n</li>\n<li><p><code>pre-wrap</code> 保留空白  正常换行</p>\n</li>\n</ul>\n</li>\n<li><p><strong>direction</strong>：文本流的方向</p>\n<ul>\n<li><code>ltr</code> 文本从左向右</li>\n<li><code>rtl</code>  文本从右往左</li>\n</ul>\n</li>\n<li><p><strong>unicode-bidi</strong>：用于同一个页面里存在从不同方向读进的文本显示。与<code>direction</code>属性一起使用</p>\n</li>\n</ul>\n</li>\n<li><p><strong>CSS3新增文本属性</strong></p>\n<ul>\n<li><code>color:rgba()</code>;</li>\n<li><code>text-overflow</code>:是否使用一个省略标记（…）标示对象内文本的溢出</li>\n<li><code>text-align</code>:文本的对齐方式</li>\n<li><code>text-transform</code>:文字的大小写</li>\n<li><code>text-decoration</code>:文本的装饰线，复合属性</li>\n<li><code>text-shadow</code>:文本阴影</li>\n<li><code>text-fill-color</code>:文字填充颜色</li>\n<li><code>text-stroke</code>:复合属性。设置文字的描边</li>\n<li><code>tab-size</code>:制表符的长度</li>\n<li><code>word-wrap</code>:当前行超过指定容器的边界时是否断开转行</li>\n<li><code>word-break</code>:规定自动换行的处理方法</li>\n<li><code>font-face</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>text-overflow</strong>：是否使用一个省略标记（<code>...</code>）标示对象内文本的溢出</p>\n<ul>\n<li><code>clip</code>： 默认值 无省略号</li>\n<li><code>ellipsis</code>：当对象内文本溢出时显示省略标记（<code>...</code>）。</li>\n</ul>\n</li>\n<li><p><strong>注意</strong>：该属性需配合<code>over-flow:hidden</code>属性(超出处理)还有 <code>white-space:nowrap</code>(禁止换行)配合使用，否则无法看到效果</p>\n</li>\n<li><p><strong>text-align</strong>：文本的对齐方式</p>\n<ul>\n<li><code>left</code>:默认值 左对齐</li>\n<li><code>right</code>:右对齐</li>\n<li><code>center</code>:居中</li>\n<li><code>justify</code>： 内容两端对齐。</li>\n<li><code>start</code>:开始边界对齐</li>\n<li><code>end</code>:结束边界对齐</li>\n</ul>\n</li>\n<li><p><strong>text-transform</strong>：文字的大小写</p>\n<ul>\n<li><strong><code>css1</code></strong><ul>\n<li><code>none</code>：    默认值 无转换 </li>\n<li><code>capitalize</code>：     将每个单词的第一个字母转换成大写 </li>\n<li><code>uppercase</code>：    转换成大写 </li>\n<li><code>lowercase</code>：    转换成小写</li>\n</ul>\n</li>\n<li><strong><code>css3</code></strong><ul>\n<li><code>full-width</code>：    将左右字符设为全角形式。不支持</li>\n<li><code>full-size-kana</code>：将所有小假名字符转换为普通假名。不支持</li>\n<li>例如：土耳其语</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>text-decoration</strong>：文本的装饰线，复合属性(只火狐支持)</p>\n<ul>\n<li><code>text-decoration-line </code>：<ul>\n<li>指定文本装饰的种类。相当于<code>CSS1</code>时的<code>text-decoration</code>属性</li>\n</ul>\n</li>\n<li><code>text-decoration-style</code> ：<ul>\n<li>`指定文本装饰的样式。</li>\n</ul>\n</li>\n<li><code>text-decoration-color</code>：<ul>\n<li>`指定文本装饰的颜色。</li>\n</ul>\n</li>\n<li><code>blink</code>： 指定文字的装饰是闪烁。  <code>opera</code>和<code>firefox</code></li>\n</ul>\n</li>\n<li><p><code>text-decoration</code> : <code>#F00 double overline</code>   <code>CSS3</code>实例</p>\n</li>\n<li><p><strong>text-shadow</strong>：文本阴影</p>\n<ul>\n<li>取值：<code>x </code> <code>y</code>   <code>blur</code> <code>color</code>,……<ul>\n<li><code>x  </code>      横向偏移</li>\n<li><code>y </code>       纵向偏移</li>\n<li><code>blur </code>     模糊距离(灰度)</li>\n</ul>\n</li>\n<li><code>color</code>    阴影颜色</li>\n</ul>\n</li>\n<li><p><strong>text-fill-color</strong>：文字填充颜色</p>\n</li>\n<li><p><strong>text-stroke</strong>：复合属性。设置文字的描边</p>\n<ul>\n<li><code>text-stroke-width</code>:文字的描边厚度 </li>\n<li><code>text-stroke-color</code>:文字的描边颜色 </li>\n</ul>\n</li>\n<li><p><strong>tab-size</strong>：制表符的长度   </p>\n<ul>\n<li>默认值为<code>8</code>(一个<code>tab</code>键的空格字节长度)，在    <code>pre</code>标签之内才会有显示</li>\n</ul>\n</li>\n<li><p><strong>word-wrap</strong>：当前行超过指定容器的边界时是否断开转行</p>\n<ul>\n<li><code>normal</code>： 默认值</li>\n<li><code>break-word</code>：在长单词或 URL 地址内部进行换行。</li>\n<li>允许内容顶开或溢出指定的容器边界。 </li>\n</ul>\n</li>\n<li><p><strong>break-word</strong>：内容将在边界内换行。如果需要，单词内部允许断行</p>\n<ul>\n<li><code>normal</code>： 使用浏览器默认的换行规则</li>\n<li><code>break-all</code>：允许在单词内换行</li>\n<li><code>keep-all</code>：只能在半角空格或连字符处换行</li>\n</ul>\n</li>\n<li><p><strong>font-face</strong></p>\n</li>\n</ul>\n<pre><code>- 自定义字体\n\n- ```css\n    @font-face &#123;\n        font-family:&#39;myFirstFamily&#39;; // 字体名字\n        src: url(&#39;./Christmas Day Personal Use.ttf&#39;); // 字体路径\n    &#125;\n    \n    兼容\n    @font-face &#123;\n        font-family: &#39;diyfont&#39;;\n        src: url(&#39;diyfont.eot&#39;); /* IE9+ */\n        src: url(&#39;diyfont.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;), /* IE6-IE8 */\n             url(&#39;diyfont.woff&#39;) format(&#39;woff&#39;), /* chrome、firefox */\n             url(&#39;diyfont.ttf&#39;) format(&#39;truetype&#39;), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n             url(&#39;diyfont.svg#fontname&#39;) format(&#39;svg&#39;); /* iOS 4.1- */\n    &#125;\n    \n    http://www.w3cplus.com/content/css3-font-face\n    <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    - `format`: 此值指的是你自定义的字体的格式，主要用来帮助浏览器识别浏览器对`@font-face`的兼容问题，这里涉及到一个字体`format`的问题，因为不同的浏览器对字体格式支持是不一致的，浏览器自身也无法通过路径后缀来判断字体</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 背景</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">- **CSS背景属性复习**</span><br><span class=\"line\">  </span><br><span class=\"line\">\t- `background`:</span><br><span class=\"line\">\t  - `background-color`:背景颜色</span><br><span class=\"line\">\t  - `background-image`:背景图片</span><br><span class=\"line\">\t  - `background-repeat`:背景重复</span><br><span class=\"line\">\t  - `background-position`:背景定位</span><br><span class=\"line\">  - `background-attachment`:背景固定(`scroll/fixed)`</span><br><span class=\"line\">  </span><br><span class=\"line\">- **CSS3新增背景属性**</span><br><span class=\"line\"></span><br><span class=\"line\">- **bakground-size**：背景尺寸</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t- 设置背景图片的大小，以长度值或百分值或百分比显示，还可以通过`cover`和`contain`来对图片进行伸缩</span><br><span class=\"line\">\t- 语法：</span><br><span class=\"line\">    - **background-size**:` auto `| `&lt;长度值&gt;` | `&lt;百分比&gt; `| `cover` | `contain`</span><br><span class=\"line\">- 属性：</span><br><span class=\"line\">\t  - `auto`：默认值，不改变背景图片的原始高度和宽度</span><br><span class=\"line\">\t  - `&lt;长度值&gt;`: 成对出现如`200px` `50px`，将背景图片宽高一次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放</span><br><span class=\"line\">\t  - `&lt;百分比&gt;`: `0%~100%`之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；</span><br><span class=\"line\">\t  - `cover`: 用一张图片铺满整个背景，如果比例不符，则截断图片</span><br><span class=\"line\">\t  - `contain`: 尽量让背景内，存在一整张图片</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 多背景</span><br><span class=\"line\">  </span><br><span class=\"line\">  - `background-image:url(1.jpg),url(2.jpg)`;</span><br><span class=\"line\">  </span><br><span class=\"line\">- **background-origin** ：背景区域定位</span><br><span class=\"line\">  </span><br><span class=\"line\">  - 背景图片的起始位置</span><br><span class=\"line\">  - 原来的背景图片是从`padding`区域开始引入的，可以使用这个属性来更改引入区域</span><br><span class=\"line\">  - `border-box`： 从`border`区域开始显示背景。 </span><br><span class=\"line\">  - `padding-box`： 从`padding`区域开始显示背景。 </span><br><span class=\"line\">  - `content-box`： 从`content`内容区域开始显示背景。</span><br><span class=\"line\">  </span><br><span class=\"line\">- **background-clip** ：背景绘制区域</span><br><span class=\"line\"></span><br><span class=\"line\">  - 裁剪背景</span><br><span class=\"line\"></span><br><span class=\"line\">    - `border-box`： 从`border`区域向外裁剪背景。 </span><br><span class=\"line\">    - `padding-box`： 从`padding`区域向外裁剪背景。 </span><br><span class=\"line\">    - `content-box`： 从`content`区域向外裁剪背景。 </span><br><span class=\"line\">    - 分别表示从边框、内边距和内容区域往外裁剪背景，`no-clip`表示不裁切和参数`border-box`显示同样的效果。`background-clip`默认值为`border-box`</span><br><span class=\"line\"></span><br><span class=\"line\">  - `text`:背景填充文本</span><br><span class=\"line\"></span><br><span class=\"line\">    - `background-clip: text`;</span><br><span class=\"line\"></span><br><span class=\"line\">    - 从前景内容的形状作为裁剪区域向外裁剪，如此即可实现使用背景作为填充色之类的遮罩效果</span><br><span class=\"line\"></span><br><span class=\"line\">    - 注意它是-webkit-独有的属性，且必须配合`-text-fill-color-`属性</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```css</span><br><span class=\"line\">        -webkit-background-clip: text;</span><br><span class=\"line\">        -webkit-text-fill-color: transparent;</span><br><span class=\"line\">        text-fill-color: -webkit-background-clip;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ul>\n<li><strong>颜色渐变</strong><ul>\n<li><strong>线性渐变</strong>：<code>linear-gradient</code>(起点/角度 半径，颜色 位置，…,)<ul>\n<li>起点：<code>left/top/right/bottom/left top...... </code>默认<code>top</code></li>\n<li>角度：逆时针方向 <code>0-360deg</code>（度），起点和角度一样</li>\n<li>半径：可以控制渐变圆的大小</li>\n<li>颜色 位置：<code>red 50%</code>, <code>blue 100%</code>(红色从50%渐变到100%为蓝色)</li>\n<li><code>repeating-linear-gradient</code>  线性渐变重复平铺</li>\n<li><code>IE</code>低版本渐变(滤镜)：</li>\n<li><code>filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=&#39;#ffffff&#39;,endColorstr=&#39;#ff0000&#39;,GradientType=&#39;1&#39;);</code></li>\n</ul>\n</li>\n<li><strong>径向渐变</strong>：<code>radial-gradient</code>(起点(圆心位置) at 形状/半径/大小,  颜色1,  颜色2)<ul>\n<li>起点：<code>left/top/right/bottom</code>或具体值/百分比</li>\n<li>形状：<code>ellipse</code>(椭圆)、<code>circle</code>(正圆)</li>\n<li>形状\\半径\\大小：具体数值或百分比，也可以是关键字（<code>closest-side</code>(最近端), <code>closest-corner</code>最近角), <code>farthest-side</code>(最远端), f<code>arthest-corner</code>(最远角), <code>contain</code>(包含) ,<code>cover</code>(覆盖)）;</li>\n<li>颜色 位置：<code>red 50%</code>, <code>blue 100%</code>(红色从50%渐变到100%为蓝色)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><hr>\n<ul>\n<li><strong>CSS颜色属性复习</strong><ul>\n<li><code>color name </code>    颜色英文名称命名</li>\n<li><code>HEX</code>方式         十六进制方式</li>\n<li><code>rgb</code>方式           三原色配色方式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rgba-颜色\"><a href=\"#rgba-颜色\" class=\"headerlink\" title=\"rgba()颜色\"></a>rgba()颜色</h3><ul>\n<li><p><code>RGB</code>是一种色彩标准，是由红<code>(R)</code>、绿<code>(G)</code>、蓝<code>(B)</code>的变化以及相互叠加来得到各式各样的颜色。<code>RGBA</code>是在<code>RGB</code>的基础上增加了控制<code>alpha</code>透明度的参数。</p>\n</li>\n<li><p>语法：<code>color: rgba(R, G, B, A)</code></p>\n<ul>\n<li>以上<code>R</code>、<code>G</code>、<code>B</code>三个参数，正整数值的取值范围为：0 - 255。百分数值的取值范围为：0.0% - 100.0%。超出范围的数值将被截至其最接近的取值极限。并非所有浏览器都支持使用百分数值。<code>A</code>为透明度参数，取值在0~1之间，不可为负值。</li>\n</ul>\n</li>\n<li><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>颜色</th>\n<th>颜色</th>\n<th>取值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>red</td>\n<td>红色</td>\n<td>0-255</td>\n</tr>\n<tr>\n<td>g</td>\n<td>green</td>\n<td>绿色</td>\n<td>0-255</td>\n</tr>\n<tr>\n<td>b</td>\n<td>blue</td>\n<td>蓝色</td>\n<td>0-255</td>\n</tr>\n<tr>\n<td>a</td>\n<td>alpha</td>\n<td>透明</td>\n<td>0-1</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"HSL模式-HSLA-模式\"><a href=\"#HSL模式-HSLA-模式\" class=\"headerlink\" title=\"HSL模式  HSLA 模式\"></a>HSL模式  HSLA 模式</h3><ul>\n<li><p><code>H</code>： <code>Hue</code>(色调)。</p>\n<ul>\n<li>0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：<code>0 - 360</code> </li>\n</ul>\n</li>\n<li><p><code>S</code>：<code> Saturation</code>(饱和度)。取值为：0.0% - 100.0% </p>\n</li>\n<li><p><code>L</code>： <code>Lightness</code>(亮度)。取值为：0.0% - 100.0%</p>\n</li>\n<li><p><code>A</code>:    <code>alpha  </code>   透明度   0~1之间</p>\n</li>\n<li><p>语法:<code>HSLA(H,S,L,A)</code></p>\n</li>\n<li><p>HSL色轮</p>\n<ul>\n<li><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/11.png\" alt=\"HSL色轮\"></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>透明颜色：<code>transparent</code></strong></p>\n<ul>\n<li>实例：<code>border</code>实现三角箭头、风车等</li>\n</ul>\n</li>\n<li><p><strong>透明度：</strong></p>\n<ul>\n<li><code>opacity</code></li>\n<li>取值：<code>0-1</code>之间</li>\n<li>注：低版本的<code>IE</code>浏览器不兼容,需用IE浏览器的滤镜实现相同效果，<code>filter:alpha(opacity=50)</code></li>\n<li>对于低版本的火狐浏览器需添加内核前缀，<code>-moz-opacity</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h2><hr>\n<h3 id=\"圆角\"><a href=\"#圆角\" class=\"headerlink\" title=\"圆角\"></a>圆角</h3><hr>\n<ul>\n<li>边框圆角<ul>\n<li>在<code>CSS2</code>中添加圆角矩形需要技巧。我们必须为每个圆角使用不同的图片</li>\n<li>在 <code>CSS3 </code>中，创建圆角是非常容易的</li>\n<li>在<code>CSS3</code>中，<code>border-radius </code>属性用于创建圆角</li>\n</ul>\n</li>\n<li><strong>border-radius</strong>：边框圆角写法<ul>\n<li><code>border-radius: 2em 1em 4em / 0.5em 3em;</code></li>\n<li>等价于<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">0.5em</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">4em</span> <span class=\"number\">0.5em</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"边框系列-图片\"><a href=\"#边框系列-图片\" class=\"headerlink\" title=\"边框系列-图片\"></a>边框系列-图片</h3><hr>\n<ul>\n<li><strong>border-image</strong>：语法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>版本</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>border-image</code></td>\n<td>CSS3</td>\n<td>设置或检索对象的边框使用图像来填充</td>\n</tr>\n<tr>\n<td><code>border-image-source</code></td>\n<td>CSS3</td>\n<td>设置或检索对象的边框是否用图像定义样式或图像来源路径</td>\n</tr>\n<tr>\n<td><code>border-image-slice</code></td>\n<td>CSS3</td>\n<td>设置或检索对象的边框背景图的分割方式</td>\n</tr>\n<tr>\n<td><code>border-image-width</code></td>\n<td>CSS3</td>\n<td>设置或检索对象的边框厚度</td>\n</tr>\n<tr>\n<td><code>border-image-outset</code></td>\n<td>CSS3</td>\n<td>设置或检索对象的边框背景图的扩展</td>\n</tr>\n<tr>\n<td><code>border-image-repeat</code></td>\n<td>CSS3</td>\n<td>设置或检索对象的边框图像的平铺方式</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong><code>border-image-slice</code></strong><ul>\n<li>设置或检索对象的边框背景图的分割方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/12.png\" alt=\"Paste_Image.png\"></p>\n<ul>\n<li><strong><code>border-image-repeat</code></strong><ul>\n<li>用于指定边框背景图的重复方式</li>\n<li>取值：<ul>\n<li><code>stretch</code>： 指定用拉伸方式来填充边框背景图。 *默认的</li>\n<li><code>repeat</code>： 指定用平铺方式来填充边框背景图。当图片碰到边界时，如果超过则被截断。 </li>\n<li><code>round</code>： 指定用平铺方式来填充边框背景图。图片会根据边框的尺寸动态调整图片的大小    直至正好可以铺满整个边框。写本文档时仅Firefox能看到该效果 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"布局-盒模型\"><a href=\"#布局-盒模型\" class=\"headerlink\" title=\"布局/盒模型\"></a>布局/盒模型</h2><hr>\n<h3 id=\"columns\"><a href=\"#columns\" class=\"headerlink\" title=\"columns\"></a>columns</h3><ul>\n<li><p>多列布局</p>\n</li>\n<li><p>为了能在<code>Web</code>页面中方便实现类似报纸、杂志那种多列排列的布局，<code>W3C</code>特意给<code>CSS3</code>增加了一个多列布局模块（<code>CSS Multi Column Layout Module</code>）。它主要应用在文本的多列布局方面，这种布局在报纸和杂志上都使用了几十年了，但要在Web页面上实现这样的效果还有有相当大的难度，庆幸的是，CSS3的多列布局可以轻松实现</p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p><strong>columns:</strong></p>\n<ul>\n<li><p><code>columns</code> ：宽度 列数; 混合属性</p>\n<ul>\n<li>例如：<code>columns:200px 3</code></li>\n</ul>\n</li>\n<li><p><code>column-width</code>： 指的是每一列的宽度，根据容器宽度自适应</p>\n</li>\n<li><p><code>column-count</code> ：指定规定的列数，唯一精准的是列数</p>\n<ul>\n<li><em>column-width和column-count两个不要一起使用，会混乱</em></li>\n</ul>\n</li>\n<li><p><strong>column-gap</strong>：列宽</p>\n<ul>\n<li>设置列与列之间的宽度，直接用数值表示即可</li>\n<li>用来设置列与列的间距，如果没有显示设置column-gap值时，其值大小会根据浏览器默认的font-size来决定</li>\n<li><code>column-width </code>= <code>(width - (n - 1) * font - size) / n</code><ul>\n<li><code>n</code>是几列</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>column-rule</strong>：列的边框 </p>\n<ul>\n<li><p><code>column-rule</code>: 宽度  线的类型  颜色</p>\n<ul>\n<li>例：<code>column-rule:1px solid #ccc</code></li>\n</ul>\n</li>\n<li><p>不占用任何空间位置，在列与列之间改变其宽度不会改变任何列的位置。</p>\n</li>\n<li><p><code>column-rule-width </code></p>\n<ul>\n<li>用来定义列边框的宽度，其默认值为<code>medium</code></li>\n<li>接收浮点数，但是不接受负值</li>\n<li>属性值：<code>medium</code>、<code>thick</code>、<code>thin</code></li>\n</ul>\n</li>\n<li><p><code>column-rule-style</code></p>\n<ul>\n<li>样式</li>\n<li>定义列边框样式，其默认值为“none”</li>\n<li><code>column-rule-style</code>：属性值与<code>border-style</code>属性值相同</li>\n<li>属性值：<code>none</code>、<code>hidden</code>、<code>dotted</code>、<code>dashed</code>、<code>solid</code>、<code>double</code>、<code>groove</code>、<code>ridge</code>、<code>inset</code>、<code>outset</code></li>\n</ul>\n</li>\n<li><p><code>column-rule-color</code> 颜色</p>\n</li>\n</ul>\n</li>\n<li><p><strong>column-span</strong>：<code>1</code> / <code>all</code></p>\n<ul>\n<li>只可以跨<code>1</code>列或者所有列</li>\n<li>设置多列布局元素内的子元素，可以跨列，类似标题效果。即一个新闻标题要横跨所有内容列。</li>\n<li>注：此属性要在子元素上设置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h3><ul>\n<li><p>在<code>CSS</code>中盒模型分为两种，第一种是W3C的标准盒模型，另一种是IE6混杂模式的传统模型。他们都是对元素计算尺寸的模型。但他们的不同是计算的方式不同。</p>\n</li>\n<li><p><strong>W3C标准盒模型</strong></p>\n<ul>\n<li><p><code>element</code>空间高度（盒子）= <code>width </code>+ <code>padding</code> + <code>border</code></p>\n</li>\n<li><p><code>width</code>为内容高度。即<code>width</code>不包括<code>padding</code>和<code>border</code></p>\n</li>\n<li><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/w3c.jpg\" alt=\"标准盒子模型\"></p>\n</li>\n</ul>\n</li>\n<li><p><strong>IE6混杂模式盒模型</strong></p>\n<ul>\n<li>内容高度（盒子） = <code>width</code> - <code>padding</code> - <code>border</code></li>\n<li><code>width</code>的数值就是<code>element</code>盒子的空间高度，<code>width</code>包括了<code>padding</code>和<code>border</code></li>\n<li><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/ie.jpg\" alt=\"IE盒子模型\"></li>\n</ul>\n</li>\n<li><p><strong>box-shadow</strong>:<code>inset</code> <code>x</code> <code>y</code> <code>blur</code> <code>spread</code> <code>color</code></p>\n<ul>\n<li><code>inset</code>：投影方式</li>\n<li><code>inset</code>：内投影</li>\n<li><code>outset</code>：外投影 默认(不能设置)</li>\n<li><code>x</code>、<code>y</code>：阴影偏移</li>\n<li><code>blur</code>：模糊半径（灰度）</li>\n<li><code>spread</code>：扩展阴影半径</li>\n<li>先扩展原有形状，再开始画阴影</li>\n<li><code>color</code></li>\n</ul>\n</li>\n<li><p><strong>box-reflect</strong>：倒影</p>\n<ul>\n<li>方向 <code> above | below | left | right;</code></li>\n<li>距离<ul>\n<li>渐变（可选）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"弹性盒子\"><a href=\"#弹性盒子\" class=\"headerlink\" title=\"弹性盒子\"></a>弹性盒子</h3><ul>\n<li>有主轴<code>（x）</code>侧轴 / 交叉轴<code>（y）</code></li>\n<li>给父级设置的<code>diaplay:flex</code>叫<code>flex</code>盒子，它里面的盒子叫做<code>flex</code>项目</li>\n<li><code>display: flex</code>：给父级设置盒子属性</li>\n<li><code>flex</code> 是一个复合属性，且必须配合父元素<code>display: flex</code>使用</li>\n<li><strong>以下六个属性是设置在项目（子元素）上的：</strong><ul>\n<li><strong>flex-grow</strong> ：放大比例<ul>\n<li>进行比例的分配，定义项目的放大比例，默认为0，即如果存在剩余空间，也放大</li>\n<li>根据所设置的比例分配盒子剩余的空间</li>\n</ul>\n</li>\n<li><strong>flex-shrink</strong>：缩小比例<ul>\n<li>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</li>\n<li>设置元素的收缩比例——多出盒子的部分，按照比例的大小砍掉相应的大小，即比例越大，被砍得越大，默认值<code>1</code></li>\n<li>缩减的宽度 = <code>(flex-shrink1 * width1) / (flex-shrink2 * width1 + flex-shrink2 * width2) * moveWidth</code></li>\n</ul>\n</li>\n<li><strong>flex-basis</strong>：伸缩基准值<ul>\n<li>伸缩基准值，项目占据主轴空间</li>\n<li>定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>），浏览器根据这个属性，计算主轴是否有多余空间，他的默认值为<code>auto</code>，即项目本来大小</li>\n<li>该属性设置元素的宽度或高度，当然<code>width</code>也可以用来设置元素宽度，如果元素上同时出现了<code>width</code>和<code>flex-basis</code>那么<code>flex-basis</code>会覆盖width的值</li>\n<li>子元素宽度尽可能按照<code>basis</code>来如果基准值相加大于容器宽度那么下面由下面公式分配宽度给子元素</li>\n<li><code>（flex-basis / (flex - basis 相加） * 容器的宽度)</code></li>\n</ul>\n</li>\n<li><strong>flex</strong>：是<code>flex-frow</code>，<code>flex-shrink</code>，<code>flex-basis</code>的简写<ul>\n<li>默认值为：<code>flex:0 1 auto</code></li>\n<li>常用简化写法<ul>\n<li><code>flex:1</code>;  ——  <code>flex:1 1 0%</code>;</li>\n<li><code>flex:3</code>;  ——  <code>flex:3 1 0%</code>;</li>\n<li><code>flex:auto</code>; —— <code>flex: 1 1 auto</code>;</li>\n<li><code>flex:none</code>; —— <code>flex: 0 0 auto</code>;</li>\n</ul>\n</li>\n<li><code>flexbox</code>布局和原来的布局是两个概念，部分<code>css</code>属性在<code>flexbox</code>盒子里面不起作用，<code>float</code>，<code>clear</code>，<code>column</code>，<code>vertical-align</code>等等</li>\n<li>建议使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</li>\n<li>真实情况<ul>\n<li><code>son1</code> = (<code>flex-shrink</code>) * <code>flex-basis</code></li>\n<li><code>son2</code> = (<code>flex-shrink</code>) * <code>flex-basis</code></li>\n<li><code>sonN</code> = (<code>flex-shrink</code>) * <code>flex-basis</code></li>\n<li>加权值 = <code>son1</code> + <code>son2</code> + …… + <code>sonN</code></li>\n<li>压缩的宽度 <code>w</code> = (子元素<code>flex</code> - <code>basis</code>值  * （<code>flex-shrink</code>) / 加权值) * 溢出值</li>\n<li>缩减值1：(<code>flex-basis1 * 1</code> / 加权值) * 溢出值</li>\n<li>缩减值2：(<code>flex-basis2 * 2</code> / 加权值) * 溢出值</li>\n<li>缩减值3：(<code>flex-basis3 * 3</code> / 加权值) * 溢出值</li>\n<li>最后<code>son1</code>、<code>son2</code>、<code>son3</code>的实际宽度为：<ul>\n<li><code>flex-basis</code> - 缩减值 <code>n</code> = <code>son n</code> 真实宽度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>order</strong>：排列顺序<ul>\n<li><code>number</code>定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li>\n</ul>\n</li>\n<li><strong>align-self</strong> ：单个项目对齐方式<ul>\n<li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性，默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></li>\n<li><code>auto</code>：自动排序</li>\n<li><code>flex-start</code>：最开始的位置排序</li>\n<li><code>flex-end</code>：最后的位置排序</li>\n<li><code>center</code>：中间排序</li>\n<li><code>baseline</code>：以第一行文字的基准线对齐</li>\n<li><code>stretch</code>：如果项目未设置高度或设置为<code>auto</code>，将占满整个父级容器的高度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>以下六个属性设置在容器上</strong><ul>\n<li><strong>flex-direction</strong>：决定主轴方向<ul>\n<li>决定主轴的方向，即项目的排列方向</li>\n<li><code>row</code>：（默认值）主轴为水平方向，起点在左端</li>\n<li><code>row-reverse</code>：主轴为水平方向，起点在右端</li>\n<li><code>column</code>：主轴为垂直方向，起点在上沿</li>\n<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li>\n</ul>\n</li>\n<li><strong>flex-wrap</strong> 是否换行<ul>\n<li>默认情况下，项目都排在一条线（又称“轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</li>\n<li><code>nowrap</code>：（默认）：不换行</li>\n<li><code>wrap</code>：换行，第一行在上方</li>\n<li><code>wrap-reverse</code>：换行，第一行在下方</li>\n</ul>\n</li>\n<li><strong>flex-flow</strong>  <ul>\n<li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row</code> <code>nowrap</code></li>\n</ul>\n</li>\n<li><strong>justify-content</strong><ul>\n<li>定义了项目在主轴上的对齐方式</li>\n<li><code>flex-start</code>：左对齐</li>\n<li><code>flex-end</code>：右对齐</li>\n<li><code>center</code>：居中</li>\n<li><code>space-between</code>：两端对齐，项目之间的间隔都相等</li>\n<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>\n</ul>\n</li>\n<li><strong>align-items</strong><ul>\n<li>定义项目在侧轴上的对齐方式</li>\n<li><code>flex-start</code>：交叉轴的起点对齐</li>\n<li><code>flex-end</code>：交叉轴的中点对齐</li>\n<li><code>center</code>：交叉轴的中点对齐</li>\n<li><code>baseline</code>：项目的第一行文字的基线对齐</li>\n<li><code>stretch</code>：（默认值）：如果项目未设置高度或设置为<code>auto</code>，将占满整个容器的高度</li>\n</ul>\n</li>\n<li><strong>align-content</strong><ul>\n<li>定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用</li>\n<li><code>flex-start</code>：与交叉轴的起点对齐</li>\n<li><code>flex-end</code>：与交叉轴的终点对齐</li>\n<li><code>center</code>：与交叉轴的中点对齐</li>\n<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布</li>\n<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以轴线之间的间隔比轴线与边框的间隔大一倍</li>\n<li><code>stretch</code>：（默认值）：轴线沾满整个交叉轴</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/10.png\" alt=\"flex布局语法篇小结\"></p>\n<ul>\n<li>拓展阅读<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">flex布局语法篇</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\">flex布局实例篇</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运动体系\"><a href=\"#运动体系\" class=\"headerlink\" title=\"运动体系\"></a>运动体系</h2><hr>\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><hr>\n<ul>\n<li>过渡：给改变添加过程<ul>\n<li>什么是过渡</li>\n<li>过渡效果由哪几部分组成</li>\n<li>过渡可以干些什么</li>\n</ul>\n</li>\n<li><strong>transition</strong>： 过渡属性<ul>\n<li><code>transition: property duration timing-function delay</code>;</li>\n<li><strong>transition-property</strong>：过渡属性的名称<pre><code>- `none `  没有过渡属性\n- `all  `      所有属性都过渡(默认值)\n- `property `   具体属性名称(`property1`,`property2`...)\n</code></pre>\n</li>\n<li><strong>transition-duration</strong>：过渡属性花费的时间<ul>\n<li><code>time </code>  秒或毫秒</li>\n</ul>\n</li>\n<li><strong>transition-delay</strong>：过渡效果延迟时间</li>\n<li><strong>transition-timing-function</strong>：过渡效果速度曲线<ul>\n<li><code>time </code>  秒或毫秒</li>\n<li><code>linear</code>:规定以相同速度开始至结束的过渡效果（等于 <code>cubic-bezier(0,0,1,1)</code>）。</li>\n<li><code>ease</code>:规定慢速开始，然后变快，然后慢速结束的过渡效果（<code>cubic-bezier(0.25,0.1,0.25,1)</code>）。</li>\n</ul>\n</li>\n<li><code>ease-in</code>:规定以慢速开始的过渡效果（等于 <code>cubic-bezier(0.42,0,1,1)</code>）。<ul>\n<li><code>ease-out</code>    :规定以慢速结束的过渡效果（等于 <code>cubic-bezier(0,0,0.58,1)</code>）。</li>\n<li><code>ease-in-out</code> :规定以慢速开始和结束的过渡效果（等于 <code>cubic-bezier(0.42,0,0.58,1)</code>）。</li>\n<li><code>cubic-bezier(n,n,n,n)</code>:在 <code>cubic-bezier</code> 函数中定义自己的值。可能的值是 <code>0 </code>至 <code>1</code> 之间的数值。</li>\n</ul>\n</li>\n<li>过渡完成事件   </li>\n</ul>\n</li>\n<li><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/13.png\" alt=\"过渡完成事件\"><pre><code>  - `Webkit`内核： \n      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">obj.addEventListener(<span class=\"string\">&#x27;webkitTransitionEnd&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n  \n  - 标准: \n  \n      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">obj.addEventListener(<span class=\"string\">&#x27;transitionend&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><hr>\n<ul>\n<li>什么是<code>CSS3</code> 动画？<ul>\n<li>通过 <code>CSS3</code>，我们能够创建动画，这可以在许多网页中取代动画图片、<code>Flash</code> 动画以及 <code>JavaScript</code></li>\n</ul>\n</li>\n<li><code>animation</code> 动画会按照<code>keyframes</code>关键帧里面指定的帧状态而过渡执行。0% —— 100% 代表动画的时间过渡</li>\n<li><strong>动画接口</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@keyframes</td>\n<td>规定动画。</td>\n</tr>\n<tr>\n<td>animation</td>\n<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n</tr>\n<tr>\n<td>animation-name</td>\n<td>规定 @keyframes 动画的名称。</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>规定动画完成一个周期所花费的秒或毫秒。</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>规定动画的速度曲线（速率）。</td>\n</tr>\n<tr>\n<td>animation-delay</td>\n<td>规定动画延迟时间</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>规定动画被播放的次数。 infinite（无限次）number（有限次）</td>\n</tr>\n<tr>\n<td>animation-direction</td>\n<td>规定动画的方向。</td>\n</tr>\n<tr>\n<td>animation-play-state</td>\n<td>规定动画是否正在运行或暂停。running（播放）paused（暂停）</td>\n</tr>\n<tr>\n<td>animation-fill-mode</td>\n<td>规定对象动画时间之外的状态。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><strong>animation-direction</strong>:  方向</p>\n<ul>\n<li><code>normal</code>：0%-100%）</li>\n<li><code>reverse</code>：（100%-0%）</li>\n<li><code>alternate</code>：（奇数次正向，偶数次反向）</li>\n<li><code>alternate-reverse</code>：（奇数次反向，偶数次正向） </li>\n</ul>\n</li>\n<li><p><strong>animation-timing-function速度曲线</strong></p>\n<ul>\n<li><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>linear</td>\n<td>动画从头到尾的速度是相同的。</td>\n</tr>\n<tr>\n<td>ease</td>\n<td>默认。动画以低速开始，然后加快，在结束前变慢。</td>\n</tr>\n<tr>\n<td>ease-in</td>\n<td>动画以低速开始。</td>\n</tr>\n<tr>\n<td>ease-out</td>\n<td>动画以低速结束。</td>\n</tr>\n<tr>\n<td>ease-in-out</td>\n<td>动画以低速开始和结束。</td>\n</tr>\n<tr>\n<td>cubic-bezier(n,n,n,n)</td>\n<td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p><strong>animation-fill-mide</strong>:  定义在动画开始之前和结束之后发生的操作</p>\n<ul>\n<li><code>forwards</code>：动画在结束后停留在最后的关键帧的位置</li>\n<li><code>backwards</code>：会在向元素应用动画样式时迅速应用动画的初始帧，意思是是否立即使用关键帧（结合延迟1s来看）</li>\n<li><code>both</code>：元素动画同时拥有<code>forwards</code>和<code>backwards</code>效果</li>\n<li><code>none</code>：默认值，表示动画按照预期进行，完成最后一帧时，反转到初始处</li>\n</ul>\n</li>\n<li><p>在谷歌浏览器里面需要加上<code>-webkit-</code><br><code>IE6,7,8,9</code>不支持<code>css3</code>运动</p>\n</li>\n</ul>\n<h3 id=\"transform-2D转换\"><a href=\"#transform-2D转换\" class=\"headerlink\" title=\"transform 2D转换\"></a>transform 2D转换</h3><hr>\n<ul>\n<li><strong><code>Css3</code>平面转换方法</strong><ul>\n<li><code>translate() </code>：移动</li>\n<li><code>rotate</code>：旋转</li>\n<li><code>scale()</code>：缩放</li>\n<li><code>skew()</code>：翻转</li>\n<li><code>matrix()    </code>：矩阵</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>transform:</strong><ul>\n<li><strong>rotate()</strong>  旋转函数/方法 (deg)</li>\n<li>以x/y/z轴进行旋转，默认为z轴<ul>\n<li><code>deg</code>  度数</li>\n</ul>\n</li>\n<li>用于旋转元素角度</li>\n<li>例：<code>rotate(30deg) </code> 把元素顺时针旋转 30 度<ul>\n<li><code>rotatex()</code>，<code>rotatey()</code>，<code>rotatez()</code> ，<code>rotate3d(x, y, z, angle)</code></li>\n</ul>\n</li>\n<li><code>angle</code>是旋转角度</li>\n<li><strong>skew(X,Y)</strong> 倾斜函数 / 翻转方法 (deg) <pre><code> - `skewX()`\n</code></pre>\n<ul>\n<li><code>skewY()</code></li>\n<li>通过 <code>skew() </code>方法，元素翻转给定的角度</li>\n<li>例：<code>transform: skew(30deg,20deg);</code><ul>\n<li>把元素围绕 <code>X </code>轴把元素翻转<code> 30</code> 度，围绕 <code>Y</code> 轴翻转 <code>20 </code>度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>**scale(X,Y)**：缩放函数 / 尺寸方法 (正数、负数和小数)<ul>\n<li><code>scaleX()</code></li>\n<li><code>scaleY()</code></li>\n<li>方法用于改变元素尺寸</li>\n<li>例：<code>scale(2,4)</code> <ul>\n<li>把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍</li>\n</ul>\n</li>\n<li><code>scalex()</code>, <code>scaley()</code>, <code>scalez()</code>值是数字表示倍数，不加任何单位</li>\n<li><code>scale3d()</code> –&gt; <code>scale3d(x, y, z)</code></li>\n</ul>\n</li>\n<li><strong>translate(X,Y)</strong> 位移函数 / 位置方法(px)<ul>\n<li><code>translateX()</code></li>\n<li><code>translateY()</code></li>\n<li>用于移动元素位置<ul>\n<li>例：<code>translate(50px,100px)</code></li>\n</ul>\n</li>\n<li>把元素从左侧移动 50 像素，从顶端移动 100 像素。</li>\n<li>其实有些类似于我们的相对定位</li>\n<li><code>translatex()</code>,<code> translatey()</code>, <code>translatez()</code>, <code>translate3d(x, y, z)</code></li>\n</ul>\n</li>\n<li><strong>transform-origin</strong><ul>\n<li>变换原点</li>\n<li>任何一个元素都有一个中心点，默认情况下，其中心点是居于元素x轴和y轴的50%处</li>\n<li>取值<ul>\n<li>也可以使用像素值</li>\n<li><code>top</code> = <code>top</code> <code>center</code> = <code>center top</code> = <code>50% 0</code></li>\n<li><code>right</code> = <code>right center</code> = <code>center right</code> = <code>100% | 100% 50%</code></li>\n<li><code>bottom</code> = <code>bottom center</code> = <code>center bottom = 50% 100%</code></li>\n<li><code>left</code> = <code>left center</code> = <code>center left = 0 | 0 50%</code></li>\n<li><code>center</code> = <code>center center</code> = <code>50% | 50% 50%</code></li>\n<li><code>top left</code> = <code>left top</code> = <code>0 0</code></li>\n<li><code>right top</code> = <code>top right</code> = <code>100% 0</code></li>\n<li><code>bottom right</code> = <code>right bottom</code> = <code>100% 100%</code></li>\n<li><code>bottom left</code> = <code>left bottom</code> = <code>0 100%</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"transform-3D转换\"><a href=\"#transform-3D转换\" class=\"headerlink\" title=\"transform 3D转换\"></a>transform 3D转换</h3><hr>\n<ul>\n<li><strong><code>Css3</code>立体转换</strong></li>\n<li><strong>transform-style：</strong><ul>\n<li><em>transform-style属性需要设置在父元素中，高于任何嵌套的变形元素，设置了transform-style的元素，就不能防止子元素溢出设置overflow:hidden，否则会导致preserve-3d失效</em></li>\n<li><strong>flat</strong>：默认，子元素将不保留其<code>3D</code>位置</li>\n<li><strong>preserve-3d</strong>：子元素保留其<code>3D</code>位置<ul>\n<li>建立<code>3D</code>空间（指定元素的子元素展示的场景是在<code>3D</code>场景还是平面(投影)场景）</li>\n<li><code>perspective</code> 视角（指定观察者与z=0平面的距离，从而让元素及子元素看起来有3D透视位置效果<br>值：集体的带单位数值）</li>\n<li><code>Perspective- origin</code> 视角基点 / 视觉中心点<ul>\n<li>值：取值类似于变换基准</li>\n<li>默认值为50% 50%</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>backface-visibility：</strong><ul>\n<li>在元素运动的过程中，能否展示元素的背面</li>\n<li><code>visible</code>：可见</li>\n<li><code>hidden</code>：隐藏</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><ul>\n<li><p><strong>模拟移动端meta</strong></p>\n<ul>\n<li><em><meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,use-scalable=no\"></em></li>\n<li><code>name=&#39;viewport&#39;</code>：视口大小</li>\n<li><code>content=&quot;width=device-width&quot;</code> ：<code>width</code>视口宽度等于设备的宽度</li>\n<li><code>initial-scale=1.0</code>：占的比例大小，1.0就是不放不缩</li>\n<li><code>minimum-scale = 1.0</code>：代表最小能缩到1.0</li>\n<li><code>maximum-scale = 1.0</code>：代表最大能缩到1.0</li>\n<li><code>use-scalable=no</code>：不允许用户进行缩放</li>\n</ul>\n</li>\n<li><p><strong>为什么有媒体查询</strong></p>\n<ul>\n<li>移动端的快速普及完全颠覆了<code>Web</code>涉及领域</li>\n<li>用户不再仅在传统桌面系统上查看<code>Web</code>内容，他们越来越多地使用具有各种尺寸的智能电话、平板电脑和其他设备</li>\n<li><code>Web</code>设计人员的挑战是确保他们的网站不仅是在大屏幕上看起来不错，在小型的电话以及介于它们之间的各种设备上看起来不错</li>\n</ul>\n</li>\n<li><p><strong>什么是媒体查询</strong></p>\n<ul>\n<li>媒体查询是向不同设备提供不同样式的一种方式，它为每种类型的用户提供了最佳的体验</li>\n<li><code>CSS2</code>：<code>media type</code><ul>\n<li><code>media type</code>（媒体类型）是<code>css2</code>中一个非常有用的属性，通过<code>media type</code>我们可以对不同的设备指定特定的样式，从而实现更丰富的界面</li>\n</ul>\n</li>\n<li><code>CSS3</code>：<code>media query</code><ul>\n<li><code>media query</code>是<code>CSS3</code>对<code>media type</code>的增强，事实上我们可以将media query看成是<code>media type+css</code>属性（媒体特征<code>Media features</code>）判断</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>如何使用媒体查询</strong></p>\n<ul>\n<li><p>媒体查询的引用方法</p>\n<ul>\n<li><p><strong>link</strong>标签</p>\n<ul>\n<li>```css<link rel='stylesheet' media='screen and (max-width:800px)' href='index.css'> \n\n媒体类型（Media Type）：all（全部）、screen（屏幕）、print（页面打印或打印预览模式）媒体特性（Media features）：width（渲染区宽度）、device-width（设备宽度）<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      - `Media Query`是`CSS3`对`Media Type`的增强版，其实可以将`Media Query`堪称`Media Type`（判断条件）+ `CSS`（符合条件的样式规则）</span><br><span class=\"line\"></span><br><span class=\"line\">    - **@import**</span><br><span class=\"line\"></span><br><span class=\"line\">      - **@media**</span><br><span class=\"line\"></span><br><span class=\"line\">        - `@media screen and (max-width:800px) and (min-width:600px) &#123;&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">- **媒体类型（Media Type）**</span><br><span class=\"line\"></span><br><span class=\"line\">  | 类型       | 解释                                   |</span><br><span class=\"line\">  | ---------- | -------------------------------------- |</span><br><span class=\"line\">  | all        | 所有设备                               |</span><br><span class=\"line\">  | braille    | 盲文                                   |</span><br><span class=\"line\">  | embossed   | 盲文打印                               |</span><br><span class=\"line\">  | handheld   | 手持设备                               |</span><br><span class=\"line\">  | print      | 文档打印或打印预览模式                 |</span><br><span class=\"line\">  | projection | 项目演示，比如幻灯                     |</span><br><span class=\"line\">  | screen     | 彩色电脑屏幕                           |</span><br><span class=\"line\">  | speech     | 演讲                                   |</span><br><span class=\"line\">  | tty        | 固定字母间距的网络媒体，比如电传打字机 |</span><br><span class=\"line\">  | tv         | 电视                                   |</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">- **媒体特性（Media features）**</span><br><span class=\"line\"></span><br><span class=\"line\">  | 属性                | 值                     | Min/Max | 描述                     |</span><br><span class=\"line\">  | ------------------- | ---------------------- | ------- | ------------------------ |</span><br><span class=\"line\">  | color               | 整数                   | yes     | 每种色彩的字节数         |</span><br><span class=\"line\">  | color-index         | 整数                   | yes     | 色彩表中的色彩数         |</span><br><span class=\"line\">  | device-aspect-ratio | 整数/整数              | yes     | 宽高比例                 |</span><br><span class=\"line\">  | device-height       | length                 | yes     | 设备屏幕的输出高度       |</span><br><span class=\"line\">  | device-width        | length                 | yes     | 设备屏幕的输出宽度       |</span><br><span class=\"line\">  | grid                | 整数                   | no      | 是否基于格栅的设备       |</span><br><span class=\"line\">  | height              | length                 | yes     | 渲染界面的高度           |</span><br><span class=\"line\">  | monochrome          | 整数                   | yes     | 单色帧缓冲器中每像素字节 |</span><br><span class=\"line\">  | resolution          | 分辨率（dpi/dpcm）     | yes     | 分辨率                   |</span><br><span class=\"line\">  | scan                | Progresslve interlaced | no      | tv媒体类型的扫描方式     |</span><br><span class=\"line\">  | width               | length                 | yes     | 渲染界面的宽度           |</span><br><span class=\"line\">  | orientation         | Portrait/landscape     | no      | 横屏或竖屏               |</span><br><span class=\"line\"></span><br><span class=\"line\">- ​    **逻辑操作符**</span><br><span class=\"line\"></span><br><span class=\"line\">  - 合并多个媒体属性 `and`</span><br><span class=\"line\">  - `@media screen and (min-width:600px) and (max-width:1000px)`</span><br><span class=\"line\">  - 合并多个媒体属性或合并媒体属性与媒体类型，一个基本的媒体查询，即一个媒体属性与默认指定的screen媒体类型</span><br><span class=\"line\"></span><br><span class=\"line\">- **指定备用功能**</span><br><span class=\"line\"></span><br><span class=\"line\">  - 逗号 ,</span><br><span class=\"line\">  - `@media screen and (min-width:769px), print and (min-width:6in)`</span><br><span class=\"line\">  - 没有`or`关键字可用于指定备用的媒体功能。相反，可以将备用功能以逗号分隔列表的形式列出这才会将样式应用到宽度超过769像素的屏幕或使用至少6英寸宽的纸张的打印设备</span><br><span class=\"line\"></span><br><span class=\"line\">- **指定否定条件**</span><br><span class=\"line\"></span><br><span class=\"line\">  - `not`</span><br><span class=\"line\">  - `@media not screen and (monochrome)`</span><br><span class=\"line\">  - 要指定否定条件，可以在媒体声明中添加关键字not，不能再单个条件前使用not。该关键字必须位于声明的开头，而且它会否定整个声明。所以，上面的示例会应用于除单色屏幕外的所有设备</span><br><span class=\"line\"></span><br><span class=\"line\">- **向早期浏览器隐藏媒体查询**</span><br><span class=\"line\"></span><br><span class=\"line\">  - `only`</span><br><span class=\"line\">  - `media=&#x27;only screen and (min-width:401px) and (max-width:600px)&#x27;`</span><br><span class=\"line\">  - 媒体查询规范还提供了关键字`only`，它用于向早期浏览器隐藏媒体查询。类似于`not`，该关键字必须位于声明的开头</span><br><span class=\"line\">  - 早期浏览器应该将以下语句`media=‘screen and (min-width:40px) and (max-width:600px)’ `解释为` media=&#x27;screen&#x27;; `换句话说，他应该将样式规则应用于所有屏幕设备，即使他不知道媒体查询的含义</span><br><span class=\"line\">  - 无法识别媒体查询的浏览器要求获得逗号分隔的媒体类型列表，规范要求，它们应该在第一个不是连字符的非数字字母字符之前截断每个值。所以，早期浏览器应该将上面的实例解释为：`media=&#x27;only&#x27;`</span><br><span class=\"line\">  - 因为没有`only`这样的媒体类型，所以样式表被忽略</span><br><span class=\"line\"></span><br><span class=\"line\">- **易混淆的宽度**</span><br><span class=\"line\"></span><br><span class=\"line\">  - `device-width`/`heighta`\t`width`/`height`</span><br><span class=\"line\">  - `device-width`/`height`是设备的宽度（比如电脑手机的宽度，不是浏览器的宽度）</span><br><span class=\"line\">  - `width/height是documentElement.clinetWidth`/`Height`即`viewport`的值</span><br><span class=\"line\"></span><br><span class=\"line\">## 附录一 像素单位</span><br><span class=\"line\"></span><br><span class=\"line\">- **物理像素和设备独立像素**</span><br><span class=\"line\"></span><br><span class=\"line\">  - 一个物理像素是显示器（手机屏幕）上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值</span><br><span class=\"line\"></span><br><span class=\"line\">  - 设备独立像素（也叫目睹无关像素），可以认为是计算机坐标系统的一个点，这个点代表一个可以由程序使用的虚拟像素（`css`像素），然后由相关系统转换为物理像素</span><br><span class=\"line\"></span><br><span class=\"line\">  - 设备像素比（`device pixel ratio`）设备像素比（简称`dpr`）定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式得到 *设备像素值 = 物理像素 / 设备独立像素* `js`中可以通过`window.devicePixelRatio`</span><br><span class=\"line\"></span><br><span class=\"line\">  - `dpr`在一些屏幕上是2：1的比例，所以像素值在不同屏幕上的占比是不同的</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```</span><br><span class=\"line\">    1.设备宽高为375*667，可以理解为设备独立像素（或css像素）</span><br><span class=\"line\">    2.dpr为2，根据上面的计算公式，其物理像素就应该 2 ，为750*1334.</span><br><span class=\"line\">    </span><br><span class=\"line\">    1css像素在PC端显示器需要用（1*1）个栅格点表示 在iPhone6中则需要4（2*2）个</span><br><span class=\"line\">    </span><br><span class=\"line\">    也就是在不同的屏幕上（普通屏幕 vs retina屏幕），css像素所呈现的大小（物理尺寸）是一致的，不同的是一个css像素所对象的物理像素个数是不一致</span><br><span class=\"line\">    </span><br><span class=\"line\">    在普通的屏幕下，1个css像素对应的1个物理像素 为1:1 。在retina屏幕下，1个css像素对应4个物理像素 1:4</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>位图像素</strong></p>\n</li>\n<li><p>1个位图像素是栅格图像（如：<code>png</code>，<code>jpg</code>，<code>gif</code>等）最小的数据单元，每一个位图像素都包括着一些资深的现实信息（如：显示位置，颜色值，透明度等）</p>\n</li>\n<li><p>在普通屏幕下是没有问题的，但是在<code>retina</code>屏幕下就会出现位图像素点不够，从而导致图片模糊的情况</p>\n</li>\n<li><p>```<br>对于dpr=2的，1个位图像素对应4个物理像素，由于单个位图像素不以再进一步分割，所以只能就近取色，从而导致图片模糊</p>\n<p>解决办法，使用分辨率大两倍的图片，如200<em>300 img 标签，就需要提供400</em>600的图片.由此一来位图像素点的个数是原来的4倍，在retina屏幕下，位图像素点个数就可以物理像素点个数形成1:1 的比例，图片自然就清晰了。</p>\n<p>如果普通屏幕下，也用了两倍的图片，会怎么样，很明显，在普通屏幕下，200<em>300(css pixel)img标签，所对应的物理像素个数就是200</em>300个，而两倍图片的位图像素个数则是200<em>300</em>4，所以就出现了一个像物理像素点对应4个为图像素点，所以它的取色也只能通过——定的算法（显示结果就是一张只有原图像素总数四分之一，我们称这个过程叫做downsampling），肉眼看上去这个图片不会模糊，但是会觉得图片缺少一些锐利度，或者是有点色差（还是可以接受的）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 附录二 浏览器渲染原理</span><br><span class=\"line\"></span><br><span class=\"line\">1. 处理`HTML` 生成`DOM`树</span><br><span class=\"line\">2. 处理`CSS `生成`CSSDOM`树</span><br><span class=\"line\">3. 将两个数合并成`render`树</span><br><span class=\"line\">4. 对`render`树进行布局计算</span><br><span class=\"line\">5. 将`render`树中的每一个节点绘制在屏幕上</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>细化分析：</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.浏览器把获取到的html代码解析成1个Dom树，html中的每个tag都是Dom树中的1个节点，根节点就是我们常用的document对象(<html> tag)，当然这里包含用js动态创建的dom节点</p>\n<p>2浏览器把所有样式(主要包括css和浏览器的默认样式设置)解析成样式结构体，在解析的过程中会去掉浏览器不能识别的样式，生成CSSDOM树</p>\n<p>3.DOM tree和CSSDOM tree 合并成 render tree，render tree中每个node都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有无样式head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，注意 visibility:hidden隐藏的元素还是会包含到render tree中的，因为visibility:hidden 会影响布局(layout)，会占有空间。</p>\n<p>4.render tree构建完毕之后根据样式计算布局，布局阶段的输出结果称为 “盒模型”（box model）。盒模型精确表达了窗口中每个元素的位置和大小，而且所有的相对的度量单位都被转化成了屏幕上的绝对像素位置 (根据css2的标准，render tree中的每个节点都称为box(Box dimensions—-盒子模型)，box所有属性：width,height,margin,padding,left,top,border等。)</p>\n<p>5.将这些信息渲染为屏幕上每个真实的像素点了。这个阶段称为“绘制”，或者“栅格化”（rasterizing）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![](https://raw.sevencdn.com/HAODEabcd/Note/master/Web/H5C3/Tree.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 重绘、重排</span><br><span class=\"line\"></span><br><span class=\"line\">  - 重排，我们在计算它们在当前设备中准确的位置和尺寸。这正是布局阶段要做的工作，该阶段在英语中也成为“回流”（`reflow`），当`render tree`中的一部分（或全部）因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。也会回流（其实我觉得叫重新布局更简单明了一些）。每个页面至少需要一次回流，就是在页面第一次加载的时候</span><br><span class=\"line\"></span><br><span class=\"line\">  - 重绘（`repaints`）当`render tree`中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如`background-color`,则就叫重绘</span><br><span class=\"line\"></span><br><span class=\"line\">  - 重绘，重排会影响性能</span><br><span class=\"line\"></span><br><span class=\"line\">    - 在`chrome`中有一个`Performance`面板，它可以计算从开始到绘制完成花费了多少时间</span><br><span class=\"line\">    - 蓝色：网络通信和`HTML`解析</span><br><span class=\"line\">    - 黄色：`JavaScript`执行</span><br><span class=\"line\">    - 紫色：样式计算和布局，即重排</span><br><span class=\"line\">    - 绿色：重绘</span><br><span class=\"line\"></span><br><span class=\"line\">  - 触发重排的方法：</span><br><span class=\"line\"></span><br><span class=\"line\">    - 以下这些属性和方法需要返回最新的布局信息，重新计算渲染树，就会造成回流，触发重排以返回正确的值，建议将她们合并到一起操作，可以减少回流次数，这些属性包括：</span><br><span class=\"line\"></span><br><span class=\"line\">    - `offsetTop`/`Left`、`offsetWidth`/`Height`、`scrollTop`/`Left`/`Width`/`Height`、`clientTop`/`Left`/`Width`/`Height`、`getComputedStyle()`、`currentStyle`</span><br><span class=\"line\"></span><br><span class=\"line\">    - 提高网页性能，就是要降低“重排”和重绘的频率和成本，尽量少触发重新渲染。DOM变动和样式变动，都会触发重新渲染。但是，浏览器已经很智能了，会尽量把所有的变动集中在一起，排成一个队列，然后一次性执行，尽量避免多次重新渲染</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```js</span><br><span class=\"line\">      div.style.color=&#x27;red&#x27;</span><br><span class=\"line\">      div.style.background=&quot;yellow&quot;</span><br><span class=\"line\">      div.style.left=&#x27;10px&#x27;</span><br><span class=\"line\">      div.style.width=&#x27;20px&#x27;</span><br><span class=\"line\">      </span><br><span class=\"line\">      浏览器最低触发一次重排和重绘</span><br><span class=\"line\">      </span><br><span class=\"line\">      一般来说，样式的写操作之后，如果有上面那些属性的读操作，都会引发浏览器立即重排，这种重排，不会形成之前队列优化</span><br><span class=\"line\">      </span><br><span class=\"line\">      div.style.color = ‘red’;</span><br><span class=\"line\">      var height = div.offseHeight;</span><br><span class=\"line\">      div.style.height = height + ‘px’;</span><br><span class=\"line\">      </span><br><span class=\"line\">      Bad：</span><br><span class=\"line\">      div.style.left = div.offsetLeft + ‘px’;</span><br><span class=\"line\">      div.style.top = div.offsetTop + ‘px’;</span><br><span class=\"line\">      重排重绘两次</span><br><span class=\"line\">      Good:</span><br><span class=\"line\">      Var left = div.offsetLeft + ‘px’;</span><br><span class=\"line\">      Var top = div.offsetTop + ‘px’;</span><br><span class=\"line\">      </span><br><span class=\"line\">      div.style.left = left;</span><br><span class=\"line\">      div.style.top = top;</span><br><span class=\"line\">      放到队列，一起执行重排重绘一次</span><br><span class=\"line\">      </span><br><span class=\"line\">      我们来测试一下js动态添加10000个li 不同颜色而且设置宽度 所耗费render painting 的时间吧</span><br></pre></td></tr></table></figure>\n\n<pre><code>- 理论上的结局优化方法\n\n  - 说到的`DOM`的多个读写操作，应该放在一起，不要两个读操作之间，加入一个写操作\n  - 离线操作`DOM`如使用隐藏元素 `document.createDocumentFragment()`/ `cloneNode() `\n  - 修改样式的时候添加类名，或一次性添加到`dom.style.cssText`上等\n  - 以上都是理论上的加速方法\n</code></pre>\n<h2 id=\"附录三-css3响应式布局\"><a href=\"#附录三-css3响应式布局\" class=\"headerlink\" title=\"附录三 css3响应式布局\"></a>附录三 css3响应式布局</h2><hr>\n<ul>\n<li><p>媒体类型</p>\n<ul>\n<li> <code>*all</code> 所有媒体</li>\n<li> <code>braille</code> 盲文触觉设备</li>\n<li> <code>embossed</code> 盲文打印机</li>\n<li> <code>*print</code> 手持设备 </li>\n<li> <code>projection</code> 打印预览</li>\n<li> <code>*screen</code> 彩屏设备</li>\n<li> <code>speech</code> ‘听觉’类似的媒体类型</li>\n<li> <code>tty </code>不适用像素的设备</li>\n<li> <code>tv </code> 电视</li>\n</ul>\n</li>\n<li><p>关键字</p>\n<ul>\n<li> <code>and </code></li>\n<li> <code>not  </code>    <code>not</code>关键字是用来排除某种制定的媒体类型</li>\n<li> <code>only</code>     <code>only</code>用来定某种特定的媒体类型</li>\n</ul>\n</li>\n<li><p>媒体特性</p>\n<ul>\n<li> <code>(max-width:600px) </code></li>\n<li> <code>(max-device-width: 480px) </code>     设备输出宽度</li>\n<li> <code>(orientation:portrait)</code>          竖屏</li>\n<li> <code>(orientation:landscape)</code>        横屏</li>\n<li> <code>(-webkit-min-device-pixel-ratio: 2)</code> 像素比</li>\n<li> <code>devicePixelRatio</code>             设备像素比 </li>\n<li> <code>window.devicePixelRatio = 物理像素 / dips</code></li>\n</ul>\n</li>\n<li><p>样式引入</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index<span class=\"selector-class\">.css</span>&quot; media=&quot;print&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&quot;css/demo.css&quot;</span>) screen;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen&#123;    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=”stylesheet” media=”all and</span><br><span class=\"line\"> (orientation:portrait)” href=”portrait.css”&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=”stylesheet” media=”all</span><br><span class=\"line\"> and (orientation:landscape)”href=”landscape.css”&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>:<span class=\"number\">360px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>:<span class=\"number\">500px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; </span><br><span class=\"line\">href=&quot;indexA<span class=\"selector-class\">.css</span>&quot;  media=&quot;screen and (<span class=\"attribute\">min-width</span>: <span class=\"number\">800px</span>)<span class=\"string\">&quot;&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; </span><br><span class=\"line\">href=&quot;indexB<span class=\"selector-class\">.css</span>&quot; media=&quot;screen and (<span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>) and (max-width: <span class=\"number\">800px</span>)<span class=\"string\">&quot;&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; </span><br><span class=\"line\">href=&quot;indexC<span class=\"selector-class\">.css</span>&quot;    media=&quot;screen and (<span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>)<span class=\"string\">&quot;&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["Html"],"tags":["Html+css"]},{"title":"node.js","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/node.js/","content":"<h1 id=\"一、nodejs介绍\"><a href=\"#一、nodejs介绍\" class=\"headerlink\" title=\"一、nodejs介绍\"></a>一、nodejs介绍</h1><h2 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h2><ul>\n<li><code>nodejs</code>是一个<code>JavaScript</code>运行环境。它让 <code>JavaScript</code> 可以开发后端程序，实现几乎其他后端语言实现的所有功能</li>\n<li><code>Nodejs</code> 是基于 <code>V8</code> 引擎，<code>V8</code> 是 <code>Google</code> 发布的开源 <code>JavaScript</code> 引擎，本身就是用于 <code>Chrome</code> 浏览器 的 <code>JS</code> 解释部分， <code>V8</code> 搬到了服务器上，用于做服务器的软件</li>\n<li>短短几年的时间，Node 取得了巨大的成功。在企业界，Node 的应用也越来越广泛，2016 年 nodeJS 官方的调查报告。2016 年全球有 350 万开发者使用 nodeJS,相比去年保持了 100%的增长率。像 Yahoo、 Microsoft 这样的大公司，有好多应用已经迁移到 Node 了。国内的阿里巴巴、网易、腾讯、新浪、百度等 公司的很多线上产品也纷纷改用 Node 开发，并取得了很好的效果。据统计很多 A 轮、 B 轮的创业公司更 喜欢使用 NodeJs 开发。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://nodejs.org/static/documents/2016-survey-report.pdf\">https://nodejs.org/static/documents/2016-survey-report.pdf</a></p>\n</blockquote>\n<h2 id=\"1-2-NodeJs-的优势\"><a href=\"#1-2-NodeJs-的优势\" class=\"headerlink\" title=\"1.2 NodeJs 的优势\"></a>1.2 NodeJs 的优势</h2><p><strong>1. NodeJs 语法完全是 js 语法，只要你懂 JS 基础就可以学会 Nodejs 后端开发</strong></p>\n<blockquote>\n<p>Node 打破了过去 JavaScript 只能在浏览器中运行的局面。前后端编程环境统一，可以大大降低开发成本</p>\n</blockquote>\n<p><strong>2. NodeJs 超强的高并发能力</strong></p>\n<ul>\n<li><code>Node.js</code> 的首要目标是提供一种简单的、用于创建高性能服务器及可在该服务器中运行的各种应用程 序的开发工具</li>\n<li>首先让我们来看一下现在的服务器端语言中存在着什么问题。<br>在 <code>Java</code>、<code>PHP</code> 或者<code>.net</code> 等服务器端语言中，会为每一个客户端连接创建一个新的线程。而每个线程需要耗费大约 <code>2MB</code> 内存<br>理论上，一个 <code>8GB</code> 内存的服务器可以同时连接的最大用户数为 <code>4000</code> 个左右<br>。要让 <code>Web</code> 应用程序支持更多的用户，就 需要增加服务器的数量，而 <code>Web</code> 应用程序的硬件成本当然就上升了</li>\n<li><code>Node.js</code> 不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个 内部事件，通过非阻塞 <code>I/O</code>、事件驱动机制，让 <code>Node.js</code> 程序宏观上也是并行的。使用 <code>Node.js</code>，一个 <code>8GB</code> 内存的服务器，可以同时处理超过 <code>4 万</code>用户的连接</li>\n</ul>\n<p><strong>3. 实现高性能服务器</strong></p>\n<ul>\n<li>严格地说，<code>Node.js</code> 是一个用于开发各种 Web 服务器的开发工具。在 <code>Node.js</code> 服务器中，运行的是高性能 <code>V8 JavaScript</code> 脚本语言，该语言是一种可以运行在服务器端的 <code>JavaScript</code> 脚本语言</li>\n<li>那么，什么是 <code>V8 JavaScript</code> 脚本语言呢?该语言是一种被 <code>V8 JavaScript</code> 引擎所解析并执行的脚本语言。<code>V8 JavaScript</code> 引擎是由 <code>Google</code> 公司使用 C++语言开发的一种高性能 <code>JavaScript</code> 引擎，该引擎并不局限于在浏览 器中运行。<code>Node.js</code> 将其转用在了服务器中，并且为其提供了许多附加的具有各种不同用途的 <code>API</code>。例如， 在一个服务器中，经常需要处理各种二进制数据。在 <code>JavaScript</code> 脚本语言中，只具有非常有限的对二进制数 据的处理能力，而 <code>Node.js</code> 所提供的 <code>Buffer</code> 类则提供了丰富的对二进制数据的处理能力</li>\n<li>另外，在 <code>V8 JavaScript</code>引擎内部使用一种全新的编译技术。这意味着开发者编写的高端的 <code>JavaScript</code> 脚本代码与开发者编写的低端的C语言具有非常相近的执行效率，这也是<code>Node.js</code>服务器可以提供的一个重要特性</li>\n</ul>\n<p><strong>4. 开发周期短、开发成本低、学习成本低。</strong></p>\n<ul>\n<li><code>Node.js</code> 自身哲学，是花最小的硬件成本，追求更高的并发，更高的处理性能。</li>\n<li>特点:<code>Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.</code></li>\n</ul>\n<h2 id=\"1-3-NodeJs-适合做什么\"><a href=\"#1-3-NodeJs-适合做什么\" class=\"headerlink\" title=\"1.3 NodeJs 适合做什么\"></a>1.3 NodeJs 适合做什么</h2><blockquote>\n<p>在短短几年多的时间里，<code>Node</code> 变得非常热门，使用者也非常多。这些使用者对于 <code>Node</code> 的各自倚重点也各部相同，经过整理,主要有下几类</p>\n</blockquote>\n<p><strong>1. 前后端编程语言环境统一</strong></p>\n<blockquote>\n<p>这类重点的代表是雅虎。雅虎开放了 <code>Cocktai</code> 框架，利用 自己深厚的前端沉淀，将 <code>YUI3</code> 这个前端框架的能力借助 <code>Node</code> 延伸到服务器端，使得使用 者摆脱了日常工作中一边写 <code>JavaScript</code> —边写 <code>PHP</code> 所帯来的上下文交换负担</p>\n</blockquote>\n<p><strong>2. Node 带来的高性能 I/0 用于实时应用</strong></p>\n<blockquote>\n<p><code>Voxer</code> 将 <code>Node</code> 应用在实时语音上。国内腾讯的 朋友网将 Node 应用在长连接中，以提供实时功能，花瓣网、蘑菇街等公司通过 <code>socket.io</code> 实 现实时通知的功能。</p>\n</blockquote>\n<p><strong>3. 并行 I/0 使得使用者可以更高效地利用分布式环境</strong></p>\n<blockquote>\n<p>阿里巴巴 eBay 是这方面的典型。 阿里巴巴的 NodeFox 和 eBay 的 ql.io 都是借用 Node 并行 I/O 的能力，更高效地使用已有的 数据</p>\n</blockquote>\n<p><strong>4. 并行 I/O •有效利用稳定接口提升 Web 渲染能力</strong></p>\n<blockquote>\n<p>雪球财经和 Linkedln 的移动版网站均 是这种案例，撇弃 同步等待式的顺序请求，大胆采用并行丨/〇，加速数据的获取进而提升 Web 的渲染速度</p>\n</blockquote>\n<p><strong>5. 云计算平台提供 Node 支持</strong></p>\n<blockquote>\n<p>微软将 Node 引入 Azure 的开发中，阿里云、百度均纷纷 在云服务器上提供 Node 应用托管服务，Joyent 更是云计算中提供 Node 支持的代表。这类 平台看重 JavaScript 带来的开发上的优势，以及低资源占用、高性能的特点</p>\n</blockquote>\n<p><strong>6. 游戏开发领域</strong></p>\n<blockquote>\n<p>游戏领域对实时和并发有很高的要求，网易开源了 pomelo 实时框架， 可以应用在游戏和高实时应用中</p>\n</blockquote>\n<p><strong>7. 工具类应用</strong></p>\n<blockquote>\n<p>过去依赖 <code>java</code> 或其他语言构建的前端工具类应用，纷纷被一些前端工程 师用 <code>Node</code> 重写，用前端熟悉的语言为前端构建熟悉的工具</p>\n</blockquote>\n<h1 id=\"二、HTTP模块、URL模块-supervisor工具\"><a href=\"#二、HTTP模块、URL模块-supervisor工具\" class=\"headerlink\" title=\"二、HTTP模块、URL模块 supervisor工具\"></a>二、HTTP模块、URL模块 supervisor工具</h1><blockquote>\n<p>用 <code>Node.js</code> 时，我们不仅仅在实现一个应用，同时还实现了整个 <code>HTTP</code> 服务器</p>\n</blockquote>\n<h2 id=\"2-1-创建一个简单的程序\"><a href=\"#2-1-创建一个简单的程序\" class=\"headerlink\" title=\"2.1 创建一个简单的程序\"></a>2.1 创建一个简单的程序</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发送 HTTP 头部</span></span><br><span class=\"line\">    <span class=\"comment\">// HTTP 状态值: 200 : OK</span></span><br><span class=\"line\">    <span class=\"comment\">//设置 HTTP 头部，状态码是 200，文件类型是 html，字符集是 utf8 response.writeHead(200,&#123;&quot;Content-Type&quot;:&quot;text/html;charset=UTF-8&quot;&#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 发送响应数据 &quot;Hello World&quot;</span></span><br><span class=\"line\">    res.end(<span class=\"string\">&quot;哈哈哈哈，我买了一个 iPhone&quot;</span> + (<span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span>) + <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\"><span class=\"comment\">// 终端打印如下信息</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server running at http://127.0.0.1:8888/&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>你会发现，我们本地写一个 <code>js</code>，打死都不能直接拖入浏览器运行，但是有了 <code>node</code>，我 们任何一个 <code>js</code> 文件，都可以通过 <code>node</code> 来运行。也就是说，<code>node</code> 就是一个 <code>js</code> 的执行环境</p>\n</blockquote>\n<h2 id=\"2-2-HTTP-模块、URL模块\"><a href=\"#2-2-HTTP-模块、URL模块\" class=\"headerlink\" title=\"2.2 HTTP 模块、URL模块\"></a>2.2 HTTP 模块、URL模块</h2><blockquote>\n<p><code>Node.js</code> 中，将很多的功能，划分为了一个个 <code>module</code>(模块)。 <code>Node.js</code> 中的很多功能都 是通过模块实现</p>\n</blockquote>\n<h3 id=\"2-2-1、HTTP-模块的使用\"><a href=\"#2-2-1、HTTP-模块的使用\" class=\"headerlink\" title=\"2.2.1、HTTP 模块的使用\"></a>2.2.1、HTTP 模块的使用</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建一个服务器，回调函数表示接收到请求之后做的事情</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; <span class=\"comment\">//req 参数表示请求，res 表示响应</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;服务器接收到了请求&quot;</span> + req.url);</span><br><span class=\"line\">    res.end(); <span class=\"comment\">// End 方法使 Web 服务器停止处理脚本并返回当前结果</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//监听端口</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>设置一个响应头</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">res.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;text/html;charset=UTF8&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/1.png\"></p>\n<ul>\n<li>我们现在来看一下 <code>req</code> 里面能够使用的东西</li>\n<li>最关键的就是 <code>req.url</code> 属性，表示用户的请求 <code>URL</code> 地址。所有的路由设计，都是通过 <code>req.url</code> 来实现的。</li>\n<li>我们比较关心的不是拿到 <code>URL</code>，而是识别这个 <code>URL</code></li>\n<li>识别 <code>URL</code>，用到了下面的 <code>URL</code> 模块</li>\n</ul>\n<h3 id=\"2-2-2、URL-模块的使用\"><a href=\"#2-2-2、URL-模块的使用\" class=\"headerlink\" title=\"2.2.2、URL 模块的使用\"></a>2.2.2、URL 模块的使用</h3><ul>\n<li><code>url.parse()</code>  解析<code>URL </code></li>\n<li><code>url.format(urlObject)</code> 是上面 <code>url.parse()</code> 操作的逆向操作</li>\n<li><code>url.resolve(from, to)</code> 添加或者替换地址</li>\n</ul>\n<p><strong>1. url.parse()</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/2.png\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/3.png\"></p>\n<p><strong>2. url.format()</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/4.png\"></p>\n<p><strong>3. url.resolve()</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/5.png\"></p>\n<h2 id=\"2-3-Nodejs-自启动工具-supervisor\"><a href=\"#2-3-Nodejs-自启动工具-supervisor\" class=\"headerlink\" title=\"2.3 Nodejs 自启动工具 supervisor\"></a>2.3 Nodejs 自启动工具 supervisor</h2><blockquote>\n<p><code>supervisor</code> 会不停的 <code>watch</code> 你应用下面的所有文件，发现有文件被修改，就重新载入程序文件这样就实现了部署，修改了程序文件后马上就能看到变更后的结果。麻麻再也不用担心我的重启 <code>nodejs</code> 了</p>\n</blockquote>\n<p><strong>首先安装 supervisor</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g supervisor</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 supervisor 代替 node 命令启动应用</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/6.png\"></p>\n<h1 id=\"三、CommonJs-和-Nodejs-模块\"><a href=\"#三、CommonJs-和-Nodejs-模块\" class=\"headerlink\" title=\"三、CommonJs 和 Nodejs 模块\"></a>三、CommonJs 和 Nodejs 模块</h1><h2 id=\"3-1-什么是-CommonJs\"><a href=\"#3-1-什么是-CommonJs\" class=\"headerlink\" title=\"3.1 什么是 CommonJs\"></a>3.1 什么是 CommonJs</h2><blockquote>\n<p><code>JavaScript</code> 是一个强大面向对象语言，它有很多快速高效的解释器。然而， <code>JavaScript</code> 标准定义的 <code>API</code> 是为了构建基于浏览器的应用程序。并没有制定一个用于更广泛的应用程序 的标准库。<br>,而不只是停留在小脚本程序 的阶段。用 <code>CommonJS API</code> 编写出的应用，不仅可以利用 <code>JavaScript</code> 开发客户端应用，而且还可以编写以下应 用 </p>\n</blockquote>\n<ul>\n<li>服务器端 <code>JavaScript</code> 应用程序。(<code>nodejs</code>)</li>\n<li>命令行工具</li>\n<li>桌面图形界面应用程序</li>\n</ul>\n<blockquote>\n<p><code>CommonJS</code> 就是模块化的标准，<code>nodejs</code> 就是 <code>CommonJS</code>(模块化)的实现</p>\n</blockquote>\n<h2 id=\"3-2-Nodejs-中的模块化\"><a href=\"#3-2-Nodejs-中的模块化\" class=\"headerlink\" title=\"3.2 Nodejs 中的模块化\"></a>3.2 Nodejs 中的模块化</h2><blockquote>\n<p><code>Node</code> 应用由模块组成，采用 <code>CommonJS</code> 模块规范</p>\n</blockquote>\n<h3 id=\"3-2-1-在-Node-中，模块分为两类\"><a href=\"#3-2-1-在-Node-中，模块分为两类\" class=\"headerlink\" title=\"3.2.1 在 Node 中，模块分为两类\"></a>3.2.1 在 Node 中，模块分为两类</h3><ul>\n<li>一类是 <code>Node</code> 提供的模块,称为核心模块;另一类是用户编写的模块，称为文件模块</li>\n</ul>\n<blockquote>\n<ul>\n<li>核心模块部分在 <code>Node</code> 源代码的编译过程中，编译进了二进制执行文件。在 <code>Node</code> 进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和 编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。 如:<code>HTTP</code> 模块 、<code>URL</code> 模块、<code>Fs</code> 模块都是 <code>nodejs</code> 内置的核心模块，可以直接引入使用</li>\n<li>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程、速度相比核心模块稍微慢一些，但是用的非常多。这些模块需要我们自己定义。接下来我 们看一下 <code>nodejs</code> 中的自定义模块。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-2-2-CommonJS-Nodejs-中自定义模块的规定\"><a href=\"#3-2-2-CommonJS-Nodejs-中自定义模块的规定\" class=\"headerlink\" title=\"3.2.2 CommonJS(Nodejs)中自定义模块的规定\"></a>3.2.2 CommonJS(Nodejs)中自定义模块的规定</h3><ol>\n<li>我们可以把公共的功能抽离成为一个单独的 <code>js</code> 文件作为一个模块，默认情况下面这 个模块里面的方法或者属性，外面是没法访问的。如果要让外部可以访问模块里面的方法或 者属性，就必须在模块里面通过 <code>exports</code> 或者 <code>module.exports</code> 暴露属性或者方法</li>\n<li>在需要使用这些模块的文件中，通过 <code>require</code> 的方式引入这个模块。这个时候就可以 使用模块里面暴露的属性和方法</li>\n</ol>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/7.png\"></p>\n<h3 id=\"3-2-3-定义使用模块\"><a href=\"#3-2-3-定义使用模块\" class=\"headerlink\" title=\"3.2.3 定义使用模块\"></a>3.2.3 定义使用模块</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个 tools.js 的模块 //模块定义</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tools = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello NodeJS&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 模块接口的暴露</span></span><br><span class=\"line\"><span class=\"comment\">// module.exports = tools; exports.sayHello = tools.sayHello; exports.add = tools.add;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入自定义的 tools.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tools = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./tools&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tools.sa yHello(); <span class=\"comment\">//使用模块</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、NPM第三方模块和package\"><a href=\"#四、NPM第三方模块和package\" class=\"headerlink\" title=\"四、NPM第三方模块和package\"></a>四、NPM第三方模块和package</h1><h2 id=\"4-1-包与-NPM\"><a href=\"#4-1-包与-NPM\" class=\"headerlink\" title=\"4.1 包与 NPM\"></a>4.1 包与 NPM</h2><h3 id=\"4-1-1-包\"><a href=\"#4-1-1-包\" class=\"headerlink\" title=\"4.1.1 包\"></a>4.1.1 包</h3><blockquote>\n<p><code>Nodejs</code> 中除了它自己提供的核心模块外，我们可以自定义模块，也可以使用 第三方的模块。<code>Nodejs</code> 中第三方模块由包组成，可以通过包来对一组具有相互依 赖关系的模块进行统一管理</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/8.png\"></p>\n<p><strong>完全符合 CommonJs 规范的包目录一般包含如下这些文件</strong></p>\n<ul>\n<li><code>package.json</code> :包描述文件</li>\n<li><code>bin</code> :用于存放可执行二进制文件的目录</li>\n<li><code>lib</code> :用于存放 <code>JavaScript</code> 代码的目录</li>\n<li><code>doc</code> :用于存放文档的目录</li>\n</ul>\n<blockquote>\n<p>在 <code>NodeJs</code> 中通过 <code>NPM</code> 命令来下载第三方的模块(包)</p>\n</blockquote>\n<h3 id=\"4-1-2-NPM-介绍\"><a href=\"#4-1-2-NPM-介绍\" class=\"headerlink\" title=\"4.1.2 NPM 介绍\"></a>4.1.2 NPM 介绍</h3><ul>\n<li>npm 是世界上最大的开放源代码的生态系统。我们可以通过 npm 下载各种各样的包，<br>这些源代码(包)我们可以在 <a href=\"https://www.npmjs.com/\">https://www.npmjs.com</a> 找到</li>\n</ul>\n<blockquote>\n<p><code>npm</code> 是随同 <code>NodeJS</code> 一起安装的包管理工具，能解决 <code>NodeJS</code> 代码部署上的很多问题，常见的使用场景有 以下几种</p>\n</blockquote>\n<ul>\n<li>允许用户从 <code>NPM</code> 服务器下载别人编写的第三方包到本地使用</li>\n<li>允许用户从 <code>NPM</code> 服务器下载并安装别人编写的命令行程序(工具)到本地使用</li>\n<li>允许用户将自己编写的包或命令行程序上传到 <code>NPM</code> 服务器供别人使用</li>\n</ul>\n<p><strong>NPM 命令详解</strong></p>\n<ul>\n<li><code>npm -v</code> 查看 <code>npm</code> 版本</li>\n<li><code>npm install</code> 使用 <code>npm</code> 命令安装模块</li>\n<li><code>npm uninstall moudleName</code> 卸载模块</li>\n<li><code>npm list</code> 查看当前目录下已安装的 <code>node</code> 包</li>\n<li><code>npm info jquery</code> 查看 <code>jquery</code> 的版本</li>\n<li>指定版本安装 <code>npm install jquery@1.8.0</code></li>\n</ul>\n<h2 id=\"4-2-package-json\"><a href=\"#4-2-package-json\" class=\"headerlink\" title=\"4.2 package.json\"></a>4.2 package.json</h2><blockquote>\n<p><code>package.json</code> 定义了这个项目所需要的各种模块,以及项目的配置信息(比如名称、<br>版本、许可证等元数据)</p>\n</blockquote>\n<p><strong>1. 创建 package.json</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init</span><br><span class=\"line\">npm init –yes</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 安装模块并把模块写入 package.json(依赖)</strong></p>\n<ul>\n<li><code>npm install babel-cli --save-dev</code></li>\n<li><code>npm install 模块 --save</code></li>\n</ul>\n<p><strong>3. dependencies 与 devDependencies 之间的区别</strong></p>\n<ul>\n<li>使用 <code>npm install node_module –save</code> 自动更新 <code>dependencies</code> 字段值;</li>\n<li>使用 <code>npm install node_module –save-dev</code> 自动更新 <code>devDependencies</code> 字段值</li>\n<li><code>dependencies</code> 配置当前程序所依赖的其他</li>\n<li><code>devDependencies</code> 配置当前程序所依赖的其他包，只会下载模块，而不下载这些模块的测试 和文档框架</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;ejs&quot;: &quot;^2.3.4&quot;,</span><br><span class=\"line\">    &quot;express&quot;: &quot;^4.13.3&quot;,</span><br><span class=\"line\">    &quot;formidable&quot;: &quot;^1.0.17&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>^</code>表示第一位版本号不变，后面两位取最新的 </li>\n<li><code>~</code>表示前两位不变，最后一个取最新 </li>\n<li><code>*</code>表示全部取最新</li>\n</ul>\n<h2 id=\"4-3-安装淘宝镜像\"><a href=\"#4-3-安装淘宝镜像\" class=\"headerlink\" title=\"4.3 安装淘宝镜像\"></a>4.3 安装淘宝镜像</h2><ul>\n<li><a href=\"http://www.npmjs.org/\">http://www.npmjs.org</a> npm 包官网</li>\n<li><a href=\"https://npm.taobao.org/\">https://npm.taobao.org/</a> 淘宝 npm 镜像官网</li>\n</ul>\n<blockquote>\n<p>淘宝 <code>NPM</code> 镜像是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频 率目前为 10 分钟 一次以保证尽量与官方服务同步</p>\n</blockquote>\n<p>我们可以使用我们定制的 <code>cnpm</code> (<code>gzip</code> 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"五、fs模块\"><a href=\"#五、fs模块\" class=\"headerlink\" title=\"五、fs模块\"></a>五、fs模块</h1><h2 id=\"5-1-fs-stat-检测是文件还是目录\"><a href=\"#5-1-fs-stat-检测是文件还是目录\" class=\"headerlink\" title=\"5.1 fs.stat 检测是文件还是目录\"></a>5.1 fs.stat 检测是文件还是目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.stat(<span class=\"string\">&#x27;hello.js&#x27;</span>, (error, stats) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stats) </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`文件: $ &#123;</span></span><br><span class=\"line\"><span class=\"string\">            stats.isFile()</span></span><br><span class=\"line\"><span class=\"string\">        &#125;`</span>) </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`目录: $ &#123;</span></span><br><span class=\"line\"><span class=\"string\">            stats.isDirectory()</span></span><br><span class=\"line\"><span class=\"string\">        &#125;`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-fs-mkdir-创建目录\"><a href=\"#5-2-fs-mkdir-创建目录\" class=\"headerlink\" title=\"5.2 fs.mkdir 创建目录\"></a>5.2 fs.mkdir 创建目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">fs.mkdir(<span class=\"string\">&#x27;logs&#x27;</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;成功创 建目录:logs&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-3-fs-writeFile-创建写入文件\"><a href=\"#5-3-fs-writeFile-创建写入文件\" class=\"headerlink\" title=\"5.3 fs.writeFile 创建写入文件\"></a>5.3 fs.writeFile 创建写入文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs.writeFile(<span class=\"string\">&#x27;logs/hello.log&#x27;</span>, <span class=\"string\">&#x27;您好 ~ \\n&#x27;</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;成功写 入文件&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-4-fs-appendFile-追加文件\"><a href=\"#5-4-fs-appendFile-追加文件\" class=\"headerlink\" title=\"5.4 fs.appendFile 追加文件\"></a>5.4 fs.appendFile 追加文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs.appendFile(<span class=\"string\">&#x27;logs/hello.log&#x27;</span>, <span class=\"string\">&#x27;hello ~ \\n&#x27;</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;成功写 入文件&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-5-fs-readFile-读取文件\"><a href=\"#5-5-fs-readFile-读取文件\" class=\"headerlink\" title=\"5.5 fs.readFile 读取文件\"></a>5.5 fs.readFile 读取文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">&#x27;logs/hello.log&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>, (error, data) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-6-fs-readdir-读取目录\"><a href=\"#5-6-fs-readdir-读取目录\" class=\"headerlink\" title=\"5.6 fs.readdir 读取目录\"></a>5.6 fs.readdir 读取目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">fs.readdir(<span class=\"string\">&#x27;logs&#x27;</span>, (error, files) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(files)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-7-fs-rename-重命名\"><a href=\"#5-7-fs-rename-重命名\" class=\"headerlink\" title=\"5.7 fs.rename 重命名\"></a>5.7 fs.rename 重命名</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">fs.rename(<span class=\"string\">&#x27;js/hello.log&#x27;</span>, <span class=\"string\">&#x27;js/greeting.log&#x27;</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; 重命名成功&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-8-fs-rmdir-删除目录\"><a href=\"#5-8-fs-rmdir-删除目录\" class=\"headerlink\" title=\"5.8 fs.rmdir 删除目录\"></a>5.8 fs.rmdir 删除目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs.rmdir(<span class=\"string\">&#x27;logs&#x27;</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;成功的删除了目录:logs&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-9-fs-unlink-删除文件\"><a href=\"#5-9-fs-unlink-删除文件\" class=\"headerlink\" title=\"5.9 fs.unlink 删除文件\"></a>5.9 fs.unlink 删除文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs.unlink(<span class=\"string\">`logs / $ &#123;</span></span><br><span class=\"line\"><span class=\"string\">    file</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`成功的删除了文件: $ &#123;</span></span><br><span class=\"line\"><span class=\"string\">            file</span></span><br><span class=\"line\"><span class=\"string\">        &#125;`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-10-fs-createReadStream-从文件流中读取数据\"><a href=\"#5-10-fs-createReadStream-从文件流中读取数据\" class=\"headerlink\" title=\"5.10 fs.createReadStream 从文件流中读取数据\"></a>5.10 fs.createReadStream 从文件流中读取数据</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileReadStream = fs.createReadStream(<span class=\"string\">&#x27;data.json&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fileReadStream.on(<span class=\"string\">&#x27;data&#x27;</span>, (chunk) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`$ &#123;++count</span></span><br><span class=\"line\"><span class=\"string\">    &#125;接收到: $ &#123;</span></span><br><span class=\"line\"><span class=\"string\">        chunk.length</span></span><br><span class=\"line\"><span class=\"string\">    &#125;`</span>);</span><br><span class=\"line\">    str += chunk</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">fileReadStream.on(<span class=\"string\">&#x27;end&#x27;</span>, () = &gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;--- 结束 ---&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(coun t);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">fileReadStream.on(<span class=\"string\">&#x27;error&#x27;</span>, (error) = &gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-11-fs-createWriteStream-写入文件\"><a href=\"#5-11-fs-createWriteStream-写入文件\" class=\"headerlink\" title=\"5.11 fs.createWriteStream 写入文件\"></a>5.11 fs.createWriteStream 写入文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">&#x27;我是从数据库获取的数据，我要保存起来&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个可以写入的流，写入到文件 output.txt 中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">&#x27;output.txt&#x27;</span>); <span class=\"comment\">// 使用 utf8 编码写入数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">writerStream.write(data, <span class=\"string\">&#x27;UTF8&#x27;</span>); <span class=\"comment\">// 标记文件末尾</span></span><br><span class=\"line\">writerStream.end();</span><br><span class=\"line\"><span class=\"comment\">// 处理流事件 --&gt; finish 事件</span></span><br><span class=\"line\">writerStream.on(<span class=\"string\">&#x27;finish&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*finish - 所有数据已被写入到底层系统时触发。*/</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;写入完 成。&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">writerStream.on(<span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;程序执 行完毕&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-12-管道流\"><a href=\"#5-12-管道流\" class=\"headerlink\" title=\"5.12 管道流\"></a>5.12 管道流</h2><blockquote>\n<p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/9.png\"></p>\n<blockquote>\n<p>如上面的图片所示，我们把文件比作装水的桶，而水就是文件里的内容 ，我们用一根管子(pipe )连接两个桶使得水从一个桶流入另一个桶，这样就慢慢的实现了大文件的复制过程。</p>\n</blockquote>\n<p>以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个可读流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">&#x27;input.txt&#x27;</span>); <span class=\"comment\">// 创建一个可写流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">&#x27;output.txt&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 管道读写操作</span></span><br><span class=\"line\"><span class=\"comment\">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中 </span></span><br><span class=\"line\">readerStream.pipe(writerStream);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;程 序执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、创建一个-WEB-服务器\"><a href=\"#六、创建一个-WEB-服务器\" class=\"headerlink\" title=\"六、创建一个 WEB 服务器\"></a>六、创建一个 WEB 服务器</h1><blockquote>\n<p>利用HTTP模块 URl模块 PATH模块 FS 模块创建一个 WEB 服务器</p>\n</blockquote>\n<p><strong>1. Node.js 创建的第一个应用</strong></p>\n<blockquote>\n<p>引入 http 模块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 创建服务器</strong></p>\n<blockquote>\n<p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 <code>8888</code> 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.引入 http 模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http=<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.用 http 模块创建服务</span></span><br><span class=\"line\">http.createServer(fun <span class=\"function\"><span class=\"title\">ction</span>(<span class=\"params\">req, res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发送 HTTP 头部</span></span><br><span class=\"line\">    <span class=\"comment\">// HTTP 状态值: 200 : OK</span></span><br><span class=\"line\">    <span class=\"comment\">//设置 HTTP 头部，状态码是 200，文件类型是 html，字符集是 utf-8</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.write(<span class=\"string\">&#x27;你好 nodejs&#x27;</span>);</span><br><span class=\"line\">    res.write(<span class=\"string\">&#x27;我是第一个 nodejs 程序&#x27;</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">    <span class=\"comment\">/*结束响应*/</span></span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8001</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. WEB 服务器介绍</strong></p>\n<blockquote>\n<p>Web 服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览 器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览;可以放置数据文件，让 全世界下载。目前最主流的三个 Web 服务器是 Apache Nginx IIS。</p>\n</blockquote>\n<h1 id=\"七、Nodejs-的非阻塞-I-O、异步、事件驱动\"><a href=\"#七、Nodejs-的非阻塞-I-O、异步、事件驱动\" class=\"headerlink\" title=\"七、Nodejs 的非阻塞 I/O、异步、事件驱动\"></a>七、Nodejs 的非阻塞 I/O、异步、事件驱动</h1><h2 id=\"7-1-Nodejs的单线程-非阻塞I-O事件驱动\"><a href=\"#7-1-Nodejs的单线程-非阻塞I-O事件驱动\" class=\"headerlink\" title=\"7.1 Nodejs的单线程 非阻塞I/O事件驱动\"></a>7.1 Nodejs的单线程 非阻塞I/O事件驱动</h2><ul>\n<li>在 Java、PHP 或者.net 等服务器端语言中，会为每一个客户端连接创建一个新的线程。 而每个线程需要耗费大约 2MB 内存。也就是说，理论上，一个 8GB 内存的服务器可以同时 连接的最大用户数为 4000 个左右。要让 Web 应用程序支持更多的用户，就需要增加服务器 的数量，而 Web 应用程序的硬件成本当然就上升了</li>\n<li>Node.js 不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了， 就触发一个内部事件，通过非阻塞 I/O、事件驱动机制，让 Node.js 程序宏观上也是并行的。 使用 Node.js，一个 8GB 内存的服务器，可以同时处理超过 4 万用户的连接。</li>\n</ul>\n<h2 id=\"7-2-Nodejs-回调处理异步\"><a href=\"#7-2-Nodejs-回调处理异步\" class=\"headerlink\" title=\"7.2 Nodejs 回调处理异步\"></a>7.2 Nodejs 回调处理异步</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误的写法:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//模拟请求数据 </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(functio n ()&#123; </span><br><span class=\"line\">        result=<span class=\"string\">&#x27;这是请求到的 数据&#x27;</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">200</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span> .log(getData());<span class=\"comment\">/*异步导致请求不到数据*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确的处理异步:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\">callback</span>) </span>&#123; <span class=\"comment\">//模拟请求数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        result = <span class=\"string\">&#x27;这是请求到的 数据&#x27;</span>;</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">200</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-3-Nodejs-events-模块处理异步\"><a href=\"#7-3-Nodejs-events-模块处理异步\" class=\"headerlink\" title=\"7.3 Nodejs events 模块处理异步\"></a>7.3 Nodejs events 模块处理异步</h2><blockquote>\n<p><code>Node.js</code> 有多个内置的事件，我们可以通过引入 <code>events</code> 模块，并通过实例化 <code>EventEmitter</code> 类来绑定和监听事件。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 events 模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;events&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Even tEmitter =<span class=\"keyword\">new</span> event s .EventEmitter() ; <span class=\"comment\">/*实例化事件对象*/</span></span><br><span class=\"line\">EventEmitter.on(<span class=\"string\">&#x27;toparent&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;接收到了广播事件&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;广播&#x27;</span>);</span><br><span class=\"line\">    EventEmitter.emit(<span class=\"string\">&#x27;toparent&#x27;</span> ); <span class=\"comment\">/*发送广播*/</span> </span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八、静态文件托管-GET-POST路由EJS模板引擎\"><a href=\"#八、静态文件托管-GET-POST路由EJS模板引擎\" class=\"headerlink\" title=\"八、静态文件托管 GET POST路由EJS模板引擎\"></a>八、静态文件托管 GET POST路由EJS模板引擎</h1><h2 id=\"8-1-路由\"><a href=\"#8-1-路由\" class=\"headerlink\" title=\"8.1 路由\"></a>8.1 路由</h2><blockquote>\n<p>路由指的就是针对不同请求的 URL，处理不同的业务逻辑。</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/10.png\"></p>\n<h2 id=\"8-2-初识-EJS-模块引擎\"><a href=\"#8-2-初识-EJS-模块引擎\" class=\"headerlink\" title=\"8.2 初识 EJS 模块引擎\"></a>8.2 初识 EJS 模块引擎</h2><blockquote>\n<p>我们学的 EJS 是后台模板，可以把我们数据库和文件读取的数据显示到 Html 页面上面。它 是一个第三方模块，需要通过 npm 安装</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install ejs –save / cnpm install ejs --save</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Nodejs 中使用:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ejs.renderFile(filename, data, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, str</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// str =&gt; Rendered HTML string</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>EJS 常用标签</strong></p>\n<ul>\n<li><code>&lt;%%&gt;</code>流程控制标签</li>\n<li><code>&lt;%=%&gt;</code>输出标签(原文输出HTML标签)</li>\n<li><code>&lt;%-%&gt;</code>输出标签(HTML会被浏览器解析)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= url %&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= imageURL %&gt;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"symbol\">&amp;lt;</span>% for(var i = 0 ; i <span class=\"symbol\">&amp;lt;</span> news.length ; i++)&#123; %<span class=\"symbol\">&amp;gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>%= news[i] %<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span> <span class=\"symbol\">&amp;lt;</span>% &#125; %<span class=\"symbol\">&amp;gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-3-Get、Post\"><a href=\"#8-3-Get、Post\" class=\"headerlink\" title=\"8.3 Get、Post\"></a>8.3 Get、Post</h2><ul>\n<li>超文本传输协议(HTTP)的设计目的是保证客户端机器与服务器之间的通信</li>\n<li>在客户端和服务器之间进行请求-响应时，两种最常被用到的方法是:GET 和 POST<ul>\n<li>GET - 从指定的资源请求数据。(一般用于获取数据)</li>\n<li>POST - 向指定的资源提交要被处理的数据。(一般用于提交数据)</li>\n</ul>\n</li>\n</ul>\n<p><strong>获取 GET 传值:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> urlinfo=url.parse(req.url,<span class=\"literal\">true</span>); </span><br><span class=\"line\">urlinfo.query();</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取 POST 传值:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postData = <span class=\"string\">&#x27;&#x27;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据块接收中</span></span><br><span class=\"line\">req.on(<span class=\"string\">&#x27;data&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postDataChunk</span>) </span>&#123;</span><br><span class=\"line\">    postData += postDataChunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 数据接收完毕，执行回调函数</span></span><br><span class=\"line\">req.on(<span class=\"string\">&#x27;end&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        postData = <span class=\"built_in\">JSON</span>.parse(postData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">    req.query = postData;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(q uerystring.parse(postData));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九、MongoDb-数据库介绍、安装、使用\"><a href=\"#九、MongoDb-数据库介绍、安装、使用\" class=\"headerlink\" title=\"九、MongoDb 数据库介绍、安装、使用\"></a>九、MongoDb 数据库介绍、安装、使用</h1><h2 id=\"9-1-数据库和文件的主要区别\"><a href=\"#9-1-数据库和文件的主要区别\" class=\"headerlink\" title=\"9.1 数据库和文件的主要区别\"></a>9.1 数据库和文件的主要区别</h2><ul>\n<li>数据库有数据库表、行和列的概念，让我们存储操作数据更方便</li>\n<li>数据库提供了非常方便的接口，可以让 <code>nodejs</code>、<code>php</code> <code>java</code> <code>.net</code> 很方便的实现增加修改删除功能</li>\n</ul>\n<h2 id=\"9-2-NoSql-介绍\"><a href=\"#9-2-NoSql-介绍\" class=\"headerlink\" title=\"9.2 NoSql 介绍\"></a>9.2 NoSql 介绍</h2><h3 id=\"9-2-1-NoSQL-介绍\"><a href=\"#9-2-1-NoSQL-介绍\" class=\"headerlink\" title=\"9.2.1 NoSQL 介绍\"></a>9.2.1 NoSQL 介绍</h3><ul>\n<li>由于互联网的迅速发展，云计算与 Web2.0。这样大量的交互给数据库提出了更高的性能要<br>求，传统的数据库(本文泛指 SQL 数据库)，即关系数据库虽然具备良好的事物管理，<br>但在 处理大量数据 的应用 时很难 在性能 上满足 设计要 求。NoSQL 就是主要为了解决当下大量高并发高要求的数据 库应用 需求，关系数 据库 具有严 格的参 照性，一致性 ，可用 性，原子性 ，隔离 性等特 点</li>\n<li>因此会产生一些例如表连接等操作，这样会大大降低系统的性能。而在当前很多应用场景下对性能的要求 远远强 于传统 数据库 关注的 点，<code>NoSQL</code>就是为了解决大规模数据与多样数 据种类 等问题，尤其是其中大数据的相关问题。 </li>\n<li><code>NoSQL</code>(<code>NoSQL = Not Only SQL</code> )，意即“不仅仅是 SQL”，它指的是非关系型的数据库，是以 <code>key-value</code><br>形式存储，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说遵循SQL 标准ACID 属性、表结构等等。<code>NoSQL</code> 最早被提出是在 20 世纪 80 年代，在当时更多是强调的是与关系数据库区 别对待 ，最近这些年被提及的更多是强调协助解决大数据等相关问题。<code>NoSQL</code> 在大数据时代有自己的意义</li>\n</ul>\n<h3 id=\"9-2-2-NoSQL-应用情况介绍\"><a href=\"#9-2-2-NoSQL-应用情况介绍\" class=\"headerlink\" title=\"9.2.2 NoSQL 应用情况介绍\"></a>9.2.2 NoSQL 应用情况介绍</h3><blockquote>\n<p>国内的互联网蓬勃发展，不仅涌现出 BAT(百度，阿里巴巴，腾讯)之类的巨头，也带动了整个互联 网行业的发展，大量的创业型公司如春笋般的涌出，在国家层面也提出了“互联网+”和“万众创业”的口 号。更多传统的行业也开始拥抱互联网。但是无论是做所谓的生态平台还是 传统业务的转型，涉及到的业务是多种多样的。这个时候企业架构师对于应用系统的核心——数据库管理 不仅有传统的 SQL 选项也有了 NoSQL这种适合特定场景需求的选项</p>\n</blockquote>\n<p><strong>NoSQL 数据库在以下的这几种情况下比较适用</strong></p>\n<ul>\n<li>数据模型比较简单</li>\n<li>需要灵活性更强的 IT 系统</li>\n<li>对数据库性能要求较高</li>\n<li>不需要高度的数据一致性</li>\n<li>对于给定 key，比较容易映射复杂值的环境</li>\n</ul>\n<p><strong>NoSQL 发展现状</strong></p>\n<ul>\n<li>国外: Google 的 BigTable 和 Amazon 的 Dynamo 使用的就是 NoSQL 型数据库。</li>\n<li>国内:百度、阿里、腾讯、新浪微博、视觉中国、优酷运营数据分析、飞信空间、豆瓣社区等</li>\n</ul>\n<h2 id=\"9-3-什么时候建议使用-NoSql\"><a href=\"#9-3-什么时候建议使用-NoSql\" class=\"headerlink\" title=\"9.3 什么时候建议使用 NoSql\"></a>9.3 什么时候建议使用 NoSql</h2><ul>\n<li>对数据库高并发读写的需求</li>\n<li>对海量数据的高效率存储和访问的需求</li>\n<li>对数据库的高可扩展性和高可用性的需求</li>\n</ul>\n<h2 id=\"9-4-NoSql-和传统数据库简单对比\"><a href=\"#9-4-NoSql-和传统数据库简单对比\" class=\"headerlink\" title=\"9.4 NoSql 和传统数据库简单对比\"></a>9.4 NoSql 和传统数据库简单对比</h2><ul>\n<li>非结构型数据库。没有行、列的概念。用 JSON 来存储数据。</li>\n<li>集合就相当于“表 ”，文档就相当于“行”。</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/11.png\"></p>\n<h2 id=\"9-5-NoSql-种类\"><a href=\"#9-5-NoSql-种类\" class=\"headerlink\" title=\"9.5 NoSql 种类\"></a>9.5 NoSql 种类</h2><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/12.png\"></p>\n<h2 id=\"9-6-MongoDb-介绍\"><a href=\"#9-6-MongoDb-介绍\" class=\"headerlink\" title=\"9.6 MongoDb 介绍\"></a>9.6 MongoDb 介绍</h2><blockquote>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像 关系数据库的。他支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类 型。Mongo 最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以 实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。它的特点是高 性能 、易部署 、 易使用 ，存储数据非常 方便 </p>\n</blockquote>\n<h2 id=\"9-7-MongoDb-安装\"><a href=\"#9-7-MongoDb-安装\" class=\"headerlink\" title=\"9.7 MongoDb 安装\"></a>9.7 MongoDb 安装</h2><ul>\n<li>官网:<a href=\"https://www.mongodb.com/\">https://www.mongodb.com/</a></li>\n<li>手册:<a href=\"https://docs.mongodb.org/manual/\">https://docs.mongodb.org/manual/</a></li>\n</ul>\n<p><strong>1. 双击 MongoDB 软件下一步下一步安装</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/13.png\"></p>\n<p><strong>2. 安装完成配置环境变量 C:\\Program Files\\MongoDB\\Server\\3.0\\bin 加入到系统的path 环境变量中</strong></p>\n<p><strong>3. 打开 cmd 输入 :mongo命令看看是否成功。如果出来下图说明 mongodb配置成功。</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/14.png\"></p>\n<h2 id=\"9-8-使用-MongoDb\"><a href=\"#9-8-使用-MongoDb\" class=\"headerlink\" title=\"9.8 使用 MongoDb\"></a>9.8 使用 MongoDb</h2><ol>\n<li>新建一个存放数据库的文件夹，注意:不能有中文和空格，建议不要放在 C 盘</li>\n<li>启动 MongoDb 服务</li>\n</ol>\n<blockquote>\n<p>服务端:<code>mongod</code> 开启数据库服务 <code>mongod --dbpath C:\\mongodb</code></p>\n</blockquote>\n<p><strong>开启 MongoDb 服务命令:</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/15.png\"></p>\n<ul>\n<li><code>--dbpath</code> 就是选择数据库文档所在的文件夹</li>\n<li>也就是说，<code>mongoDB</code> 中，真的有物理文件，对应一个个数据库。U 盘可以拷走。</li>\n<li>注意:一定要保持，开机这个 CMD 不能动了，不能关，不能 <code>ctrl+c</code>。 一旦这个 <code>cmd</code> 有问题了，数据库就自动关闭了</li>\n</ul>\n<ol start=\"3\">\n<li>客户端输入 <code>mongo</code> 命令连接服务端</li>\n</ol>\n<blockquote>\n<p>客户端:<code>mongo</code> 使用数据库</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/16.png\"></p>\n<blockquote>\n<p>客户端:<code>mongo</code> 使用数据库 <code>ip</code> 地址:端口号</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/17.png\"></p>\n<h1 id=\"十、MongoDB-数据库创建删除、表（集合）创建删除、数据增删改查\"><a href=\"#十、MongoDB-数据库创建删除、表（集合）创建删除、数据增删改查\" class=\"headerlink\" title=\"十、MongoDB 数据库创建删除、表（集合）创建删除、数据增删改查\"></a>十、MongoDB 数据库创建删除、表（集合）创建删除、数据增删改查</h1><h2 id=\"10-1-数据库使用\"><a href=\"#10-1-数据库使用\" class=\"headerlink\" title=\"10.1 数据库使用\"></a>10.1 数据库使用</h2><blockquote>\n<p> 开启 <code>mongodb</code> 服务:要管理数据库，必须先开启服务，开启服务使用 <code>mongod --dbpath c:\\mongodb</code></p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/18.png\"></p>\n<blockquote>\n<p>管理 <code>mongodb</code> 数据库:<code>mongo</code> (一定要在新的 <code>cmd</code> 中输入)</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/19.png\"></p>\n<blockquote>\n<p>查看所有数据库列 表</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-2-创建数据库\"><a href=\"#10-2-创建数据库\" class=\"headerlink\" title=\"10.2 创建数据库\"></a>10.2 创建数据库</h2><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/20.png\"></p>\n<p><strong>使用数据库、创建 数据库</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">use student</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果真的想把这个数据库创建成功，那么必须插入一个数据</li>\n<li>数据库中不能直接插入数据，只能往集合(collectio ns)中插入数 据。不需要专门创建集合，只需要写点语法插入数据就会创建集合:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.student.insert(&#123;“name”:”x iaom ing”&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>db.student 系统发现 student 是一个陌生的集合名字，所以就自动创建了集合</li>\n</ul>\n<p><strong>显示当前的数据集合(mysql 中叫表)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show collections</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除数据库，删除当前所在的数据库</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.dropDatabase();</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除集合，删除指定的集合删除表</strong></p>\n<blockquote>\n<p>删除集合 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.drop()</span><br><span class=\"line\"></span><br><span class=\"line\">db.user.drop()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-3-插入-增加-数据\"><a href=\"#10-3-插入-增加-数据\" class=\"headerlink\" title=\"10.3 插入(增加)数据\"></a>10.3 插入(增加)数据</h2><blockquote>\n<p>插入数据，随着数据的插入，数据库创建成功了，集合也创建成功了。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.表名.insert(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">student 集合名称(表)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"10-4-查找数据\"><a href=\"#10-4-查找数据\" class=\"headerlink\" title=\"10.4 查找数据\"></a>10.4 查找数据</h2><p><strong>1. 查询所有记 录</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select* from userInfo;</code></p>\n</blockquote>\n<p><strong>2. 查询去掉后 的当前聚集集合中的某列的重复数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.distinct(&quot;name&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>会过滤掉 <code>name</code> 中的相同数据</li>\n<li>相当于:<code>select distict name from userInfo;</code></li>\n</ul>\n<p><strong>3. 查询 age = 22 的记录</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;&quot;age&quot;: 22&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于: <code>select * from userInfo where age = 22;</code></p>\n</blockquote>\n<p><strong>4. 查询 age &gt; 22 的记录</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$gt: 22&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select * from userInfo where age &gt;22;</code></p>\n</blockquote>\n<p><strong>5. 查询 age &lt; 22 的记录</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$lt: 22&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select * from userInfo where age &lt;22;</code></p>\n</blockquote>\n<p><strong>6. 查询 age &gt;= 25 的记录</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select * from userInfo where age &gt;= 25;</code></p>\n</blockquote>\n<p><strong>7. 查询 age &lt;= 25 的记录</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$lte: 25&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8. 查询 age &gt;= 23 并且 age &lt;= 26</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$gte: 23, $lte: 26&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>9. 查询name中包含 mongo的数据,模糊查询用于搜索</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;name: /mongo/&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//相当于%%</span><br><span class=\"line\">select * from userInfo where name like ‘%mongo%’;</span><br></pre></td></tr></table></figure>\n\n<p><strong>10. 查询 name 中以 mongo 开头的</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;name: /^mongo/&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>select * from userInfo where name like ‘mongo%’;</code></p>\n</blockquote>\n<p><strong>11. 查询指定列 name、age 数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;&#125;, &#123;name: 1, age: 1&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select name, age from userInfo;</code></p>\n</blockquote>\n<blockquote>\n<p>当然 <code>name</code> 也可以用 <code>true</code> 或 <code>false</code>,当用 <code>ture</code> 的情况下河 <code>name:1</code> 效果一样，如果用 <code>false</code> 就 是排除 <code>name</code>，显示 <code>name</code> 以外的列信息</p>\n</blockquote>\n<p><strong>12. 查询指定列 name、age 数据, age &gt; 25</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$gt: 25&#125;&#125;, &#123;name: 1, age: 1&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select name, age from userInfo where age &gt;25;</code></p>\n</blockquote>\n<p><strong>13. 按照年龄排序 1 升序 -1 降序</strong></p>\n<ul>\n<li>升序:<code>db.userInfo.find().sort(&#123;age: 1&#125;);</code></li>\n<li>降序:<code>db.userInfo.find().sort(&#123;age: -1&#125;);</code></li>\n</ul>\n<p><strong>14. 查询 name = zhangsan, age = 22 的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;name: &#x27;zhangsan&#x27;, age: 22&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select * from userInfo where name = ‘zhangsan’ and age = ‘22’;</code></p>\n</blockquote>\n<p><strong>15. 查询前 5 条数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find().limit(5 );</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>selecttop 5 * from userInfo;</code></p>\n</blockquote>\n<p><strong>16. 查询 10 条以后的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find().skip(10);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 相当于:</span><br><span class=\"line\">select * from userInfo where id not in ( </span><br><span class=\"line\">    selecttop 10 * from userInfo</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><strong>17. 查询在 5-10 之间的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find().limit (10).skip(5);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可用于分页，<code>limit</code> 是 <code>pageSize</code>，<code>skip</code> 是第几页<code>*pageSize</code></p>\n</blockquote>\n<p><strong>18. or与 查询</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;$or: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select * from userInfo where age = 22 or age = 25;</code></p>\n</blockquote>\n<p><strong>19. findOne 查询第一条数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.findOne( );</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>selecttop 1 * from userInfo;</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find().limit(1 );</span><br></pre></td></tr></table></figure>\n\n<p><strong>20. 查询某 个结果集的记录条数 统计数量</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;).count();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相当于:<code>select count(*) from userInfo where age &gt;= 20;</code></p>\n</blockquote>\n<blockquote>\n<p>如果要返回限制之后的记录数量，要使用 <code>count(true)</code>或者 <code>count</code>(非 <code>0</code>)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.users.find().skip(1 0).limit(5).count(true);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-5-修改数据\"><a href=\"#10-5-修改数据\" class=\"headerlink\" title=\"10.5 修改数据\"></a>10.5 修改数据</h2><blockquote>\n<p>修改里面还有查询条件。你要该谁，要告诉 <code>mongo</code></p>\n</blockquote>\n<p><strong>查找名字叫做小明的，把年龄更改为 16 岁</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;,&#123;$set:&#123;&quot;ag e&quot;:16&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找数学成绩是 70，把年龄更改为 33 岁:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.student.update(&#123;&quot;sc ore.shuxue&quot;:70&#125;,&#123;$set:&#123;&quot;ag e&quot;:33&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>更改所有匹配项目</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.student.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:33&#125;&#125;,&#123;multi: true&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>完整替换，不出现$set 关键字了: 注意</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;,&#123;&quot;name&quot;:&quot;大明&quot;,&quot;age&quot;:16&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>db.users.update(&#123;name: &#39;Lisi&#39;&#125;, &#123;$inc: &#123;age: 50&#125;&#125;, false, true);</code> 相当于:<code>update users set age = age + 50 where name = ‘Lisi’;</code></p>\n</blockquote>\n<blockquote>\n<p><code>db.users.update(&#123;name: &#39;Lisi&#39;&#125;, &#123;$inc: &#123;age: 50&#125;, $set: &#123;name: &#39;hoho&#39;&#125;&#125;, false, true);</code> 相当于: <code>update users set age = age + 50, name = ‘hoho’ where name = ‘Lisi’;</code></p>\n</blockquote>\n<h2 id=\"10-6-删除数据\"><a href=\"#10-6-删除数据\" class=\"headerlink\" title=\"10.6 删除数据\"></a>10.6 删除数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionsNames.remove( &#123; &quot;borough&quot;: &quot;Manhattan&quot; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">db.users.remove(&#123;age: 132&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.restaurants.remove( &#123; &quot;borough&quot;: &quot;Queens&quot; &#125;, &#123; justOne: true &#125; )</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一、MongoDB-索引-explain-分析查询速度\"><a href=\"#十一、MongoDB-索引-explain-分析查询速度\" class=\"headerlink\" title=\"十一、MongoDB 索引 explain 分析查询速度\"></a>十一、MongoDB 索引 explain 分析查询速度</h1><h2 id=\"11-1-索引基础\"><a href=\"#11-1-索引基础\" class=\"headerlink\" title=\"11.1 索引基础\"></a>11.1 索引基础</h2><blockquote>\n<p>索引是对数据库表中一列或多列的值进行排序的一种结构，可以让我们查询数据库变得 更快。MongoDB 的索引几乎与传统的关系型数据库一模一样，这其中也包括一些基本的查 询优化技巧。</p>\n</blockquote>\n<p><strong>下面是创建索引的 命令</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex( &#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取当前集合的索 引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.getIndexes()</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除索引的命令是</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.dropIndex( &#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 MongoDB 中，我们同样可以创建复合索引，如:</li>\n<li>数字 <code>1</code> 表示 <code>username</code> 键的索引按升序存储，<code>-1</code> 表示 <code>age</code> 键的索引按照降序方式存储</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex(&#123;&quot;username&quot;:1, &quot;age&quot;:-1&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该索引被创建后，基于 username 和 age 的查询将会用到该索引，或者是基于 username 的查询也会用到该索引，但是只是基于 age 的查询将不会用到该复合索引。因此可以说，如果想用到复合索引，必须在查询条件中包含复合索引中的前 N个索引列。然而如果查询条件中的键值顺序和复合索引中的创建顺序不一致的话，MongoDB 可以智能的帮助我们调整该顺序，以便使复合索引可以为查询所用。如:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.find(&#123;&quot;age&quot;: 30, &quot;username&quot;: &quot;stephen&quot;&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于上面示例中的查询条件，MongoDB 在检索之前将会动态的调整查询条件文档的顺 序，以使该查询可以用到刚刚创建的复合索引。</p>\n</blockquote>\n<blockquote>\n<p>对于上面创建的索引，MongoDB 都会根据索引的 keyname 和索引方向为新创建的索引自动分配一个索引名，下面的命令可以在创建索引时为其指定索引名，如:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex( &#123;&quot;username&quot;:1&#125;,&#123;&quot;name&quot;:&quot;userindex&quot;&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>随着集合的增长，需要针对查询中大量的排序做索引。如果没有对索引的键调用 <code>sort</code>， <code>MongoDB</code> 需要将所有数据提取到内存并排序。因此在做无索引排序时，如果数据量过大以 致无法在内存中进行排序，此时 <code>MongoDB</code> 将会报错</p>\n</blockquote>\n<h2 id=\"11-2-唯一索引\"><a href=\"#11-2-唯一索引\" class=\"headerlink\" title=\"11.2 唯一索引\"></a>11.2 唯一索引</h2><blockquote>\n<p>在缺省情况下创建的索引均不是唯一索引。下面的示例将创建唯一索引，如</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex( &#123;&quot;useri d&quot;:1&#125;,&#123;&quot;uniq ue&quot;:true&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果再次插入 userid 重复的文档时，MongoDB 将报错，以提示插入重复键，如:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;&quot;userid&quot;:5&#125;) </span><br><span class=\"line\">db.user.insert(&#123;&quot;userid&quot;:5&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// E11000 duplicate key error index: user.user.$userid_1 dup key: &#123; : 5.0 &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果插入的文档中不包含 userid 键，那么该文档中该键的值为 null，如果多次插入类似 的文档，MongoDB 将会报出同样的错误，如:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;&quot;userid1&quot;:5&#125;) </span><br><span class=\"line\">db.user.insert(&#123;&quot;userid1&quot;:5&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// E11000 duplicate key error index: user.user.$userid_1 dup key: &#123; : null &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果在创建唯一索引时已经存在了重复项，我们可以通过下面的命令帮助我们在创建唯 一索引时消除重复文档，仅保留发现的第一个文档，如:</p>\n</blockquote>\n<p><strong>先删除刚刚创建的唯一索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.dropIndex( &#123;&quot; userid&quot; :1&#125; )</span><br></pre></td></tr></table></figure>\n\n<p><strong>插入测试数据，以保证集合中有重复键存在。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.remove() </span><br><span class=\"line\">db.user.insert(&#123;&quot;userid&quot;:5&#125;)</span><br><span class=\"line\">db.user.insert(&#123;&quot;userid&quot;:5&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>重新创建唯一索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex(&#123;&quot;userid&quot;:1&#125;,&#123;&quot;unique&quot;:true &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们同样可以创建 复合唯一索引，即保证复合键值唯一 即可。如:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex( &#123;&quot;useri d&quot;:1,&quot;age&quot;:1&#125;,&#123;&quot;unique&quot;:true&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-3-索引的一些参数\"><a href=\"#11-3-索引的一些参数\" class=\"headerlink\" title=\"11.3 索引的一些参数\"></a>11.3 索引的一些参数</h2><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/21.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>如果在为已有数据的文档创建索引时，可以执行下面的命令，以使 MongoDB 在后台创 建索引，这样的创建时就不会阻塞其他操作。但是相比而言，以阻 塞方式创建索引，会使整 个创建过程效率更高，但是在创建时 MongoDB 将无法接收其他的操作</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex( &#123;&quot;username&quot;:1&#125;,&#123;&quot;backgroun d&quot;:true&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-4-使用-explain\"><a href=\"#11-4-使用-explain\" class=\"headerlink\" title=\"11.4 使用 explain\"></a>11.4 使用 explain</h2><blockquote>\n<p>explain 是非常有用的工具，会帮助你获得查询方面诸多有用的信息。只要对游标调用 该方法，就可以得到查询细节。explain 会返回一个文档，而不是游标本身。如</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/22.png\"></p>\n<blockquote>\n<p><code>explain</code> 会返回查询使用的索引情况，耗时和扫描文档数的统计信息</p>\n</blockquote>\n<h2 id=\"11-5-explain-executionStats-查询具体的执行-时间\"><a href=\"#11-5-explain-executionStats-查询具体的执行-时间\" class=\"headerlink\" title=\"11.5 explain executionStats 查询具体的执行 时间\"></a>11.5 explain executionStats 查询具体的执行 时间</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.tablename.find().explain( &quot;executionStats&quot; )</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关注输出的如下数值:<code>explain.executionStats.executionTimeMillis</code></p>\n</blockquote>\n<h1 id=\"十二、nodejs操作mongodb3-x数据库的方法\"><a href=\"#十二、nodejs操作mongodb3-x数据库的方法\" class=\"headerlink\" title=\"十二、nodejs操作mongodb3.x数据库的方法\"></a>十二、nodejs操作mongodb3.x数据库的方法</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//http://mongodb.github.io/node-mongodb-native/3.0/quick-start/quick-start/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">nodejs操作mongodb数据库</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> 1.安装mongodb、</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    cnpm install mongodb --save</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> 2.引入mongodb下面的MongoClient</span></span><br><span class=\"line\"><span class=\"comment\">    var MongoClient = require(&#x27;mongodb&#x27;).MongoClient;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> 3.定义数据库连接的地址 以及配置数据库</span></span><br><span class=\"line\"><span class=\"comment\">    qianfeng数据库的名称</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    var url = &#x27;mongodb://localhost:27017/&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    var dbName = &#x27;shop&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> 4.nodejs连接数据库</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> MongoClient.connect(url,function(err,client)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        const db = client.db(dbName);  数据库db对象</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> &#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">5.操作数据库</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t MongoClient.connect(url,function(err,client)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tconst db = client.db(dbName);  数据库db对象</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tMongoClient.connect(url,function(err,db)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tdb.collection(&#x27;user&#x27;).insertOne(&#123;&quot;name&quot;:&quot;张三&quot;&#125;,function(err,result)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tdb.close() //关闭连接</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t     &#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongodb&#x27;</span>).MongoClient;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义连接数据库的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  url = <span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dbName = <span class=\"string\">&#x27;shop&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">MongoClient.connect(url,<span class=\"function\">(<span class=\"params\">err,client</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据连接失败&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> db=client.db(dbName);   <span class=\"comment\">/*获取db对象*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    db.collection(<span class=\"string\">&quot;admin&quot;</span>).insertOne(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;mongodb3.0&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">10</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;增加失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;增加成功&#x27;</span>);</span><br><span class=\"line\">        client.close();  <span class=\"comment\">/*关闭数据库*/</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三、NodeJs操作MongoDb数据库-数据的增加-修改-删除\"><a href=\"#十三、NodeJs操作MongoDb数据库-数据的增加-修改-删除\" class=\"headerlink\" title=\"十三、NodeJs操作MongoDb数据库 数据的增加 修改 删除\"></a>十三、NodeJs操作MongoDb数据库 数据的增加 修改 删除</h1><h2 id=\"13-1-在-Nodejs-中使用-Mongodb\"><a href=\"#13-1-在-Nodejs-中使用-Mongodb\" class=\"headerlink\" title=\"13.1 在 Nodejs 中使用 Mongodb\"></a>13.1 在 Nodejs 中使用 Mongodb</h2><blockquote>\n<p>前面的课程我们讲了用命令操作 <code>MongoDB</code>，这里我们看下如何用 <code>nodejs</code> 来操作数据库</p>\n</blockquote>\n<p><strong>需要引包</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install mongodb --save-dev / cnpm install mongodb --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-2-Nodejs-连接-MongoDb-数据库\"><a href=\"#13-2-Nodejs-连接-MongoDb-数据库\" class=\"headerlink\" title=\"13.2 Nodejs 连接 MongoDb 数据库\"></a>13.2 Nodejs 连接 MongoDb 数据库</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>); <span class=\"comment\">//数据库引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongodb&#x27;</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">//数据库连接的地址，最后的斜杠表示数据库名字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shujukuURL = <span class=\"string\">&#x27;mongodb://localhost:27017/news&#x27;</span>;</span><br><span class=\"line\">app.get(<span class=\"string\">&quot;/&quot;</span>, fu <span class=\"function\"><span class=\"title\">nction</span>(<span class=\"params\">req, res</span>)</span> &#123; <span class=\"comment\">//连接数据库，这是一个异步的操作</span></span><br><span class=\"line\">    MongoClient.connect(shujukuURL,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">        res.writeHe ad(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot; text/html;charset =UTF8&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            res.send(<span class=\"string\">&quot;数据库连接失 败&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.write(<span class=\"string\">&quot;恭喜，数据库已经成功连接 \\n&quot;</span>);</span><br><span class=\"line\">        db.collection(<span class=\"string\">&quot;user&quot;</span>).insertOne(&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;哈哈&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        functio <span class=\"function\"><span class=\"title\">n</span>(<span class=\"params\">err, result</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                res.send(<span class=\"string\">&quot;数据库写入 失败&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.write(<span class=\"string\">&quot;恭喜，数据 已经成功插入&quot;</span>);</span><br><span class=\"line\">            res.end();</span><br><span class=\"line\">            <span class=\"comment\">//关闭数据库</span></span><br><span class=\"line\">            db.close();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8020</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-3-Nodejs-查找-MongoDb-数据库集合\"><a href=\"#13-3-Nodejs-查找-MongoDb-数据库集合\" class=\"headerlink\" title=\"13.3 Nodejs 查找 MongoDb 数据库集合\"></a>13.3 Nodejs 查找 MongoDb 数据库集合</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">MongoClient.connect(dbUrl,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*数据库连接失败*/</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接失败&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userRel = db.collection(<span class=\"string\">&#x27;user&#x27;</span>).find();</span><br><span class=\"line\">    <span class=\"comment\">//res.send(userRel);</span></span><br><span class=\"line\">    userRel.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, doc</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            res.write(<span class=\"string\">&quot;游标遍历错 误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (doc != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result.push(doc);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//遍历完毕</span></span><br><span class=\"line\">            db.close();</span><br><span class=\"line\">            res.render(<span class=\"string\">&quot;index&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;result&quot;</span>: result</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-4-Nodejs-给-MongoDb-增加数据\"><a href=\"#13-4-Nodejs-给-MongoDb-增加数据\" class=\"headerlink\" title=\"13.4 Nodejs 给 MongoDb 增加数据\"></a>13.4 Nodejs 给 MongoDb 增加数据</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">MongoClient.connect(dbUrl,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    db.collection(<span class=\"string\">&#x27;user&#x27;</span>).insertOne(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">        <span class=\"string\">&quot;age&quot;</span>: age,</span><br><span class=\"line\">        <span class=\"string\">&quot;score&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;shuxue&quot;</span>: shuxuechengji,</span><br><span class=\"line\">            <span class=\"string\">&quot;yuwen&quot;</span>: yuwenchengji</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;写入数据失败&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//关闭数据库</span></span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">        <span class=\"comment\">//res.redirect(&#x27;/add&#x27;); res.redirect(&#x27;/&#x27; ); /*路由跳转*/ res.end(); ////res.location(&#x27;/add&#x27;)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-5-Nodejs-修改-MongoDb-数据\"><a href=\"#13-5-Nodejs-修改-MongoDb-数据\" class=\"headerlink\" title=\"13.5 Nodejs 修改 MongoDb 数据\"></a>13.5 Nodejs 修改 MongoDb 数据</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">MongoClient.connect(dbUrl,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接错误&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    db.collection(<span class=\"string\">&#x27;user&#x27;</span>).updateOne(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span>: ObjectID(id)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">        <span class=\"string\">&quot;age&quot;</span>: age,</span><br><span class=\"line\">        <span class=\"string\">&quot;score&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;shuxue&quot;</span>: shuxue,</span><br><span class=\"line\">            <span class=\"string\">&quot;yuwen&quot;</span>: yuwen</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">        res.redirect(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">/*路由跳转*/</span></span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-6-Nodejs-删除-MongoDb-数据\"><a href=\"#13-6-Nodejs-删除-MongoDb-数据\" class=\"headerlink\" title=\"13.6 Nodejs 删除 MongoDb 数据\"></a>13.6 Nodejs 删除 MongoDb 数据</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">MongoClient.connect(dbUrl,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;数据库连接失败&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    db.collection(<span class=\"string\">&#x27;user&#x27;</span>).deleteOne(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span>: ObjectID(id)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    func <span class=\"function\"><span class=\"title\">tion</span>(<span class=\"params\">error, result</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;删除数据失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">        res.redirect(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">/*路由跳转*/</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四、Express-安装和使用\"><a href=\"#十四、Express-安装和使用\" class=\"headerlink\" title=\"十四、Express 安装和使用\"></a>十四、Express 安装和使用</h1><h2 id=\"14-1-Express-简单介绍\"><a href=\"#14-1-Express-简单介绍\" class=\"headerlink\" title=\"14.1 Express 简单介绍\"></a>14.1 Express 简单介绍</h2><ul>\n<li>Express 是一个基于 Node.js 平台，快速、开放、极简的 web 开发框架</li>\n<li>Express 框架是后台的 Node 框架，所以和 jQuery、zepto、yui、bootstrap 都不一个东西。 Express 在后台的受欢迎的程度类似前端的 jQuery，就是企业的事实上的标准。</li>\n</ul>\n<p><strong>Express 特点</strong></p>\n<ul>\n<li><code>Express</code> 是一个基于 <code>Node.js</code> 平台的极简、灵活的 web 应用开发框架，它提供一<br>系列强大的特性，帮助你创建各种 <code>Web</code> 和移动设备应用</li>\n<li>丰富的 HTTP 快捷方法和任意排列组合的 <code>Connect</code> 中间件，让你创建健壮、友好的 API 变得既快速又简单</li>\n<li><code>Express</code> 不对 <code>Node.js</code> 已有的特性进行二次抽象，我们只是在它之上扩展了 Web应用所需的基本功能</li>\n</ul>\n<h2 id=\"14-2-Express-安装使用\"><a href=\"#14-2-Express-安装使用\" class=\"headerlink\" title=\"14.2 Express 安装使用\"></a>14.2 Express 安装使用</h2><p><strong>安装:</strong></p>\n<blockquote>\n<p>安装 Express 框架，就是使用 npm 的命令</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install express --save</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>--save</code> 参数，表示自动修改 <code>package.json</code> 文件，自动添加依赖项</p>\n</blockquote>\n<p><strong>简单使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install express–save <span class=\"comment\">//1.引入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">//2.配置路由</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span><br><span class=\"line\">&#125;); <span class=\"comment\">//3.监听端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"string\">&#x27;127.0.0.1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>完整 Demo</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/*引入 express*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = newexpress();</span><br><span class=\"line\"><span class=\"comment\">/*实例化express 赋值给app*/</span></span><br><span class=\"line\"><span class=\"comment\">//配置路由 匹配 URl 地址实现不同的功能</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;首页&#x27;</span>);</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/search&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;搜索&#x27;</span>); <span class=\"comment\">//?keyword=华为手机&amp;enc=utf-8&amp;suggest=1.his.0.0&amp;wq</span></span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/login&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;登录&#x27;</span>);</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/register&#x27;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;注册&#x27;</span>);</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"14-3-Express-框架中的路由\"><a href=\"#14-3-Express-框架中的路由\" class=\"headerlink\" title=\"14.3 Express 框架中的路由\"></a>14.3 Express 框架中的路由</h2><blockquote>\n<p>路由(Routing)是由一个 URI(或者叫路径)和一个特定的 HTTP 方法(GET、POST 等) 组成的，涉及到应用如何响应客户端对某个网站节点的访问</p>\n</blockquote>\n<p><strong>简单的路由配置</strong></p>\n<blockquote>\n<p>当用 get 请求访问一个网址的时候，做什么事情</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">&quot;网址&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当用 post 访问一个网址的时候，做什么事情:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">&quot;网址&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user 节点接受 PUT 请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.put(<span class=\"string\">&#x27;/user&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;Got a PUT request at /user&#x27;</span>); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user 节点接受 DELETE 请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.delete(<span class=\"string\">&#x27;/user&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;Got a DELETE request at /user&#x27;</span>); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>动态路由配置:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get( ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = req.params[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">    res.send(id); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>路由的正则匹配:(了解)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">&#x27;/ab*cd&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </span><br><span class=\"line\">    res.send(<span class=\"string\">&#x27;ab*cd&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>路由里面获取 Get 传值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /news?id=2&amp;sex=nan</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/news, function(req, res) &#123; </span></span><br><span class=\"line\"><span class=\"string\">    console.log(req.query);</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-4-Express-框架中-ejs-的安装使用\"><a href=\"#14-4-Express-框架中-ejs-的安装使用\" class=\"headerlink\" title=\"14.4 Express 框架中 ejs 的安装使用\"></a>14.4 Express 框架中 ejs 的安装使用</h2><p><strong>Express 中 ejs 的安装:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install ejs --save </span><br><span class=\"line\"></span><br><span class=\"line\">// 或者:</span><br><span class=\"line\">npm install ejs --save-dev</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>Express 中 ejs 的使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.set(<span class=\"string\">&quot;view engine&quot;</span>, <span class=\"string\">&quot;ejs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;&#125;);</span><br><span class=\"line\">        res.render(<span class=\"string\">&quot;news&quot;</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;news&quot;</span>: [<span class=\"string\">&quot;我是小新闻啊&quot;</span>, <span class=\"string\">&quot;我也是啊&quot;</span>, <span class=\"string\">&quot;哈哈哈哈&quot;</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>指定模板位置 ，默认模板位置在 views</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.set(&#x27;views&#x27;, __dirname + &#x27;/views&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ejs 引入模板</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%- include header.ejs %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ejs 绑定数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%=h%&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ejs 绑定 html 数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%-h%&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ejs 模板判断语句</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% if(true)&#123; %&gt; </span><br><span class=\"line\">    &lt;div&gt;true&lt;/div&gt;</span><br><span class=\"line\">    &lt;%&#125; </span><br><span class=\"line\">  else&#123; %&gt; </span><br><span class=\"line\">    &lt;div&gt;false&lt; /di v&gt;</span><br><span class=\"line\">&lt;%&#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ejs 模板中循环数据</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%for(var i=0;i&lt;list.length;i++) &#123; %&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&lt;%=list[i] %&gt;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ejs 后缀修改为 Html</strong></p>\n<blockquote>\n<p>这是一个小技巧，看着<code>.ejs</code> 的后缀总觉得不爽，使用如下方法，可以将模板文件的后缀换成我们习惯的<code>.html</code></p>\n</blockquote>\n<ol>\n<li>在 <code>app.js</code> 的头上定义 <code>ejs</code>:,代码如下:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ejs = require(&#x27;ejs&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>注册 html 模板引擎代码如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">&#x27;html&#x27;</span>,ejs.__express);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将模板引擎换成 html代码如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改模板文件的后缀为 <code>.html</code></li>\n</ol>\n<h2 id=\"14-5-利用-Express-static-托管静态文件\"><a href=\"#14-5-利用-Express-static-托管静态文件\" class=\"headerlink\" title=\"14.5 利用 Express.static 托管静态文件\"></a>14.5 利用 Express.static 托管静态文件</h2><ol>\n<li>如果你的静态资源存放在多个目录下面，你可以多次调用 <code>express.static</code> 中间件:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现在，public 目录下面的文件就可以访问了</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/images/kitten.jpg</span><br><span class=\"line\">http://localhost:3000/css/style.css </span><br><span class=\"line\">http://localhost:3000/js/app.js</span><br><span class=\"line\">http://localhost:3000/images/bg.png</span><br><span class=\"line\">http://localhost:3000/hello.html</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>如果你希望所有通过 <code>express.static</code> 访问的文件都存放在一个“虚拟(virtual)”目 录(即目录根本不存在)下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">&#x27;/static&#x27;</span>, express.static(<span class=\"string\">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现在，你就爱可以通过带有 “/static” 前缀的地址来访问 public 目录下 面的文件了</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/static/images/kitten.jpg</span><br><span class=\"line\">http://localhost:3000/static/css/style.css http://localhost:3000/static/js/app.js http://localhost:3000/static/images/bg.png</span><br><span class=\"line\">http://localhost:3000/static/hello.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-6-Express-中间件\"><a href=\"#14-6-Express-中间件\" class=\"headerlink\" title=\"14.6 Express 中间件\"></a>14.6 Express 中间件</h2><ul>\n<li><code>Express</code> 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架:从<br>本质上来说，一个 <code>Express</code> 应用就是在调用各种中间件</li>\n<li>中间件(<code>Middleware</code>) 是一个函数，它可以访问请求对象(request object (req)), 响 应对象(response object (res)), 和 web 应用中处理请求-响应循环流程中的中间件，一般 被命名为 next 的变量</li>\n</ul>\n<p><strong>中间件的功能包括</strong></p>\n<ul>\n<li>执行任何代码</li>\n<li>修改请求和响应对象</li>\n<li>终结请求-响应循环</li>\n<li>调用堆栈中的下一个中间件</li>\n</ul>\n<blockquote>\n<p>如果我的 <code>get</code>、<code>post</code> 回调函数中，没有 <code>next</code> 参数，那么就匹配上第一个路由，就不会往下匹 配了。如果想往下匹配的话，那么需要写 <code>next()</code></p>\n</blockquote>\n<p><strong>Express 应用可使用如下几种中间件</strong></p>\n<ul>\n<li>应用级中间件</li>\n<li>路由级中间件</li>\n<li>错误处理中间件</li>\n<li>内置中间件</li>\n<li>第三方中间件</li>\n</ul>\n<ol>\n<li>应用级中间件</li>\n</ol>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/23.png\"></p>\n<ol start=\"2\">\n<li>路由中间件</li>\n</ol>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/24.png\"></p>\n<ol start=\"3\">\n<li>错误处理中间件</li>\n</ol>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/25.png\"></p>\n<ol start=\"4\">\n<li>内置中间件</li>\n</ol>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/26.png\"></p>\n<ol start=\"5\">\n<li>第三方中间件</li>\n</ol>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/27.png\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/28.png\"></p>\n<h2 id=\"14-7-获取-Get-Post-请求的参数\"><a href=\"#14-7-获取-Get-Post-请求的参数\" class=\"headerlink\" title=\"14.7 获取 Get Post 请求的参数\"></a>14.7 获取 Get Post 请求的参数</h2><ul>\n<li><code>GET</code> 请求的参数在 <code>URL</code> 中，在原生 <code>Node</code> 中，需要使用 <code>url</code> 模块来识别参数字符串。在<code>Express</code> 中，不需要使用 <code>url</code> 模块了。可以直接使用 <code>req.query</code> 对象</li>\n<li><code>POST</code> 请求在 <code>express</code> 中不能直接获得，可以使用 <code>body-parser</code> 模块。使用后，将可以用<code>req.body</code>得到参数。但是如果表单中含有文件上传，那么还是需要使用 <code>formidable</code> 模块</li>\n</ul>\n<p><strong>1. 安装</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install body-parser</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 使用 req.body 获取 post 过来的参数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;body-parser&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parse application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">    <span class=\"attr\">extended</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parse application/json</span></span><br><span class=\"line\">app.use(bodyParser.json()) </span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain&#x27;</span>) res.write(<span class=\"string\">&#x27;you posted:\\n&#x27;</span>) res.end(<span class=\"built_in\">JSON</span>.stringify(req.body, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十五、express中间件cookie的基本使用\"><a href=\"#十五、express中间件cookie的基本使用\" class=\"headerlink\" title=\"十五、express中间件cookie的基本使用\"></a>十五、express中间件cookie的基本使用</h1><h2 id=\"15-1-Cookie-简介\"><a href=\"#15-1-Cookie-简介\" class=\"headerlink\" title=\"15.1 Cookie 简介\"></a>15.1 Cookie 简介</h2><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/29.png\"></p>\n<h2 id=\"15-2-Cookie-特点\"><a href=\"#15-2-Cookie-特点\" class=\"headerlink\" title=\"15.2 Cookie 特点\"></a>15.2 Cookie 特点</h2><ul>\n<li><code>cookie</code> 保存在浏览器本地</li>\n<li>正常设置的 <code>cookie</code> 是不加密的，用户可以自由看到;</li>\n<li>用户可以删除 <code>cookie</code>，或者禁用它</li>\n<li><code>cookie</code> 可以被篡改</li>\n<li><code>cookie</code> 可以用于攻击</li>\n<li><code>cookie</code> 存储量很小。未来实际上要被 <code>localStorage</code> 替代，但是后者 <code>IE9</code> 兼容</li>\n</ul>\n<h2 id=\"15-3-Cookie-的使用\"><a href=\"#15-3-Cookie-的使用\" class=\"headerlink\" title=\"15.3 Cookie 的使用\"></a>15.3 Cookie 的使用</h2><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/30.png\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/31.png\"><br><img src=\"node/32.png\"></p>\n<p><strong>设置 cookie</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">&#x27;rememberme&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, &#123; <span class=\"attr\">maxAge</span>: <span class=\"number\">900000</span>, <span class=\"attr\">httpOnly</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">res.cookie(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;tobi&#x27;</span>, &#123; <span class=\"attr\">do</span>: <span class=\"string\">&#x27;.example.com&#x27;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/admin&#x27;</span>, <span class=\"attr\">secure</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res.cookie(<span class=\"string\">&#x27;rememberme&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now() + <span class=\"number\">900000</span>), <span class=\"attr\">httpOnly</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取 cookie</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.cookies.name</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除 cookie</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(&#x27;rememberme&#x27;, &#x27;&#x27;, &#123; expires: new Date(0)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">res.cookie(&#x27;username&#x27;,&#x27;zhangsan&#x27;,&#123;domain:&#x27;.ccc.com&#x27;,maxAge:0,httpOnly:true&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-4-加密-Cookie\"><a href=\"#15-4-加密-Cookie\" class=\"headerlink\" title=\"15.4 加密 Cookie\"></a>15.4 加密 Cookie</h2><p><strong>1. 配置中间件的时候需要传参</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cookie-parser&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cookieParser(<span class=\"string\">&#x27;123456&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 设置 cookie 的时候配置 signed 属性</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">res.c ookie(<span class=\"string\">&#x27;userinfo&#x27;</span>,<span class=\"string\">&#x27;hahaha&#x27;</span>,&#123;<span class=\"attr\">domain</span>:<span class=\"string\">&#x27;.c cc.c om&#x27;</span>,<span class=\"attr\">maxAge</span> :<span class=\"number\">900000</span>,<span class=\"attr\">httpOnly</span> :<span class=\"literal\">true</span>,<span class=\"attr\">signed</span> :<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. signedCookies 调用设置的 cookie</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(req.signedCookies);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十六、express中间件express-session常见参数配置使用\"><a href=\"#十六、express中间件express-session常见参数配置使用\" class=\"headerlink\" title=\"十六、express中间件express-session常见参数配置使用\"></a>十六、express中间件express-session常见参数配置使用</h1><h2 id=\"16-1-Session-简单介绍\"><a href=\"#16-1-Session-简单介绍\" class=\"headerlink\" title=\"16.1 Session 简单介绍\"></a>16.1 Session 简单介绍</h2><blockquote>\n<p><code>session</code> 是另一种记录客户状态的机制，不同的是 <code>Cookie</code>保存在客户端浏览器中，而 <code>session</code> 保存在服<br>务器上</p>\n</blockquote>\n<p><strong>Session 的用途</strong></p>\n<ul>\n<li><code>session</code> 运行在服务器端，当客户端第一次访问服务器时，可以将客户的登录信息保存</li>\n<li>当客户访问其他页面时，可以判断客户的登录状态，做出提示，相当于登录拦截</li>\n<li><code>session</code> 可以和 <code>Redis</code>或者数据库等结合做持久化操作，当服务器挂掉时也不会导致某些客户信息(购物车)<br>丢失。</li>\n</ul>\n<h2 id=\"16-2-Session-的工作流程\"><a href=\"#16-2-Session-的工作流程\" class=\"headerlink\" title=\"16.2 Session 的工作流程\"></a>16.2 Session 的工作流程</h2><blockquote>\n<p>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个 session 对象，生成一个类似于 key,value 的键值对，然后将 key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带 key(cookie)， 找到对应的 session(value)。 客户的信息都保存在 session 中</p>\n</blockquote>\n<h2 id=\"16-3-express-session-的使用\"><a href=\"#16-3-express-session-的使用\" class=\"headerlink\" title=\"16.3 express-session 的使用\"></a>16.3 express-session 的使用</h2><p><strong>1. 安装 express-session</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install express-session --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 引入 express-session</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var session = require(&quot;express-session&quot;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 设置官方文档提供的中间件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&#x27;keyboard cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">resave</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 使用</strong></p>\n<ul>\n<li>设置值 <code>req.session.username = &quot;张三&quot;;</code></li>\n<li>获取值 <code>req.session.username</code></li>\n</ul>\n<h2 id=\"16-4-express-session-的常用参数\"><a href=\"#16-4-express-session-的常用参数\" class=\"headerlink\" title=\"16.4 express-session 的常用参数\"></a>16.4 express-session 的常用参数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&#x27;12345&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">cookie</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">maxAge</span>: <span class=\"number\">60000</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p><strong>行加密的字符串.这个</strong></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/33.png\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/node/34.png\"></p>\n<h2 id=\"16-5-express-session-的常用方法\"><a href=\"#16-5-express-session-的常用方法\" class=\"headerlink\" title=\"16.5 express-session 的常用方法\"></a>16.5 express-session 的常用方法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.session.destroy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*销毁 session*/</span></span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">req.session.username = <span class=\"string\">&#x27;张三&#x27;</span>; <span class=\"comment\">//设置 session req.session.username //获取 </span></span><br><span class=\"line\"></span><br><span class=\"line\">session req.session.cookie.maxAge=<span class=\"number\">0</span>; <span class=\"comment\">//重新设置 cookie 的过期时间</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-6-负载均衡配置-Session，把-Session-保存到数据库-里面\"><a href=\"#16-6-负载均衡配置-Session，把-Session-保存到数据库-里面\" class=\"headerlink\" title=\"16.6 负载均衡配置 Session，把 Session 保存到数据库 里面\"></a>16.6 负载均衡配置 Session，把 Session 保存到数据库 里面</h2><ol>\n<li><p>需要安装<code>express-session</code> 和 <code>connect-mongo</code>模块 </p>\n</li>\n<li><p>引入模块</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express-session&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MongoStore = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;connect-mongo&#x27;</span>)(session);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置中间件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&#x27;keyboard cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">rolling</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">cookie</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">maxAge</span>:<span class=\"number\">100000</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">store</span>: <span class=\"keyword\">new</span> MongoStore(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;mongodb://127.0.0.1:27017/student&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">touchAfter</span>: <span class=\"number\">24</span> * <span class=\"number\">3600</span> <span class=\"comment\">// time period in seconds</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-7-Cookie-和-Session-区别\"><a href=\"#16-7-Cookie-和-Session-区别\" class=\"headerlink\" title=\"16.7 Cookie 和 Session 区别\"></a>16.7 Cookie 和 Session 区别</h2><ol>\n<li><code>cookie</code> 数据存放在客户的浏览器上，<code>session</code> 数据放在服务器上</li>\n<li><code>cookie</code> 不是很安全，别人可以分析存放在本地的 <code>COOKIE</code> 并进行 <code>COOKIE</code> 欺骗 考虑到安全应当使用 <code>session</code></li>\n<li><code>session</code> 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用 <code>COOKIE</code></li>\n<li>单个 <code>cookie</code> 保存的数据不能超过 <code>4K</code>，很多浏览器都限制一个站点最多保存 <code>20</code> 个 <code>cookie</code></li>\n</ol>\n","categories":["Javascript"],"tags":["node.js"]},{"title":"TypeScript","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/TypeScript/","content":"<h1 id=\"第一章-基础篇\"><a href=\"#第一章-基础篇\" class=\"headerlink\" title=\"第一章 基础篇\"></a>第一章 基础篇</h1><blockquote>\n<p>TS基础篇</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-1.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-2.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-3.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-4.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-5.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-6.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-7.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-8.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-9.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/1-10.jpg\"></p>\n<h2 id=\"一、基本类型\"><a href=\"#一、基本类型\" class=\"headerlink\" title=\"一、基本类型\"></a>一、基本类型</h2><ul>\n<li><code>JavaScript</code> 的类型分为两种：原始数据类型和对象类型。</li>\n<li>原始数据类型包括：布尔值、数值、字符串、<code>null</code>、<code>undefined</code> 以及 ES6 中的新类型 <code>Symbol</code></li>\n<li>本节主要介绍前五种原始数据类型在 <code>TypeScript</code> 中的应用。</li>\n<li>布尔值是最基础的数据类型，在 <code>TypeScript</code> 中，使用 <code>boolean</code> 定义布尔值类型</li>\n</ul>\n<p><strong>ES6数据类型</strong></p>\n<ul>\n<li><code>Boolean</code></li>\n<li><code>Number</code></li>\n<li><code>String</code></li>\n<li><code>Array</code></li>\n<li><code>Function</code></li>\n<li><code>Object</code></li>\n<li><code>Symbol</code></li>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n</ul>\n<p><strong>Typescript数据类型</strong></p>\n<ul>\n<li><code>Boolean</code></li>\n<li><code>Number</code></li>\n<li><code>String</code></li>\n<li><code>Array</code></li>\n<li><code>Function</code></li>\n<li><code>Object</code></li>\n<li><code>Symbol</code></li>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>void</code></li>\n<li><code>any</code></li>\n<li><code>never</code></li>\n<li>元组</li>\n<li>枚举</li>\n<li>高级类型</li>\n</ul>\n<p><strong>正确的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">➖➖➖➖➖➖➖➖➖布尔➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isDone: boolean = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事实上 `new Boolean()` 返回的是一个 `Boolean` 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createdByNewBoolean: <span class=\"built_in\">Boolean</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//(直接调用 `Boolean` 也可以返回一个 `boolean` 类型) </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createdByBoolean: boolean = <span class=\"built_in\">Boolean</span>(<span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖数值➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// 数值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: number = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: number = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 中的二进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: number = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 中的八进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: number = <span class=\"number\">0o744</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> notANumber: number = <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> infinityNumber: number = <span class=\"literal\">Infinity</span>;</span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖字符串➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"keyword\">let</span> myName: string = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖空值➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// 没有返回值的函数为void</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertName</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;My name is Tom&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明一个 void 类型的只能将它赋值为 undefined 和 null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"keyword\">void</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖Null 和 Undefined➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的写法</strong></p>\n<blockquote>\n<p>注意:正确的很好记,大多数人都会写正确的,关键是要记住这些错误的!!!</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">➖➖➖➖➖➖➖➖➖布尔➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// 注意，使用构造函数 `Boolean` 创造的对象不是布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createdByNewBoolean: boolean = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"number\">1</span>);❌</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖数值➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: number = <span class=\"string\">&quot;6&quot;</span>;❌</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖字符串➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"keyword\">let</span> myName: string = <span class=\"number\">999</span>;❌</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖空值➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// 没有返回值的函数为void</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertName</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;❌</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明一个 void 类型的只能将它赋值为 undefined 和 null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"keyword\">void</span> = <span class=\"string\">&#x27;I love you&#x27;</span>;❌</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖Null 和 Undefined➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"number\">888</span>;❌</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"number\">999</span>;❌</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、任意值\"><a href=\"#二、任意值\" class=\"headerlink\" title=\"二、任意值\"></a>二、任意值</h2><p><strong>正确的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顾名思义,可以被任何值赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> anyThing: any = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> anyThing: any = <span class=\"number\">888</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> anyThing: any = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> anyThing: any = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> anyThing: any = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> any;</span><br><span class=\"line\">any =<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、类型推论\"><a href=\"#三、类型推论\" class=\"headerlink\" title=\"三、类型推论\"></a>三、类型推论</h2><p><strong>正确的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;  </span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber :string= <span class=\"string\">&#x27;seven&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一句已经被推论为String类型了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;❌</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、联合类型\"><a href=\"#四、联合类型\" class=\"headerlink\" title=\"四、联合类型\"></a>四、联合类型</h2><p><strong>正确的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 联合类型（Union Types）表示取值可以为多种类型中的一种。</span></span><br><span class=\"line\"><span class=\"comment\">// 当你允许某个变量被赋值多种类型的时候,使用联合类型,管道符进行连接</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber: string | number;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可用于方法的参数定义, 都有toString方法,访问 string 和 number 的共有属性是没问题的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getString</span>(<span class=\"params\">something: string | number</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// number类型没有length属性.所以编译错误,因为我们只能访问此联合类型的所有类型里共有的属性或方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength</span>(<span class=\"params\">something: string | number</span>): <span class=\"title\">number</span> </span>&#123;❌</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、对象的类型——接口\"><a href=\"#五、对象的类型——接口\" class=\"headerlink\" title=\"五、对象的类型——接口\"></a>五、对象的类型——接口</h2><p><strong>正确的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 赋值的时候，变量的形状必须和接口的形状保持一致(不能多也不能少,类型还必须一致)</span></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">IUserInfo&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span> : any;<span class=\"comment\">//定义一个任何变量的 age.</span></span><br><span class=\"line\">  userName :string;<span class=\"comment\">//定义一个 username.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserInfo</span>(<span class=\"params\">user : IUserInfo</span>):<span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user.age+<span class=\"string\">&quot;======&quot;</span>+user.userName; \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  ➖➖➖➖➖➖➖➖➖可选属性➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    age?: number; <span class=\"comment\">// 表示这个属性可有可无</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 可索引签名</span></span><br><span class=\"line\">interface StringArrary &#123;</span><br><span class=\"line\">  [index]: string <span class=\"comment\">// 数字索引。通过数字索引，返回string类型</span></span><br><span class=\"line\">  [string]: string <span class=\"comment\">// 字符串索引签名。两者不能混用，一起使用的前提是数字索引是字符串索引的子集</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myArr: StringArrary</span><br><span class=\"line\">myArr = [<span class=\"string\">&#x27;test1&#x27;</span>,<span class=\"string\">&#x27;test2&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> myString = myArr[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  ➖➖➖➖➖➖➖➖➖任意属性➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//希望一个接口允许有任意的属性，可以使用如下方式：旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</span></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span> <span class=\"comment\">// 可以加其他的属性</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖只读属性➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number; <span class=\"comment\">// </span></span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">89757</span>, <span class=\"comment\">// 只读</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</span></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span>❌</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖只读属性➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tom.id = <span class=\"number\">89757</span>; <span class=\"comment\">// 不能被二次赋值❌</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>数组只读属性</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myARr:readonlyArrary&lt;number&gt; = [1,2,3]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、数组的类型\"><a href=\"#六、数组的类型\" class=\"headerlink\" title=\"六、数组的类型\"></a>六、数组的类型</h2><p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fibonacci: number[] = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> fibonacci: <span class=\"built_in\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖用接口表示数组➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\">interface NumberArray &#123;</span><br><span class=\"line\">    [index: number]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fibonacci: NumberArray = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖any 在数组中的应用➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"keyword\">let</span> list: any[] = [<span class=\"string\">&#x27;Xcat Liu&#x27;</span>, <span class=\"number\">25</span>, &#123; <span class=\"attr\">website</span>: <span class=\"string\">&#x27;http://xcatliu.com&#x27;</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖类数组➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args: IArguments = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的项中不允许出现其他的类型：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fibonacci: number[] = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];❌</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// push 方法只允许传入 number 类型的参数，但是却传了一个 string 类型的参数，所以报错了。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fibonacci: number[] = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">fibonacci.push(<span class=\"string\">&#x27;8&#x27;</span>);❌</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类数组（Array-like Object）不是数组类型，比如 arguments</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;❌</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args: number[] = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七、函数的类型\"><a href=\"#七、函数的类型\" class=\"headerlink\" title=\"七、函数的类型\"></a>七、函数的类型</h2><p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要把输入和输出都考虑到</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x: number, y: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖函数表达式➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x: number, y: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 不要混淆了 TypeScript 中的 =&gt; 和 ES6 中的 =&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySum: <span class=\"function\">(<span class=\"params\">x: number, y: number</span>) =&gt;</span> number = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x: number, y: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖接口定义函数的形状➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\">interface SearchFunc &#123;</span><br><span class=\"line\">    (source: string, <span class=\"attr\">subString</span>: string): boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySearch: SearchFunc;</span><br><span class=\"line\">mySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, subString</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.search(subString) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖可选参数➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: string, lastName?: string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = buildName(<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = buildName(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖参数默认值➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: string, lastName: string = <span class=\"string\">&#x27;Cat&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖剩余参数➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// rest 参数只能是最后一个参数，关于 rest 参数,是一个数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array: any[], ...items: any[]</span>) </span>&#123;</span><br><span class=\"line\">    items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        array.push(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\">push(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入多余的（或者少于要求的）参数，是不被允许的：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x: number, y: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); ❌</span><br><span class=\"line\">sum(<span class=\"number\">1</span>);❌</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入多余的（或者少于要求的）参数，是不被允许的：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x: number, y: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可选参数后面不允许再出现必须参数了：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName?: string, lastName: string</span>) </span>&#123;❌</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = buildName(<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = buildName(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-1-函数相关知识点梳理\"><a href=\"#7-1-函数相关知识点梳理\" class=\"headerlink\" title=\"7.1 函数相关知识点梳理\"></a>7.1 函数相关知识点梳理</h3><p><strong>四种声明方式：</strong></p>\n<ul>\n<li>通过<code>function</code></li>\n<li>通过变量</li>\n<li>通过接口</li>\n<li>通过类型别名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">x: number, y: number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add2: <span class=\"function\">(<span class=\"params\">x: number, y: number</span>) =&gt;</span> number</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add3 = <span class=\"function\">(<span class=\"params\">x: number, y: number</span>) =&gt;</span> number</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过类型别名</span></span><br><span class=\"line\">interface add4 &#123;</span><br><span class=\"line\">    (x: number, <span class=\"attr\">y</span>: number): number</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>用interface定义函数和用type定义函数有区别?</strong></p>\n<ul>\n<li><code>type</code>：不是创建新的类型，只是为一个给定的类型起一个名字。<code>type</code>还可以进行联合、交叉等操作，引用起来更简洁</li>\n<li><code>interface</code>：创建新的类型，接口之间还可以继承、声明合并</li>\n<li>如果可能，建议优先使用 <code>interface</code>。</li>\n<li>混合接口一般是为第三方类库写声明文件时会用到，很多类库名称可以直接当函数调用，也可以有些属性和方法。例子可以看一下<code>@types/jest/index.d.ts</code> 里面有一些混合接口。</li>\n<li>用混合接口声明函数和用接口声明类的区别是，接口不能声明类的构造函数（既不带名称的函数），但混合接口可以，其他都一样。</li>\n</ul>\n<p><strong>函数重载</strong></p>\n<p>函数名相同，返回类型不同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add8</span>(<span class=\"params\">...rest: number[]</span>): <span class=\"title\">number</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add8</span>(<span class=\"params\">...rest: string[]</span>): <span class=\"title\">string</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add8</span>(<span class=\"params\">...rest: any[]</span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> first = rest[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> first === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rest.join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> first === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rest.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> pre + cur)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"八、类型断言\"><a href=\"#八、类型断言\" class=\"headerlink\" title=\"八、类型断言\"></a>八、类型断言</h2><ul>\n<li>有时候你会遇到这样的情况，你会比 <code>TypeScript</code> 更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</li>\n<li>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 <code>TypeScript</code> 会假设你，程序员，已经进行了必须的检查。</li>\n</ul>\n<p>类型断言有两种形式。 其一是“尖括号”语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;this is a string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (&lt;string&gt;someValue).length</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>另一个为 <code>as</code> 语法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: any = <span class=\"string\">&#x27;this is a string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: number = (someValue <span class=\"keyword\">as</span> string).length</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 <code>TypeScript</code> 里使用 <code>JSX</code> 时，只有<code> as</code> 语法断言是被允许</p>\n</blockquote>\n<p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以使用类型断言，将 something 断言成 string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength</span>(<span class=\"params\">something: string | number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((&lt;string&gt;something).length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (&lt;string&gt;something).length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> something.toString().length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>错误的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只能访问此联合类型的所有类型里共有的属性或方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength</span>(<span class=\"params\">something: string | number</span>): <span class=\"title\">number</span> </span>&#123; ❌</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"九、类型别名\"><a href=\"#九、类型别名\" class=\"headerlink\" title=\"九、类型别名\"></a>九、类型别名</h2><p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 type 创建类型别名,类型别名常用于联合类型</span></span><br><span class=\"line\">type Name = string;</span><br><span class=\"line\">type NameResolver = <span class=\"function\">() =&gt;</span> string;</span><br><span class=\"line\">type NameOrResolver = Name | NameResolver;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\">n: NameOrResolver</span>): <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、枚举\"><a href=\"#十、枚举\" class=\"headerlink\" title=\"十、枚举\"></a>十、枚举</h2><p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天\t</span></span><br><span class=\"line\"><span class=\"comment\">// 枚举就是枚举值到枚举名进行反向映射</span></span><br><span class=\"line\"></span><br><span class=\"line\">enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Days[<span class=\"string\">&quot;Sun&quot;</span>]); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Days[<span class=\"number\">0</span>]); <span class=\"comment\">// &#x27;Sun&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">enum Days &#123;Sun = <span class=\"number\">7</span>, Mon = <span class=\"number\">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Days[<span class=\"string\">&quot;Sun&quot;</span>]); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十一、类\"><a href=\"#十一、类\" class=\"headerlink\" title=\"十一、类\"></a>十一、类</h2><p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">➖➖➖➖➖➖➖➖➖类➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.sayHi()); <span class=\"comment\">// My name is Jack</span></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖继承➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name); <span class=\"comment\">// 调用父类的 constructor(name)</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Meow, &#x27;</span> + <span class=\"built_in\">super</span>.sayHi(); <span class=\"comment\">// 调用父类的 sayHi()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&#x27;Tom&#x27;</span>); <span class=\"comment\">// Tom</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.sayHi()); <span class=\"comment\">// Meow, My name is Tom</span></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖存储器➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">name</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jack&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">name</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setter: &#x27;</span> + value);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&#x27;Kitty&#x27;</span>); <span class=\"comment\">// setter: Kitty</span></span><br><span class=\"line\">a.name = <span class=\"string\">&#x27;Tom&#x27;</span>; <span class=\"comment\">// setter: Tom</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖静态方法➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">isAnimal</span>(<span class=\"params\">a</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a <span class=\"keyword\">instanceof</span> Animal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\">Animal.isAnimal(a); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 只能通过类名调用</span></span><br><span class=\"line\">a.isAnimal(a); <span class=\"comment\">// TypeError: a.isAnimal is not a function ❌</span></span><br><span class=\"line\">➖➖➖➖➖➖➖➖➖抽象类➖➖➖➖➖➖➖➖➖</span><br><span class=\"line\"><span class=\"comment\">// 只能被继承，不能被实例化</span></span><br><span class=\"line\">abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;eat&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  abstract sleep(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类必须实现抽象类的抽象方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name: string</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>()</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sleep</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;dog sleep&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&#x27;wang&#x27;</span>)</span><br><span class=\"line\">dog.eat()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-1类与接口的关系\"><a href=\"#11-1类与接口的关系\" class=\"headerlink\" title=\"11.1类与接口的关系\"></a>11.1类与接口的关系</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    eat(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现接口中声明的属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name: string</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口可以像类一样实现继承</span></span><br><span class=\"line\">interface Man <span class=\"keyword\">extends</span> Human &#123;</span><br><span class=\"line\">    run(): voild</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Child &#123;</span><br><span class=\"line\">    cry(): voild</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Boy <span class=\"keyword\">extends</span> Man,Child &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加被继承过来的属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> body: Boy = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">cry</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十二、public-private-和-protected\"><a href=\"#十二、public-private-和-protected\" class=\"headerlink\" title=\"十二、public private 和 protected\"></a>十二、public private 和 protected</h2><ul>\n<li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li>\n<li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li>\n<li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</li>\n</ul>\n<h2 id=\"十三、泛型\"><a href=\"#十三、泛型\" class=\"headerlink\" title=\"十三、泛型\"></a>十三、泛型</h2><blockquote>\n<p>更多详情 <a href=\"http://blog.poetries.top/ts-axios/chapter2/generic.html\">http://blog.poetries.top/ts-axios/chapter2/generic.html</a></p>\n</blockquote>\n<blockquote>\n<p>泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持。<strong>泛型理解为代表类型的参数，只是另一个维度的参数</strong></p>\n</blockquote>\n<p><strong>正确的做法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只能返回string类型的数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\">value:string</span>):<span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同时返回 string类型 和number类型  （代码冗余）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData1</span>(<span class=\"params\">value:string</span>):<span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData2</span>(<span class=\"params\">value:number</span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;使用泛型后就可以解决这个问题</span><br><span class=\"line\"><span class=\"comment\">// T表示泛型，具体什么类型是调用这个方法的时候决定的</span></span><br><span class=\"line\"><span class=\"comment\">// 表示参数是什么类型就返回什么类型~~~</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData&lt;number&gt;(<span class=\"number\">123</span>);</span><br><span class=\"line\">getData&lt;string&gt;(<span class=\"string\">&#x27;1214231&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义接口</span></span><br><span class=\"line\">interface ConfigFn&#123;</span><br><span class=\"line\">    &lt;T&gt;(value:T):T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getData:ConfigFn=<span class=\"function\"><span class=\"keyword\">function</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData&lt;string&gt;(<span class=\"string\">&#x27;张三&#x27;</span>);</span><br><span class=\"line\">getData&lt;string&gt;(<span class=\"number\">1243</span>);  <span class=\"comment\">//错误</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-1-泛型函数和接口\"><a href=\"#13-1-泛型函数和接口\" class=\"headerlink\" title=\"13.1 泛型函数和接口\"></a>13.1 泛型函数和接口</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这两个等价的，使用时无需指定类型</span></span><br><span class=\"line\">type Log = &lt;T&gt;<span class=\"function\">(<span class=\"params\">value: T</span>) =&gt;</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只约束改成员</span></span><br><span class=\"line\">interface Log &#123;</span><br><span class=\"line\">  &lt;T&gt;(value: T):T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这两个等价的，使用时必须指定类型</span></span><br><span class=\"line\">type Log&lt;T&gt; = <span class=\"function\">(<span class=\"params\">value: T</span>) =&gt;</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 约束接口的所有成员</span></span><br><span class=\"line\">interface Log&lt;T&gt; &#123;</span><br><span class=\"line\">  (value: T):T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-2-泛型类与泛型约束\"><a href=\"#13-2-泛型类与泛型约束\" class=\"headerlink\" title=\"13.2 泛型类与泛型约束\"></a>13.2 泛型类与泛型约束</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把泛型放到类的后面，就可以约束所有成员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Log</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\">value: T</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 不能约束静态成员</span></span><br><span class=\"line\">   <span class=\"comment\">// static eat() // 报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化类 传入类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> log1 = <span class=\"keyword\">new</span> Log&lt;number&gt;()</span><br><span class=\"line\">log1.run(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不指定类型参数传任意都允许</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> log2 = <span class=\"keyword\">new</span> Log()</span><br><span class=\"line\">log2.run(<span class=\"string\">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>类型约束</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Length &#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// T继承了接口 约束了不是任意类型都可传。传入的参数必须有length属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Length</span>&gt;(<span class=\"params\">value: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, value.length)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如数组、字符串、对象都有length属性</span></span><br><span class=\"line\">log([<span class=\"number\">1</span>])</span><br><span class=\"line\">log(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">log(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数和类可以轻松支持多种类型，增强程序的扩展性</li>\n<li>不必写多条函数重载</li>\n<li>灵活控制类型之间的约束</li>\n</ul>\n<p><strong>对象属性约束</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型约束对象中的属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProp</span>&lt;<span class=\"title\">T</span>,<span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">obj:T,key: K</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj[key]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"十四、类型检查机制\"><a href=\"#十四、类型检查机制\" class=\"headerlink\" title=\"十四、类型检查机制\"></a>十四、类型检查机制</h2><h3 id=\"14-1-类型检查机制\"><a href=\"#14-1-类型检查机制\" class=\"headerlink\" title=\"14.1 类型检查机制\"></a>14.1 类型检查机制</h3><blockquote>\n<p>编译器在做类型检查时，秉承的一些原则，表现出的一些行为</p>\n</blockquote>\n<p>作用：辅助开发，提高开发效率</p>\n<ul>\n<li>类型推断</li>\n<li>类型兼容性</li>\n<li>类型保护</li>\n</ul>\n<blockquote>\n<p>所谓类型推断：不需要指定变量的类型（函数的返回值类型），TS可以根据某些规则自动的为其推断出一个类型</p>\n</blockquote>\n<ul>\n<li>基础类型推断</li>\n<li>最佳通用类型推断</li>\n<li>上下文类型推断</li>\n</ul>\n<blockquote>\n<p>基础类型推断，从右向左。但是有些是从左向右推断</p>\n</blockquote>\n<p>如事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ts 根据onkeydown推断出类型</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onkeydown = <span class=\"function\"><span class=\"params\">event</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过类型断言阻断TS的类型推断</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Foo &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//let foo = &#123;&#125; as Foo</span></span><br><span class=\"line\"><span class=\"comment\">//foo.bar = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo: Foo = &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-类型保护机制\"><a href=\"#14-2-类型保护机制\" class=\"headerlink\" title=\"14.2 类型保护机制\"></a>14.2 类型保护机制</h3><blockquote>\n<p>联合类型适合于那些值可以为不同类型的情况。 但当我们想确切地了解是否为 Fish 或者是 Bird 时怎么办？ JavaScript 里常用来区分这 2 个可能值的方法是检查成员是否存在。如之前提及的，我们只能访问联合类型中共同拥有的成员</p>\n</blockquote>\n<p><strong>不同的判断方法有不同的使用场景：</strong></p>\n<ul>\n<li><code>typeof</code>：判断一个变量的类型</li>\n<li><code>instanceof</code>：判断一个实例是否属于某个类</li>\n<li><code>in</code>：判断一个属性是否属于某个对象</li>\n<li>类型保护函数：某些判断可能不是一条语句能够搞定的，需要更多复杂的逻辑，适合封装到一个函数内</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLanguage</span>(<span class=\"params\">type: Type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lang = type === type.Strong ? <span class=\"keyword\">new</span> Java(): <span class=\"keyword\">new</span> Javascript()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 类型保护instanceof</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lang <span class=\"keyword\">instanceof</span> Java)&#123;</span><br><span class=\"line\">        lang.hellJava()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lang.hellJavaScript()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"string\">&#x27;java&#x27;</span> <span class=\"keyword\">in</span> lang) &#123;</span><br><span class=\"line\">        lang.hellJava()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lang.hellJavaScript()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 类型保护函数方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isJava(lang)) &#123;</span><br><span class=\"line\">        lang.hellJava()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lang.hellJavaScript()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一种类型保护函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isJava</span>(<span class=\"params\">lang: Java | Javascript</span>): <span class=\"title\">lang</span> <span class=\"title\">is</span> <span class=\"title\">Java</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类型断言</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (lang <span class=\"keyword\">as</span> Java).lang.helloJava !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pet = getSmallPet()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每一个成员访问都会报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (pet.swim) &#123;</span><br><span class=\"line\">  pet.swim()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pet.fly) &#123;</span><br><span class=\"line\">  pet.fly()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了让这段代码工作，我们要使用类型断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pet = getSmallPet()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((pet <span class=\"keyword\">as</span> Fish).swim) &#123;</span><br><span class=\"line\">  (pet <span class=\"keyword\">as</span> Fish).swim()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  (pet <span class=\"keyword\">as</span> Bird).fly()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-2-1-用户自定义的类型保护\"><a href=\"#14-2-1-用户自定义的类型保护\" class=\"headerlink\" title=\"14.2.1 用户自定义的类型保护\"></a>14.2.1 用户自定义的类型保护</h4><ul>\n<li>这里可以注意到我们不得不多次使用类型断言。如果我们一旦检查过类型，就能在之后的每个分支里清楚地知道 <code>pet</code> 的类型的话就好了。</li>\n<li><code>TypeScript</code> 里的类型保护机制让它成为了现实。 类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个类型谓词</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFish</span>(<span class=\"params\">pet: Fish | Bird</span>): <span class=\"title\">pet</span> <span class=\"title\">is</span> <span class=\"title\">Fish</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (pet <span class=\"keyword\">as</span> Fish).swim !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在这个例子里，<code>pet is Fish</code> 就是类型谓词。谓词为 <code>parameterName is Type</code> 这种形式， <code>parameterName</code> 必须是来自于当前函数签名里的一个参数名。</li>\n<li>每当使用一些变量调用 <code>isFish</code> 时，TypeScript 会将变量缩减为那个具体的类型</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isFish(pet)) &#123;</span><br><span class=\"line\">  pet.swim()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  pet.fly()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意 TypeScript 不仅知道在 <code>if</code> 分支里 <code>pet</code> 是 <code>Fish</code> 类型；它还清楚在<code> else</code> 分支里，一定不是 <code>Fish</code>类型而是 <code>Bird</code> 类型</p>\n</blockquote>\n<h4 id=\"14-2-2-typeof-类型保护\"><a href=\"#14-2-2-typeof-类型保护\" class=\"headerlink\" title=\"14.2.2 typeof 类型保护\"></a>14.2.2 typeof 类型保护</h4><p>我们可以像下面这样利用类型断言来写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span> (<span class=\"params\">x: any</span>):<span class=\"title\">x</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span> (<span class=\"params\">x: any</span>): <span class=\"title\">x</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">padLeft</span> (<span class=\"params\">value: string, padding: string | number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNumber(padding)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(padding + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27; &#x27;</span>) + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isString(padding)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padding + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Expected string or number, got &#x27;<span class=\"subst\">$&#123;padding&#125;</span>&#x27;.`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>然而，你必须要定义一个函数来判断类型是否是原始类型，但这并不必要。其实我们不必将 <code>typeof x === &#39;number&#39;</code>抽象成一个函数，因为 TypeScript 可以将它识别为一个类型保护。 也就是说我们可以直接在代码里检查类型了</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">padLeft</span> (<span class=\"params\">value: string, padding: string | number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(padding + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27; &#x27;</span>) + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padding + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Expected string or number, got &#x27;<span class=\"subst\">$&#123;padding&#125;</span>&#x27;.`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这些 <code>typeof</code> 类型保护只有两种形式能被识别：<code>typeof v === &quot;typename&quot;</code> 和 <code>typeof v !== &quot;typename&quot;</code>， <code>&quot;typename&quot;</code>必须是 <code>&quot;number&quot;</code>， <code>&quot;string&quot;</code>，<code>&quot;boolean&quot;</code> 或 <code>&quot;symbol&quot;</code>。 但是 TypeScript 并不会阻止你与其它字符串比较，只是 TypeScript 不会把那些表达式识别为类型保护。</p>\n</blockquote>\n<h4 id=\"14-2-3-instanceof-类型保护\"><a href=\"#14-2-3-instanceof-类型保护\" class=\"headerlink\" title=\"14.2.3 instanceof 类型保护\"></a>14.2.3 instanceof 类型保护</h4><ul>\n<li>如果你已经阅读了 <code>typeof</code> 类型保护并且对 JavaScript 里的 <code>instanceof</code> 操作符熟悉的话，你可能已经猜到了这节要讲的内容。</li>\n<li><code>instanceof</code> 类型保护是通过构造函数来细化类型的一种方式。我们把之前的例子做一个小小的改造：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> </span>&#123;</span><br><span class=\"line\">  fly () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;bird fly&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  layEggs () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;bird lay eggs&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fish</span> </span>&#123;</span><br><span class=\"line\">  swim () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fish swim&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  layEggs () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fish lay eggs&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomPet</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() &gt; <span class=\"number\">0.5</span> ? <span class=\"keyword\">new</span> Bird() : <span class=\"keyword\">new</span> Fish()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> pet = getRandomPet()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (pet <span class=\"keyword\">instanceof</span> Bird) &#123;</span><br><span class=\"line\">  pet.fly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pet <span class=\"keyword\">instanceof</span> Fish) &#123;</span><br><span class=\"line\">  pet.swim()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"十五、高级类型\"><a href=\"#十五、高级类型\" class=\"headerlink\" title=\"十五、高级类型\"></a>十五、高级类型</h2><h3 id=\"15-1-交叉类型（取并集）\"><a href=\"#15-1-交叉类型（取并集）\" class=\"headerlink\" title=\"15.1 交叉类型（取并集）\"></a>15.1 交叉类型（取并集）</h3><blockquote>\n<p>交叉类型是将多个类型合并为一个类型。这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，<code>Person &amp; Loggable</code> 同时是 <code>Person</code> 和 <code>Loggable</code>。就是说这个类型的对象同时拥有了这两种类型的成员。</p>\n</blockquote>\n<blockquote>\n<p>我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript里发生这种情况的场合很多！）下面是如何创建混入的一个简单例子</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>&gt; (<span class=\"params\">first: T, second: U</span>): <span class=\"title\">T</span> &amp; <span class=\"title\">U</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125; <span class=\"keyword\">as</span> T &amp; U</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> id <span class=\"keyword\">in</span> first) &#123;</span><br><span class=\"line\">    result[id] = first[id] <span class=\"keyword\">as</span> any</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> id <span class=\"keyword\">in</span> second) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.hasOwnProperty(id)) &#123;</span><br><span class=\"line\">      result[id] = second[id] <span class=\"keyword\">as</span> any</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">public name: string</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Loggable &#123;</span><br><span class=\"line\">  log (): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span> <span class=\"title\">implements</span> <span class=\"title\">Loggable</span> </span>&#123;</span><br><span class=\"line\">  log () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jim = extend(<span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Jim&#x27;</span>), <span class=\"keyword\">new</span> ConsoleLogger())</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = jim.name</span><br><span class=\"line\">jim.log()</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface DogInterface &#123;</span><br><span class=\"line\">    run(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface CatInterface &#123;</span><br><span class=\"line\">    jump(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pet 具备两个接口的所有方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pet: DogInterface &amp; CatInterface = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">jump</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a: number | string = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b: <span class=\"string\">&#x27;a&#x27;</span> | <span class=\"string\">&#x27;b&#x27;</span> | <span class=\"string\">&#x27;c&#x27;</span> <span class=\"comment\">// 字面量联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c: <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span> <span class=\"comment\">// 数字联合类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"title\">implements</span> <span class=\"title\">DogInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>  <span class=\"title\">implements</span> <span class=\"title\">CatInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">jump</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Master &#123; Boy, Girl &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPet</span>(<span class=\"params\">master: Master</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pet = master === Master.Boy ? <span class=\"keyword\">new</span> Dog() : <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">    <span class=\"comment\">// pet.run()</span></span><br><span class=\"line\">    <span class=\"comment\">// pet.jump()</span></span><br><span class=\"line\">    pet.eat()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pet</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Square &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">    size: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Rectangle &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;rectangle&quot;</span>;</span><br><span class=\"line\">    width: number;</span><br><span class=\"line\">    height: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Circle &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">    radius: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Shape = Square | Rectangle | Circle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">s: Shape</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (s.kind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;square&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.size * s.size;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;rectangle&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.height * s.width;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;circle&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * s.radius ** <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"function\">(<span class=\"params\">e: never</span>) =&gt;</span> &#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(e)&#125;)(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(area(&#123;<span class=\"attr\">kind</span>: <span class=\"string\">&#x27;circle&#x27;</span>, <span class=\"attr\">radius</span>: <span class=\"number\">1</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-2-索引类型\"><a href=\"#15-2-索引类型\" class=\"headerlink\" title=\"15.2 索引类型\"></a>15.2 索引类型</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function getValues(obj: any, keys: string[]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return keys.map(key =&gt; obj[key])</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getValues</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">obj: T, keys: K[]</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>][] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> keys.map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> obj[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getValues(obj, [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]))</span><br><span class=\"line\"><span class=\"comment\">// console.log(getValues(obj, [&#x27;d&#x27;, &#x27;e&#x27;]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// keyof T</span></span><br><span class=\"line\">interface Obj &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: number;</span><br><span class=\"line\">    b: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> key: keyof Obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// T[K]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> value: Obj[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// T extends U</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"15-3-映射类型\"><a href=\"#15-3-映射类型\" class=\"headerlink\" title=\"15.3 映射类型\"></a>15.3 映射类型</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Obj &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: string;</span><br><span class=\"line\">    b: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使得每个成员属性变为只读</span></span><br><span class=\"line\">type ReadonlyObj = Readonly&lt;Obj&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把一个接口属性变为可选</span></span><br><span class=\"line\">type PartialObj = Partial&lt;Obj&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽取obj的子集</span></span><br><span class=\"line\">type PickObj = Pick&lt;Obj, <span class=\"string\">&#x27;a&#x27;</span> | <span class=\"string\">&#x27;b&#x27;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">type RecordObj = Record&lt;<span class=\"string\">&#x27;x&#x27;</span> | <span class=\"string\">&#x27;y&#x27;</span>, Obj&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-条件类型\"><a href=\"#15-4-条件类型\" class=\"headerlink\" title=\"15.4 条件类型\"></a>15.4 条件类型</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T extends U ? X : Y</span></span><br><span class=\"line\"></span><br><span class=\"line\">type TypeName&lt;T&gt; =</span><br><span class=\"line\">    T <span class=\"keyword\">extends</span> string ? <span class=\"string\">&quot;string&quot;</span> :</span><br><span class=\"line\">    T <span class=\"keyword\">extends</span> number ? <span class=\"string\">&quot;number&quot;</span> :</span><br><span class=\"line\">    T <span class=\"keyword\">extends</span> boolean ? <span class=\"string\">&quot;boolean&quot;</span> :</span><br><span class=\"line\">    T <span class=\"keyword\">extends</span> <span class=\"literal\">undefined</span> ? <span class=\"string\">&quot;undefined&quot;</span> :</span><br><span class=\"line\">    T <span class=\"keyword\">extends</span> <span class=\"built_in\">Function</span> ? <span class=\"string\">&quot;function&quot;</span> :</span><br><span class=\"line\">    <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">type T1 = TypeName&lt;string&gt;</span><br><span class=\"line\">type T2 = TypeName&lt;string[]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (A | B) extends U ? X : Y</span></span><br><span class=\"line\"><span class=\"comment\">// (A extends U ? X : Y) | (B extends U ? X : Y)</span></span><br><span class=\"line\">type T3 = TypeName&lt;string | string[]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">type Diff&lt;T, U&gt; = T <span class=\"keyword\">extends</span> U ? never : T</span><br><span class=\"line\">type T4 = Diff&lt;<span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span> | <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;e&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// Diff&lt;&quot;a&quot;, &quot;a&quot; | &quot;e&quot;&gt; | Diff&lt;&quot;b&quot;, &quot;a&quot; | &quot;e&quot;&gt; | Diff&lt;&quot;c&quot;, &quot;a&quot; | &quot;e&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// never | &quot;b&quot; | &quot;c&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;b&quot; | &quot;c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">type NotNull&lt;T&gt; = Diff&lt;T, <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span>&gt;</span><br><span class=\"line\">type T5 = NotNull&lt;string | number | <span class=\"literal\">undefined</span> | <span class=\"literal\">null</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exclude&lt;T, U&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// NonNullable&lt;T&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Extract&lt;T, U&gt;</span></span><br><span class=\"line\">type T6 = Extract&lt;<span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span> | <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;e&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReturnType&lt;T&gt;</span></span><br><span class=\"line\">type T8 = ReturnType&lt;<span class=\"function\">() =&gt;</span> string&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-5-联合类型\"><a href=\"#15-5-联合类型\" class=\"headerlink\" title=\"15.5 联合类型\"></a>15.5 联合类型</h3><blockquote>\n<p>联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 <code>number</code> 或 <code>string</code> 类型的参数。 例如下面的函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">padLeft</span>(<span class=\"params\">value: string, padding: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(padding + <span class=\"number\">1</span>).join(<span class=\"string\">&#x27; &#x27;</span>) + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padding + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Expected string or number, got &#x27;<span class=\"subst\">$&#123;padding&#125;</span>&#x27;.`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">padLeft(<span class=\"string\">&#x27;Hello world&#x27;</span>, <span class=\"number\">4</span>) <span class=\"comment\">// returns &quot;    Hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>padLeft 存在一个问题，padding 参数的类型指定成了 any。 这就是说我们可以传入一个既不是 number 也不是 string 类型的参数，但是 TypeScript 却不报错</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> indentedString = padLeft(<span class=\"string\">&#x27;Hello world&#x27;</span>, <span class=\"literal\">true</span>) <span class=\"comment\">// 编译阶段通过，运行时报错</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了解决这个问题，我们可以使用 联合类型做为 <code>padding</code> 的参数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">padLeft</span>(<span class=\"params\">value: string, padding: string | number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> indentedString = padLeft(<span class=\"string\">&#x27;Hello world&#x27;</span>, <span class=\"literal\">true</span>) <span class=\"comment\">// 编译阶段报错</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>联合类型表示一个值可以是几种类型之一。我们用竖线（<code>|</code>）分隔每个类型，所以 <code>number | string</code> 表示一个值可以是 <code>number </code>或<code> string</code>。</li>\n</ul>\n<blockquote>\n<p>如果一个值是联合类型，<strong>我们只能访问此联合类型的所有类型里共有的成员</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Bird &#123;</span><br><span class=\"line\">  fly()</span><br><span class=\"line\">  layEggs()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Fish &#123;</span><br><span class=\"line\">  swim()</span><br><span class=\"line\">  layEggs()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallPet</span>(<span class=\"params\"></span>): <span class=\"title\">Fish</span> | <span class=\"title\">Bird</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> pet = getSmallPet()</span><br><span class=\"line\">pet.layEggs() <span class=\"comment\">// okay</span></span><br><span class=\"line\">pet.swim()    <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的联合类型可能有点复杂：如果一个值的类型是 <code>A | B</code>，我们能够确定的是它包含了 <code>A</code> 和 <code>B</code> 中共有的成员。这个例子里，Fish 具有一个 <code>swim</code> 方法，我们不能确定一个 <code>Bird | Fish</code>类型的变量是否有 <code>swim</code>方法。 如果变量在运行时是 Bird 类型，那么调用 <code>pet.swim() </code>就出错了</p>\n</blockquote>\n<h2 id=\"十六、初学者的困惑\"><a href=\"#十六、初学者的困惑\" class=\"headerlink\" title=\"十六、初学者的困惑\"></a>十六、初学者的困惑</h2><h3 id=\"16-1-如何优雅的声明类型\"><a href=\"#16-1-如何优雅的声明类型\" class=\"headerlink\" title=\"16.1 如何优雅的声明类型\"></a>16.1 如何优雅的声明类型</h3><h4 id=\"16-1-1-基础\"><a href=\"#16-1-1-基础\" class=\"headerlink\" title=\"16.1.1 基础\"></a>16.1.1 基础</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Basic &#123;</span><br><span class=\"line\">  <span class=\"attr\">num</span>: number;</span><br><span class=\"line\">  str: string | <span class=\"literal\">null</span>;</span><br><span class=\"line\">  bol?: boolean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>五种 JS 值类型就声明好了。那数组、函数呢？</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Func &#123;</span><br><span class=\"line\">  func(str: string): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Arr &#123;</span><br><span class=\"line\">  <span class=\"attr\">str</span>: string[];</span><br><span class=\"line\">  mixed: <span class=\"built_in\">Array</span>&lt;string | number&gt;;</span><br><span class=\"line\">  fixedStructure: [string, number];</span><br><span class=\"line\">  basics: Basic[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>枚举类型也是很常用的，比如声明一个状态机的各个状态</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">enum Status &#123;</span><br><span class=\"line\">  Draft,</span><br><span class=\"line\">  Published</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可指定值</span></span><br><span class=\"line\">enum Status &#123;</span><br><span class=\"line\">  Draft = <span class=\"string\">&#x27;Draft&#x27;</span>,</span><br><span class=\"line\">  Published = <span class=\"string\">&#x27;Published&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-1-2-糅合\"><a href=\"#16-1-2-糅合\" class=\"headerlink\" title=\"16.1.2 糅合\"></a>16.1.2 糅合</h4><p><strong>独立声明</strong></p>\n<blockquote>\n<p>一个 <code>ts</code> 文件只声明一个类型或者接口，文件名为需要暴露的类型名称，方便检索和管理</p>\n</blockquote>\n<p><strong>就近声明</strong></p>\n<blockquote>\n<p>当一个声明没有被外部引用或者依赖时，可以考虑就近放在使用的地方，典型的场景是 <code>React</code> 组件的 <code>Props</code> 和 <code>State</code> 的类型声明</p>\n</blockquote>\n<p><strong>按职责分组</strong></p>\n<ul>\n<li>在项目中，需要声明类型的可大致分为两类：一类是 <code>model</code>，也就是接口请求相关的，包括入参和出参；另一类是 <code>view</code>，界面渲染相关的。因此，我在 独立声明 的基础上，可以类型按照<code>model</code> 和 <code>view</code> 的维度进行分组，相互独立。</li>\n<li>那么问题来了，如果是独立的类型声明的话，怎么把 model 的数据应用到 <code>view</code> 呢？ 可能你需要一个 <code>adapter</code> 来做类型的的转换：<code>DTOTypes</code> -&gt; <code>adapter</code> -&gt; <code>ViewTypes</code>, 完成类似于将接口中的字符串映射成枚举类型这之类的转换</li>\n</ul>\n<p><strong>any</strong></p>\n<blockquote>\n<p>当遇到确实解决不了的类型报错的时候，<code>as any</code> 能带给你不一样的快感，但是不建议使用啊</p>\n</blockquote>\n<h3 id=\"16-2-如何引用外部库\"><a href=\"#16-2-如何引用外部库\" class=\"headerlink\" title=\"16.2 如何引用外部库\"></a>16.2 如何引用外部库</h3><blockquote>\n<p>在 <code>JS</code> 中，<code>npm</code> 上有丰富的海量的库帮我们完成日常的编码，可能并不是所有的库都能完全被应用到 <code>TS</code> 中，因为有些缺少类型声明</p>\n</blockquote>\n<p>比如，在 <code>TS</code> 中使用 <code>react </code>, 你会得到这样的一个类型检查错误：</p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.2.jpg\"></p>\n<ul>\n<li>因为 react 的库中并没有类型声明</li>\n<li>现在比较通用的做法是，实现和类型实现独立成两个库，也就是你需要再安装类型声明的库: <code>@types/react</code></li>\n<li>当遇到上述问题的时候，尝试安装一下 <code>@types/[package]</code></li>\n<li>然而，并不是所有的库都有类型声明的实现，也会有很多不支持 TS 的存在，然而又必须得使用这个库的时候该怎么办？</li>\n</ul>\n<p><strong>自己写声明</strong></p>\n<blockquote>\n<p>以 <code>progressbar.js</code>为例，基本使用方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> ProgressBar <span class=\"keyword\">from</span> <span class=\"string\">&#x27;progressbar.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> ProgressBar.Circle(<span class=\"built_in\">this</span>.$progress, &#123;</span><br><span class=\"line\">  <span class=\"attr\">strokeWidth</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">trailColor</span>: <span class=\"string\">&#x27;#e5e4e5&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">trailWidth</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">easing</span>: <span class=\"string\">&#x27;easeInOut&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们需要对库中暴露出的 api 去做声明，对上述例子做个分解：暴露了 Circle 类，Circle 构造函数包含两个参数，一个 HTMLElement，一个 options. OK</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先声明一下模块：</span></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;progressbar.js&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块中暴露了 Circle 类</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"title\">constructor</span>(<span class=\"params\">container: HTMLElement, options: Options</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 构造函数的 Options 需要单独声明 </span></span><br><span class=\"line\">  interface Options &#123;</span><br><span class=\"line\">    easing?: string;</span><br><span class=\"line\">    strokeWidth?: number;</span><br><span class=\"line\">    trailColor?: string;</span><br><span class=\"line\">    trailWidth?: number;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如此我们便完成了一个简单的声明，当然实际使用中的 API 肯定比上述情况复杂，根据使用情况，用了哪些 API 或者参数，就补充那些的声明即可</p>\n</blockquote>\n<h3 id=\"16-3-如何组织一个-TS-项目\"><a href=\"#16-3-如何组织一个-TS-项目\" class=\"headerlink\" title=\"16.3 如何组织一个 TS 项目\"></a>16.3 如何组织一个 TS 项目</h3><ul>\n<li>TS 项目的目录组织上，跟 JS 项目一样，补充好 types 的声明就可以了</li>\n<li>需要注意的是，将你希望对外暴露的能力相关的类型声明都暴露出去，不友好的声明会让接入你项目的人非常的痛苦，同时，在 package.json 中需要指定 type 的 path, 比如：”types”: “dist/types/index.d.ts”</li>\n<li>另外，务必加上 tslint, 更规范的去用 TS 实现功能，对于入门而言尤为重要</li>\n</ul>\n<h3 id=\"16-4-TSX-和-JSX\"><a href=\"#16-4-TSX-和-JSX\" class=\"headerlink\" title=\"16.4 TSX 和 JSX\"></a>16.4 TSX 和 JSX</h3><ul>\n<li>之前我们在用 <code>JavaScript</code> 写 <code>React</code> 时，对文件的扩展名没有什么特别的要求，<code>.js</code> 或者 <code>.jsx</code> 都行。</li>\n<li>但在 <code>TypeScript</code> 中，如果你要使用 <code>JSX</code> 语法，就不能使用 <code>.ts</code>，必须使用 <code>.tsx</code>。如果你不知道，或者忘了这么做，那么你会在使用了 <code>JSX</code> 代码的地方收到类型报错，但代码本身怎么看都没有问题。这也是刚上手 <code>TypeScript + React</code> 时几乎每个人都会遇到的坑。</li>\n<li>关于这一点，<code>TypeScript</code> 只是在官方教程的示例代码中直接用了 <code>*.tsx</code>，但并没有明确说明这一问题</li>\n</ul>\n<h3 id=\"16-5-变量的-Type-怎么找\"><a href=\"#16-5-变量的-Type-怎么找\" class=\"headerlink\" title=\"16.5 变量的 Type 怎么找\"></a>16.5 变量的 Type 怎么找</h3><ul>\n<li>上手 <code>TypeScript</code> 之后很快我们就发现，即便是原生的 <code>DOM</code>、或是 <code>React</code> 的 <code>API</code>，也经常会要我们手动指定类型。但这些结构并不是简单的 <code>JavaScript </code>原始类型，在使用 <code>JavaScript</code> 编写相关代码时候由于没有这种需要，我们也没关心过这些东西的类型，突然问起来，还真不知道这些类型叫什么名字。</li>\n<li>不光是这些标准类型，同样的问题在很多第三方的库中也会遇到，比如一些组件库会检查你传入的 <code>Props</code></li>\n<li>在我看来，这中间其实缺少了一部分的文档，来指导新用户如何找到所需要的类型。既然社区没有提供，那就我来吧。</li>\n<li>当然，让每个开发者都熟记所有的类型肯定是不现实的，总不能每接触一个新的库，就要去记一堆类型吧。放心，世界还是美好的，这种事情，当然是有方法的。</li>\n<li>最直白的方法就是去看库的 <code>Types Definition</code>，也就是那些 <code>.*d.ts</code> 文件。如果你刚好有在用 <code>VS Code</code> 的话，有一个非常方便的操作：把鼠标移动到你想知道它类型的代码上（比如某个变量、某个函数调用，或是某个 JSX 标签、某个组件的 props），右键选择「Go to Definition」（或者光标选中后按 F12），就可以跳转到它的类型定义文件了。</li>\n<li>如果你更习惯使用 VS Code 之外的编辑器，我相信时至今日，它们应该也都早就对 <code>TypeScript</code> 提供了支持。具体操作我不太熟悉，你可以自己探索下（我一直用 VS Code，其它的不太熟）</li>\n<li>一般来说，这个操作可以直接把你带到你想要的地方，但考虑到类型是可以继承的，有时候一次跳转可能不太够，遇到这种情况，那就需要你随机应变一下，沿着继承关系多跳几次，直到找到你想要的内容。</li>\n<li>对于不熟悉的类型，可以通过这个方法去寻找，慢慢熟悉以后，你会发现，一些常见的类型还是很好找的，稍微联想一下英文的表达方式，配合自动补全的提示，一般都不难找到</li>\n</ul>\n<h3 id=\"16-6-常见-Types-之-DOM\"><a href=\"#16-6-常见-Types-之-DOM\" class=\"headerlink\" title=\"16.6 常见 Types 之 DOM\"></a>16.6 常见 Types 之 DOM</h3><ul>\n<li><code>TypeScript</code> 自带了一些基本的类型定义，包括 ECMAScript 和 DOM 的类型定义，所有你需要的类型都可以从这里找到。如果你想做一些「纯 TypeScript 开发」的话，有这些就够了</li>\n<li>比如下面这张截图，就是对 <code>&lt;div&gt;</code> 标签的类型定义。我们可以看到，它继承了更加通用的 <code>HTMLElement</code> 类型，并且扩展了一个即将被废弃的 <code>align</code> 属性，以及两组 <code>addEventListener</code> 和 <code>removeEventListener</code>，注意这里使用了重载。</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.6-1.png\"></p>\n<blockquote>\n<p>这里的命名也不是随便起的，都是在 MDN 上可以查到的。还是以 <code>&lt;div&gt;</code> 为例，我们已经知道它继承自 <code>HTMLElement</code>，其实再往上，<code>HTMLElement</code> 继承自 <code>Element</code>，<code>Element</code> 又继承自 <code>Node</code>，顺着这条路，你可以挖掘出所有 <code>HTML</code> 标签的类型</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.6-2.png\"></p>\n<blockquote>\n<p>对于一些 DOM 相关的属性，比如 <code>onclick</code>、<code>onchange</code> 等，你都可以如法炮制，找到它们的定义。</p>\n</blockquote>\n<h3 id=\"16-7-常见-Types-之-React\"><a href=\"#16-7-常见-Types-之-React\" class=\"headerlink\" title=\"16.7 常见 Types 之 React\"></a>16.7 常见 Types 之 React</h3><ul>\n<li>关于 TypeScript 的问题，有不少其实是在使用第三方库的时候遇到的，React 就是其中比较典型的一个</li>\n<li>其实方法都一样，只不过相关的类型定义不在 <code>TypeScript</code> 中，而是在 <code>@types/react</code> 中。</li>\n<li><code>React</code> 的类型定义的名称其实也很直观，比如我们常见的 <code>React.Component</code>，在定义 <code>Class</code> 组件时，我们需要对 <code>Props</code> 和 <code>State</code> 预先进行类型定义，为什么呢？答案就在它的类型定义中</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.7-1.png\"></p>\n<ul>\n<li>再比如，当我们在写一些组件时，我们可能会需要向下传递 <code>this.props.children</code>，但 <code>children</code> 并没有被设为默认值，需要我们自己定义到 <code>props</code> 上，那么它的类型应该是什么呢</li>\n<li>到类型定义中搜一下关键字 <code>children</code>，很快我们就找到了下面的定义</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.7-2.png\"></p>\n<blockquote>\n<p>所有 <code>React</code> 中 <code>JSX</code> 所代表的内容，无论是 <code>render()</code> 的返回，还是 <code>children</code>，我们都可以定义为一个 <code>ReactNode</code>。那这个 <code>ReactNode</code> 长什么样呢？我们通过右键继续寻找</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.7-3.png\"></p>\n<blockquote>\n<p>看到这里，我们不光找到了我们想要的类型，还顺带明白了为什么 <code>render()</code> 可以返回 <code>boolean</code>、<code>null</code>、<code>undefined</code> 表示不渲染任何内容。<br>那么事件呢？当我们给组件定义事件处理函数的时候，也经常会被要求指定类型。还是老办法，找不到咱就搜，比如 <code>onClick</code> 不清楚，那我们就以它为关键字去搜</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.7-4.png\"></p>\n<blockquote>\n<p>据此我们找到一个叫 <code>MouseEventHandler</code> 的定义，这名字，够直白吧。好了，我们找到想要的了。不过既然来了，不如继续看一下，看看还能发现什么。我们右键 <code>MouseEventHandler</code> 急需往下看：</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.7-5.png\"></p>\n<blockquote>\n<p>看到了吗，所有的事件处理函数都有对应的定义，每个都需要一个泛型参数，传递了事件的类型，名称也挺直白的</p>\n</blockquote>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/16.7-6.png\"></p>\n<blockquote>\n<p>事件的类型也被我们挖出来了，以后如果需要单独定义一个事件相关的类型，就可以直接用了。以此类推，不管是什么东西的类型，都可以去它们对应的 <code>@types/xxx </code>里，按关键字搜</p>\n</blockquote>\n<h3 id=\"16-8-多重-extends\"><a href=\"#16-8-多重-extends\" class=\"headerlink\" title=\"16.8 多重 extends\"></a>16.8 多重 extends</h3><ul>\n<li>我们知道 <code>Interface</code> 是可以多继承的，<code>extends</code> 后面可以跟多个其它 <code>Interface</code>，我们不能保证被继承的多个 <code>Interface</code> 一定没有重复的属性，那么当属性重复，但类型定义不同时，最终的结果会怎么样呢？</li>\n<li>在 <code>TypeScript</code> 中，<code>Interface</code> 会按照从右往左的顺序去合并多个被继承的 <code>Interface</code>，也就是说，同名属性，左边的会覆盖右边的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface A &#123;</span><br><span class=\"line\">  value?: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface B &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface C &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface D <span class=\"keyword\">extends</span> A, B &#123;&#125;<span class=\"comment\">// value?: string</span></span><br><span class=\"line\">interface E <span class=\"keyword\">extends</span> B, C &#123;&#125;<span class=\"comment\">// value: string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-9-obj-prop-无法访问怎么办\"><a href=\"#16-9-obj-prop-无法访问怎么办\" class=\"headerlink\" title=\"16.9 obj[prop] 无法访问怎么办\"></a>16.9 obj[prop] 无法访问怎么办</h3><ul>\n<li>有时候我们会定义一些集合型的数据，例如对象、枚举等，但在调用的时候，我们未必会直接通过 <code>obj.prop</code> 的形式去调用，可能会是以 <code>obj[prop]</code> 这种动态索引的形式去访问，但通过动态索引的方式就无法确定最终访问的元素是否存在，因此在 <code>TypeScript</code> 中，默认是不允许这种操作的</li>\n<li>但这又是个非常合理，而且非常常见的场景，怎么办呢？<code>TypeScript</code> 允许为类型添加索引，以实现这一点。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Foo &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">y</span>: number</span><br><span class=\"line\">  [index: string]: string | number</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个方法虽然有效，但每次都要手动为类型加索引，重复多了也挺心累的。包括在一些「配置对象」中，我们甚至无法确定有哪些类型，有没有一种更加通用、更加一劳永逸的方法。</li>\n<li>其实在 <code>TypeScript </code>的官方文档中就有提到这个方案，官方管它叫 <code>OptionBag</code>，大概就是指 <code>config</code>、o<code>ption</code> 等用于提供配置信息的这么一类参数。我不是很确定这到底是个常规的英文单词，还是 <code>TypeScript</code> 中特定的术语（个人感觉是前者），反正就这么个意思吧。<br>简单说来，我们可以定义下面这样一个类型：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface OptionBag &#123;</span><br><span class=\"line\">  [index: string]: any</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这是一个非常通用的结构，以字符串为键，值可以是任何类型，并且支持索引 —— 这不就是 <code>Object</code> 么。</li>\n<li>之后所有需要动态索引的结构，或是作为配置对象的结构，都可以直接指定为，或是继承 <code>OptionBag</code>。这个方案以牺牲一定的类型检查为代价，换取了操作上的便利。</li>\n<li>理论上讲，<code>OptionBag</code> 可以适用于所有类似对象这样的结构，但不建议各位真就这么做。这个方案只能是用在一些对类型要求不那么严格，或是无法预知类型的场景中，能够确定的类型还是尽可能地写一下，否则就失去了使用 <code>TypeScript</code> 意义了</li>\n</ul>\n<h2 id=\"十七、其他技巧\"><a href=\"#十七、其他技巧\" class=\"headerlink\" title=\"十七、其他技巧\"></a>十七、其他技巧</h2><p><strong>1. 安全导航操作符 ( ?. )和非空断言操作符（!.）</strong></p>\n<ul>\n<li><strong>安全导航操作符 ( ?. ) 和空属性路径</strong>： </li>\n</ul>\n<blockquote>\n<p>为了解决导航时变量值为null时，页面运行时出错的问题</p>\n</blockquote>\n<ul>\n<li><strong>非空断言操作符</strong></li>\n</ul>\n<blockquote>\n<p>能确定变量值一定不为空时使用。与安全导航操作符不同的是，非空断言操作符不会防止出现 <code>null</code> 或 <code>undefined</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let s = e!.name; // 断言e是非空并访问name属性</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"第二章-工程篇\"><a href=\"#第二章-工程篇\" class=\"headerlink\" title=\"第二章 工程篇\"></a>第二章 工程篇</h1><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-1.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-2.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-3.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-4.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-5.jpg\"><br><img src=\"TS/2-6.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-7.jpg\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/2-8.jpg\"></p>\n<h2 id=\"一、使用命名空间\"><a href=\"#一、使用命名空间\" class=\"headerlink\" title=\"一、使用命名空间\"></a>一、使用命名空间</h2><blockquote>\n<p>不要在一个模块中使用命名空间，最好在一个全局中使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.ts</span></span><br><span class=\"line\">namespace Shape &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pi = <span class=\"built_in\">Math</span>.PI</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cricle</span>(<span class=\"params\">r: number</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pi * r ** <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三斜线引用a</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span></span><br><span class=\"line\">namespace Shape &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x: number</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x * x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Shape.cricle(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Shape.square(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更方便使用 不是es6中的import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> cricle = Shape.cricle</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cricle(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、理解联合声明\"><a href=\"#二、理解联合声明\" class=\"headerlink\" title=\"二、理解联合声明\"></a>二、理解联合声明</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口声明合并</span></span><br><span class=\"line\">interface A &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: number;</span><br><span class=\"line\">    <span class=\"comment\">// y: string;</span></span><br><span class=\"line\">    foo(bar: number): number; <span class=\"comment\">// 5</span></span><br><span class=\"line\">    foo(bar: <span class=\"string\">&#x27;a&#x27;</span>): string; <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface A &#123;</span><br><span class=\"line\">    <span class=\"attr\">y</span>: number;</span><br><span class=\"line\">    foo(bar: string): string; <span class=\"comment\">// 3</span></span><br><span class=\"line\">    foo(bar: string[]): string[]; <span class=\"comment\">// 4</span></span><br><span class=\"line\">    foo(bar: <span class=\"string\">&#x27;b&#x27;</span>): string; <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a: A = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">foo</span>(<span class=\"params\">bar: any</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bar</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名空间和类声明合并--命名空间需要放到后面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;&#125;</span><br><span class=\"line\">namespace C &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> state = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(C.state)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名空间和函数声明合并--命名空间需要放到后面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Lib</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">namespace Lib &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> version = <span class=\"string\">&#x27;1.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Lib.version)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名空间和枚举声明合并--位置没有要求</span></span><br><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">    Red,</span><br><span class=\"line\">    Yellow,</span><br><span class=\"line\">    Blue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">namespace Color &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mix</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Color)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、如何编写声明文件–引入类库\"><a href=\"#三、如何编写声明文件–引入类库\" class=\"headerlink\" title=\"三、如何编写声明文件–引入类库\"></a>三、如何编写声明文件–引入类库</h2><blockquote>\n<p>类库分为三类：全局类库、模块类库、<code>UMD</code>类库</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare <span class=\"keyword\">var</span> <span class=\"comment\">// 声明全局变量</span></span><br><span class=\"line\">declare <span class=\"function\"><span class=\"keyword\">function</span> // 声明全局方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">declare</span> <span class=\"title\">class</span> // 声明全局类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">declare</span> <span class=\"title\">enum</span> // 声明全局枚举类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">declare</span> <span class=\"title\">global</span> // 扩展全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">declare</span> <span class=\"title\">module</span> // 扩展模块</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>大多数的声明文件社区已经帮我们安装好了，使用<code>@types/包名</code>声明文件即可</p>\n</blockquote>\n<blockquote>\n<p>Typescript声明文件查找 <a href=\"https://microsoft.github.io/TypeSearch/\">https://microsoft.github.io/TypeSearch/</a></p>\n</blockquote>\n<p><strong>以jquery为例子</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add @types/jquery </span><br></pre></td></tr></table></figure>\n\n\n<p><strong>引入了一个JS类库，但是社区又没有提供类型声明文件，我该如何去编写它的类型声明文件</strong></p>\n<blockquote>\n<p>先确定这个库的类型，全局库、模块库、还是UMD库，然后参照下面介绍的方法，把它的<code>API</code>声明逐步添加进来（暂时用不到的<code>API</code>也可以不写）</p>\n</blockquote>\n<h3 id=\"3-1-三种类库声明文件写法\"><a href=\"#3-1-三种类库声明文件写法\" class=\"headerlink\" title=\"3.1 三种类库声明文件写法\"></a>3.1 三种类库声明文件写法</h3><h4 id=\"3-1-1-全局库\"><a href=\"#3-1-1-全局库\" class=\"headerlink\" title=\"3.1.1 全局库\"></a>3.1.1 全局库</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global-lib.d.ts</span></span><br><span class=\"line\">    </span><br><span class=\"line\">declare <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalLib</span>(<span class=\"params\">options: globalLib.Options</span>): <span class=\"title\">void</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 函数和命名空间的声明合并 为这个函数提供了一些属性</span></span><br><span class=\"line\">declare namespace globalLib &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version: string;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span>;</span><br><span class=\"line\">    interface Options &#123;</span><br><span class=\"line\">        [key: string]: any</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global-lib.js</span></span><br><span class=\"line\"><span class=\"comment\">// 和声明文件对应</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalLib</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">globalLib.version = <span class=\"string\">&#x27;1.0.0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">globalLib.doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;globalLib do something&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局使用 index.ts</span></span><br><span class=\"line\">globalLib(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">globalLib.doSomething()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-2-模块类库\"><a href=\"#3-1-2-模块类库\" class=\"headerlink\" title=\"3.1.2 模块类库\"></a>3.1.2 模块类库</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module-lib.d.ts</span></span><br><span class=\"line\">declare <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moduleLib</span>(<span class=\"params\">options: Options</span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">interface</span> <span class=\"title\">Options</span> </span>&#123;</span><br><span class=\"line\">    [key: string]: any</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">declare namespace moduleLib &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version: string</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> = <span class=\"title\">moduleLib</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module-lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"string\">&#x27;1.0.0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;moduleLib do something&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moduleLib</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">moduleLib.version = version;</span><br><span class=\"line\">moduleLib.doSomething = doSomething;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = moduleLib;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.ts 使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> umdLib <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./umd-lib&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">umdLib.doSomething()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-1-3-UMD类库\"><a href=\"#3-1-3-UMD类库\" class=\"headerlink\" title=\"3.1.3 UMD类库\"></a>3.1.3 UMD类库</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// umd-lib.d.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare namespace umdLib &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略了export</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> version: string</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">UMD</span>库不可缺少的语句</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"title\">as</span> <span class=\"title\">namespace</span> <span class=\"title\">umdLib</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> = <span class=\"title\">umdLib</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// umd-lib.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">        define(factory);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = factory();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        root.umdLib = factory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;(<span class=\"built_in\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要为这两个成员编写声明文件</span></span><br><span class=\"line\">        <span class=\"attr\">version</span>: <span class=\"string\">&#x27;1.0.0&#x27;</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;umdLib do something&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.ts使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> umdLib <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./umd-lib&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 可以不用导入umd-lib模块。但是需要打开tsconfig.tson中的umd配置</span></span><br><span class=\"line\">umdLib.doSomething()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-两种插件声明文件写法\"><a href=\"#3-2-两种插件声明文件写法\" class=\"headerlink\" title=\"3.2 两种插件声明文件写法\"></a>3.2 两种插件声明文件写法</h3><h4 id=\"3-2-1-模块化插件declare-module\"><a href=\"#3-2-1-模块化插件declare-module\" class=\"headerlink\" title=\"3.2.1 模块化插件declare module\"></a>3.2.1 模块化插件declare module</h4><blockquote>\n<p><code>declare module</code> 可以给类库添加一些自定义方法。 扩展模块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> m <span class=\"keyword\">from</span> <span class=\"string\">&#x27;moment&#x27;</span>;</span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;moment&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给moment自定义一些方法</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m.myFunction = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2-全局插件declare-global\"><a href=\"#3-2-2-全局插件declare-global\" class=\"headerlink\" title=\"3.2.2 全局插件declare global\"></a>3.2.2 全局插件declare global</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局插件</span></span><br><span class=\"line\">declare <span class=\"built_in\">global</span> &#123;</span><br><span class=\"line\">    namespace globalLib &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAnyting</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">// 在全局变量添加方法</span></span><br><span class=\"line\"><span class=\"function\">// 会对全局变量造成污染 一般不这么做</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">globalLib</span>.<span class=\"title\">doAnyting</span> = (<span class=\"params\"></span>) =&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-3-jquery声明文件示例\"><a href=\"#3-3-jquery声明文件示例\" class=\"headerlink\" title=\"3.3 jquery声明文件示例\"></a>3.3 jquery声明文件示例</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.d.ts入口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Type definitions for jquery 3.3</span></span><br><span class=\"line\"><span class=\"comment\">// Project: https://jquery.com</span></span><br><span class=\"line\"><span class=\"comment\">// Definitions by: Leonard Thieu &lt;https://github.com/leonard-thieu&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Boris Yankov &lt;https://github.com/borisyankov&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Christian Hoffmeister &lt;https://github.com/choffmeister&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Steve Fenton &lt;https://github.com/Steve-Fenton&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Diullei Gomes &lt;https://github.com/Diullei&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Tass Iliopoulos &lt;https://github.com/tasoili&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Jason Swearingen &lt;https://github.com/jasons-novaleaf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Sean Hill &lt;https://github.com/seanski&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Guus Goossens &lt;https://github.com/Guuz&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Kelly Summerlin &lt;https://github.com/ksummerlin&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Basarat Ali Syed &lt;https://github.com/basarat&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Nicholas Wolverson &lt;https://github.com/nwolverson&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Derek Cicerone &lt;https://github.com/derekcicerone&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Andrew Gaspar &lt;https://github.com/AndrewGaspar&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Seikichi Kondo &lt;https://github.com/seikichi&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Benjamin Jackman &lt;https://github.com/benjaminjackman&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Poul Sorensen &lt;https://github.com/s093294&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Josh Strobl &lt;https://github.com/JoshStrobl&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 John Reilly &lt;https://github.com/johnnyreilly&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Dick van den Brink &lt;https://github.com/DickvdBrink&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Thomas Schulz &lt;https://github.com/King2500&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 Terry Mun &lt;https://github.com/terrymun&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped</span></span><br><span class=\"line\"><span class=\"comment\">// TypeScript Version: 2.3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三斜线引入模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;sizzle&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;JQueryStatic.d.ts&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;JQuery.d.ts&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;misc.d.ts&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;legacy.d.ts&quot; /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> = jQuery;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四、配置tsconfig-json\"><a href=\"#四、配置tsconfig-json\" class=\"headerlink\" title=\"四、配置tsconfig.json\"></a>四、配置tsconfig.json</h2><h3 id=\"4-1-基础配置\"><a href=\"#4-1-基础配置\" class=\"headerlink\" title=\"4.1 基础配置\"></a>4.1 基础配置</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ===与文件相关的选项===</span></span><br><span class=\"line\">  <span class=\"string\">&quot;files&quot;</span> : [<span class=\"string\">&#x27;src/index.ts&#x27;</span>], <span class=\"comment\">// 编译的文件列表</span></span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&#x27;src&#x27;</span>], <span class=\"comment\">// 指定编译文件</span></span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [<span class=\"string\">&#x27;src/lib&#x27;</span>], <span class=\"comment\">// 排除编译文件</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// ====与编译相关的选项====</span></span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// &quot;incremental&quot;: true,                // 增量编译，再次编译会增量编译</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;tsBuildInfoFile&quot;: &quot;./buildFile&quot;,   // 增量编译文件的存储位置</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;diagnostics&quot;: true,                // 打印诊断信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;target&quot;: &quot;es5&quot;,           // 目标语言的版本</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;module&quot;: &quot;commonjs&quot;,      // 生成代码的模块标准</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;outFile&quot;: &quot;./app.js&quot;,     // 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中</span></span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 比如你需要使用es2019方法 需要在这里导入模块 &quot;lib&quot;: [&#x27;es2019.arrary&#x27;]</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;lib&quot;: [],                 // TS 需要引用的库，即声明文件，es5 默认 &quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;allowJs&quot;: true,           // 允许编译 JS 文件（js、jsx）</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;checkJs&quot;: true,           // 允许在 JS 文件中报错，通常与 allowJS 一起使用</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;outDir&quot;: &quot;./out&quot;,         // 指定输出目录</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;rootDir&quot;: &quot;./&quot;,           // 指定输入文件目录（用于输出）</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;declaration&quot;: true,         // 生成声明文件</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;declarationDir&quot;: &quot;./d&quot;,     // 声明文件的路径</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;emitDeclarationOnly&quot;: true, // 只生成声明文件</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;sourceMap&quot;: true,           // 生成目标文件的 sourceMap</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;inlineSourceMap&quot;: true,     // 生成目标文件的 inline sourceMap</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;declarationMap&quot;: true,      // 生成声明文件的 sourceMap</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;typeRoots&quot;: [],             // 声明文件目录，默认 node_modules/@types</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;types&quot;: [],                 // 声明文件包</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;removeComments&quot;: true,    // 删除注释</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noEmit&quot;: true,            // 不输出文件</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noEmitOnError&quot;: true,     // 发生错误时不输出文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noEmitHelpers&quot;: true,     // 不生成 helper 函数，需额外安装 ts-helpers</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;importHelpers&quot;: true,     // 通过 tslib 引入 helper 函数，文件必须是模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;downlevelIteration&quot;: true,    // 降级遍历器的实现（es3/5）</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;strict&quot;: true,                        // 开启所有严格的类型检查</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;alwaysStrict&quot;: false,                 // 在代码中注入 &quot;use strict&quot;;</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noImplicitAny&quot;: false,                // 不允许隐式的 any 类型</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;strictNullChecks&quot;: false,             // 不允许把 null、undefined 赋值给其他类型变量</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;strictFunctionTypes&quot;: false           // 不允许函数参数双向协变</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;strictPropertyInitialization&quot;: false, // 类的实例属性必须初始化</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;strictBindCallApply&quot;: false,          // 严格的 bind/call/apply 检查</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noImplicitThis&quot;: false,               // 不允许 this 有隐式的 any 类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noUnusedLocals&quot;: true,                // 检查只声明，未使用的局部变量</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noUnusedParameters&quot;: true,            // 检查未使用的函数参数</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noFallthroughCasesInSwitch&quot;: true,    // 防止 switch 语句贯穿</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;noImplicitReturns&quot;: true,             // 每个分支都要有返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;esModuleInterop&quot;: true,               // 允许 export = 导出，由import from 导入</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;allowUmdGlobalAccess&quot;: true,          // 允许在模块中访问 UMD 全局变量</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;moduleResolution&quot;: &quot;node&quot;,            // 模块解析策略</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;baseUrl&quot;: &quot;./&quot;,                       // 解析非相对模块的基地址</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;paths&quot;: &#123;                             // 路径映射，相对于 baseUrl</span></span><br><span class=\"line\">      <span class=\"comment\">//   &quot;jquery&quot;: [&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;]</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;rootDirs&quot;: [&quot;src&quot;, &quot;out&quot;],            // 将多个目录放在一个虚拟目录下，用于运行时</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// &quot;listEmittedFiles&quot;: true,        // 打印输出的文件</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;listFiles&quot;: true,               // 打印编译的文件（包括引用的声明文件）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>也可以把公共的抽离出来</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.base.json</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;files&quot;</span> : [<span class=\"string\">&#x27;src/index.ts&#x27;</span>], <span class=\"comment\">// 编译的文件列表</span></span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&#x27;src&#x27;</span>], <span class=\"comment\">// 指定编译文件</span></span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [<span class=\"string\">&#x27;src/lib&#x27;</span>], <span class=\"comment\">// 排除编译文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&#x27;./tsconfig.base&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;exclude&quot;</span>: [] <span class=\"comment\">// 覆盖之前的</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-工程引用配置多个项目\"><a href=\"#4-2-工程引用配置多个项目\" class=\"headerlink\" title=\"4.2 工程引用配置多个项目\"></a>4.2 工程引用配置多个项目</h3><blockquote>\n<p>每个项目都有一份独立的<code>tsconfig.json</code>，继承一份公共的配置，最后可单独构建每个子项目工程</p>\n</blockquote>\n<blockquote>\n<p>参考学习<code>typescript</code>项目 <a href=\"https://github.com/microsoft/TypeScript/tree/master/src\">https://github.com/microsoft/TypeScript/tree/master/src</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例 项目入口</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;commonjs&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;composite&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;declaration&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子工程1</span></span><br><span class=\"line\"><span class=\"comment\">// src/client/tsconfig.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&quot;../../tsconfig.json&quot;</span>, <span class=\"comment\">//继承基础配置</span></span><br><span class=\"line\">    <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;../../dist/client&quot;</span>, <span class=\"comment\">// 输出文件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;references&quot;</span>: [</span><br><span class=\"line\">        &#123; <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;../common&quot;</span> &#125; <span class=\"comment\">// 依赖文件</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子工程2</span></span><br><span class=\"line\"><span class=\"comment\">// src/server/tsconfig.json</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&quot;../../tsconfig.json&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;../../dist/server&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;references&quot;</span>: [</span><br><span class=\"line\">        &#123; <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;../common&quot;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"五、编译工具ts-loader、ts-lint\"><a href=\"#五、编译工具ts-loader、ts-lint\" class=\"headerlink\" title=\"五、编译工具ts-loader、ts-lint\"></a>五、编译工具ts-loader、ts-lint</h2><p><strong>如何选择Typescript编译器</strong></p>\n<blockquote>\n<ul>\n<li>如果没有使用过<code>babel</code>，首选<code>Typescript</code>自身编译器(可配合<code>Ts-loader</code>使用)</li>\n<li>如果项目中已经使用<code>babel</code>，安装<code>@babel/preset-typescript</code>(可配合tsc做类型检查)</li>\n<li>两种编译工具不要混用</li>\n</ul>\n</blockquote>\n<p><strong>typescript-eslint与babel-eslint区别</strong></p>\n<blockquote>\n<ul>\n<li><code>babel-eslint</code>支持<code>typescript</code>没有额外的语法检查，抛弃<code>typescript</code>,不支持类型检查</li>\n<li><code>typescript-eslint</code>基础typescript的AST,基于创建基于类型信息的规则（<code>tsconfig.json</code>）</li>\n</ul>\n</blockquote>\n<ul>\n<li>两者底层机制不一样，不要一起使用</li>\n<li><code>babel</code>体系建议使用<code>babel-eslint</code>，否则使用<code>typescript-eslint</code></li>\n</ul>\n<p><strong>总结</strong></p>\n<ul>\n<li><p>编译工具</p>\n<ul>\n<li><code>ts-loader</code></li>\n<li><code>@babel/preset-typescript</code></li>\n</ul>\n</li>\n<li><p>代码检查工具</p>\n<ul>\n<li><code>babel-eslint</code></li>\n<li><code>typescript-eslint</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"六、使用jest进行单元测试\"><a href=\"#六、使用jest进行单元测试\" class=\"headerlink\" title=\"六、使用jest进行单元测试\"></a>六、使用jest进行单元测试</h2><ul>\n<li>单元测试工具<ul>\n<li><code>ts-jest</code> – 能够在测试用例中进行类型检查</li>\n<li><code>babel-jest</code> – 没有进行类型检查</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>生成配置文件 <code>ts-jest config:init</code></p>\n</blockquote>\n<h1 id=\"第三章-项目实战\"><a href=\"#第三章-项目实战\" class=\"headerlink\" title=\"第三章 项目实战\"></a>第三章 项目实战</h1><h2 id=\"一、思维导图\"><a href=\"#一、思维导图\" class=\"headerlink\" title=\"一、思维导图\"></a>一、思维导图</h2><p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/sw1.png\"><br><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/TS/sw2.png\"></p>\n<h2 id=\"二、React项目实践\"><a href=\"#二、React项目实践\" class=\"headerlink\" title=\"二、React项目实践\"></a>二、React项目实践</h2><h3 id=\"2-1-手动创建react项目\"><a href=\"#2-1-手动创建react项目\" class=\"headerlink\" title=\"2.1 手动创建react项目\"></a>2.1 手动创建react项目</h3><blockquote>\n<p>项目代码 <a href=\"https://github.com/poetries/typescript-in-action/tree/master/ts-react\">https://github.com/poetries/typescript-in-action/tree/master/ts-react</a></p>\n</blockquote>\n<p><strong>1. 安装依赖文件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add @types/react @types/react-dom</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 修改tsconfig.json</strong>配置</p>\n<blockquote>\n<p>修改 <code>compilerOptions</code>中的<code>jsx</code>为<code>react</code></p>\n</blockquote>\n<h3 id=\"2-2-使用脚手架安装\"><a href=\"#2-2-使用脚手架安装\" class=\"headerlink\" title=\"2.2 使用脚手架安装\"></a>2.2 使用脚手架安装</h3><blockquote>\n<p>项目代码 <a href=\"https://github.com/poetries/typescript-in-action/tree/master/ts-react-app\">https://github.com/poetries/typescript-in-action/tree/master/ts-react-app</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create-react-app ts-react-app --typescript</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-1-函数组件\"><a href=\"#2-2-1-函数组件\" class=\"headerlink\" title=\"2.2.1 函数组件\"></a>2.2.1 函数组件</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Greeting &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    firstName: string;</span><br><span class=\"line\">    lastName: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Hello = <span class=\"function\">(<span class=\"params\">props: Greeting</span>) =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Hello &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const Hello: React.FC&lt;Greeting&gt; = (&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name,</span></span><br><span class=\"line\"><span class=\"comment\">//     firstName,</span></span><br><span class=\"line\"><span class=\"comment\">//     lastName,</span></span><br><span class=\"line\"><span class=\"comment\">//     children</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;) =&gt; &lt;Button&gt;Hello &#123;name&#125;&lt;/Button&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Hello.defaultProps = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Hello;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-类组件\"><a href=\"#2-2-2-类组件\" class=\"headerlink\" title=\"2.2.2 类组件\"></a>2.2.2 类组件</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Greeting &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    firstName?: string;</span><br><span class=\"line\">    lastName?: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface HelloState &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Greeting</span>, <span class=\"title\">HelloState</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: HelloState = &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">        <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你点击了 &#123;this.state.count&#125; 次<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;this.setState(&#123;count: this.state.count + 1&#125;)&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                    Hello &#123;this.props.name&#125;</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> HelloClass;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-高阶组件\"><a href=\"#2-2-3-高阶组件\" class=\"headerlink\" title=\"2.2.3 高阶组件\"></a>2.2.3 高阶组件</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloClass <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./HelloClass&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Loading &#123;</span><br><span class=\"line\">    <span class=\"attr\">loading</span>: boolean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloHOC</span>&lt;<span class=\"title\">P</span>&gt;(<span class=\"params\">WrappedComponent: React.ComponentType&lt;P&gt;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">P</span> &amp; <span class=\"title\">Loading</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; loading, ...props &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> loading ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...props</span> <span class=\"attr\">as</span> <span class=\"attr\">P</span> &#125; /&gt;</span></span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> HelloHOC(HelloClass);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-Hooks组件\"><a href=\"#2-2-4-Hooks组件\" class=\"headerlink\" title=\"2.2.4 Hooks组件\"></a>2.2.4 Hooks组件</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Greeting &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    firstName: string;</span><br><span class=\"line\">    lastName: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HelloHooks = <span class=\"function\">(<span class=\"params\">props: Greeting</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [text, setText] = useState&lt;string | <span class=\"literal\">null</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            setText(<span class=\"string\">&#x27;休息一下&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, [count]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你点击了 &#123;count&#125; 次 &#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setCount(count + 1)&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                Hello &#123;props.name&#125;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloHooks.defaultProps = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> HelloHooks;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-5-事件处理与数据请求\"><a href=\"#2-2-5-事件处理与数据请求\" class=\"headerlink\" title=\"2.2.5 事件处理与数据请求\"></a>2.2.5 事件处理与数据请求</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Input, Select, Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormComponentProps &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd/lib/form&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; get &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils/request&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; GET_EMPLOYEE_URL &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../constants/urls&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; EmployeeRequest, EmployeeResponse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../interface/employee&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Option &#125; = Select;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Props <span class=\"keyword\">extends</span> FormComponentProps &#123;</span><br><span class=\"line\">    onDataChange(data: EmployeeResponse): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hooks version</span></span><br><span class=\"line\"><span class=\"comment\">// const QueryFormHooks = (props: Props) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     const [name, setName] = useState(&#x27;&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">//     const [departmentId, setDepartmentId] = useState&lt;number | undefined&gt;();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     const handleNameChange = (e: React.FormEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         setName(e.currentTarget.value)</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     const handleDepartmentChange = (value: number) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         setDepartmentId(value)</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     const handleSubmit = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         queryEmployee(&#123;name, departmentId&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     const queryEmployee = (param: EmployeeRequest) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         get(GET_EMPLOYEE_URL, param).then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             props.onDataChange(res.data);</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     useEffect(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         queryEmployee(&#123;name, departmentId&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;, [])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     return (</span></span><br><span class=\"line\"><span class=\"comment\">//         &lt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//             &lt;Form layout=&quot;inline&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                     &lt;Input</span></span><br><span class=\"line\"><span class=\"comment\">//                         placeholder=&quot;姓名&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//                         style=&#123;&#123; width: 120 &#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                         allowClear</span></span><br><span class=\"line\"><span class=\"comment\">//                         value=&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                         onChange=&#123;handleNameChange&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                     /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;Select</span></span><br><span class=\"line\"><span class=\"comment\">//                     placeholder=&quot;部门&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//                     style=&#123;&#123; width: 120 &#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                     allowClear</span></span><br><span class=\"line\"><span class=\"comment\">//                     value=&#123;departmentId&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                     onChange=&#123;handleDepartmentChange&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                     &lt;Option value=&#123;1&#125;&gt;技术部&lt;/Option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                     &lt;Option value=&#123;2&#125;&gt;产品部&lt;/Option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                     &lt;Option value=&#123;3&#125;&gt;市场部&lt;/Option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                     &lt;Option value=&#123;4&#125;&gt;运营部&lt;/Option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;/Select&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                     &lt;Button type=&quot;primary&quot; onClick=&#123;handleSubmit&#125;&gt;查询&lt;/Button&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//                 &lt;/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//             &lt;/Form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//         &lt;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     )</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">EmployeeRequest</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: EmployeeRequest = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">departmentId</span>: <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleNameChange = <span class=\"function\">(<span class=\"params\">e: React.FormEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: e.currentTarget.value</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleDepartmentChange = <span class=\"function\">(<span class=\"params\">value: number</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">            <span class=\"attr\">departmentId</span>: value</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleSubmit = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.queryEmployee(<span class=\"built_in\">this</span>.state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.queryEmployee(<span class=\"built_in\">this</span>.state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">queryEmployee</span>(<span class=\"params\">param: EmployeeRequest</span>)</span> &#123;</span><br><span class=\"line\">        get(GET_EMPLOYEE_URL, param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.props.onDataChange(res.data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;inline&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                        <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;姓名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                        <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">width:</span> <span class=\"attr\">120</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                        <span class=\"attr\">allowClear</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                        <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.name&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleNameChange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                    /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                    <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                    <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">width:</span> <span class=\"attr\">120</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                    <span class=\"attr\">allowClear</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                    <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.departmentId&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                    <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleDepartmentChange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                &gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>技术部<span class=\"tag\">&lt;/<span class=\"name\">Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>产品部<span class=\"tag\">&lt;/<span class=\"name\">Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;4&#125;</span>&gt;</span>运营部<span class=\"tag\">&lt;/<span class=\"name\">Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span>查询<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> WrapQueryForm = Form.create&lt;Props&gt;(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;employee_query&#x27;</span></span><br><span class=\"line\">&#125;)(QueryForm);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> WrapQueryForm;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-6-列表渲染\"><a href=\"#2-2-6-列表渲染\" class=\"headerlink\" title=\"2.2.6 列表渲染\"></a>2.2.6 列表渲染</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Table &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> QueryForm <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./QueryForm&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; employeeColumns &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./colums&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; EmployeeResponse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../interface/employee&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hooks version</span></span><br><span class=\"line\"><span class=\"comment\">// const Employee = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     const [employee, setEmployee] = useState&lt;EmployeeResponse&gt;(undefined);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     const getTotal = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         let total: number;</span></span><br><span class=\"line\"><span class=\"comment\">//         if (typeof employee !== &#x27;undefined&#x27;) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             total = employee.length</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             total = 0</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         return &lt;p&gt;共 &#123;total&#125; 名员工&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     return (</span></span><br><span class=\"line\"><span class=\"comment\">//         &lt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//             &lt;QueryForm onDataChange=&#123;setEmployee&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//             &#123;/* &#123;getTotal()&#125; */&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//             &lt;Table columns=&#123;employeeColumns&#125; dataSource=&#123;employee&#125; className=&quot;table&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//         &lt;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     )</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">interface State &#123;</span><br><span class=\"line\">    <span class=\"attr\">employee</span>: EmployeeResponse</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>&lt;</span>&#123;&#125;, State&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: State = &#123;</span><br><span class=\"line\">        <span class=\"attr\">employee</span>: <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setEmployee = <span class=\"function\">(<span class=\"params\">employee: EmployeeResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">            employee</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getTotal</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> total: number;</span><br><span class=\"line\">        <span class=\"comment\">// 类型保护</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.state.employee !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">            total = <span class=\"built_in\">this</span>.state.employee.length</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            total = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>共 &#123;total&#125; 名员工<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">QueryForm</span> <span class=\"attr\">onDataChange</span>=<span class=\"string\">&#123;this.setEmployee&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#123;/* &#123;this.getTotal()&#125; */&#125;</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Table</span> <span class=\"attr\">columns</span>=<span class=\"string\">&#123;employeeColumns&#125;</span> <span class=\"attr\">dataSource</span>=<span class=\"string\">&#123;this.state.employee&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;table&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Employee;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-7-Redux与类型\"><a href=\"#2-2-7-Redux与类型\" class=\"headerlink\" title=\"2.2.7 Redux与类型\"></a>2.2.7 Redux与类型</h4><blockquote>\n<p>项目代码 <a href=\"https://github.com/poetries/typescript-in-action/tree/master/ts-redux\">https://github.com/poetries/typescript-in-action/tree/master/ts-redux</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Dispatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; get, post &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils/request&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; department, level &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../constants/options&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    GET_EMPLOYEE_URL,</span><br><span class=\"line\">    CREATE_EMPLOYEE_URL,</span><br><span class=\"line\">    DELETE_EMPLOYEE_URL,</span><br><span class=\"line\">    UPDATE_EMPLOYEE_URL</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../constants/urls&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    GET_EMPLOYEE,</span><br><span class=\"line\">    CREATE_EMPLOYEE,</span><br><span class=\"line\">    DELETE_EMPLOYEE,</span><br><span class=\"line\">    UPDATE_EMPLOYEE</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../constants/actions&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    EmployeeInfo,</span><br><span class=\"line\">    EmployeeRequest,</span><br><span class=\"line\">    EmployeeResponse,</span><br><span class=\"line\">    CreateRequest,</span><br><span class=\"line\">    DeleteRequest,</span><br><span class=\"line\">    UpdateRequest</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../interface/employee&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">type State = Readonly&lt;&#123;</span><br><span class=\"line\">    <span class=\"attr\">employeeList</span>: EmployeeResponse</span><br><span class=\"line\">&#125;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">type Action = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: string;</span><br><span class=\"line\">    payload: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState: State = &#123;</span><br><span class=\"line\">    <span class=\"attr\">employeeList</span>: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEmployee</span>(<span class=\"params\">param: EmployeeRequest, callback: () =&gt; <span class=\"keyword\">void</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch: Dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        get(GET_EMPLOYEE_URL, param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch(&#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: GET_EMPLOYEE,</span><br><span class=\"line\">                <span class=\"attr\">payload</span>: res.data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEmployee</span>(<span class=\"params\">param: CreateRequest, callback: () =&gt; <span class=\"keyword\">void</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch: Dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        post(CREATE_EMPLOYEE_URL, param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch(&#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: CREATE_EMPLOYEE,</span><br><span class=\"line\">                <span class=\"attr\">payload</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">name</span>: param.name,</span><br><span class=\"line\">                    <span class=\"attr\">department</span>: department[param.departmentId],</span><br><span class=\"line\">                    <span class=\"attr\">departmentId</span>: param.departmentId,</span><br><span class=\"line\">                    <span class=\"attr\">hiredate</span>: param.hiredate,</span><br><span class=\"line\">                    <span class=\"attr\">level</span>: level[param.levelId],</span><br><span class=\"line\">                    <span class=\"attr\">levelId</span>: param.levelId,</span><br><span class=\"line\">                    ...res.data</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteEmployee</span>(<span class=\"params\">param: DeleteRequest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch: Dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        post(DELETE_EMPLOYEE_URL, param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch(&#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: DELETE_EMPLOYEE,</span><br><span class=\"line\">                <span class=\"attr\">payload</span>: param.id</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateEmployee</span>(<span class=\"params\">param: UpdateRequest, callback: () =&gt; <span class=\"keyword\">void</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch: Dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        post(UPDATE_EMPLOYEE_URL, param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch(&#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: UPDATE_EMPLOYEE,</span><br><span class=\"line\">                <span class=\"attr\">payload</span>: param</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = initialState, action: Action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> GET_EMPLOYEE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">employeeList</span>: action.payload</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> CREATE_EMPLOYEE:</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newList = [action.payload, ...(state.employeeList <span class=\"keyword\">as</span> EmployeeInfo[])]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">employeeList</span>: newList</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> DELETE_EMPLOYEE:</span><br><span class=\"line\">            <span class=\"keyword\">let</span> reducedList = [...(state.employeeList <span class=\"keyword\">as</span> EmployeeInfo[])];</span><br><span class=\"line\">            _.remove(reducedList, <span class=\"function\">(<span class=\"params\">item: EmployeeInfo</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item.id === action.payload</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">employeeList</span>: reducedList</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> UPDATE_EMPLOYEE:</span><br><span class=\"line\">            <span class=\"keyword\">let</span> updatedList = [...(state.employeeList <span class=\"keyword\">as</span> EmployeeInfo[])];</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item: UpdateRequest = action.payload;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = _.findIndex(updatedList, &#123;</span><br><span class=\"line\">                <span class=\"attr\">id</span>: item.id</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            updatedList[index] = &#123;</span><br><span class=\"line\">                <span class=\"attr\">id</span>: item.id,</span><br><span class=\"line\">                <span class=\"attr\">key</span>: item.id,</span><br><span class=\"line\">                <span class=\"attr\">name</span>: item.name,</span><br><span class=\"line\">                <span class=\"attr\">department</span>: department[item.departmentId],</span><br><span class=\"line\">                <span class=\"attr\">departmentId</span>: item.departmentId,</span><br><span class=\"line\">                <span class=\"attr\">hiredate</span>: item.hiredate,</span><br><span class=\"line\">                <span class=\"attr\">level</span>: level[item.levelId],</span><br><span class=\"line\">                <span class=\"attr\">levelId</span>: item.levelId</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">employeeList</span>: updatedList</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-服务端使用Typescript\"><a href=\"#2-3-服务端使用Typescript\" class=\"headerlink\" title=\"2.3 服务端使用Typescript\"></a>2.3 服务端使用Typescript</h3><blockquote>\n<p>项目地址 <a href=\"https://github.com/poetries/typescript-in-action/tree/master/ts-express\">https://github.com/poetries/typescript-in-action/tree/master/ts-express</a></p>\n</blockquote>\n<h2 id=\"三、Vue项目实践\"><a href=\"#三、Vue项目实践\" class=\"headerlink\" title=\"三、Vue项目实践\"></a>三、Vue项目实践</h2><blockquote>\n<p>项目代码 <a href=\"https://github.com/poetries/typescript-in-action/tree/master/ts-vue\">https://github.com/poetries/typescript-in-action/tree/master/ts-vue</a></p>\n</blockquote>\n<blockquote>\n<p>TS不能识别<code>.vue</code>文件，需要声明文件</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue-shims.d.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;*.vue&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><a href=\"https://github.com/poetries/poetries.github.io/edit/dev/source/_posts/ts-in-action.md\">原文地址</a></p>\n</blockquote>\n<h1 id=\"更多资料\"><a href=\"#更多资料\" class=\"headerlink\" title=\"更多资料\"></a>更多资料</h1><ul>\n<li><a href=\"http://blog.poetries.top/ts-axios/chapter1/\">TypeScript 从零实现 axios</a></li>\n<li><a href=\"http://blog.poetries.top/2018/12/29/ts-intro-and-use-in-react/\">Typescript基础及结合React实践(一)</a></li>\n<li><a href=\"http://blog.poetries.top/2018/12/30/ts-summary/\">Typescript总结篇（二）</a></li>\n<li><a href=\"http://blog.poetries.top/2018/12/31/ts-react-template/\">Typescript+React模板搭建（三）</a></li>\n</ul>\n","categories":["Javascript"],"tags":["Javascript"]},{"title":"WebPack","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/webpack核心功能/","content":"<h2 id=\"webpack核心功能\"><a href=\"#webpack核心功能\" class=\"headerlink\" title=\"webpack核心功能\"></a>webpack核心功能</h2><h3 id=\"webpack的安装和使用\"><a href=\"#webpack的安装和使用\" class=\"headerlink\" title=\"webpack的安装和使用\"></a>webpack的安装和使用</h3><p>安装：</p>\n<p>推荐本地安装</p>\n<p>安装命令：<code>$ npm i -D webpack webpack-cli</code></p>\n<p>运行webpack命令：<code>$ npx webpack</code></p>\n<p>也可以在package.json文件里的<code>&quot;scripts&quot;</code>里添加<code>&quot;build&quot;:webpack</code>，就可以直接使用命令：<code>$ npm run build</code>来运行webpack。</p>\n<p>如果不告知运行环境，则默认生产环境</p>\n<p><code>$ npx webpack --mode=development</code>   开发环境</p>\n<p><code>$ npx webpack --mode=production</code>      生产环境</p>\n<h3 id=\"编译结果分析\"><a href=\"#编译结果分析\" class=\"headerlink\" title=\"编译结果分析\"></a>编译结果分析</h3><p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//合并两个模块</span><br><span class=\"line\">//  ./src/a.js</span><br><span class=\"line\">//  ./src/index.js</span><br><span class=\"line\"></span><br><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">    var moduleExports = &#123;&#125;; //用于缓存模块的导出结果</span><br><span class=\"line\">    //require函数相当于是运行一个模块，得到模块导出结果</span><br><span class=\"line\">    function __webpack_require(moduleId) &#123; //moduleId就是模块的路径</span><br><span class=\"line\">        if (moduleExports[moduleId]) &#123;</span><br><span class=\"line\">            //检查是否有缓存</span><br><span class=\"line\">            return moduleExports[moduleId];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var func = modules[moduleId]; //得到该模块对应的函数</span><br><span class=\"line\">        var module = &#123;</span><br><span class=\"line\">            exports: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        func(module, module.exports, __webpack_require); //运行模块</span><br><span class=\"line\">        var result = module.exports; //得到模块导出的结果</span><br><span class=\"line\">        moduleExports[moduleId] = result; //缓存起来</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //执行入口模块</span><br><span class=\"line\">    return __webpack_require(&quot;./src/index.js&quot;); //require函数相当于是运行一个模块，得到模块导出结果</span><br><span class=\"line\">&#125;)(&#123; //该对象保存了所有的模块，以及模块对应的代码</span><br><span class=\"line\">    &quot;./src/a.js&quot;: function (module, exports) &#123;</span><br><span class=\"line\">        eval(&quot;console.log(\\&quot;module a\\&quot;)\\nmodule.exports = \\&quot;a\\&quot;;\\n //# sourceURL=webpack:///./src/a.js&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;./src/index.js&quot;: function (module, exports, __webpack_require) &#123;</span><br><span class=\"line\">        eval(&quot;console.log(\\&quot;index module\\&quot;)\\nvar a = __webpack_require(\\&quot;./src/a.js\\&quot;)\\na.abc();\\nconsole.log(a)\\n //# sourceURL=webpack:///./src/index.js&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>创建一个对象用于存放每个模块，并且将每个模块的路径作为该模块对应的id即属性值，每个属性的属性值为一个函数该函数就是用来执行模块中的代码的，对于commonJs来说每个函数传入的三个参数module, exports, require, 在main.js中由一个立即执行函数将创建的模块对象作为参数传入到该立即执行函数中，并用modules接收， 这样做的目的是防止modules污染全局变量，在立即执行函数中定义已缓存的模块和require函数。</p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>webpack的默认文件为webpack.config.js,当然也可以手动修改，通过<code>npx webpack --config 文件名</code>来指定配置文件,并且在配置文件中需要通过commonjs导出一个配置对象.</p>\n<p><strong>注意</strong>: 在配置文件中只能使用commonjs和规范的node代码</p>\n<p>当配置文件中的设置与命令行冲突时以命令行为基准，例如配置文件中设置的<code>mode: production;</code> 而当我们通过命令行打包的时候使用的命令是<code>npx webpack --mode development</code>, 这种时候是以命令行为准</p>\n<p><strong>为什么?不是说webpack可以识别各种模块化标准吗?</strong></p>\n<p>一定要彻底理解打包的过程，首先webpack打包的过程是在node环境下的，通过读取入口文件来分析依赖关系，也就是说我们在src中写的所有功能代码在打包的过程中都不会执行，只是被当作文件读取，而配置文件则是在打包过程中要执行的，webpack通过分析配置文件导出的配置信息打包，所以在配置文件中只能使用commonjs和使用node代码，否则在打包的过程中就会报错，而且是在命令行中报错，而我们写的功能代码就算有错误在打包的时候也不会报错，而是在执行最后打包完成之后的出口文件时报错，所以，最后打包完成时形成的js文件就跟我们的代码和文件目录和模块没有任何关系了，就是一个独立出来的js代码，放到哪都可以执行。</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><ul>\n<li>mode: development/production，设置打包之后的js文件是在开发环境下的格式还是运行环境下的格式</li>\n<li>entry: 设置入口文件，对象，默认情况下是src文件夹下的index.js文件</li>\n<li>output: 设置出口文件，对象，默认是在dist文件夹下的main.js 文件</li>\n</ul>\n<h3 id=\"devtool配置\"><a href=\"#devtool配置\" class=\"headerlink\" title=\"devtool配置\"></a>devtool配置</h3><p>使用source map来解决调试问题</p>\n<p>配置值：</p>\n<ul>\n<li>none: 在生产环境中默认为none，即没有源码地图，报错在最终生成的压缩文件中，给生产环境配置为none则生产环境生成的文件中每个模块的代码不会被放到eval中去</li>\n<li>eval: 在开发环境中默认为eval 还有很多，要用的时候去看一下文档</li>\n</ul>\n<p>具体的配置见文档：<a href=\"https://www.webpackjs.com/configuration/devtool/\">https://www.webpackjs.com/configuration/devtool/</a></p>\n<h3 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h3><p>webpack 的作用是将源代码编译（构建、打包）成最终代码</p>\n<p>整个过程大致分为三个步骤</p>\n<ol>\n<li>初始化</li>\n<li>编译</li>\n<li>输出</li>\n</ol>\n<p><img src=\"\" alt=\"img\"><img src=\"\" alt=\"img\"></p>\n<p><strong>初始化</strong></p>\n<p>此阶段，webpack会将<strong>CLI参数</strong>、<strong>配置文件</strong>、<strong>默认配置</strong>进行融合，形成一个最终的配置对象。</p>\n<p>对配置的处理过程是依托一个第三方库<code>yargs</code>完成的</p>\n<p>此阶段相对比较简单，主要是为接下来的编译阶段做必要的准备</p>\n<p>目前，可以简单的理解为，初始化阶段主要用于产生一个最终的配置</p>\n<p><strong>编译</strong></p>\n<ol>\n<li><strong>创建chunk</strong></li>\n</ol>\n<p>chunk是webpack在内部构建过程中的一个概念，译为<code>块</code>，它表示通过某个入口找到的所有依赖的统称。</p>\n<p>根据入口模块（默认为<code>./src/index.js</code>）创建一个chunk</p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293030702-ac748c8c-677d-44c5-b536-dd14b2349af2.png\" alt=\"2020-01-09-11-54-08.png\"></p>\n<p>每个chunk都有至少两个属性：</p>\n<ul>\n<li>name：默认为main</li>\n<li>id：唯一编号，开发环境和name相同，生产环境是一个数字，从0开始</li>\n</ul>\n<ol>\n<li><strong>构建所有依赖模块</strong></li>\n</ol>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293067061-a8e2c17b-e563-4393-a7ca-10140237655e.png\" alt=\"2020-01-09-12-32-38.png\"></p>\n<blockquote>\n<p>AST在线测试工具：<a href=\"https://astexplorer.net/\">https://astexplorer.net/</a></p>\n</blockquote>\n<p>简图</p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293117094-9c567a58-fb52-4e0b-a948-5fb3b03e29cc.png\" alt=\"2020-01-09-12-35-05.png\"></p>\n<ol>\n<li><strong>产生chunk assets</strong></li>\n</ol>\n<p>在第二步完成后，chunk中会产生一个模块列表，列表中包含了<strong>模块id</strong>和<strong>模块转换后的代码</strong></p>\n<p>接下来，webpack会根据配置为chunk生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成到最终文件的文件名和文件内容</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293148709-8c9a8f4d-4efb-41a6-ba61-818f4d9289d1.png\" alt=\"2020-01-09-12-39-16.png\"></p>\n<blockquote>\n<p>chunk hash是根据所有chunk assets的内容生成的一个hash字符串</p>\n<p>hash：一种算法，具体有很多分类，特点是将一个任意长度的字符串转换为一个固定长度的字符串，而且可以保证原始内容不变，产生的hash字符串就不变</p>\n</blockquote>\n<p>简图</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293180988-1d45f19f-7493-4ac6-a6e1-720c0b22ebe1.png\" alt=\"2020-01-09-12-43-52.png\"></p>\n<ol>\n<li><strong>合并chunk assets</strong></li>\n</ol>\n<p>将多个chunk的assets合并到一起，并产生一个总的hash</p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293202302-6527e25a-72d3-4d55-9036-87ec9720778a.png\" alt=\"2020-01-09-12-47-43.png\"></p>\n<p><strong>输出</strong></p>\n<p>此步骤非常简单，webpack将利用node中的fs模块（文件处理模块），根据编译产生的总的assets，生成相应的文件。</p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293248114-9b93b848-6048-4a66-82a2-af06c6018501.png\" alt=\"2020-01-09-12-54-34.png\"></p>\n<p><strong>总过程</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293265956-e1dc7b95-1e61-4f22-b124-d52c9a93a7cb.png\" alt=\"2020-01-09-15-51-07.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293277352-1e67e31b-7e7c-4f09-86e8-88b9afa58c01.png\" alt=\"2020-01-09-12-32-38.png\"><img src=\"\" alt=\"img\"></p>\n<p><strong>涉及术语</strong></p>\n<ol>\n<li>module：模块，分割的代码单元，webpack中的模块可以是任何内容的文件，不仅限于JS</li>\n<li>chunk：webpack内部构建模块的块，一个chunk中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li>\n<li>bundle：chunk构建好模块后会生成chunk的资源清单，清单中的每一项就是一个bundle，可以认为bundle就是最终生成的文件</li>\n<li>hash：最终的资源清单所有内容联合生成的hash值</li>\n<li>chunkhash：chunk生成的资源清单内容联合生成的hash值</li>\n<li>chunkname：chunk的名称，如果没有配置则使用main</li>\n<li>id：通常指chunk的唯一编号，如果在开发环境下构建，和chunkname相同；如果是生产环境下构建，则使用一个从0开始的数字进行编号</li>\n</ol>\n<h3 id=\"入口和出口\"><a href=\"#入口和出口\" class=\"headerlink\" title=\"入口和出口\"></a>入口和出口</h3><p><strong>前提node知识：</strong></p>\n<ol>\n<li><p>“./“:</p>\n</li>\n<li><ol>\n<li>模块化代码中代表当前js文件所在的目录</li>\n<li>路径处理中表示当前js所在的node执行目录，也就是在那通过node命令执行./就表示在哪个目录</li>\n</ol>\n</li>\n<li><p>__dirname: 在所有情况下都表示当前js所在目录，并且是绝对路径</p>\n</li>\n<li><p>path内置模块，<code>require(&#39;path&#39;)</code>返回一个对象，该对象中提供了很多处理路径的方法，期中一个<code>path.resolve(&#39;./&#39;, &#39;a&#39;, &#39;b&#39;)</code>可以连接多段路径，在路径处理中./表示当前js的执行目录，所以该方法可以方便的获取绝对路径</p>\n</li>\n</ol>\n<p><strong>出口、入口</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//在配置文件webpack.config.js中</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    mode: &#x27;development&#x27;,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        main: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">        a: [&#x27;./src/a.js&#x27;, &#x27;./src/index.js&#x27;] //这时就是有两个chunk</span><br><span class=\"line\">        /*为一个chunk设置多个入口文件*/</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, &#x27;target&#x27;),//必须是一个绝对路径，表示最终的asset放置的文件夹，默认是dist文件夹</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;, //静态设定 //配置每一个chunk中生成的资源中的js文件的规则</span><br><span class=\"line\">        filename: &quot;[name].js&quot; //动态规则，[name]表示每个chunk的name</span><br><span class=\"line\">        /* [hash:5]表示总资源的hash，冒号表示取前多少位数字，</span><br><span class=\"line\">        常用于处理浏览器缓存，浏览器一般第一次加载文件的时候都会缓存，</span><br><span class=\"line\">        但是如果在浏览器缓存之后我们又修改了代码那么因为文件名没有变化，</span><br><span class=\"line\">        浏览器就不会请求了直接使用上一次缓存的文件，所以使用hash，</span><br><span class=\"line\">        只要当内容改变就会产生一个完全不一样的hash，文件名就会发生改变，</span><br><span class=\"line\">        这样浏览器就会重新请求*/</span><br><span class=\"line\">        /*[chunkhash] 表示每一个chunk中的hash</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>入口其实配置的是chunk，每一个属性就是一个chunk，属性名为chunk名，属性值为chunk的入口文件，并不是一个入口文件对应一个chunk，一个chunk可以有多个入口文件，但是即使有多个入口文件一个chunk最后也只有一个资源</strong></li>\n</ul>\n<p><strong>出口</strong></p>\n<p>这里的出口是针对资源列表的文件名或路径的配置</p>\n<p>出口通过output进行配置</p>\n<p><strong>入口</strong></p>\n<p><strong>入口真正配置的是chunk</strong></p>\n<p>入口通过entry进行配置</p>\n<p>规则：</p>\n<ul>\n<li>name：chunkname</li>\n<li>hash: 总的资源hash，通常用于解决缓存问题</li>\n<li>chunkhash: 使用chunkhash</li>\n<li>id: 使用chunkid，不推荐</li>\n</ul>\n<h3 id=\"出口、入口最佳实践\"><a href=\"#出口、入口最佳实践\" class=\"headerlink\" title=\"出口、入口最佳实践\"></a>出口、入口最佳实践</h3><ul>\n<li>webpack打包后的文件中，每个文件都有一段重复代码会带来什么影响？</li>\n</ul>\n<blockquote>\n<p>首先明白什么情况下会出现公共代码，比如一些第三方库，我们可能在很多个页面中都要使用，那么这时候每个页面打包出来的文件就会有这些公共代码，但是这些公共代码并不会给我们的维护带来影响，因为这些公共代码一般都是些第三方库，我们是不需要维护这些代码的。其实这些公共代码带来的影响就是会增加浏览器请求负担。</p>\n</blockquote>\n<p>下面是一些经典场景</p>\n<p><strong>一个页面一个JS</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293578413-7e26d29f-66cc-4cf3-8c31-ff09c994ee3d.png\" alt=\"2020-01-10-12-00-28.png\"></p>\n<p>源码结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">|—— src</span><br><span class=\"line\">    |—— pageA   页面A的代码目录</span><br><span class=\"line\">        |—— index.js 页面A的启动模块</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— pageB   页面B的代码目录</span><br><span class=\"line\">        |—— index.js 页面B的启动模块</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— pageC   页面C的代码目录</span><br><span class=\"line\">        |—— main1.js 页面C的启动模块1 例如：主功能</span><br><span class=\"line\">        |—— main2.js 页面C的启动模块2 例如：实现访问统计的额外功能</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— common  公共代码目录</span><br><span class=\"line\">        |—— ...</span><br></pre></td></tr></table></figure>\n\n<p>webpack配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        pageA: &quot;./src/pageA/index.js&quot;,</span><br><span class=\"line\">        pageB: &quot;./src/pageB/index.js&quot;,</span><br><span class=\"line\">        pageC: [&quot;./src/pageC/main1.js&quot;, &quot;./src/pageC/main2.js&quot;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        filename:&quot;[name].[chunkhash:5].js&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式适用于页面之间的功能差异巨大、公共代码较少的情况，这种情况下打包出来的最终代码不会有太多重复</p>\n<p><strong>一个页面多个JS</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293594615-f5ef999a-32fc-4808-bffa-f78257ab0103.png\" alt=\"2020-01-10-12-38-03.png\"></p>\n<p>源码结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">|—— src</span><br><span class=\"line\">    |—— pageA   页面A的代码目录</span><br><span class=\"line\">        |—— index.js 页面A的启动模块</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— pageB   页面B的代码目录</span><br><span class=\"line\">        |—— index.js 页面B的启动模块</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— statistics   用于统计访问人数功能目录</span><br><span class=\"line\">        |—— index.js 启动模块</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— common  公共代码目录</span><br><span class=\"line\">        |—— ...</span><br></pre></td></tr></table></figure>\n\n<p>webpack配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        pageA: &quot;./src/pageA/index.js&quot;,</span><br><span class=\"line\">        pageB: &quot;./src/pageB/index.js&quot;,</span><br><span class=\"line\">        statistics: &quot;./src/statistics/index.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        filename:&quot;[name].[chunkhash:5].js&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式适用于页面之间有一些<strong>独立</strong>、相同的功能，专门使用一个chunk抽离这部分JS有利于浏览器更好的缓存这部分内容。</p>\n<blockquote>\n<p><strong>为什么不使用多启动模块的方式？</strong></p>\n<p>答：这种方式是可以的，但是导致增加传输量，浏览器没法缓存公共的代码。</p>\n</blockquote>\n<p><strong>单页应用</strong></p>\n<p>所谓单页应用，是指整个网站（或网站的某一个功能块）只有一个页面，页面中的内容全部靠JS创建和控制。 vue和react都是实现单页应用的利器。</p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609293618982-97ecb9cc-6ef1-4cb0-a38b-0e7dd3aa2e4a.png\" alt=\"2020-01-10-12-44-13.png\"></p>\n<p>源码结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">|—— src</span><br><span class=\"line\">    |—— subFunc   子功能目录</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— subFunc   子功能目录</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— common  公共代码目录</span><br><span class=\"line\">        |—— ...</span><br><span class=\"line\">    |—— index.js</span><br></pre></td></tr></table></figure>\n\n<p>webpack配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &quot;./src/index.js&quot;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        filename:&quot;index.[hash:5].js&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><blockquote>\n<p>loader的本质其实就是一个函数，该函数接收源码字符串，然后返回一个处理后的代码字符串，所以loader作用的时候是在读取文件后生成AST树之前</p>\n</blockquote>\n<p><strong>全流程：</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294003216-541e627b-6c04-47e5-8fe0-40acb544f129.png\" alt=\"2020-01-13-09-28-52.png\"></p>\n<p><strong>chunk中解析模块的流程：</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294009496-0ffbdec5-48b0-4e42-9eb9-1509dbdf7d1e.png\" alt=\"2020-01-13-09-29-08.png\"></p>\n<p><strong>chunk中解析模块的更详细流程：</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294016813-1184e4ce-7ae0-4942-ad21-c9407f4ba70e.png\" alt=\"2020-01-13-09-35-44.png\"></p>\n<p><strong>处理loaders流程：</strong></p>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609294022277-841f7914-922e-45eb-ac83-df92fe6ba85f.png\" alt=\"2020-01-13-10-29-54.png\"></p>\n<p><strong>loader配置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: ,/*test是一个正则表达式，用来匹配符合条件的模块路径，</span><br><span class=\"line\">                即能被该正则表达式匹配到的路径对应的模块会使用该规则中的loaders进行解析*/</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: //加载器的路径</span><br><span class=\"line\">                        options:&#123;</span><br><span class=\"line\">                            //更多配置，可以通过第三方库loader-utils来获取options中的内容</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]//use就是匹配成功之后需要使用的loaders</span><br><span class=\"line\">            &#125;,//规则1</span><br><span class=\"line\">            &#123;&#125;//规则2</span><br><span class=\"line\">        ] //模块的匹配规则,其中每一个规则是一个对象</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>简化配置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    module: &#123; //针对模块的配置，目前版本只有两个配置，rules、noParse</span><br><span class=\"line\">        rules: [ //模块匹配规则，可以存在多个规则</span><br><span class=\"line\">            &#123; //每个规则是一个对象</span><br><span class=\"line\">                test: /\\.js$/, //匹配的模块正则</span><br><span class=\"line\">                use: [&quot;模块路径1&quot;, &quot;模块路径2&quot;]//loader模块的路径，该字符串会被放置到require中</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>同一个文件匹配到多个规则时从上往下匹配，每匹配到一个规则中的use数组就把里面的loader加入到一个数组中，然后在真正执行loader的时候从数组的后面往前面运行</strong></p>\n<p><strong>use中的loader路径最终其实是被require读取的</strong></p>\n<h3 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h3><p>loader的功能定位是转换代码，而一些其他的操作难以使用loader完成，比如：</p>\n<ul>\n<li>当webpack生成文件时，顺便多生成一个说明描述文件</li>\n<li>当webpack编译启动时，控制台输出一句话表示webpack启动了</li>\n<li>当xxxx时，xxxx</li>\n</ul>\n<p>这种类似的功能需要把功能嵌入到webpack的编译流程中，而这种事情的实现是依托于plugin的</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609333854057-9d86051a-010a-4c0d-9788-b38c7aa463cc.png\" alt=\"2020-01-15-12-45-16.png\"></p>\n<p>plugin的<strong>本质</strong>是一个带有apply方法的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var plugin = &#123;</span><br><span class=\"line\">    apply: function(compiler)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常，习惯上，我们会将该对象写成构造函数的模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class MyPlugin&#123;</span><br><span class=\"line\">    apply(compiler)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var plugin = new MyPlugin();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>要将插件应用到webpack，需要把插件对象配置到webpack的plugins数组中，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        new MyPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>apply函数会在初始化阶段，创建好Compiler对象后运行。</p>\n<p>compiler对象是在初始化阶段构建的，整个webpack打包期间只有一个compiler对象，后续完成打包工作的是compiler对象内部创建的compilation</p>\n<p>apply方法会在初始化阶段<strong>创建好compiler对象后调用</strong>，并向方法传入一个compiler对象</p>\n<blockquote>\n<p><strong>compiler对象和compilation对象有什么区别？</strong></p>\n<p>答：compiler对象内部创建的compilation，具体的打包过程是由compilation来完成的。当文件发生变化时，也就是说当webpack启动监听文件变化时，compilation将重新创建，也就是说compiler只有一个，而compilation可以有多个。</p>\n</blockquote>\n<p><img src=\"\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/2951169/1609333867152-fd53ee1f-91c5-412e-acb1-62f8edfb084f.png\" alt=\"2020-01-15-12-49-26.png\"></p>\n<p>compiler对象提供了大量的钩子函数（hooks，可以理解为事件），plugin的开发者可以注册这些钩子函数，参与webpack编译和生成。</p>\n<p>你可以在apply方法中使用下面的代码注册钩子函数:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class MyPlugin&#123;</span><br><span class=\"line\">    apply(compiler)&#123;</span><br><span class=\"line\">        //在这里注册时间，类似于window.onload $(function()&#123;&#125;)</span><br><span class=\"line\">        compiler.hooks.事件名称.事件类型(name, function(compilation)&#123;</span><br><span class=\"line\">            //事件处理函数</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>事件名称</strong></p>\n<p>即要监听的事件名，即钩子名，所有的钩子：<a href=\"https://www.webpackjs.com/api/compiler-hooks\">https://www.webpackjs.com/api/compiler-hooks</a></p>\n<p><strong>事件类型</strong></p>\n<p>这一部分使用的是 Tapable API，这个小型的库是一个专门用于钩子函数监听的库。</p>\n<p>它提供了一些事件类型：</p>\n<ul>\n<li>tap：注册一个同步的钩子函数，函数运行完毕则表示事件处理结束</li>\n<li>tapAsync：注册一个基于回调的异步的钩子函数，函数通过调用一个回调表示事件处理结束</li>\n<li>tapPromise：注册一个基于Promise的异步的钩子函数，函数通过返回的Promise进入已决状态表示事件处理结束</li>\n</ul>\n<p><strong>处理函数</strong></p>\n<p>处理函数有一个事件参数<code>compilation</code></p>\n<h3 id=\"区分环境\"><a href=\"#区分环境\" class=\"headerlink\" title=\"区分环境\"></a>区分环境</h3><h3 id=\"其他细节配置\"><a href=\"#其他细节配置\" class=\"headerlink\" title=\"其他细节配置\"></a>其他细节配置</h3><p><strong>context</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">context：path.resolve(``__dirname,``&quot;app&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>该配置会影响入口和loaders的解析，入口和loaders的相对路径会以context的配置作为基准路径，这样，你的配置会独立于CWD（current working directory 当前执行路径）</p>\n<p><strong>output</strong></p>\n<p><strong>1.library</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library``:`` ``&quot;abc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这样一来，打包后的结果中，会将自执行函数的执行结果暴露给abc</p>\n<p><strong>2.libraryTarget</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">libraryTarget``:`` ``&quot;var&quot;</span><br></pre></td></tr></table></figure>\n\n<p>该配置可以更加精细的控制如何暴露入口包的导出结果</p>\n<p>其他可用的值有：</p>\n<ul>\n<li>var：默认值，暴露给一个普通变量</li>\n<li>window：暴露给window对象的一个属性</li>\n<li>this：暴露给this的一个属性</li>\n<li>global：暴露给global的一个属性</li>\n<li>commonjs：暴露给exports的一个属性</li>\n<li>其他：<a href=\"https://www.webpackjs.com/configuration/output/#output-librarytarget\">https://www.webpackjs.com/configuration/output/#output-librarytarget</a></li>\n</ul>\n<p><strong>target</strong></p>\n<p>target:”web” //默认值</p>\n<p>设置打包结果最终要运行的环境，常用值有</p>\n<ul>\n<li>web: 打包后的代码运行在web环境中</li>\n<li>node：打包后的代码运行在node环境中</li>\n<li>其他：<a href=\"https://www.webpackjs.com/configuration/target/\">https://www.webpackjs.com/configuration/target/</a></li>\n</ul>\n<p><strong>module.noParse</strong></p>\n<p>noParse: /jquery/</p>\n<p>不解析正则表达式匹配的模块，通常用它来忽略那些大型的单模块库，以提高<strong>构建性能</strong></p>\n<p><strong>resolve</strong></p>\n<p>resolve的相关配置主要用于控制模块解析过程</p>\n<p><strong>modules</strong></p>\n<p><code>modules``:`` ``[``&quot;node_modules&quot;``]</code>  //默认值</p>\n<p>当解析模块时，如果遇到导入语句，<code>require(&quot;test&quot;)</code>，webpack会从下面的位置寻找依赖的模块</p>\n<ol>\n<li>当前目录下的<code>node_modules</code>目录</li>\n<li>上级目录下的<code>node_modules</code>目录</li>\n<li>…</li>\n</ol>\n<p><strong>extensions</strong></p>\n<p><code>extensions``:`` ``[``&quot;.js&quot;``,`` ``&quot;.json&quot;``]``  </code>//默认值</p>\n<p>当解析模块时，遇到无具体后缀的导入语句，例如<code>require(&quot;test&quot;)</code>，会依次测试它的后缀名</p>\n<ul>\n<li>test.js</li>\n<li>test.json</li>\n</ul>\n<p><strong>alias</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias: &#123;</span><br><span class=\"line\">  &quot;@&quot;: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class=\"line\">  &quot;_&quot;: __dirname</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了alias（别名）后，导入语句中可以加入配置的键名，例如<code>require(&quot;@/abc.js&quot;)</code>，webpack会将其看作是<code>require(src的绝对路径+&quot;/abc.js&quot;)</code>。</p>\n<p>在大型系统中，源码结构往往比较深和复杂，别名配置可以让我们更加方便的导入依赖</p>\n<p><strong>externals</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    jquery: &quot;$&quot;,</span><br><span class=\"line\">    lodash: &quot;_&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从最终的bundle中排除掉配置的配置的源码，例如，入口模块是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">require(&quot;jquery&quot;)</span><br><span class=\"line\">require(&quot;lodash&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>生成的bundle是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">    &quot;./src/index.js&quot;: function(module, exports, __webpack_require__)&#123;</span><br><span class=\"line\">        __webpack_require__(&quot;jquery&quot;)</span><br><span class=\"line\">        __webpack_require__(&quot;lodash&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;jquery&quot;: function(module, exports)&#123;</span><br><span class=\"line\">        //jquery的大量源码</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;lodash&quot;: function(module, exports)&#123;</span><br><span class=\"line\">        //lodash的大量源码</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>但有了上面的配置后，则变成了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">    &quot;./src/index.js&quot;: function(module, exports, __webpack_require__)&#123;</span><br><span class=\"line\">        __webpack_require__(&quot;jquery&quot;)</span><br><span class=\"line\">        __webpack_require__(&quot;lodash&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;jquery&quot;: function(module, exports)&#123;</span><br><span class=\"line\">        module.exports = $;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;lodash&quot;: function(module, exports)&#123;</span><br><span class=\"line\">        module.exports = _;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这比较适用于一些第三方库来自于外部CDN的情况，这样一来，即可以在页面中使用CDN，又让bundle的体积变得更小，还不影响源码的编写</p>\n<p><strong>stats</strong></p>\n<p>stats控制的是构建过程中控制台的输出内容</p>\n<h2 id=\"常用扩展\"><a href=\"#常用扩展\" class=\"headerlink\" title=\"常用扩展\"></a>常用扩展</h2><h3 id=\"清除输出目录\"><a href=\"#清除输出目录\" class=\"headerlink\" title=\"清除输出目录\"></a>清除输出目录</h3><p>先进行安装：<code>$ npm i -D ``clean-webpack-plugin</code></p>\n<p>把 build或dist (就是放生产环境用的文件) 目录里的文件先清除干净，再生成新的。</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var &#123;CleanWebpackPlugin&#125; = require(&quot;clean-webpack-plugin&quot;)</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  mode:&quot;development&quot;,</span><br><span class=\"line\">  devtool:&quot;source-map&quot;,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    filename:&quot;[name].[chunkhash:5].js&quot;  //输出的文件名</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:&#123;</span><br><span class=\"line\">    new CleanWebpackPlugin();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动生成页面\"><a href=\"#自动生成页面\" class=\"headerlink\" title=\"自动生成页面\"></a>自动生成页面</h3><p>先进行安装：<code>$ npm i -D ``html-webpack-plugin</code></p>\n<p>生成html文件</p>\n<p>代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var &#123;CleanWebpackPlugin&#125; = require(&quot;clean-webpack-plugin&quot;)</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  plugins:&#123;//这里可以写多个，顺序无所谓</span><br><span class=\"line\">    new CleanWebpackPlugin(),</span><br><span class=\"line\">    new HtmlWebpackPlugin()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复制静态资源\"><a href=\"#复制静态资源\" class=\"headerlink\" title=\"复制静态资源\"></a>复制静态资源</h3><p>安装：<code>$ npm i -D ``cope-webpack-plugin</code></p>\n<p>复制指定文件夹下的内容到dist文件夹里</p>\n<p>代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var CopyPlugin = require(&quot;copy-webpack-plugin&quot;)</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  plugins:&#123;</span><br><span class=\"line\">    new CopyPlugin([</span><br><span class=\"line\">        &#123;from:&quot;./public&quot;,to:&quot;./&quot;&#125;//复制规则</span><br><span class=\"line\">        //意思是说将public文件夹里的内容放进dist目录里。</span><br><span class=\"line\">        //如果to写&quot;./dist&quot;,则会在dist里面生成一个dist文件夹</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h3><p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p>\n<ol>\n<li>编写代码</li>\n<li>控制台运行命令完成打包</li>\n<li>打开页面查看效果</li>\n<li>继续编写代码，回到步骤2</li>\n</ol>\n<p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</p>\n<p>为了解决这些问题，webpack官方制作了一个单独的库：<strong>webpack-dev-server</strong></p>\n<p>它<strong>既不是plugin也不是loader</strong></p>\n<p>先来看看它怎么用</p>\n<ol>\n<li>安装<code>$ npm i -D webpack-dev-server</code></li>\n<li>执行<code>webpack-dev-server</code>命令</li>\n</ol>\n<p><code>webpack-dev-server</code>命令几乎支持所有的webpack命令参数，如<code>--config</code>、<code>-env</code>等等，你可以把它当作webpack命令使用</p>\n<p>这个命令是专门为开发阶段服务的，真正部署的时候还是得使用webpack命令</p>\n<p>当我们执行<code>webpack-dev-server</code>命令后，它做了以下操作：</p>\n<ol>\n<li><p>内部执行webpack命令，传递命令参数</p>\n</li>\n<li><p>开启watch</p>\n</li>\n<li><p>注册hooks：类似于plugin，webpack-dev-server会向webpack中注册一些钩子函数，主要功能如下：</p>\n</li>\n<li><ol>\n<li>将资源列表（aseets）保存起来</li>\n<li>禁止webpack输出文件</li>\n</ol>\n</li>\n<li><p>用express开启一个服务器，监听某个端口，当请求到达后，根据请求的路径，给予相应的资源内容</p>\n</li>\n</ol>\n<p><strong>配置</strong></p>\n<p>针对webpack-dev-server的配置，参考：<a href=\"https://www.webpackjs.com/configuration/dev-server/\">https://www.webpackjs.com/configuration/dev-server/</a></p>\n<p>常见配置有：</p>\n<ul>\n<li>port：配置监听端口</li>\n<li>proxy：配置代理，常用于跨域访问</li>\n<li>stats：配置控制台输出内容</li>\n</ul>\n<h2 id=\"CSS工程化\"><a href=\"#CSS工程化\" class=\"headerlink\" title=\"CSS工程化\"></a>CSS工程化</h2><h2 id=\"JS兼容性\"><a href=\"#JS兼容性\" class=\"headerlink\" title=\"JS兼容性\"></a>JS兼容性</h2><h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><h2 id=\"补充和案例\"><a href=\"#补充和案例\" class=\"headerlink\" title=\"补充和案例\"></a>补充和案例</h2>","categories":["Javascript"],"tags":["WebPack"]},{"title":"正则表达式","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/正则表达式——知识点/","content":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><p>正则表达式就是一个表达式，用来查找一个有指定【特点】的表达式，规则匹配的。</p>\n<h1 id=\"正则表达式定义的方式\"><a href=\"#正则表达式定义的方式\" class=\"headerlink\" title=\"正则表达式定义的方式\"></a>正则表达式定义的方式</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var reg = /abc/;</span><br><span class=\"line\">var reg = new RegExp(&#x27;abc&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"正则表达式使用方法\"><a href=\"#正则表达式使用方法\" class=\"headerlink\" title=\"正则表达式使用方法\"></a>正则表达式使用方法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">reg.test(str);</span><br><span class=\"line\">str.match(reg);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"特殊属性-i-g-m\"><a href=\"#特殊属性-i-g-m\" class=\"headerlink\" title=\"特殊属性  i/g/m\"></a>特殊属性  i/g/m</h1><ul>\n<li><p><code>g</code>代表的是<code>global</code>全局匹配</p>\n</li>\n<li><p><code>i</code>代表<code>ignoreCase</code>忽略大小写，</p>\n</li>\n<li><p><code>m</code>代表<code>multiline</code>多行匹配，</p>\n</li>\n</ul>\n<h1 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h1><p>具有特殊含义的字符。</p>\n<ul>\n<li><p><code>\\</code>   转义字符</p>\n</li>\n<li><p><code>|</code>   或</p>\n</li>\n</ul>\n<h2 id=\"方括号\"><a href=\"#方括号\" class=\"headerlink\" title=\"方括号\"></a>方括号</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[abc]  查找方括号内的任意一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">[^abc]   查找任何不在方括号内的字符</span><br><span class=\"line\"></span><br><span class=\"line\">[0-9]  查找0-9之间的数字</span><br><span class=\"line\"></span><br><span class=\"line\">[a-z]  查找任何小写字母</span><br><span class=\"line\"></span><br><span class=\"line\">[A-Z]  查找任何大写字母</span><br><span class=\"line\"></span><br><span class=\"line\">[A-z]  查找任何字母</span><br><span class=\"line\"></span><br><span class=\"line\">(red|blue|green)  查找指定字符串（子表达式）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.       查找单个字符，除了换行和行结束符。</span><br><span class=\"line\">\\w      查找单词字符（匹配字母、数字、下划线。等价于&#x27;[A-Za-z0-9_]&#x27;）</span><br><span class=\"line\">\\W      查找非单词字符</span><br><span class=\"line\">\\d      查找数字</span><br><span class=\"line\">\\D      查找非数字</span><br><span class=\"line\">\\s      查找空白字符 </span><br><span class=\"line\">\\S      查找非空白字符</span><br><span class=\"line\">\\b      查找单词边界</span><br><span class=\"line\">\\B      查找非单词边界</span><br><span class=\"line\">\\n      查找换行符</span><br><span class=\"line\">\\f      查找换页符</span><br><span class=\"line\">\\r      查找回车符</span><br><span class=\"line\">\\t      查找制表符</span><br><span class=\"line\">\\v      查找垂直制表符</span><br><span class=\"line\">\\uxxx   查找以十六位进制数xxxx规定的Unicode字符</span><br><span class=\"line\">[\\u4e00-\\u9fa5] 所有中文字符</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">以下均遵循贪婪匹配：</span><br><span class=\"line\"></span><br><span class=\"line\">n+      匹配任何包含至少一个n的字符</span><br><span class=\"line\">n*      匹配任何包含0个或多个n的字符</span><br><span class=\"line\">n?      匹配任何0个或一个n的字符</span><br><span class=\"line\">n&#123;X&#125;    匹配X个n的序列字符串</span><br><span class=\"line\">n&#123;X,Y&#125;  匹配X至Y个n的序列字符串</span><br><span class=\"line\">n$      匹配以n结尾的字符串</span><br><span class=\"line\">^n      匹配任何以n开头的字符串</span><br><span class=\"line\">?=n     正向肯定预查匹配任何后面紧接着指定字符串n的字符串</span><br><span class=\"line\">?!n     正向否定预查匹配任何其后没有紧接着指定字符串n的字符串</span><br><span class=\"line\">?&lt;=n    反向肯定预查匹配任何前面紧跟着指定字符串n的字符串</span><br><span class=\"line\">?&lt;!n    反向否定预查匹配任何前面没有紧接着指定字符串n的字符串</span><br><span class=\"line\">非贪婪匹配：</span><br><span class=\"line\">n+?    n*? ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(?:n)   匹配时子表达式中没有这一项（不补获分组）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RegExp对象属性\"><a href=\"#RegExp对象属性\" class=\"headerlink\" title=\"RegExp对象属性\"></a>RegExp对象属性</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">global      查看RegExp对象是否具有g标志</span><br><span class=\"line\">ignoreCase  查看RegExp对象是否具有i标志</span><br><span class=\"line\">multiline   查看RegExp对象是否具有m标志</span><br><span class=\"line\">source      查看正则表达式源文本</span><br><span class=\"line\">lastIndex   一个整数标志开始下一次匹配的字符位置（一般与exec一起使用）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RegExp对象方法\"><a href=\"#RegExp对象方法\" class=\"headerlink\" title=\"RegExp对象方法\"></a>RegExp对象方法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile    编译正则表达式。\t（就是改变这个正则表达式）</span><br><span class=\"line\">exec       检索字符串中指定的值。返回找到的值，并确定其位置。\t</span><br><span class=\"line\">test        检索字符串中指定的值。返回 true 或 false。\t</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">search          检索正则表达式相匹配的值</span><br><span class=\"line\">match           查找所有符合正则匹配条件的结果</span><br><span class=\"line\">replace         替换与正则表达式匹配的字符串</span><br><span class=\"line\">split           把字符串分割成数组(注： 用字表达式分割的话会保留子表达式)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"相关面试题\"><a href=\"#相关面试题\" class=\"headerlink\" title=\"相关面试题\"></a>相关面试题</h1><blockquote>\n<ol>\n<li> 正则表达式实现aabb的形式变成bbaa</li>\n<li> 给10000000000三位打点 变成 10.000.000.000</li>\n<li> 字符串去重 aaaaaaaaaaaaaaaaaaaaaabbbbbbbbcccccccccc变成abc</li>\n<li> 把the-first-name转换成小驼峰式theFirstName</li>\n<li> 匹配结尾的数字</li>\n<li> 统一空格数</li>\n<li> 判断字符串是不是由数字构成</li>\n<li> 删除字符串中的空格</li>\n<li> 身份证号匹配</li>\n<li> 将字符串”select student.*,result.* from student inner join result on student.id = result.studentid” 和字符串”select * from student “中的student替换成key值   </li>\n</ol>\n</blockquote>\n","categories":["Javascript"],"tags":["正则表达式"]},{"title":"网络","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/网络/","content":"<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><p><strong>冯诺依曼式计算机–冯诺依曼（计算机之父）</strong></p>\n<p><strong>运算器：</strong></p>\n<ul>\n<li>CPU，GPU（显卡）</li>\n</ul>\n<p><strong>存储器：</strong></p>\n<ul>\n<li>内存（断电数据清空，读写速度快）</li>\n<li>硬盘（辅存）：（数据可以持久化，读写速度，相对较慢）</li>\n</ul>\n<p><strong>控制器：</strong></p>\n<ul>\n<li>主板上的一些器件</li>\n</ul>\n<p><strong>输入设备：</strong></p>\n<ul>\n<li>键盘，鼠标，麦克风，网口</li>\n</ul>\n<p><strong>输出设备：</strong></p>\n<ul>\n<li>显示器，耳机，网口</li>\n</ul>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><h3 id=\"IP自动地址的格式：\"><a href=\"#IP自动地址的格式：\" class=\"headerlink\" title=\"IP自动地址的格式：\"></a>IP自动地址的格式：</h3><ul>\n<li><code>IP</code>地址分为四个段：<code>xxx.xxx.xxx.xxx</code>，每个段0~255，每个段都是由8个0、1组成的。</li>\n</ul>\n<h3 id=\"IP地址的分类：\"><a href=\"#IP地址的分类：\" class=\"headerlink\" title=\"IP地址的分类：\"></a>IP地址的分类：</h3><ul>\n<li><p>一个IP地址分为两个部分：网络<code>ID</code>，主机<code>ID</code></p>\n</li>\n<li><ul>\n<li>A类：0.0.0.0 ~ 127.255.255.255（一个网络能有1600+万台）</li>\n<li>B类：128.0.0.0 ~ 191.255.255.255（有的用户网络也可以是：172.16.0.0 ~ 172.31.255.255）</li>\n<li>C类：192.0.0.0 ~ 223.255.255.255（C类为家用网络：192.168.xxx.xxx）</li>\n<li>D类：（多播地址）</li>\n<li>E类：</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五层网络模型\"><a href=\"#五层网络模型\" class=\"headerlink\" title=\"五层网络模型\"></a>五层网络模型</h2><ul>\n<li>应用层：<code>HTTP</code>协议，<code>DNS</code>协议</li>\n<li>运输层：<code>TCP</code>协议、<code>UDP</code>协议</li>\n<li>网络层：<code>IP</code>地址 – <code>IP</code>协议</li>\n<li>数据链路层：mac地址</li>\n<li>物理层</li>\n<li>*用户传输的自上而下的，浏览器解析是自下而上的</li>\n</ul>\n<h2 id=\"域名与DNS解析\"><a href=\"#域名与DNS解析\" class=\"headerlink\" title=\"域名与DNS解析\"></a>域名与DNS解析</h2><p><code>www.baidu.com</code> -&gt; <strong>域名</strong></p>\n<p>问：能通过域名直接访问到一台机器吗？</p>\n<p>答：不可以的。</p>\n<h3 id=\"用域名和IP形成对应关系\"><a href=\"#用域名和IP形成对应关系\" class=\"headerlink\" title=\"用域名和IP形成对应关系\"></a>用域名和IP形成对应关系</h3><ul>\n<li>首先，计算机是不知道域名对应的<code>IP</code>的。</li>\n<li>问路由器，如果路由器认识这个域名，就返回一个<code>IP</code>，然后计算机访问这个<code>IP</code>。</li>\n<li>如果路由器不认识，他就问上一层路由器。</li>\n<li>如果问到了城市这个级别的路由器的时候，<code>DNS</code>服务器。</li>\n<li>如果<code>DNS</code>服务器不认识这个域名，继续向上级<code>DNS</code>服务器查找。</li>\n</ul>\n<p>互联网建立的时候，全球有13台的<code>DNS</code>服务器。</p>\n<h3 id=\"当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？\"><a href=\"#当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？\" class=\"headerlink\" title=\"当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？\"></a>当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入`https://www.baidu.com`，这时`DNS`解析出`ip`地址，客户端发送http请求，经历三次握手，访问服务器，访问服务器过后，进行四次挥手，也就是断开连接，返回服务器的内容</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/url%20request.png\" alt=\"url简易请求\"></p>\n<h3 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h3><ul>\n<li><p>当前在客户端当中输入了一个<code>www.baidu.com</code>，那么我们的这个客户端，当前会有一个<code>DNS</code>客户端，<code>DNS</code>客户端会获取当前我们输入的域名，向<code>DNS</code>服务器端发送一个检查报文，由这个<code>DNS</code>服务器根据这个域名解析出来这个唯一的<code>IP</code>地址</p>\n</li>\n<li><p>，然后这个<code>DNS</code>服务器，会把解析出来的<code>IP</code>地址发送给<code>DNS</code>客户端，也就是发送到我们本机上面，发送到本机上之后，一旦浏览器收取到了<code>DNS</code>解析出来的这个<code>IP</code>地址之后，就可以向该<code>IP</code>地址定位，给服务器发送<code>http</code>请求了。</p>\n</li>\n<li><p><code>DNS</code>域名服务器解析域名时，是倒着解析的，是一个树状图的一个形状，例如<code>www.baidu.com</code>，先解析<code>.com</code>，解析出来<code>.com</code>的<code>IP</code>地址，.com下面有很多的域名，找到baidu，然后解析<code>baidu</code>的<code>IP</code>地址，然后找<code>baidu</code>下面的<code>www</code>，然后解析<code>www</code>的域名，这三段<code>IP</code>地址构成了百度的绝对的<code>IP</code>地址，然后就可以根据这个<code>IP</code>地址给服务器发送请求了</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t\t__________________________.com________________________________</span><br><span class=\"line\">  \t\t|\t\t\t   \t\t|\t\t\t\t\t|\t\t\t\t|</span><br><span class=\"line\">  ____baidu____\t\t\t tencent\t\t \t alibaba\t\t……</span><br><span class=\"line\"> |\t\t  |     |</span><br><span class=\"line\">zhidao  www   \t……</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"form表单\"><a href=\"#form表单\" class=\"headerlink\" title=\"form表单\"></a>form表单</h2><blockquote>\n<p><code>form</code>表单获取数据一次就会刷新一次，不会局部获取数据，所以就要通过ajax来弥补</p>\n</blockquote>\n<ul>\n<li><strong><code>method</code>:<code>get</code>（获得数据） <code>post</code>（传入数据）等</strong></li>\n<li><strong><code>action</code>: <code>address</code>(地址)</strong></li>\n<li><code>entype</code>: 规定在发送表单数据之前如果对其进行编码<ul>\n<li><code>application/x-www-form-urlencoded </code>（在发送前编码所有字符（默认）</li>\n<li><code>multipart/form-data (&lt;input type=&#39;file&#39;&gt;)</code> 所有的字符都不编码，使用包含文件上传控件的表单时，必须使用该值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Get与Post请求方式的区别\"><a href=\"#Get与Post请求方式的区别\" class=\"headerlink\" title=\"Get与Post请求方式的区别\"></a>Get与Post请求方式的区别</h3><ul>\n<li>是基于什么前提的？如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议。<br>答：<code>GET</code>和<code>POST</code>几乎没有什么区别，只有名字不一样。</li>\n<li>如果是基于<code>RFC</code>规范的。<br>（1）理论上（<code>Specification</code>）：<code>GET</code>和<code>POST</code>具有相同语法的，但是又不同的语义。<code>GET</code>是用来获取数据的，<code>POST</code>是用来发送数据的，其他方面没有区别。<br>（2）实现上的（<code>Implementation</code>）：各种浏览器，就是这个规范的实现者。<br>常见的那些不同</li>\n<li>1）<code>GET</code>请求的数据在请求主体是看不到数据的，但是在URL是可见的。<code>POST</code>请求不显示在<code>URL</code>中，但是显示在请求主体中。</li>\n<li>2）<code>GET</code>对长度是有限制的，<code>POST</code>可以传入很多数据。</li>\n<li>3）<code>GET</code>请求的数据可以收藏为书签，<code>POST</code>请求到的数据不可收藏为书签。</li>\n<li>4）<code>GET</code>请求后，按后退按钮、刷新按钮无影响，<code>POST</code>数据会被重新提交。</li>\n<li>5）<code>GET</code>编码类型：<code>application/x-www-form-url</code>，<code>POST</code>的编码类型：有很多种：<code>encodeapplication/x-www-form-urlencoded、multipart/form-data</code></li>\n<li>6）<code>GET</code>历史参数会被保留在浏览器里，<code>POST</code>不会保存在浏览器中的。</li>\n<li>7）<code>GET</code>只允许<code>ASCII</code>，<code>POST</code>没有编码限制，允许发二进制的。</li>\n<li>8）<code>GET</code>与<code>POST</code>相比，<code>GET</code>安全性较差，因为所发的数据是<code>URL</code>的一部分。</li>\n</ul>\n<h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><h3 id=\"Ajax简介\"><a href=\"#Ajax简介\" class=\"headerlink\" title=\"Ajax简介\"></a>Ajax简介</h3><ul>\n<li><p><code>Asynchronous Javascript And XML</code> （异步的<br> <code>JavaScript</code>和<code>XML</code>）</p>\n</li>\n<li><p> 它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</p>\n</li>\n<li><p><strong><code>Ajax</code>优势与不足</strong></p>\n<ul>\n<li><strong><code>Ajax</code>优势</strong><ul>\n<li>优秀的用户体验<ul>\n<li>这是<code>Ajax</code>下最大的优点，能在不刷新整个页面前提下更新数据</li>\n</ul>\n</li>\n<li>提高<code>web</code>程序的性能<ul>\n<li> 与传统模式相比，<code>Ajax</code>模式在性能上最大的区别在于传输数据的方式，在传统模式中，数据的提交时通过表单来实现的。<code>Ajax</code>模式只是通过<code>XMLHttpRequest</code>对象向服务器提交希望提交的数据，即按需发送</li>\n</ul>\n</li>\n<li>减轻服务器和带宽的负担<ul>\n<li> <code>Ajax</code>的工作原理相当于在用户和服务器之间加了一个中间层，似用户操作与服务器响应异步化。它在客户端创建<code>Ajax</code>引擎，把传统方式下的一些服务器负担的工作转移到客户端，便于客户端资源来处理，减轻服务器和带宽的负担</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Ajax的不足</strong><ul>\n<li>浏览器对<code>XMLHttpRequest</code>对象的支持度不足</li>\n<li>破坏浏览器前进、后退按钮的正常功能</li>\n<li>对搜索引擎的支持的不足</li>\n<li>开发和调试工具的缺乏</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建一个Ajax请求\"><a href=\"#创建一个Ajax请求\" class=\"headerlink\" title=\"创建一个Ajax请求\"></a>创建一个Ajax请求</h3><ul>\n<li><p><strong><code>serialize()</code></strong> 方法</p>\n<ul>\n<li>串联表单对象，序列表表格内容为字符串，用于 Ajax 请求。</li>\n</ul>\n</li>\n<li><p><strong><code>serializeArray()</code></strong> 方法</p>\n<ul>\n<li>把串联表单对象的形式用数组表示出来</li>\n</ul>\n</li>\n<li><p><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成</p>\n</li>\n<li><p><strong>创建<code>ajax</code>对象 <code>var xhr = new XMLHttpRequest();</code></strong></p>\n</li>\n<li><p><strong>准备发送请求</strong></p>\n<ul>\n<li><p><strong><code>get</code> / <code>post</code></strong></p>\n<ul>\n<li><p><strong><code>get</code></strong></p>\n<ul>\n<li>传递的数据放在<code>URL</code>后面</li>\n<li>中文编码 <code>encodeURI( &#39;&#39; )</code>;</li>\n<li>缓存 在数据后面加上随机数或者日期对象或者……</li>\n</ul>\n</li>\n<li><p><strong><code>post</code></strong></p>\n<ul>\n<li>传递的数据放在<code>send()</code>里面，并且一定要规定数据格式</li>\n<li>没有缓存问题</li>\n</ul>\n</li>\n<li><p><code>form</code>表单中:</p>\n<ul>\n<li><code>action</code>:<ul>\n<li><code>method</code>: (默认是<code> get</code>)<ul>\n<li><code>get</code>: 会在<code>url</code>里面以 <code>name=value</code> , 两个数据之间用 <code>&amp;</code> 连接</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>post</code>:</li>\n</ul>\n</li>\n<li><p><code>enctype</code>: <code>&quot;application/x-www-form-urlencoded&quot;</code></p>\n</li>\n</ul>\n</li>\n<li><p> <code>url</code></p>\n</li>\n<li><p> 是否异步</p>\n</li>\n<li><p> 同步(<code>false</code>)：阻塞</p>\n</li>\n<li><p> 异步(<code>true</code>)：非阻塞</p>\n</li>\n</ul>\n</li>\n<li><p><strong>正式发送请求</strong></p>\n</li>\n<li><p><strong><code>ajax</code>请求处理过程</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\talert( xhr.responseText );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>onreadystatechange</code> ：当处理过程发生变化的时候执行下面的函数</p>\n</li>\n<li><p><code>readyState</code> ：<code>ajax</code>处理过程</p>\n<ul>\n<li>0：请求未初始化（还没有调用 <code>open()</code>）。</li>\n<li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）。</li>\n<li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li>\n<li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li>\n<li>4：响应已完成；您可以获取并使用服务器的响应了。</li>\n</ul>\n</li>\n<li><p><code>responseText</code> ：请求服务器返回的数据存在该属性里面</p>\n</li>\n<li><p><code>status</code> : <code>http</code>状态码</p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/jQ/HTTP.jpg\" alt=\"HTTP状态码\"></p>\n</li>\n</ul>\n<p><strong>人类语言中的异步和机器语言的异步正好是相反的，同步也一样</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">举例：</span><br><span class=\"line\">\t订外卖</span><br><span class=\"line\">    <span class=\"number\">1.</span> 需要一个设备：手机、电脑</span><br><span class=\"line\">    <span class=\"number\">2.</span> 设备里面要有app：美团外卖、饿了么、百度外卖</span><br><span class=\"line\">    <span class=\"number\">3.</span> 打开app ，选择商家---选择商品---张亮麻辣烫</span><br><span class=\"line\">\t<span class=\"number\">4.</span> 然后下单（不要麻辣不要汤）</span><br><span class=\"line\">    <span class=\"number\">5.</span> 监听外卖信息（就是查看外卖的情况，店家是否接单、骑手是否接单、外卖送到哪里）</span><br><span class=\"line\">    <span class=\"number\">6.</span> 开门---验货---处理</span><br><span class=\"line\"></span><br><span class=\"line\">\tajax</span><br><span class=\"line\">    <span class=\"number\">1.</span> 设备：浏览器（必需，如果没有浏览器，ajax是发不出去的）</span><br><span class=\"line\">    <span class=\"number\">2.</span> 要有一个ajax对象</span><br><span class=\"line\">    <span class=\"number\">3.</span> ajax.open(method,url,flag)</span><br><span class=\"line\">\t\t<span class=\"comment\">/* ajax.open 初始化的意思，可以传入三个值</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t method：请求的方式(get,post)</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t url：你想请求谁家的数据</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t flag：处理同步还是异步的方式（true为异步，false为同步）</span></span><br><span class=\"line\"><span class=\"comment\">    \t*/</span></span><br><span class=\"line\">\t<span class=\"number\">4.</span> ajax.send()</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用ajax.send()方法把数据发送出去</span></span><br><span class=\"line\">\t<span class=\"number\">5.</span> onreadystatechage</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听数据是否已经响应</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 0 1 2 3 4，有一个响应过程，0为一开始的状态，4就是最后响应已经返回的状态</span></span><br><span class=\"line\">    <span class=\"number\">6.</span> 判断返回的状态，看一下是那种状态 status == <span class=\"number\">200</span>（数据回来了），<span class=\"number\">404</span>（数据没有），<span class=\"number\">503</span>（服务器出问题了）</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>XMLHttpRequest（XHR）</code>对象用于服务器交互。通过 <code>XMLHttpRequest</code> 可以在不刷新页面的情况下请求特点URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 AJAX 编程中被大量使用</strong></p>\n<p><strong><code>XMLHttpRequest</code>是<code>W3c</code>标准的，<code>ActiveXObject(&#39;Microsoft.XMLHttp&#39;)</code>是兼容IE的</strong></p>\n<h3 id=\"ajax封装函数\"><a href=\"#ajax封装函数\" class=\"headerlink\" title=\"ajax封装函数\"></a>ajax封装函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ajax封装</span><br><span class=\"line\">\t<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t\tmethod：发送的方式（GET，POST）</span></span><br><span class=\"line\"><span class=\"comment\">\t\turl：发送的数据地址</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdata：传入的参数</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcallback：回调函数，通过回调函数展示在页面</span></span><br><span class=\"line\"><span class=\"comment\">\t\tflag：同步(false)/异步(true)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxFun</span>(<span class=\"params\">method,url,data,callback,flag</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建XMLHttpRequest对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">       \t<span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// W3c 标准</span></span><br><span class=\"line\">            xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// IE兼容</span></span><br><span class=\"line\">            xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">&#x27;Microsoft.XMLHttp&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 小写变大写，toUpperCase</span></span><br><span class=\"line\">        method.toUpperCase();</span><br><span class=\"line\">        <span class=\"comment\">// GET请求会拼接在地址栏</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method == <span class=\"string\">&#x27;GET&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一个时间戳，为了不占用浏览器的缓存</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">            \ttimer = date.getTime();</span><br><span class=\"line\">            <span class=\"comment\">// 让每一个url加一个无关紧要的参数，且唯一的不占用浏览器缓存</span></span><br><span class=\"line\">            xhr.open(method,url + <span class=\"string\">&#x27;?&#x27;</span> + data + <span class=\"string\">&#x27;&amp;timer&#x27;</span> + timer,flag);</span><br><span class=\"line\">            xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">// POST请求会通过send()方法传入参数拼接</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method == <span class=\"string\">&#x27;POST&#x27;</span>)&#123;</span><br><span class=\"line\">            xhr.open(method,url,flag);</span><br><span class=\"line\">            <span class=\"comment\">// 使用POST需要有一个请求头，就是xhr.setRequstHeader(&#x27;Content-type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;);</span></span><br><span class=\"line\">            xhr.setRequestHeader(<span class=\"string\">&#x27;Content-type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class=\"line\">            xhr.send(data);</span><br><span class=\"line\">        <span class=\"comment\">// PUT请求方法，非简单请求方法</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method == <span class=\"string\">&#x27;PUT&#x27;</span>) &#123;</span><br><span class=\"line\">            xhr.open(method,url,flag);</span><br><span class=\"line\">            xhr.setRequestHeader(<span class=\"string\">&#x27;person&#x27;</span>,<span class=\"string\">&#x27;aimee&#x27;</span>);</span><br><span class=\"line\">            xhr.send();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// onreadystatechange 状态改变的事件触发器，就是改变一次触发一次</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// readyState 是状态值，0 1 2 3 4 逐个推进状态，分别是 未初始化 读取中 已读取 交互中 完成</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readystate == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// status 服务器返回的状态码，200（成功）、404（文件未找到）、500（服务器内部错误）、304（资源未被修改）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// responseText 返回数据的字符串信息</span></span><br><span class=\"line\">                    callback(xhr.responseText);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ajax对象方法\"><a href=\"#ajax对象方法\" class=\"headerlink\" title=\"ajax对象方法\"></a>ajax对象方法</h3><table>\n<thead>\n<tr>\n<th>Ajax 对象方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方法</td>\n<td>描述</td>\n</tr>\n<tr>\n<td><code>abort()</code></td>\n<td>如果请求已被发出，则立刻中止请求。</td>\n</tr>\n<tr>\n<td><code>getAllResponseHeaders()</code></td>\n<td>把http请求的所有响应首部作为键/值对返回,以字符串的形式返回所有用<code>CRLF</code>分隔的响应头，如果没有收到响应，则返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>getResponseHeader(&#39;server&#39;)</code></td>\n<td>返回值指定首部的串值,返回包含指定响应头的字符串，如果响应尚未收到或响应中不存在该报头，则返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>open(&#39;method&#39;,&#39;url&#39;,flag)</code></td>\n<td>建立对服务器的调用，初始化一个请求。该方法只能在 <code>JavaScript</code>代码中使用，若要在<code>native code</code>中初始化请求，请使用 <code>openRequest()</code>; <code>method</code>参数可以是<code>GET</code>，<code>POST</code>或<code>PUI</code>。<code>url</code>参数可以是相对<code>URL</code>或绝对<code>URL</code>。<code>flag</code>参数是同步或者异步，<code>true</code>为异步（一般为这个），<code>false</code>为同步，这个方法还包括3个可选参数</td>\n</tr>\n<tr>\n<td><code>overrideMimeType</code></td>\n<td>覆写由服务器返回的<code>MIME</code>类型</td>\n</tr>\n<tr>\n<td><code>send(content)</code></td>\n<td>向服务器发送请求,发送请求。如果请求是异步的（默认），那么该方法将在请求发送后立即返回</td>\n</tr>\n<tr>\n<td><code>setRequestHeader(&#39;label&#39;,&#39;value&#39;)</code></td>\n<td>设置 <code>HTTP</code> 请求头的值。必须在 <code>open()</code> 之后、<code>send()</code> 之前调用 <code>setRequestHeader()</code> 方法，把指定首部设置为所提供的值。在设置任何首部之前必须先调用<code>open()</code>,传的参数一般为<code>Content-type&#39;,&#39;application/x-www-form-urlencoded</code></td>\n</tr>\n<tr>\n<td><code>init</code></td>\n<td>在C++代码中初始一个XHR对象</td>\n</tr>\n<tr>\n<td><code>openRequest</code></td>\n<td>初始化一个请求。这个方法只能在原生<code>C++</code>代码中使用；如果用<code>JavaScript</code> 代码来初始化请求，使用<code>open()</code>代替。可参考<code>open()</code>的文档</td>\n</tr>\n<tr>\n<td><code>sendAsBinary</code></td>\n<td><code>send()</code>方法的变体，用来发送二进制的数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"ajax属性方法\"><a href=\"#ajax属性方法\" class=\"headerlink\" title=\"ajax属性方法\"></a>ajax属性方法</h3><table>\n<thead>\n<tr>\n<th>Ajax 属性方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>属性</td>\n<td>描述</td>\n</tr>\n<tr>\n<td><code>onreadystatechange</code></td>\n<td>状态改变的事件触发器，就是状态改变一次触发一次，当<code>readyState</code>发生变化时，调用的<code>EventHandler</code></td>\n</tr>\n<tr>\n<td><code>readyState</code></td>\n<td>返回一个无符号短整型数字，代表请求的状态码，对象状态<code>（integer）</code>，状态值 <code>0</code> = 未初始化，未调用<code>send()</code>方法，<code>1</code> = 读取中，已调用<code>send()</code>，正在发送请求，<code>2</code> = 已读取，<code>send()</code>方法执行完成，接收到全部响应内容，<code>3</code> = 交互中，正在解析相应内容，<code>4</code> = 完成，相应内容解析完成</td>\n</tr>\n<tr>\n<td><code>responseText</code></td>\n<td>获得字符串形式的响应数据，返回一个<code>DOMString</code>，该<code>DOMString</code>包含对请求的响应，如果请求未成功或尚未成功或尚未发送，则返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>responseXML</code></td>\n<td>获得XML形式的响应数据，返回一个 <code>Document</code>，其中包含该请求的响应，如果请求未成功、尚未发送或时不能被解析为 <code>XML</code> 或 <code>HTML</code>，则返回 <code>null</code></td>\n</tr>\n<tr>\n<td><code>responseType</code></td>\n<td>一个用于定义响应类型的枚举值（<code>enumerated value</code>）</td>\n</tr>\n<tr>\n<td><code>responseURL</code></td>\n<td>返回经过序列化的响应<code>URL</code>，如果该<code>URL</code>为空，则返回空字符串</td>\n</tr>\n<tr>\n<td><code>statusText&#39;</code></td>\n<td>服务器返回的状态文本信息，返回一个<code>DOMString</code>，其中包含<code>HTTP</code>服务器返回的响应状态。与<code>XMLHTTPRequest.status</code>不同的是，它包含完整的响应状态文本（例如，<code>&quot;200 OK&quot;</code>）</td>\n</tr>\n<tr>\n<td><code>response</code></td>\n<td>返回一个<code>ArrayBuffer</code>、<code>Blob</code>、<code>Document</code>或<code>DomString</code>，具体是哪种类型取决于<code>XMLHttpRequest.responseType</code>的值。其中包括整个响应实体（<code>response entity body</code>）</td>\n</tr>\n<tr>\n<td><code>status</code></td>\n<td>返回一个无符号短整形数字，代表请求的响应状态，服务器返回的响应状态，如：404 = “文件未找到”，200 = “成功”，500 = “服务器内部错误”，304 = “资源未被修改”</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>一个无符号长整形数字，表示该请求的最大请求时间（毫秒），若超出该事件，请求会自动终止</td>\n</tr>\n<tr>\n<td><code>ontimeout</code></td>\n<td>当请求超市调用的<code>EventHandler</code></td>\n</tr>\n<tr>\n<td><code>upload</code></td>\n<td>代表上传进度</td>\n</tr>\n<tr>\n<td><code>withCredentials</code></td>\n<td>一个布尔值，用来指定跨域<code>Access-Control</code>请求是否应当带有授权信息，如<code>cookie</code>或授权<code>header</code>头</td>\n</tr>\n<tr>\n<td><code>channel</code></td>\n<td>一个<code>nsIChannel</code>，对象在执行请求时使用的通道 （非标准属性）</td>\n</tr>\n<tr>\n<td><code>mozAnon</code></td>\n<td>一个布尔值，如果为真，请求将在没有<code>cookie</code>和身份验证<code>header</code>头的情况下发送 （非标准属性）</td>\n</tr>\n<tr>\n<td><code>mozSystem</code></td>\n<td>一个布尔值，如果为真，则在请求时不会执行同源策略 （非标准属性）</td>\n</tr>\n<tr>\n<td><code>mozBackgroundRequest</code></td>\n<td>一个布尔值，它指示对象是否是后台服务器端的请求 （非标准属性）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Ajax受同源策略的限制</p>\n</blockquote>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><blockquote>\n<p>浏览器有一个很重要的概念——同源策略（Same-Origin Policy）。所谓同源策略是指：协议，域名，端口相同才可读取服务器资源，不同源的客户端脚本（javascript、ActionScript）在没明确授权的情况下，不能读写对方的资源</p>\n</blockquote>\n<p><code>简单的来说，浏览器不允许包含在腾讯页面的脚本访问阿里巴巴页面的数据资源，会受到同源策略的限制</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">举例: https:<span class=\"comment\">//www.baidu.com</span></span><br><span class=\"line\">协议：http:<span class=\"comment\">//</span></span><br><span class=\"line\">域名：www.baidu.com</span><br><span class=\"line\">端口：<span class=\"number\">443</span>（默认端口可以省略）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><ul>\n<li><p>协议：<code>http</code> / <code> https</code></p>\n<ul>\n<li><p><code>http</code>不加密，而<code>https</code>是加密传输数据的；</p>\n</li>\n<li><p><code>http</code>链接简单无状态，<code>https</code>是有<code>ssl+http</code>协议构建的可进行加密传输；</p>\n</li>\n<li><p><code>http</code>协议使用的端口是80，<code>https</code>使用的端口是443；</p>\n</li>\n<li><p><code>http</code>是免费申请的，<code>https</code>是需要到<code>CA</code>申请证书的。</p>\n</li>\n<li><p><code>localStorage</code>和<code>sessionStorage</code>的区别</p>\n</li>\n<li><p>  答：前者长期存放在浏览器中的，写入<code>localStorage</code>（无论窗口是否关闭都需要储存）。后者是这次会话临时需要存储的变量，每次窗口关闭的时候，都会自动清空。</p>\n</li>\n<li><p><code>localStorage</code>和<code>cookie</code>的区别</p>\n</li>\n<li><p><code>localStorage</code>在发送请求时不会把数据发送出去，<code>cookie</code>会把所有数据带出去；</p>\n<pre><code>   - `cookie`存储的数据比较少`4k`，`localStorage`可以存放较多的内容，`5M`左右。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h3><ul>\n<li><code>.com</code> —— 顶级域名，顶级域名分为两类，一类按照国家分类，一类是按照国际分类，<code>DNS</code>先根据顶级域名判断网络范围在根据域名查找主机<code>ip</code>地址<ul>\n<li>国家域名分类：<ul>\n<li>中国：<code>.cn</code></li>\n<li>日本：<code>.jp</code></li>\n<li>美国：<code>.us</code></li>\n<li>法国：<code>.fr</code></li>\n<li>……</li>\n<li>国际域名分类：<ul>\n<li>工商、金融、商业机构：<code>.com</code>，<code>.top</code></li>\n<li>科研技术：<code>.tech</code></li>\n<li>教育机构：<code>.edu</code></li>\n<li>政府部门：<code>.gob</code></li>\n<li>从事互联网服务的机构：<code>.net</code></li>\n<li>非盈利性组织：<code>.org</code></li>\n<li>国内商业机构：<code>.com.cn</code></li>\n<li>国内互联网机构：<code>.net.cn</code></li>\n<li>国内非盈利性组织：<code>.org.cn</code></li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>baidu.com</code> —— （一）二级域名<ul>\n<li>为什么<code>baidu.com</code>是二级域名呢，因为中国在国际互联网网络中心正式注册且运行的顶级域名是<code>.cn</code>，在顶级域名之下，中国又分出了几个二级域名：<code>.com</code>，<code>.top</code>，<code>.net</code>，<code>.org</code>，<code>.edu</code>,<code>.tech </code>，<code>.gov</code>，他们在中国其实是<code>.com.cn</code>，在后面加了一个<code>.cn</code>，所以<code>baidu.com</code>是二级域名，如果说有一些地方没有把国家顶级域名设置为一级域名的话，那么<code>.com</code>也可以作为一级域名，如果<code>baidu.com</code>不是一个中国的网站，它又没有一个注册好的一级域名，那<code>baidu.com</code>就是一级域名</li>\n</ul>\n</li>\n<li><code>zhidao.baidu.com</code> —— （二）三级域名</li>\n<li><code>www</code>：二级域名的前缀，表示万维网维护的<ul>\n<li><code>www</code>扩展：最开始<code>Internet</code>提供的主要服务有万维网（<code>WWW</code>）、文件传输（<code>FTP</code>）、电子邮件（<code>E-mail</code>）、远程登录（<code>Telnet</code>）等。也就是说，那个时候的<code>www</code> <code>(World Wide Web)</code>是标识这是一个需要你用浏览器来访问的网页服务，而不是需要你用<code>telnet</code>访问的<code>bbs</code>，或者<code>ftp</code>工具访问的文件传输服务。所以那个时候网站主页的域名前面要用<code>www</code>，现在还带有<code>www</code>的主要是遵循用户的习惯，当然还有一些技术上的原因，如果<code>www.baidu.com</code>，如果不带<code>www</code>，它可以被叫做一个裸域名，裸域名只能绑定<code>DNS</code>的<code>A</code>记录，不能绑定<code>CNAME</code>记录<ul>\n<li><code>A</code>记录：通俗的来说就是服务器的一个<code>IP</code>，域名绑定<code>A</code>记录就是告诉<code>DNS</code>，当你输入域名的时候，给你引导向设置的<code>DNS</code>中的<code>A</code>记录所对应的服务器，简单来说就是A记录是指域名对应的<code>IP</code>地址，<code>A</code>记录就相当于<code>www.baidu.com</code>对应的<code>IP</code>地址。</li>\n<li><code>CNAME</code>记录：<ul>\n<li>除了<code>www.baidu.com</code>会解析出来一个<code>IP</code>地址之外，<code>baidu.com</code>也会解析出来一个<code>IP</code>地址，正常情况下，我们通常认为<code>baidu.com</code>和<code>www.baidu.com</code>是一个页面，，我们输入<code>baidu.com</code>也可以访问到<code>www.baidu.com</code>这一个页面，那是因为它把<code>baidu.com</code>和<code>www.baidu.com</code>这一个网址绑定到一起了，就相当于给<code>www.baidu.com</code>起了一个别名叫<code>baidu.com</code>，也就是不管输入<code>www.baidu.com</code>还是<code>baidu.com</code>都可以找到<code>www.baidu.com</code>的那个<code>IP</code>地址。像<code>www.baiduc.com</code>这样前面带有<code>www</code>的网址可以绑定这样的别名，但是如果没有<code>www</code>的网址，也就是裸域名不可以绑定别名，裸域名只能对应自己那唯一的<code>IP</code>，现在很多公司网址的网址都带有<code>www</code>，就是因为它们还有一些别的网址要和这个网址绑定，和他一样要对应着同一个<code>IP</code>地址。</li>\n<li>裸域名的<code>cookie</code>作用域范围大</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>baidu</code>有多个服务区为它服务。不同的子域名对应处理不同服务的服务器现在，把任务分配到多台服务器，不需要通过子域名来区分了。<code>http://google.com</code>一个地址背后有多台服务器支持运作。还采用<code>www</code>只是尊重用户习惯，方便用户看。国外其实已经不用写<code>www</code>。</li>\n</ul>\n</li>\n<li><code>www.baidu.com</code>： 属于特殊的三级域名</li>\n</ul>\n<h3 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h3><ul>\n<li>端口：<code>https</code>在默认情况下的端口是443，<code>http</code>的默认端口是80，端口是可以更改的<ul>\n<li>常用端口：21、22、23、25、69、79、80、88、110、113、119、220、44</li>\n</ul>\n</li>\n<li>如果把<code>IP</code>地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个门，但是这个<code>IP</code>地址的端口可以有多个，浏览网页服务<code>http</code>默认端口是80，<code>https</code>是443，因此只需要输入网址即可，不用输入“:80/443”</li>\n</ul>\n<h2 id=\"当你在浏览器输入一个url发生了什么-Depth\"><a href=\"#当你在浏览器输入一个url发生了什么-Depth\" class=\"headerlink\" title=\"当你在浏览器输入一个url发生了什么(Depth)\"></a>当你在浏览器输入一个url发生了什么(Depth)</h2><p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/url%20request.png\" alt=\"url简易请求\"></p>\n<h3 id=\"简单归纳\"><a href=\"#简单归纳\" class=\"headerlink\" title=\"简单归纳\"></a>简单归纳</h3><ol>\n<li><p>浏览器通过<code>DNS</code>域名解析到服务器<code>IP</code>（ping <a href=\"http://www.baidu.com)/\">www.baidu.com）</a></p>\n</li>\n<li><p>客户端（浏览器）通过<code>TCP</code>协议建立到服务器的<code>TCP</code>连接（三次握手）</p>\n</li>\n<li><p>客户端（浏览器）向web服务器端（<code>HTTP</code>服务器）发送<code>HTTP</code>协议包，请求服务器里的资源文档（<code>telnet</code>模拟）</p>\n</li>\n<li><p>服务器向客户端发送<code>HTTP</code>协议应答包</p>\n</li>\n<li><p>客户端和服务器断开（四次挥手），客户端开始解释处理<code>HTML</code>文档</p>\n</li>\n</ol>\n<h3 id=\"TCP-UDP-传输层协议\"><a href=\"#TCP-UDP-传输层协议\" class=\"headerlink\" title=\"TCP/UDP(传输层协议)\"></a>TCP/UDP(传输层协议)</h3><p><strong>面向连接的TCP</strong></p>\n<p>TCP（<code>Transmission Control Protocol</code>，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个<code>TCP</code>连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂，我们这里制作简单、形象的介绍，你只要做到能够理解这个过程即可。</p>\n<p><strong>面对非连接的UDP协议</strong></p>\n<p>“面向非连接”就是在正式通信前不必与对方先建立连接，不管对方状态就直接发送。与手机短信非常相似：你再发短信的时候，只需要输入对方手机号就OK了。</p>\n<p><code>UDP</code>（<code>User Data Protocol</code>，用户数据报协议）是与<code>TCP</code>相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！</p>\n<h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><ul>\n<li><p>三次握手</p>\n<ul>\n<li>第一步：先由我们的这个客户端向服务器端发送一个<code>SYN</code>的数据包，这时，客户端就处于<code>SYN sent</code>状态，等着服务器端确认（一次握手）</li>\n<li>第二步：服务器收到了客户端发送过来的<code>SYN</code>包之后，确认客户端<code>SYN</code>包数据信息（把<code>SYN</code>的数据包转换为<code>ACK</code>包），<code>ACK</code>包就是<code>SYN包+1</code>，同时服务器端自己也发送了一个<code>SYN</code>包，现在就是服务器发送了一个<code>SYN+ACK</code>的数据包（二次握手）</li>\n<li>第三步：<code>ACK</code>接收到之后，确认<code>ACK</code>包信息，接收服务器端发送的SYN包，然后把<code>SYN包+1</code>和<code>ACK</code>包再次发送给服务器端，服务器端再次检查，确认<code>SYN包+1</code>（三次握手），确认链接没有问题，这时，经过三次握手，确认了一次信息之后，客户端和服务器端就可以进行沟通了，此次链接建立成功。</li>\n</ul>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/threeShakes.png\"></p>\n</li>\n</ul>\n<ol>\n<li><p>先<code>Client</code>端发送链接，链接建立成功之后，请求报文</p>\n</li>\n<li><p><code>Server</code>端接受连接后恢复<code>ACK</code>报文，并未这次连接分配资源。</p>\n</li>\n<li><p><code>Client</code>端接收到<code>ACK</code>报文后也向Server端发送<code>ACK</code>报文，并分配资源，这样<code>TCP</code>连接就建立了</p>\n</li>\n</ol>\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><ol>\n<li><p><code>Client</code>端发起中断连接请求，也就是发送<code>FIN</code>报文。<code>Server</code>端接到<code>FIN</code>报文后，意思是说“我<code>Client</code>端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不要急着关闭（<code>Socket</code>），可以继续发送数据。</p>\n</li>\n<li><p><code>server</code>这时发送一个<code>ACK</code>的应答包，“告诉<code>Client</code>端，你的请求我收到了，但是我还没准备好，请继续等我的消息”。</p>\n<p><code>wait</code>：这个时候<code>Client</code>端就进入<code>FIN_WAIT</code>状态，继续等待<code>Server</code>端的<code>FIN</code>报文。</p>\n</li>\n<li><p>当<code>Server</code>端确定数据已经发送完成，则向<code>Client</code>端发送FIN报文，“告诉<code>Client</code>端，好了，我这边数据发完了，准备好关闭连接了。”</p>\n</li>\n<li><p><code>Client</code>端收到<code>FIN</code>报文后，“就知道可以关闭链接了，但是他还是不相信网络，怕<code>Server</code>不知道要关闭，所以发送<code>ACK</code>后进入<code>TIME_WAIT</code>状态，如果<code>Server</code>端没有收到<code>ACK</code>则可以重传”。<code>Server</code>端收到<code>ACK</code>后，就知道可以断开连接了，<code>Client</code>端等待了<code>2MSL</code>后依然没有收到回复，则证明<code>Server</code>端已正常关闭，那好，我<code>Client</code>端也可以关闭链接了。<code>Ok</code>，<code>TCP</code>链接就这样关闭了。</p>\n</li>\n</ol>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/fourShakes.png\"></p>\n<h2 id=\"http报文\"><a href=\"#http报文\" class=\"headerlink\" title=\"http报文\"></a>http报文</h2><blockquote>\n<p>请求报文、响应报文（通过报文进行沟通）</p>\n</blockquote>\n<p><strong>前端和后台在相互访问数据的时候一定要以一个规范来进行书写，这样前后端都可以识别出来你的需求是什么</strong></p>\n<h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><ul>\n<li><strong>请求头</strong><ul>\n<li><a href=\"http://tools.jb51.net/table/http_header\">http://tools.jb51.net/table/http_header</a> (请求头)</li>\n</ul>\n</li>\n<li><strong>请求行</strong><ul>\n<li>请求方法<ul>\n<li><code>GET</code>/<code>POST</code>/<code>DELETE</code>/<code>HEAD</code>/<code>TRACE</code>/<code>OPTION</code></li>\n<li>`<a href=\"http://tools.jb51.net/table/http_request_method\">http://tools.jb51.net/table/http_request_method</a> (请求方法)</li>\n</ul>\n</li>\n<li>请求资源（<code>URL</code>）</li>\n<li>请求版本（<code>HTTP/1.1</code>）<ul>\n<li>1.1版本可以长链接，发送多个请求，得到多个响应</li>\n<li>1.0版本只可以发送一个请求，得到一个响应，然后断开链接</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>请求主体</strong><ul>\n<li>表单提交数据如：<code>name=aimee&amp;age=18</code>;</li>\n</ul>\n</li>\n<li><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/request-message.jpg\"></li>\n</ul>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><ul>\n<li><strong>响应头</strong><ul>\n<li><a href=\"http://tools.jb51.net/table/http_header\">http://tools.jb51.net/table/http_header</a> (响应头)</li>\n</ul>\n</li>\n<li><strong>响应行</strong><ul>\n<li>响应版本号（HTTP/1.1）</li>\n<li>响应状态码（200）<a href=\"http://tool.oschina.net/commons?type=5\">http://tool.oschina.net/commons?type=5</a></li>\n<li>响应状态文字 （OK）<a href=\"http://tools.jb51.net/table/http_status_code\">http://tools.jb51.net/table/http_status_code</a></li>\n<li><strong>每一个状态码都有一个对应的响应文字，就如200的响应文字是OK，404的状态响应文字是No Found</strong></li>\n</ul>\n</li>\n<li><strong>响应主体</strong><ul>\n<li><code>sign success</code> (注册成功)</li>\n</ul>\n</li>\n<li><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/response-message.jpg\"></li>\n</ul>\n<h3 id=\"浏览器缓存机制\"><a href=\"#浏览器缓存机制\" class=\"headerlink\" title=\"浏览器缓存机制\"></a>浏览器缓存机制</h3><ul>\n<li><p><strong>304定向缓存</strong></p>\n</li>\n<li><p>304 上次缓存的资源没有改变—-浏览器如何知道是否直接取缓存的内容？</p>\n</li>\n<li><p>理解部分：请求头、响应头</p>\n<ul>\n<li><p>请求头：</p>\n<ul>\n<li><code>if-None-Match</code>：匹配<code>etag</code>，如果服务器中<code>etag</code>的值修改了，不取缓存，重新获取服务器资源</li>\n</ul>\n</li>\n<li><p><code>if-Modified-Since</code>：将先前服务器端发过来的最后修改时间戳发送回去x</p>\n</li>\n<li><p>响应头：</p>\n<ul>\n<li><code>etag</code>：标记资源位置</li>\n</ul>\n</li>\n<li><p><code>last-Modified</code>：服务器最后修改的事件，和<code>etag</code>配合使用&gt;**</p>\n</li>\n<li><p><strong>当客户端第一次请求改资源时，etag和if-None-Match<del><em>的工作原理</em></del>是在HTTP Response中添加该资源的etag信息。当客户端再次请求该资源时，将HTTP Request中加入if-None-Match信息（etag的值）。如果服务器验证资源的etag没有改变（该资源没有改变），将返回一个304的状态，读取缓存，如果服务器中的etag值发生了改变，则服务器将返回200状态，并重新返回该资源和新的etag值</strong></p>\n</li>\n</ul>\n</li>\n<li><p><strong>Date</strong>：服务器相应内容的日期</p>\n</li>\n<li><p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/Date.png\"></p>\n</li>\n<li><p><strong>Cache-Control</strong>：内容缓存时间</p>\n<p><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/CacheControl.png\"></p>\n</li>\n<li><p><strong>no-cache</strong>：不被缓存的，每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存相应的有效性，就是每次拿到<code>if-None-Match</code>都不缓存，没有有效时间</p>\n</li>\n<li><p><strong>no-store</strong>：用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。根据缓存超时（就是如果有重要的信息，不会被缓存）</p>\n</li>\n<li><p><strong>max-age</strong>：指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应，意思是在规定的时间之内再次发送请求，不会去服务器请求了，而是会直接去请求缓存。</p>\n</li>\n<li><p><strong>min-fresh</strong>：指导客户机可以接收响应时间小于当前时间加上指定时间的响应，它可以接收<code>max-age</code>和<code>max-stale</code>之和的一个缓存对象</p>\n</li>\n<li><p><strong>max-stale</strong>：指示客户机可以接收超时期间的响应消息。如果指定<code>max-stale</code>消息的值，那么客户机可以接收超出超时期指定值之内的响应消息</p>\n</li>\n<li><p><strong>Expires</strong>：内容保质期，表示存在时间， 允许客户端在这个事件之前不去检查（发请求），等同于max-age的效果。但是如果同时存在，则会被<code>cache-control</code>的<code>max-age</code>覆盖。</p>\n</li>\n<li><p><strong>referer</strong>：用来判断我们从哪个网站点击过来的</p>\n<ul>\n<li><p>网站点击量统计</p>\n</li>\n<li><p>如果从浏览器地址栏输入地址请求头没有<code>referer</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><h3 id=\"关于跨域的一些问题\"><a href=\"#关于跨域的一些问题\" class=\"headerlink\" title=\"关于跨域的一些问题\"></a>关于跨域的一些问题</h3><h4 id=\"那些东西属于资源？JS算资源吗？\"><a href=\"#那些东西属于资源？JS算资源吗？\" class=\"headerlink\" title=\"那些东西属于资源？JS算资源吗？\"></a>那些东西属于资源？JS算资源吗？</h4><ul>\n<li><code>js</code>文件肯定是算资源的，但是<code>js</code>文件是允许被跨域请求的。</li>\n<li><code>css</code>文件，<code>jpg</code>，<code>png</code>等。<code>src</code>属性的资源都是可以被跨域请求的。<code>href</code>资源大部分都是可以被跨域请求的</li>\n</ul>\n<h4 id=\"哪些资源算跨域的资源\"><a href=\"#哪些资源算跨域的资源\" class=\"headerlink\" title=\"哪些资源算跨域的资源\"></a>哪些资源算跨域的资源</h4><ul>\n<li>后端接口的数据</li>\n<li>其它域的<code>cookie</code></li>\n<li>其它域的缓存</li>\n<li>什么是其他的域呢？怎么才算跨域<ul>\n<li>页面本身：协议，域名，端口，有任何一个不同就算跨域</li>\n<li>要请求的数据：<a href=\"http://www.baidu.com/\">http://www.baidu.com:80</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"跨域这种行为发生在哪里\"><a href=\"#跨域这种行为发生在哪里\" class=\"headerlink\" title=\"跨域这种行为发生在哪里\"></a>跨域这种行为发生在哪里</h4><ul>\n<li>即使跨域了（协议、域名、端口不一样），请求也可以发出去</li>\n<li>服务器端也可以接收、处理、返回数据的</li>\n<li>浏览器也可以接收到这些数据</li>\n<li>接收到之后，发现当前页面的域和请求的域不同，所以判定跨域</li>\n<li>我们的代码会在这里等着结果，但是因为浏览器判定跨域了，不会把结果传递给我们的代码</li>\n</ul>\n<h4 id=\"有哪些方式可以在Web网络中发出一个请求\"><a href=\"#有哪些方式可以在Web网络中发出一个请求\" class=\"headerlink\" title=\"有哪些方式可以在Web网络中发出一个请求\"></a>有哪些方式可以在Web网络中发出一个请求</h4><ul>\n<li><p>直接在地址栏填写地址</p>\n</li>\n<li><p>通过代码发送网络请求</p>\n<ul>\n<li><code>location.href=&#39;url&#39;</code>，可以发送网络请求，但是页面会跳转</li>\n<li>带有<code>src</code>属性的标签，可以发送请求，服务器是可以正常处理的也是可以返回的。但是在返回之后，能够被应用，还得看浏览器。</li>\n<li>带有<code>href</code>属性的标签，请求是可以发出的，服务器是可以处理的也是可以返回的。但是返回后是否能被应用，还得看浏览器。</li>\n<li>带有<code>action</code>属性的标签，</li>\n<li>例如<code>form</code>表单，也是可以向后端发出请求的。但是<code>form</code>表单发出请求后页面会跳转。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解决跨域的几种方法\"><a href=\"#解决跨域的几种方法\" class=\"headerlink\" title=\"解决跨域的几种方法\"></a>解决跨域的几种方法</h3><h4 id=\"Flash（不做讨论）\"><a href=\"#Flash（不做讨论）\" class=\"headerlink\" title=\"Flash（不做讨论）\"></a>Flash（不做讨论）</h4><h4 id=\"服务器代理中转\"><a href=\"#服务器代理中转\" class=\"headerlink\" title=\"服务器代理中转\"></a>服务器代理中转</h4><ul>\n<li>借助自己同源的服务器向别人的服务器去取资源</li>\n<li><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/jsonp1.png\"></li>\n<li>当浏览器发送了一个<code>ajax</code>请求，这个<code>ajax</code>请求指向的是别人服务器的一个文件<code>xxx.php</code>，那么可以请求成功吗？不能。浏览器可以请求成功的前提是域名、端口和协议都相同，但别人的服务器和我的同源策略都不相同，所以无法请求文件。</li>\n<li><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/jsonp2.png\"></li>\n<li>我们向别的服务器请求不成功是因为同源策略的限制，这时，我们可以向自己的服务器请求文件<code>yy.php</code>，在<code>yy.php</code>文件链接到其他的服务器，由<code>yy.php</code>向<code>xx.php</code>发送请求，请求数据，这时，因为<code>yy.php</code>和<code>xx.php</code>都是在服务器中进行的数据交换，不存在浏览器（同源策略只是浏览器的一个安全策略），所以不受同源策略的限制，这时，我们的<code>yy.php</code>就可以向<code>xx.php</code>请求数据了，<code>xx,php</code>把数据返回给<code>localhost</code>服务器下面的<code>yy.php</code>，然后<code>yy.php</code>再把<code>xx.php</code>给它的数据返回给浏览器。</li>\n</ul>\n<h4 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h4><p><strong>针对基础域名相同的情况</strong></p>\n<p><code>bj58.com    document.domain = &#39;58.com&#39;</code><br><code>tj58.com    document.domain = &#39;58.com&#39;</code></p>\n<ul>\n<li><p>这两个都是58同城的网页，<code>bj</code>代表北京，<code>tj</code>代表天津，这时两个不同的页面，服务器也不相同，如果从<code>bj58.com</code>向<code>tj58.com</code>获取数据，会受到同源策略的限制吗？会的，域名不相同。</p>\n</li>\n<li><p>但是，这两个域名都有一个相同的基础域名<code>58.com</code>，它要怎么跨域呢？在他们当前域名的脚本下都写上一句<code>document.domain = &#39;58.com&#39;</code>，意思是，<code>document</code>设置一个基础域名叫<code>58.com</code>，这样就可以相互访问数据了。</p>\n</li>\n<li><p>但是这样有一个前提，他们的基础域名必须是一样的。</p>\n</li>\n</ul>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><h4 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h4><ul>\n<li><code>jsonp</code>和<code>json</code>不一样，<code>json</code>是一种数据格式，<code>jsonp</code>算是一个技术，小应用，我们使用<code>jsonp</code>可以实现网络中的跨域拿、取数据。</li>\n<li><code>ajax</code>会受同源策略的限制</li>\n<li><strong>JSONP格式：callback + ( + JSON + )</strong></li>\n<li><strong>JSONP跨域只能使用get请求方法</strong></li>\n</ul>\n<h5 id=\"jsonp原理\"><a href=\"#jsonp原理\" class=\"headerlink\" title=\"jsonp原理\"></a>jsonp原理</h5><ul>\n<li><p><code>Web</code>页面上用<code>&lt;script&gt;</code>引入<code>js</code>文件则不受是否跨域影响，也就是不受同源策略的限制，不仅如此，我们还发现凡是拥有<code>&quot;src&quot;</code>这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>。</p>\n</li>\n<li><p>于是我们把数据放到服务器，并且数据为<code>json</code>形式（因为<code>js</code>可以轻松处理<code>json</code>数据）</p>\n</li>\n<li><p>因为我们无法监控通过<code>&lt;script&gt;</code>的<code>src</code>属性是否把数据获取完成，所以我们需要做一个处理。</p>\n</li>\n<li><p>实现定义好处理跨域获取数据的函数，如<code>function ddoJSON(data)&#123;&#125;</code></p>\n</li>\n<li><p>用<code>src</code>获取数据的时候添加一个参数<code>cb=&#39;doJSON&#39;</code>（服务器端会根据参数<code>cb</code>的值返回对应的内容）此内容为以<code>cb</code>对应的值<code>doJSON</code>为函数真实要传递的数据为函数的参数的一串字符，如<code>doJSON</code>（’数据’）</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">判断请求与当前页面的域，是否同源，如果同源则发送正常的ajax，就没有跨域的事情了。</span><br><span class=\"line\">如果不同源，生成一个script标签</span><br><span class=\"line\">生成一个随机的callback名字，还得创建一个名为这个的方法。</span><br><span class=\"line\">设置script标签的src，设置为要请求的接口。</span><br><span class=\"line\">将callback作为参数拼接在后面。</span><br><span class=\"line\">---------------------以上是前端部分---------------------</span><br><span class=\"line\">后端接收到请求后，开始准备要返回的数据</span><br><span class=\"line\">后端拼接数据，将要返回的数据用callback的值和括号包裹起来</span><br><span class=\"line\">例如：callback=aa，要返回的数据为&#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">就要拼接为：aa(&#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>:<span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">将内容返回。</span><br><span class=\"line\">---------------------以上是后端部分---------------------</span><br><span class=\"line\">浏览器接收到内容，会当做js代码来执行。</span><br><span class=\"line\">从而执行名为aa的方法。这样我们就接收到了后端返回给我们的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">简易:</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    oScript.src = <span class=\"string\">&#x27;?cb=aa&#x27;</span>;</span><br><span class=\"line\"> \t<span class=\"built_in\">document</span>.body.appendChild(oScript);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aa</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex.js里面的内容: aa(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;yzl&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">困难:</span><br><span class=\"line\"><span class=\"keyword\">var</span> $ = &#123;</span><br><span class=\"line\">    <span class=\"attr\">ajax</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = options.url;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = options.type;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dataType = options.dataType;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否同源（协议，域名，端口号）</span></span><br><span class=\"line\">        <span class=\"comment\">//获取目标url的域</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> targetProtocol = <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//目标接口的协议</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> targetHost = <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//目标接口的host，host是包涵域名和端口的</span></span><br><span class=\"line\">        <span class=\"comment\">//如果url不带http，那么访问的一定是相对路径，相对路径一定是同源的。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url.indexOf(<span class=\"string\">&quot;http://&quot;</span>) == <span class=\"number\">0</span> || url.indexOf(<span class=\"string\">&quot;https://&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> targetUrl = <span class=\"keyword\">new</span> URL(url);</span><br><span class=\"line\">            targetProtocol = targetUrl.protocol;</span><br><span class=\"line\">            targetHost = targetUrl.host;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            targetProtocol = location.protocol;</span><br><span class=\"line\">            targetHost = location.host;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//首先判断是否为jsonp，因为不是jsonp不用做其他的判断，直接发送ajax</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataType == <span class=\"string\">&quot;jsonp&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//要看是否同源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (location.protocol == targetProtocol &amp;&amp; location.host == targetHost) &#123;<span class=\"comment\">//表示同源</span></span><br><span class=\"line\">                <span class=\"comment\">//此处省略。因为同源，jsonp会当做普通的ajax做请求</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//不同源，跨域</span></span><br><span class=\"line\">                <span class=\"comment\">//随机生成一个callback</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> callback = <span class=\"string\">&quot;cb&quot;</span> + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">1000000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//给window上添加一个方法</span></span><br><span class=\"line\">                <span class=\"built_in\">window</span>[callback] = options.success;</span><br><span class=\"line\">                <span class=\"comment\">//生成script标签。</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (url.indexOf(<span class=\"string\">&quot;?&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//表示已经有参数了</span></span><br><span class=\"line\">                    script.src = url + <span class=\"string\">&quot;&amp;callback=&quot;</span> + callback;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//表示没有参数</span></span><br><span class=\"line\">                    script.src = url + <span class=\"string\">&quot;?callback=&quot;</span> + callback;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                script.id = callback;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//http://developer.duyiedu.com/edu/testJsonp?callback</span></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;jsonp&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><blockquote>\n<p>Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie），浏览器会把Cookie以key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。</p>\n</blockquote>\n<ul>\n<li><code>Cookie</code>就是一个小型文件（浏览器对cookie的内存大小是有限制的——–用来记录一些信息）</li>\n</ul>\n<h3 id=\"跟踪记录用户的方式\"><a href=\"#跟踪记录用户的方式\" class=\"headerlink\" title=\"跟踪记录用户的方式\"></a>跟踪记录用户的方式</h3><ol>\n<li><p>标记了用户身份<code>http</code>请求首部</p>\n<ol>\n<li><strong>form</strong>：<code>e-mail</code>（发送<code>e-mail</code>）<ol>\n<li>不安全，可以根据<code>e-mail</code>发送垃圾邮件</li>\n</ol>\n</li>\n<li><strong>user-agen</strong>：浏览器本身的一些信息<ol>\n<li>只能看浏览器的一些信息，不完全</li>\n</ol>\n</li>\n<li><strong>referer</strong>：跳转链接（上一次的访问内容）<ol>\n<li>可以知道用户的习惯，但是也不完全</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p><strong>IP</strong>地址（根据客户端的IP地址进行识别）</p>\n<ol>\n<li><code>ip</code>地址只能标记机器，不能标记用户</li>\n<li><code>ip</code>地址不稳定，动态<code>ip</code>，容易伪造</li>\n</ol>\n</li>\n<li><p>用户登录</p>\n</li>\n<li><p>胖<strong>URL</strong></p>\n<ul>\n<li><em>在原来的<code>url</code>中添加了一个特定字段（特殊标记）</em>*</li>\n</ul>\n<ol>\n<li>字段过长</li>\n<li>会对服务器产生额外的负载</li>\n<li>无法共享</li>\n<li>存在的生命周期过短（关闭窗口后就会消失，重新进入后会重新生成一段特定字段）</li>\n</ol>\n</li>\n<li><p><strong>cookie</strong></p>\n<ol>\n<li>服务器在浏览器设置的一些信息，设置在本地文件中。</li>\n<li>使用时自动发送给浏览器，接收时自动存储</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><h4 id=\"Cookie的分类：\"><a href=\"#Cookie的分类：\" class=\"headerlink\" title=\"Cookie的分类：\"></a>Cookie的分类：</h4><ul>\n<li>会话<code>Cookie</code>（临时<code>Cookie</code>，在当前窗口中才有用）</li>\n<li>永久<code>Cookie</code>（有保质期）</li>\n</ul>\n<h4 id=\"Cookie使用的过程：\"><a href=\"#Cookie使用的过程：\" class=\"headerlink\" title=\"Cookie使用的过程：\"></a>Cookie使用的过程：</h4><ul>\n<li><p>初始状态：没有登录</p>\n</li>\n<li><p>访问对方网站，输入用户名及密码</p>\n</li>\n<li><p>对方服务器响应后会在这个域名下设置一个<code>set-cookie</code>的值，<code>set-cookie</code>就是对方服务器对于你的id标识，会在这个<code>set-cookie</code>值中存储你的数据信息</p>\n</li>\n<li><p>响应成功后会在响应头中添加<code>set-cookie</code>值随着响应报文返回给你的浏览器，浏览器会把<code>set-cookie</code>的值存在本地cookie文件中。</p>\n</li>\n<li><p>当你再一次向对方网站发送请求，浏览器会自动在请求头中添加上<code>set-cookie</code>值，发送给对方服务器。</p>\n</li>\n<li><p>对方服务器会尝试获取<code>set-cookie</code>值，如果有，就说明这个用户以前登陆过，找到对应的<code>set-cookie</code>值对应的数据信息返回给你的浏览器。</p>\n</li>\n<li><p><strong>Cookie</strong>内存大小受限制</p>\n<ul>\n<li><code>Cookie</code>有个数和大小的限制，大小一般是<code>4K</code></li>\n<li><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/CookieSize.png\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Cookie的特点\"><a href=\"#Cookie的特点\" class=\"headerlink\" title=\"Cookie的特点\"></a>Cookie的特点</h4><ul>\n<li><p>满足同源策略</p>\n<ul>\n<li><p>虽然网站<code>images.google.com</code>与网站<code>www.google.com</code>同属于Google，但是域名不一样，二者同样不能互相操作彼此的Cookie。</p>\n<p>问题来了 举个例子：</p>\n<p>访问完<code>zhidao.baidu.com</code>再访问<code>wenku.baidu.com</code>还需要重新登陆百度账号吗？</p>\n</li>\n</ul>\n</li>\n<li><p>解决方法：</p>\n<ul>\n<li>设置<code>cookie</code>的<code>document.domain</code>，<code>document.domain=&#39;baidu.com&#39;</code></li>\n<li><img src=\"https://raw.fastgit.org/HAODEabcd/Note/master/Web/network/cookieDomain.png\"></li>\n<li>当页面都属于<code>baidu.com</code>这个基础域名之下的话，那么只要是<code>baidu.com</code>这个基础域名之下的域名都可以相互<code>cookie</code>。</li>\n</ul>\n</li>\n</ul>\n<p>  <strong>Cookie在本地可以被更改文件，敏感的数据不要放在cookie。</strong></p>\n<h4 id=\"Cookie的增删改查\"><a href=\"#Cookie的增删改查\" class=\"headerlink\" title=\"Cookie的增删改查\"></a>Cookie的增删改查</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cookie的使用</span><br><span class=\"line\">\tcookie常用的属性值：</span><br><span class=\"line\">    \tname：cookie的名字</span><br><span class=\"line\">        value：cookie的值</span><br><span class=\"line\">        domain：cookie的域名</span><br><span class=\"line\">        path：cookie的路径</span><br><span class=\"line\">        Expires/max-age：cookie的保质期时间（Session就代表是临时cookie）</span><br><span class=\"line\">\t\tSize：cookie的字符长度（一般不会设置）</span><br><span class=\"line\">    </span><br><span class=\"line\">\t通过<span class=\"built_in\">document</span>.cookie 设置cookie</span><br><span class=\"line\">    \t格式：<span class=\"string\">&quot;属性=值;&quot;</span></span><br><span class=\"line\">\t例如：</span><br><span class=\"line\">    \t<span class=\"built_in\">document</span>.cookie = <span class=\"string\">&#x27;age=18;max-age=1000;path=/&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.cookie = <span class=\"string\">&#x27;name=amiee;expires=&#x27;</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() + <span class=\"number\">1</span> + <span class=\"string\">&quot;;path=/&quot;</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">\t<span class=\"built_in\">document</span>可以设置cookie，其中</span><br><span class=\"line\">    <span class=\"string\">&quot;age=18;&quot;</span> 是name=value</span><br><span class=\"line\">\t<span class=\"string\">&quot;max-age=1000;&quot;</span> 是这个Cookie的保质期时长是<span class=\"number\">1000</span>秒，不设置就是Session</span><br><span class=\"line\">    <span class=\"string\">&quot;path=&#x27;/&#x27;&quot;</span> 是cookie的路径，不设置就是cookie原来的路径</span><br><span class=\"line\">    </span><br><span class=\"line\">    删除cookie就只需要把max-age或者expires的时间给改成负数就好了</span><br><span class=\"line\">\t如：<span class=\"string\">&quot;max-age=-1;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>虽然我们可以读取和更改cookie，但是一直用document.cookie来更改会很麻烦。所以封装一个增删改查的函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie的增删改查封装函数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> manageCookie = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建Cookie，name为名字，value是内容，time是时间，path是路径</span></span><br><span class=\"line\">    <span class=\"attr\">setCookie</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,value,time,path</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = name + <span class=\"string\">&#x27;=&#x27;</span> + value + <span class=\"string\">&quot;;max-age=&quot;</span> + time +<span class=\"string\">&quot;;path=&quot;</span> + path;</span><br><span class=\"line\">    \t<span class=\"comment\">// 返回this让它可以链式调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删除cookie，name就是要删除的cookie的name</span></span><br><span class=\"line\">    <span class=\"attr\">removeCookie</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回this让它可以链式调用</span></span><br><span class=\"line\">        <span class=\"comment\">// 借用setCookie函数直接删除</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.setCookie(name,<span class=\"string\">&#x27;&#x27;</span>,-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 查找cookie，name是名字,callback是回调函数（处理最后返回来的数据）</span></span><br><span class=\"line\">    <span class=\"attr\">getCookie</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(allCookieArr); </span></span><br><span class=\"line\">        <span class=\"comment\">// 把cookie字符串按照 ;+空格 拆分</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> allCookieArr = <span class=\"built_in\">document</span>.cookie.split(<span class=\"string\">&#x27;; &#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 循环遍历数组allCookieArr</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; allCookieArr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(itemCookieArr); 把已经变成数组的cookie字符串按照 =（等于号）拆分成一个一个的数组</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> itemCookieArr = allCookieArr[i].split(<span class=\"string\">&#x27;=&#x27;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 如果itemCookieArr的第0位等于我输入的name值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(itemCookieArr[<span class=\"number\">0</span>] == name) &#123;</span><br><span class=\"line\">                callback(itemCookieArr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                <span class=\"comment\">// 如果找到了就返回this</span></span><br><span class=\"line\">               \t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果找不到cookie的name值，就返回一个undefined</span></span><br><span class=\"line\">        callback(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回一个this让它可以链式调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链式调用</span></span><br><span class=\"line\">manageCookie.setCookie(<span class=\"string\">&#x27;color&#x27;</span>,<span class=\"string\">&#x27;orange&#x27;</span>,<span class=\"number\">1000</span>)</span><br><span class=\"line\">            .setCookie(<span class=\"string\">&#x27;teater&#x27;</span>,<span class=\"string\">&#x27;aimee&#x27;</span>,<span class=\"number\">2000</span>)</span><br><span class=\"line\">            .removeCookie(<span class=\"string\">&#x27;teater&#x27;</span>)</span><br><span class=\"line\">            .getCookie(<span class=\"string\">&#x27;color&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h2><ul>\n<li><p><code>iframe</code>就是一个标签<code>dom</code>元素</p>\n</li>\n<li><p>可以在一个网页里嵌入另一个网页</p>\n<ul>\n<li>可以做导航栏tab切换页（古老的做法）、在线编辑器、广告植入</li>\n</ul>\n</li>\n<li><p>历史记录管理，解决<code>ajax</code>化网站响应浏览器前进后退按钮的方法</p>\n</li>\n<li><p>跨域通信等</p>\n</li>\n</ul>\n<h3 id=\"iframe利弊\"><a href=\"#iframe利弊\" class=\"headerlink\" title=\"iframe利弊\"></a>iframe利弊</h3><ul>\n<li><strong>iframe</strong>阻塞页面加载</li>\n<li>触发<code>window.onload</code>事件是非常重要的。<code>onload</code>事件触发使浏览器的”忙”指示器停止，告诉用户已经加载完毕。当<code>onload</code>事件加载延迟后，它给用户的感觉就是这个网页非常慢</li>\n<li><code>window.onload</code>事件需要在所有的<code>iframe</code>标签加载完毕后（包含里面的元素）才会触发。通过<code>JavaScript</code>动态设置<code>iframe</code>的<code>src</code>属性可以避免这种阻塞情况</li>\n<li>解决跨域问题（已经不怎么用了）</li>\n</ul>\n<h3 id=\"浏览器对于iframe的方法\"><a href=\"#浏览器对于iframe的方法\" class=\"headerlink\" title=\"浏览器对于iframe的方法\"></a>浏览器对于iframe的方法</h3><ul>\n<li><p>获取<code>iframe</code>的<code>window</code>窗口：</p>\n<ul>\n<li><strong>W3C</strong>专用<ul>\n<li><code>dom.contentWindow</code></li>\n<li><code>contentWindow</code>就是来获取<code>iframe</code>的<code>window</code>对象的，只要选中<code>DOM</code>，用<code>DOM</code>来操作<code>contentWindow</code>。</li>\n<li>简易写法：<code>window.iframe[iframe</code>标签的<code>name</code>属性]</li>\n</ul>\n</li>\n<li><strong>IE</strong>专用<ul>\n<li><code>document.iframe[iframe</code>标签的<code>name</code>属性]<code>.contentWindow</code></li>\n<li><code>document.iframe[第i个iframe</code>标签<code>].contentWindow</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>ifrmae</strong>父子页面窗口的关系</p>\n<ul>\n<li><code>window.self</code>——<code>window</code>自己</li>\n<li><code>window.parent</code>——<code>iframe</code>父级窗口对象</li>\n<li><code>window.top</code>——顶级窗口对象</li>\n</ul>\n</li>\n<li><p>判断<strong>iframe</strong>是否加载完成</p>\n<ul>\n<li><p>非<code>ie</code>下使用<code>onload</code>事件</p>\n<ul>\n<li><code>iframe(dom元素).onload = function() &#123;&#125;</code></li>\n</ul>\n</li>\n<li><p>IE下使用<code>onreadystatechange</code>事件</p>\n<ul>\n<li>```js<br>dom.onreadystatechange = function() {<pre><code>if(iframe.readyState == &#39;complete&#39; || iframe.readyState == &#39;loaded&#39;) &#123;\n    alert(&quot;Local iframe is now loaded&quot;);\n&#125;\n</code></pre>\n}<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `**iframe**跨域</span><br><span class=\"line\"></span><br><span class=\"line\">  - 可以使用哈希值跨域</span><br><span class=\"line\"></span><br><span class=\"line\">      - 解决子页面访问父页面数据问题</span><br><span class=\"line\"></span><br><span class=\"line\">      - **window.location.hash**</span><br><span class=\"line\">  </span><br><span class=\"line\">      - ```html</span><br><span class=\"line\">          &lt;iframe src=&amp;quot;https:.../.../.../B.html#1&gt; // #1就是哈希值</span><br><span class=\"line\">          </span><br><span class=\"line\">          // 主页面</span><br><span class=\"line\">          &lt;script&gt;</span><br><span class=\"line\">          \tvar oIframe = document.getElementsByTagName(&amp;#39;iframe&amp;#39;)[0];</span><br><span class=\"line\">          \tvar oldAge = 55;</span><br><span class=\"line\">          </span><br><span class=\"line\">          \tvar oSrc = oIframe.src; // 单独获取出来方便更改哈希值</span><br><span class=\"line\">          \tdocument.onclick = function() &#123;</span><br><span class=\"line\">                  oIframe.src = oSrc + &amp;#39;#&amp;#39; + oldAge;</span><br><span class=\"line\">                  oldAge++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &lt;/script&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">          // iframe子页面 B.html</span><br><span class=\"line\">          &lt;script&gt;</span><br><span class=\"line\">              var age = 20;</span><br><span class=\"line\">          \tvar lastHash = window.location.hash; // location.hash 可以取window下面的hash值</span><br><span class=\"line\">          \tsetInterval(function() &#123;</span><br><span class=\"line\">                  if(lastHash != window.location.hash) &#123;</span><br><span class=\"line\">                      console.log(location.hash.splice(1)) // 打印出来的值会有#号，用splice截取掉</span><br><span class=\"line\">                      lastHash = window.location.hash;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;,10)</span><br><span class=\"line\">          \t// 使用计时器来10毫秒捕获一次页面的哈希值，非常的耗费性能，所以现在基本上不用了</span><br><span class=\"line\">        &lt;/script&gt;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>window.name</strong></p>\n<ul>\n<li><p>可以解决父页面访问子页面数据的问题</p>\n</li>\n<li><p>页面重载、刷新在本窗口<code>window.name</code>值不变，即使换了一个页面</p>\n</li>\n<li><p>用一个代理文件，和应用页面在同一个域中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;iframe src=<span class=\"string\">&quot;https:.../.../.../B.html#1&quot;</span>&gt; <span class=\"comment\">// #1就是哈希值</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 主页面</span></span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> \t<span class=\"keyword\">var</span> oIframe = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;iframe&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> \t</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> \t<span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> \t<span class=\"comment\">// 给一个锁，不然会死循环</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> \toIframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">         <span class=\"keyword\">if</span>(flag)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">             <span class=\"comment\">// 因为window.name的特性，所以iframe访问的页面完成后换成同一个域下的数据文件，这样符合同源策略，而且window.name还是不变的</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">             oIframe.src = <span class=\"string\">&#x27;./C.html&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">             flag = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">         &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">             <span class=\"comment\">// 等自己域下的数据文件代替了iframe的src后，获取自己数据文件的window.name属性</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">           <span class=\"built_in\">console</span>.log(oIframe.contentWindow.name);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">         &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">   &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// iframe子页面 B.html</span></span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">     <span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"built_in\">window</span>.name = age;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"防抖-amp-节流\"><a href=\"#防抖-amp-节流\" class=\"headerlink\" title=\"防抖&amp;节流\"></a>防抖&amp;节流</h2><blockquote>\n<p>在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于DOM操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流（throttle）和函数防抖（debounce）就是为了解决类似需求应运而生的。</p>\n</blockquote>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><ul>\n<li><p>函数防抖就是在函数需要频繁出发情况时，只有足够空闲的时间，才执行一次。好像电梯会等人，当电梯等了几秒要关门时上来一个人，电梯会在等几秒，直到几秒后没人了在运行</p>\n</li>\n<li><p>场景</p>\n<ul>\n<li>实时搜索（<strong>keyup</strong>）<ul>\n<li>等到指定时间，搜索区域没有动静了，再触发请求</li>\n</ul>\n</li>\n<li>窗口调整（<strong>resize</strong>）<ul>\n<li>等到指定时间，浏览器窗口不再移动或着改变大小了，再触发事件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// func是回调函数，time是你想要多长时间响应一次时间，flag是你想要先触发后等待(true)，还是先等待后触发（false）;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,time,falg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> debouced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把this定义为一个变量，方便dom元素访问</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"built_in\">this</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 把所有形参当作参数</span></span><br><span class=\"line\">            argu = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        <span class=\"comment\">// 如果flag为true，那么先执行函数，后等待时间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当timer没有值的时候执行函数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!timer) func.apply(_this,argu);</span><br><span class=\"line\">            <span class=\"comment\">// 当函数先执行了之后，立马给timer赋值，把timer清空，等time秒之后可以再次执行</span></span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;,time)</span><br><span class=\"line\">        <span class=\"comment\">// 如果flag是false，那么就还是等time秒触发</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 调换this指向和把所有形参传入回调函数</span></span><br><span class=\"line\">                func.apply(_this,argu);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// time响应时间</span></span><br><span class=\"line\">            &#125;,time)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当如果调用这个方法的时候，立即停止计时器</span></span><br><span class=\"line\">    debounced.cancel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把计时器return出去了，这样每次执行的时候只有一个timer，闭包</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> debounced;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><ul>\n<li><p>函数节流就是预定一个函数只有在大于等于执行周期时才执行，周期内调用不执行。好像水滴攒到了一定重量才会落下一样。</p>\n</li>\n<li><p>场景：</p>\n<ul>\n<li>页面滚动（<strong>scroll</strong>）</li>\n<li>抢购（<strong>mousedown</strong>）</li>\n<li>拖拽（<strong>mousemove</strong>）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳实现节流函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// func是回调函数，wait是你想要多长时间响应一次时间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 上一次事件响应的时间</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> lastTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 现在事件响应的时间,+new Date() 就相当于 new Date().getTime()</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowTime - lastTime &gt; wait) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 调换this指向和把所有形参传入参数</span></span><br><span class=\"line\">                func.apply(<span class=\"built_in\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 把这一次的时间赋给lastTime</span></span><br><span class=\"line\">                lastTime = nowTime;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计时器实现节流函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// func是回调函数，wait是你想要多长时间响应一次时间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func,wait</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把计时器return出去了，这样每次执行的时候只有一个timer，闭包</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"built_in\">this</span>,</span><br><span class=\"line\">                argu = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 如果计时器没有值，是空的时候，才可以给他绑定计时器，如果有值就不会再绑定计时器</span></span><br><span class=\"line\">           \t<span class=\"keyword\">if</span>(!timer) &#123;</span><br><span class=\"line\">                timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 调换this指向和把所有形参传入参数</span></span><br><span class=\"line\">                    func.apply(_this,argu);</span><br><span class=\"line\">                    <span class=\"comment\">// 调用完了之后再把计时器清空</span></span><br><span class=\"line\">                    timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;,wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Javascript"],"tags":["网络"]},{"title":"Jquery","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/jQuery/","content":"<h3 id=\"第一节-jQuery初步认知\"><a href=\"#第一节-jQuery初步认知\" class=\"headerlink\" title=\"第一节 jQuery初步认知\"></a>第一节 jQuery初步认知</h3><hr>\n<h4 id=\"jQuery概述\"><a href=\"#jQuery概述\" class=\"headerlink\" title=\"jQuery概述\"></a>jQuery概述</h4><hr>\n<ul>\n<li><strong><code>JQuery</code>概念</strong></li>\n<li><code>javascript</code>概念<pre><code>  - 基于`Js`语言的`API`和语法组织逻辑，通过内置`window`和`document`对象，来操作内存中的`DOM`元素\n</code></pre>\n<ul>\n<li><code>JQuery</code>概念<ul>\n<li>基于<code>javascript</code>的，同上，提高了代码的效率</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>jQuery</code>是什么:</strong><ul>\n<li>是一个<code>javascript</code>代码仓库，我们称之为<code>javascript</code>框架。</li>\n<li>是一个快速的简洁的<code>javascript</code>框架，可以简化查询<code>DOM</code>对象、处理事件、制作动画、处理<code>Ajax</code>交互过程。</li>\n<li> <strong>它可以帮我们做什么(有什么优势)</strong></li>\n<li>轻量级、体积小，使用灵巧(只需引入一个<code>js</code>文件)</li>\n<li> 强大的选择器</li>\n<li>出色的<code>DOM</code>操作的封装</li>\n<li>出色的浏览器兼容性</li>\n<li>可靠的事件处理机制</li>\n<li>完善的<code>Ajax</code></li>\n<li>链式操作、隐式迭代</li>\n<li>方便的选择页面元素(模仿<code>CSS</code>选择器更精确、灵活)</li>\n<li>动态更改页面样式/页面内容(操作<code>DOM</code>，动态添加、移除样式)</li>\n<li>控制响应事件(动态添加响应事件)</li>\n<li>提供基本网页特效(提供已封装的网页特效方法)</li>\n<li>快速实现通信(<code>ajax</code>)</li>\n<li>易扩展、插件丰富</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>如何引入<code>JQuery</code>包</strong></p>\n<ul>\n<li><p>引入本地的<code>JQuery</code></p>\n</li>\n<li><p>引入<code>Google</code>在线提供的库文件（稳定可靠高速）</p>\n</li>\n<li><p>使用<code>Google</code>提供的<code>API</code>导入 <code>&lt;script type=“text/javascript” src=“jquery.js”&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>写第一个<code>JQUery</code>案例</p>\n<ul>\n<li>解释:在<code>JQuery</code>库中，<code>$</code>是<code>JQuery</code>的别名，<code>$()</code>等效于就<code>jQuery()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=“text/javascript” src=“”&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">“text/javascript”</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\talert(“jQuery 你好!”);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p><strong>讲解<code>$(function()&#123;&#125;)</code>;</strong></p>\n<ul>\n<li><p><code>$</code>是<code>jQuery</code>别名。如<code>$()</code>也可<code>jQuery()</code>这样写,相当于页面初始化函数，当页面加载完毕，会执行<code>jQuery()</code>。</p>\n</li>\n<li><p>希望在做所有事情之前，<code>JQuery</code>操作<code>DOM</code>文档。必须确保在<code>DOM</code>载入完毕后开始执行，应该用<code>ready</code>事件做处理<code>HTML</code>文档的开始</p>\n</li>\n<li><p><code>$(document).ready(function()&#123;&#125;)</code>;</p>\n<ul>\n<li>类似于<code>js</code>的<code>window.onload</code>事件函数，但是<code>ready</code>事件要先于<code>onload</code>事件执行</li>\n<li><code>window.onload = function()&#123;&#125;</code>;</li>\n</ul>\n</li>\n<li><p>为方便开发，<code>jQuery</code>简化这样的方法，直接用<code>$()</code>表示</p>\n</li>\n<li><p><code>JQuery</code>的<code>ready</code>事件不等于<code>Js</code>的<code>load</code>：</p>\n<ul>\n<li>执行时机不同：<code>load</code>需要等外部图片和视频等全部加载才执行。<code>ready</code>是<code>DOM</code>绘制完毕后执行，先与外部文件</li>\n<li>用法不同：<code>load</code>只可写一次，<code>ready</code>可以多次</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>window.onload</code>与<code>$(document).ready()</code>对比</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>window.onload</th>\n<th>$(document).ready()</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>执行时机</td>\n<td>必须等网页中所有内容加载完后(图片)才执行</td>\n<td>网页中的<code>DOM</code>结构绘制完后就执行,可能<code>DOM</code>元素相关的东西并没有加载完</td>\n</tr>\n<tr>\n<td>编写个数</td>\n<td>不能同时执行多个</td>\n<td>能同时执行多个</td>\n</tr>\n<tr>\n<td>简化写法</td>\n<td>无</td>\n<td><code>$(document).ready(function()&#123; //.. &#125;);</code><br /><br />推荐写法：<code>$(function()&#123; &#125;);</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>**<code>jQuery</code>有哪些功能(<code>API</code>)**：</p>\n<ul>\n<li>选择器</li>\n<li>过滤器</li>\n<li>事件</li>\n<li>效果</li>\n<li><code>ajax</code></li>\n</ul>\n</li>\n<li><p><strong>简单的<code>JQuery</code>选择器</strong>：</p>\n<ul>\n<li><code>JQuery</code>基本选择器（<code>ID</code>选择器，标签选择器，类选择器，通配选择器和组选择器<code>5</code>种）</li>\n<li><code>ID</code>选择器：<code>document.getElementById(id)</code>与<code>$(&quot;#id&quot;)</code>对比(改变文字大小)—<code>id</code>唯一，返回单个元素</li>\n<li>标签选择器：<code>document.getElementsByTagName(tagName)</code>与<code>$(&quot;tagname&quot;)</code>对比—多个标签，返回数组</li>\n<li>类选择器:<code>$(&quot;.className&quot;)</code>–多个<code>classname</code>（改变背景图片）</li>\n<li>通配选择器：<code>document.getElementsByTagName(&quot;*&quot;)</code>与<code>$(&quot;*&quot;)</code>对比—指范围内的所有标签元素</li>\n<li>组选择器：<code>$(&quot;seletor1,seletor2,seletor3&quot;)</code>—-无数量限制，用逗号分割</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"初步了解JQuery\"><a href=\"#初步了解JQuery\" class=\"headerlink\" title=\"初步了解JQuery\"></a>初步了解<code>JQuery</code></h4><hr>\n<ul>\n<li><p><strong><code>JQuery</code>是什么</strong></p>\n<ul>\n<li><code>javascript</code>用来干什么的：<ul>\n<li>操作<code>DOM</code>对象</li>\n<li>动态操作样式<code>css</code></li>\n<li>数据访问</li>\n<li>控制响应事件等</li>\n</ul>\n</li>\n<li><code>jQuery</code>作用一样，只是更加快速简洁</li>\n</ul>\n</li>\n<li><p><strong>如何引用<code>JQuery</code></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">写第一个JQUery案例</span><br><span class=\"line\">&lt;script type=“text/javascript” src=“”&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">“text/javascript”</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\talert(“jQuery 你好!”);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong><code>$()讲解</code></strong></p>\n<ul>\n<li><code>$</code>在<code>JQuery</code>库中，<code>$</code>是<code>JQuery</code>的别名，<code>$()</code>等效于就<code>jQuery()</code>.</li>\n<li><code>$()</code>是<code>JQuery</code>方法,赞可看作是<code>JQuery</code>的选择器，与<code>css</code>选择器相似（可做对比）</li>\n<li><code>var jQuery==$ =function()&#123;&#125;</code> <code>$()</code>本质就是一个函数也就是 <code>jQuery</code>的核心函数</li>\n<li>只要是<code>jQuery</code>的对象都这样变量加上一个<code>符号$ </code>方便识别：<code>var $div = $(&quot;#&quot;)</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>　<span class=\"title\">$</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><strong><code>$()</code>和<code>document</code>是相等的吗</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aa&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aa&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;c&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aa&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">alert(document.getElementById(&quot;id&quot;) == $(&quot;#aa&quot;));//返回结果为false</span><br><span class=\"line\">alert(document.getElementById(&quot;id&quot;) == $(&quot;#aa&quot;).get(0));//返回true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>代理对象<code>$()</code></strong></p>\n<ul>\n<li><code>jQuery</code>中返回的是代理对象本身</li>\n<li><code>jQuery</code>的核心原理是通过选择器找到对应的代理对象</li>\n<li><code>jQuery</code>全都是通过方法操作</li>\n<li>样式选择器<code>$(&quot;.className&quot;)</code><ul>\n<li><code>$(&quot;.aa&quot;).css(&quot;color&quot;,&quot;green&quot;);</code></li>\n</ul>\n</li>\n<li>id选择器(“”)<ul>\n<li><code>$(&quot;#a&quot;).css(&quot;background-color&quot;,&quot;#ff0066&quot;);</code></li>\n</ul>\n</li>\n<li>标签选择器<ul>\n<li><code>$(&quot;p&quot;).css(&quot;color&quot;,&quot;#cc3366&quot;);</code></li>\n</ul>\n</li>\n<li>组选择器<ul>\n<li><code>$(&quot;#b ul li&quot;).size();</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>对象转换(<code>$(element)</code>)</strong></p>\n<ul>\n<li>原生<code>dom</code>对象和<code>jquery</code>代理对象的相互转换</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(传入的原生对象);</span><br><span class=\"line\"><span class=\"comment\">//原生对象转化成jQuery对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nav = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nav&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $nav = $(nav);</span><br><span class=\"line\">alert($nav.get(<span class=\"number\">0</span>) == nav);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>检索范围的限制（<code>$(&#39;字符串&#39;,element)</code>）</strong></p>\n<ul>\n<li><p><strong>总结：三种写法对比：</strong></p>\n<ul>\n<li><p>方式一：不推荐 搜索速度最慢</p>\n<ul>\n<li><code>$(&quot;#nav&quot;).css();</code></li>\n<li><code>$(&quot;#nav li&quot;).css();</code></li>\n</ul>\n</li>\n<li><p>方式二：搜索速度最快 链式操作</p>\n<ul>\n<li><code>$(&quot;#nav&quot;).css().children().css();</code></li>\n</ul>\n</li>\n<li><p>方式三：也常用 速度第二快</p>\n<ul>\n<li><code>var $nav = $(&quot;#nav&quot;).css()</code>;</li>\n<li><code>$(&quot;li&quot;,#nav).css()</code>;  <code>$nav </code>限制了搜索范围 速度快</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>总结： <code>$()</code> <code>jquery</code>核心方法的作用和使用场景</strong></p>\n<ul>\n<li>如果是一个字符串参数并且没有标签对（选择器）<code> $(ul.nav&quot;)</code></li>\n<li>如果是一个字符串参数并且有标签对（创建<code>html</code>标签）<code>$(&quot;&lt;img&gt;&quot;)</code> –最终加到<code>DOM</code>树中 <code>$xx.append(&quot;&lt;img&gt;&quot;)</code>;</li>\n<li>如果是传入一个<code>element dom</code>对象，直接包装为<code>proxy</code>对象返回 <code>$(DOM对象)</code></li>\n<li>如果第一个参数是字符串，第二个是<code>element</code> <code>dom</code>对象的话，那么就是在<code>element</code>这个<code>dom</code>对象里面寻找选择器对应的元素并且代理 <code>$(&quot;li&quot;,$DOM对象)</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>代理模式以及代理内存结构</strong></li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/jQ/daicun.png\" alt=\"代理内存结构1\"></p>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/jQ/daicun0.png\" alt=\"代理内存结构2\"></p>\n<h3 id=\"第二节-选择器\"><a href=\"#第二节-选择器\" class=\"headerlink\" title=\"第二节 选择器\"></a>第二节 选择器</h3><hr>\n<ul>\n<li><strong>来回顾一下<code>CSS</code>常用的选择器</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标签选择器</td>\n<td><code>E&#123;css规则&#125;</code></td>\n<td>以文档元素作为选择符</td>\n</tr>\n<tr>\n<td><code>ID</code>选择器</td>\n<td><code>#ID&#123;css规则&#125;</code></td>\n<td><code>ID</code>作为选择符</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td><code>E.className&#123;css规则&#125;</code></td>\n<td><code>class</code>作为选择符</td>\n</tr>\n<tr>\n<td>群组选择器</td>\n<td><code>E1,E2,E3&#123;css规则&#125;</code></td>\n<td>多个选择符应用同样的样式</td>\n</tr>\n<tr>\n<td>后代选择器</td>\n<td><code>E F&#123;css规则&#125;</code></td>\n<td>元素<code>E</code>的任意后代元素<code>F</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"选择器引擎规则-39-字符串-39\"><a href=\"#选择器引擎规则-39-字符串-39\" class=\"headerlink\" title=\"选择器引擎规则($(&#39;字符串&#39;))\"></a>选择器引擎规则(<code>$(&#39;字符串&#39;)</code>)</h4><ul>\n<li><p><code>css</code>选择器的规则</p>\n<ul>\n<li>标签选择器 – $(‘p’)</li>\n<li><code>id</code>选择器 – $(‘#id’)</li>\n<li>类选择器 – $(‘.class’)</li>\n<li>混合选择器 – $(‘.class p’)</li>\n</ul>\n</li>\n<li><p><code>css3</code>的选择器规则</p>\n</li>\n<li><p>状态和伪类（<code>:even</code> <code>:odd</code> <code>:first</code> <code>:last</code> <code>:eq(index)</code>）</p>\n</li>\n<li><p>属性（<code>[attr=value]</code>）</p>\n</li>\n</ul>\n<h4 id=\"层级选择器-通过DOM的嵌套关系匹配元素\"><a href=\"#层级选择器-通过DOM的嵌套关系匹配元素\" class=\"headerlink\" title=\"层级选择器:通过DOM的嵌套关系匹配元素\"></a>层级选择器:通过<code>DOM</code>的嵌套关系匹配元素</h4><ul>\n<li><code>jQuery</code>层级选择器—-包含选择器、子选择器、相邻选择器、兄弟选择器4种</li>\n<li>a.包含选择器：<code>$(&quot;a b&quot;)</code>在给定的祖先元素下匹配所有后代元素。(不受层级限制)</li>\n<li>b.子选择器：<code>$(&quot;parent &gt; child&quot;) </code>在给定的父元素下匹配所有子元素。</li>\n<li>c.相邻选择器：<code>$(&quot;prev + next&quot;)</code> 匹配所有紧接在<code>prev</code>元素后的<code>next</code>元素。</li>\n<li>d.兄弟选择器：<code>$(&quot;prev ~ siblings&quot;)</code> 匹配prev元素之后的所有<code>sibling</code>元素。</li>\n</ul>\n<h4 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h4><hr>\n<ul>\n<li><strong>基本过滤选择</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:first</code></td>\n<td>匹配第一个元素</td>\n<td>单个元素</td>\n</tr>\n<tr>\n<td><code>:last</code></td>\n<td>匹配最后一个元素</td>\n<td>单个元素</td>\n</tr>\n<tr>\n<td><code>:eq()</code></td>\n<td>匹配一个给定索引值的元素</td>\n<td>单个元素</td>\n</tr>\n<tr>\n<td><code>:even</code></td>\n<td>选索引为偶数的元素(从0开始)</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:odd</code></td>\n<td>选索引为奇数的元素(从0开始)</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:gt(index)</code></td>\n<td>选索引大于index的元素(从0开始)</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:lt(index)</code></td>\n<td>选索引小于index的元素(从0开始)</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:filter</code></td>\n<td>$(‘li’).filter(‘.demo’),选中li里面class类名是demo的li，返回<code>true</code>的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:not</code></td>\n<td>和filter正好相反</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:animated</code></td>\n<td>选取当前正在执行动画的所有元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:focus</code></td>\n<td>选取当前正在获取焦点的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:find(elem)</code></td>\n<td>选择当前元素中所有后代为elem的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>内容过滤选择器</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>描述</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:contains(text)</code></td>\n<td>选取含有文本内容为text的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:empty</code></td>\n<td>选取不包含子元素获取文本的空元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:has(selector)</code></td>\n<td>选择返回在子元素中拥有一个elem元素的所有父级元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:parent</code></td>\n<td>选取含有子元素或者文本的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>可见过滤选择器</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>描述</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:hidden</code></td>\n<td>选择所有不可见的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:visible</code></td>\n<td>选取所有可见的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>属性过滤选择器</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>[attribute]</code></td>\n<td>选取拥有此属性的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>[attribute=value]</code></td>\n<td>选取属性值为<code>value</code>值的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>[attribue^=value]</code></td>\n<td>选取属性的值以<code>value</code>开始的元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>[attribue$=value]</code></td>\n<td>选取属性的值以<code>value</code>结束的元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>子元素过滤选择器</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:nth-child(index/even/odd)</code></td>\n<td>选取每个父元素下的第index个子元素或者奇偶元素（<code>index</code>从<code>1</code>算起）</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:first-child</code></td>\n<td>选取每个元素的第一个子元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:last-child</code></td>\n<td>选取每个元素的最后一个子元素</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><code>:nth-child()</code>选择器是很常用的子元素过滤选择器，如下</p>\n<ul>\n<li><code>:nth-child(even)</code>选择每个父元素下的索引值是偶数的元素</li>\n<li><code>:nth-child(odd)</code>选择每个父元素下的索引值是奇数的元素</li>\n<li><code>:nth-child(2)</code>选择每个父元素下的索引值是<code>2</code>的元素</li>\n<li><code>:nth-child(3n)</code>选择每个父元素下的索引值是3的倍数的元素 (<code>n</code>从<code>1</code>开始)</li>\n</ul>\n</li>\n<li><p><strong>表单对象属性过滤选择器</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:enabled</code></td>\n<td>选取所有可用元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:disabled</code></td>\n<td>选取所有不可用元素</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:checked</code></td>\n<td>选取所有被选中的元素（单选框、复选框）</td>\n<td>集合元素</td>\n</tr>\n<tr>\n<td><code>:selected</code></td>\n<td>选取所有被选中的元素（下拉列表）</td>\n<td>集合元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>表单选择器</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:input</code></td>\n<td>选取所有<code>input </code> <code>textarea </code> <code>select</code> <code>button</code>元素</td>\n</tr>\n<tr>\n<td><code>:text</code></td>\n<td>选取所有单行文本框</td>\n</tr>\n<tr>\n<td><code>:password</code></td>\n<td>选取所有密码框</td>\n</tr>\n<tr>\n<td><code>:radio</code></td>\n<td>选取所有单选框</td>\n</tr>\n<tr>\n<td><code>:checkbox</code></td>\n<td>选取所有多选框</td>\n</tr>\n<tr>\n<td><code>:submit</code></td>\n<td>选取所有的提交按钮</td>\n</tr>\n<tr>\n<td><code>:image</code></td>\n<td>选取所有的图像按钮</td>\n</tr>\n<tr>\n<td><code>:reset</code></td>\n<td>选取所有的重置按钮</td>\n</tr>\n<tr>\n<td><code>:button</code></td>\n<td>选取所有的按钮</td>\n</tr>\n<tr>\n<td><code>:file</code></td>\n<td>选取所有的上传域</td>\n</tr>\n<tr>\n<td><code>:hidden</code></td>\n<td>选取所有的不可见元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><strong>特定位置选择器</strong></p>\n<ul>\n<li><code>:first</code></li>\n<li><code>:last</code></li>\n<li><code>:eq(index)</code></li>\n</ul>\n</li>\n<li><p><strong>指定范围选择器</strong></p>\n<ul>\n<li><code>:even</code></li>\n<li><code>:odd</code></li>\n<li><code>:gt(index)</code></li>\n<li><code>:lt(index)</code></li>\n</ul>\n</li>\n<li><p><strong>排除选择器</strong></p>\n<ul>\n<li><code>:not</code> 非</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第三节-选择器优化\"><a href=\"#第三节-选择器优化\" class=\"headerlink\" title=\"第三节 选择器优化\"></a>第三节 选择器优化</h3><hr>\n<ul>\n<li><p>使用合适的选择器表达式可以提高性能、增强语义并简化逻辑。常用的选择器中，<code>ID</code>选择器速度最快，其次是类型选择器。</p>\n<ul>\n<li>a. 多用<code>ID</code>选择器</li>\n<li>b. 少直接使用<code>class</code>选择器</li>\n<li>c. 多用父子关系，少用嵌套关系</li>\n<li>d. 缓存<code>jQuery</code>对象</li>\n</ul>\n</li>\n<li><p><strong>使用过滤器</strong></p>\n<ul>\n<li><code>jQuery</code>提供了<code>2</code>种选择文档元素的方式：选择器和过滤器</li>\n<li>a. 类过虑器：根据元素的类属性来进行过滤操作。<ul>\n<li><code>hasClass(className)</code>：判断当前<code>jQuery</code>对象中的某个元素是否包含指定类名，包含返回<code>true</code>，不包含返回<code>false</code></li>\n</ul>\n</li>\n<li>b. 下标过滤器：精确选出指定下标元素<ul>\n<li><code>eq(index)</code>：获取第<code>N</code>个元素。<code>index</code>是索引值，下标从<code>0</code>开始</li>\n</ul>\n</li>\n<li>c. 表达式过滤器<ul>\n<li><code>filter(expr)/(fn)</code>：筛选出与指定表达式/函数匹配的元素集合。<br><code>如：$(&#39;li&#39;).filter(&#39;.demo&#39;),li里面class类名是demo的li，filter里面也可以填写function函数，如：$(&#39;li&#39;).filter(function(index) &#123;   return true / false / 条件; &#125;)</code></li>\n<li>功能最强大的表达式过滤器，可接收函数参数，也可以是简单的选择器表达式</li>\n</ul>\n</li>\n<li>e. 清洗 <code>not(expr)</code>：和filter正好相反，返回true都不要</li>\n<li>d. 映射 <code>map(callback)</code>：将一组元素转换成其他数组</li>\n<li>f. 截取 <code>slice(start,end)</code>：选取一个匹配的子集</li>\n</ul>\n</li>\n<li><p><strong>查找</strong></p>\n<ul>\n<li>向下查找后代元素<ul>\n<li><code>children()</code>:取得所有元素的所有子元素集合（子元素）</li>\n<li><code>find()</code>:搜索所有与指定表达式匹配的元素(所有后代元素中查找)</li>\n</ul>\n</li>\n<li>查找兄弟元素 <code>siblings()</code>查找当前元素的兄弟</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第四节-代理对象属性和样式操作\"><a href=\"#第四节-代理对象属性和样式操作\" class=\"headerlink\" title=\"第四节 代理对象属性和样式操作\"></a>第四节 代理对象属性和样式操作</h3><hr>\n<ul>\n<li><p><strong>代理对象属性和样式操作</strong></p>\n</li>\n<li><p><code>attr</code></p>\n<ul>\n<li><code>prop</code>(一般属性值是<code>boolean</code>的值或者不用设置属性值，一般使用)</li>\n<li><code>css</code>(最好不用，一般我用来做测试)</li>\n<li><code>addClass</code> / <code>removeClass</code></li>\n</ul>\n</li>\n<li><p>操作原生<code>DOM</code>的时候用的方式：一次只能操作一个</p>\n<ul>\n<li>操作属性：<code>setAttribute</code> / <code>getAttribute</code></li>\n<li>操作样式：<code>style.xx = value</code></li>\n<li>操作类样式：<code>className=&#39;&#39;</code></li>\n<li>获取<code>DOM</code>的子元素<code>children</code>属性</li>\n<li><code>DOM</code>里面添加一个子元素<code>appendChild()</code></li>\n</ul>\n</li>\n<li><p>操作<code>jQuery</code>代理对象的时候：批量操作<code>DOM</code>对象(全都是通过方法操作)</p>\n</li>\n<li><p>操作属性：<code>attr()</code>、<code>prop()</code></p>\n<ul>\n<li><p><code>attr</code>和<code>prop</code>区别：如果属性的值是布尔类型的值 用<code>prop</code>操作 反之<code>attr</code></p>\n</li>\n<li><p><code>attr</code>主要依赖的是Element对象的<code>getArribute()</code>和<code>setAttribute()</code>两个方法</p>\n</li>\n<li><p><code>prop</code>主要依赖的是JS中的对象属性和设置方式</p>\n</li>\n</ul>\n</li>\n<li><p>操作样式：<code>css()</code></p>\n<ul>\n<li>css() 给dom赋予样式，可以链式调用，有两种写法<ul>\n<li>如：$(‘li’).css(‘color’,’red’).css(‘font-size’,’22px’);</li>\n<li>如:$(‘li’).css({color:’red’,font-size:’red’})</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作类样式：<code>addClass()</code> <code>removeClass()</code></p>\n<ul>\n<li><code>addClass()</code>: 给元素添加Class类名</li>\n<li><code>removeClass()</code>: 给元素删除Class类名,不添加值就是删除所有Class类名</li>\n</ul>\n</li>\n<li><p>操作<code>DOM</code>子元素：<code>children()</code></p>\n</li>\n<li><p>添加子元素：<code>append()</code></p>\n</li>\n</ul>\n<h3 id=\"第五节-jQuery中DOM操作\"><a href=\"#第五节-jQuery中DOM操作\" class=\"headerlink\" title=\"第五节 jQuery中DOM操作\"></a>第五节 jQuery中DOM操作</h3><hr>\n<ul>\n<li><p><code>DOM</code>是一种与浏览器、平台|语言无关的接口，使用该接口可以轻松的访问 页面中的所有的标准组件</p>\n</li>\n<li><p><strong><code>DOM</code>操作的分类</strong></p>\n<ul>\n<li><p><strong><code>DOM Core</code></strong></p>\n<ul>\n<li><code>DOM core</code>并不专属于<code>JavaScript</code>，任何支持<code>DOM</code>的程序都可以使用</li>\n<li><code>JavaScript</code> 中的<code>getElementByID()</code> <code>getElementsByTagName()</code> <code>getAttribute()</code> <code>setAttribute()</code>等方法都是<code>DOM Core</code>的组成部分</li>\n</ul>\n</li>\n<li><p><strong><code>HTML-DOM</code></strong></p>\n<ul>\n<li><code>HTML -DOM</code>的出现比<code>DOM-Core</code>还要早，它提供一些更简明的标志来描述<code>HTML</code>元素的属性</li>\n</ul>\n</li>\n<li><p>比如：使用<code>HTML-DOM</code>来获取某元素的<code>src</code>属性的方法</p>\n<ul>\n<li><code>element.src</code></li>\n</ul>\n</li>\n<li><p><strong><code>CSS-DOM</code></strong></p>\n<ul>\n<li>针对<code>CSS</code>的操作。在<code>JavaScript</code>中，主要用于获取和设置<code>style</code>对象的各种属性，通过改变<code>style</code>对象的属性，使网页呈现不同的效果</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"查找、创建、删除、复制、替换节点\"><a href=\"#查找、创建、删除、复制、替换节点\" class=\"headerlink\" title=\"查找、创建、删除、复制、替换节点\"></a>查找、创建、删除、复制、替换节点</h4><ul>\n<li><strong>查找节点</strong><ul>\n<li>查找属性节点 <code>attr()</code> 可以获取各属性的值</li>\n</ul>\n</li>\n<li><strong>创建节点</strong><ul>\n<li><code>$(html)</code>：根据传递的标记字符串，创建<code>DOM</code>对象</li>\n</ul>\n</li>\n<li><strong>插入节点</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>append()</code></td>\n<td>插入到所有子元素的最后一位,父元素在子元素的前面,返回的是父元素</td>\n</tr>\n<tr>\n<td><code>appendTo()</code></td>\n<td>颠倒<code>append()</code>的操作,子元素在父元素的前面,返回的是子元素</td>\n</tr>\n<tr>\n<td><code>prepend()</code></td>\n<td>插入到所有子元素的第一位,父元素在子元素的前面,返回的是父元素</td>\n</tr>\n<tr>\n<td><code>prependTo()</code></td>\n<td>颠倒<code>prepend()</code>的操作,子元素在父元素的前面,返回的是子元素</td>\n</tr>\n<tr>\n<td><code>after()</code></td>\n<td>剪切到元素的后面,父元素在子元素前面,返回的是父级元素</td>\n</tr>\n<tr>\n<td><code>insertAfter()</code></td>\n<td>颠倒<code>after()</code>的操作,子元素在父元素的前面,返回的是子元素</td>\n</tr>\n<tr>\n<td><code>before()</code></td>\n<td>剪切到元素的前面,和原生<code>js</code>中的<code>insertBefore</code>像,父元素在子元素前面,返回的是父元素</td>\n</tr>\n<tr>\n<td><code>insertBefore()</code></td>\n<td>颠倒<code>before()</code>的操作,子元素在父元素后面,返回的是子元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><strong>删除节点</strong></p>\n<ul>\n<li><code>jQuery</code>提供了三种删除节点的方法 <code>remove()</code> <code>detach()</code> <code>empty()</code></li>\n</ul>\n</li>\n<li><p><strong><code>remove()方法</code></strong></p>\n<ul>\n<li>当某个节点用<code>remove()</code>方法删除后，该节点所包含的所有后代节点将同时被删除，将会只剩下一个DOM元素，不再有事件功能了，但还是可以继续使用删除后的引用</li>\n</ul>\n</li>\n<li><p><strong><code>detach()</code></strong></p>\n<ul>\n<li>和<code>remove()</code>方法一样，也是从<code>DOM</code>中去掉所有匹配的元素，与<code>remove()</code>不同的是，所有绑定的事件、附加的数据等，都会被保留下来，等待下一次的使用</li>\n</ul>\n</li>\n<li><p><strong><code>empty()</code></strong></p>\n<ul>\n<li><code>empty()</code>方法并不是删除节点，而是清空节点，它能清空元素中所有后代节点</li>\n</ul>\n</li>\n<li><p><strong>复制节点</strong></p>\n<ul>\n<li>使用<code>clone()</code>方法来完成</li>\n<li>在<code>clone()</code>方法中传递一个参数<code>true</code>，同时克隆元素中所绑定的事件</li>\n</ul>\n</li>\n<li><p><strong>替换节点</strong></p>\n<ul>\n<li><code>replaceWith()</code>:将所有匹配的元素替换成指定的元素</li>\n<li><code>replaceAll()</code>:用匹配的元素替换掉指定元素</li>\n<li>注意：两者效果一致，只是语法不同 <code>$A.replaceAll($B) </code>等效于 <code>$B.replaceWhith($A)</code>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"样式操作\"><a href=\"#样式操作\" class=\"headerlink\" title=\"样式操作\"></a>样式操作</h4><ul>\n<li>获取样式和设置样式 <code>attr()</code></li>\n<li>追加样式 <code>addClass()</code>，添加<code>属性</code></li>\n<li>移除样式 <code>removeClass()</code>移除<code>属性</code></li>\n<li>切换样式<ul>\n<li><strong><code>toggle()</code></strong> 方法只要是控制行为上的重复切换（如果元素是显示的，则隐藏；如果元素原来是隐藏的，则显示）</li>\n<li><strong><code>toggleClass()</code></strong> 方法控制样式上的重复切换（如何类名存在，则删除它，如果类名不存在，则添加它）</li>\n</ul>\n</li>\n<li>判断是否含有某个样式<ul>\n<li><strong><code>hasClass()</code></strong> 可以用来判断元素是否含有某个<code>class</code>,如有返回<code>true</code> 该方法等价于<code>is()</code></li>\n</ul>\n</li>\n<li><strong>设置和获取HTML、文本和值</strong><ul>\n<li><strong><code>html()</code></strong><ul>\n<li>此方法类似<code>JavaScript</code>中<code>innerHTML</code>属性，可以用来读取和设置某个元素中的<code>HTML</code>内容</li>\n</ul>\n</li>\n<li><strong><code>text()</code></strong><ul>\n<li>此方法类型<code>JavaScript</code>中<code>innerHTML</code>，用来读取和设置某个元素中的文本内容</li>\n</ul>\n</li>\n<li><strong><code>val()</code></strong><ul>\n<li>此方法类似<code>JavaScript</code>中的<code>value</code>属性，用来设置获取元素的值。无论是文本框、下拉列表还是单选框，都可以返回元素的值，如果元素多选，返回一个包含所有选择的值的数组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"遍历节点\"><a href=\"#遍历节点\" class=\"headerlink\" title=\"遍历节点\"></a>遍历节点</h4><ul>\n<li><strong><code>children()</code></strong> 方法<ul>\n<li>该方法用来取得匹配元素的子元素集合</li>\n<li><code>childre()</code>方法只考虑子元素而不考虑其他后代元素</li>\n</ul>\n</li>\n<li><strong><code>next()</code></strong> 方法<ul>\n<li>选中当前元素下一个同级元素</li>\n</ul>\n</li>\n<li><strong><code>nextAll()</code></strong> 方法<ul>\n<li>当前元素下面所有的同级元素</li>\n</ul>\n</li>\n<li><strong><code>prev()</code></strong> 方法<ul>\n<li>返回被选元素的前一个同级元素</li>\n</ul>\n</li>\n<li><strong><code>prevAll()</code></strong> 方法<ul>\n<li>当前元素前面的所有同级元素</li>\n</ul>\n</li>\n<li><strong><code>siblings()</code></strong> 方法<ul>\n<li>用于匹配元素前后所有的同级元素</li>\n</ul>\n</li>\n<li><strong><code>prevUntil()</code></strong> 方法<ul>\n<li><code>$(&quot;selector&quot;).prevUntil(&quot;stop&quot;)</code></li>\n<li><code>prevUntil()</code>方法返回<code>selector</code>与<code>stop</code>之间，selector之前，stop之后的所有同级元素</li>\n<li>返回在类名为 “selector” 和 “stop”的两个<code>&lt;li&gt;</code>元素之间的所有同级元素：</li>\n</ul>\n</li>\n<li><strong><code>nextUntil()</code></strong> 方法<ul>\n<li><code>$(&quot;selector&quot;).nextUntil(&quot;stop&quot;)</code></li>\n<li><code>nextUntil()</code>方法返回<code>selector</code>与<code>stop</code>之间，selector之后，stop之前的所有同级元素</li>\n<li>返回在类名为 “selector” 和 “stop”的两个<code>&lt;li&gt;</code>元素之间的所有同级元素：</li>\n</ul>\n</li>\n<li><strong><code>parent()</code></strong> 方法<ul>\n<li>获得当前元素的直接父级元素,可以传参,判断自己的直接父元素是不是这个</li>\n</ul>\n</li>\n<li><strong><code>parents()</code></strong> 方法<ul>\n<li>获得当前元素的每个祖先元素,可以传参,筛选出来传参的那个dom元素</li>\n</ul>\n</li>\n<li><strong><code>offsetparent()</code></strong> 方法<ul>\n<li>返回离自己最近有定位的父级元素</li>\n</ul>\n</li>\n<li><strong><code>closest()</code></strong> 方法<ul>\n<li>传入参数,从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素</li>\n</ul>\n</li>\n<li><strong><code>each()</code></strong> 方法<ul>\n<li>遍历数组元素</li>\n<li><code>each(function(index,ele)&#123;&#125;) index</code>：代表索引值，ele：代表元素本身</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"定位操作\"><a href=\"#定位操作\" class=\"headerlink\" title=\"定位操作\"></a>定位操作</h4><ul>\n<li><code>CSS DOM</code>技术简单的来说就是读取和设置<code>style</code>对象的各种属性</li>\n<li>用<code>css()</code>方法获取元素的样式属性，可以同时设置多个样式属性</li>\n<li><strong><code>CSS DOM</code>中关于元素定位有几个常用的方法</strong></li>\n<li><strong><code>offset()</code></strong> 方法<ul>\n<li>它的作用是获取元素在当前视窗的相对偏移其中返回的对象包含两个属性，即<code>top</code>和<code>left</code>，他只对可见元素有效</li>\n</ul>\n</li>\n<li><strong><code>position()</code></strong> 方法<ul>\n<li>获取相对于最近的一个<code>position()</code>样式属性设置为<code>relative</code>或者<code>absolute</code>的祖父节点的相对偏移，与<code>offset()</code>一样，他返回的对象也包括两个属性，即<code>top</code>和<code>left</code></li>\n</ul>\n</li>\n<li><strong><code>scrollTop()</code></strong> 方法和 <strong><code>scrollLeft()</code></strong> 方法<ul>\n<li>这两个方法的作用分别是获取元素的滚动条距顶端的距离和距左侧的距离</li>\n<li><strong>一张图总结以上的位置关系(项目中很常用-必须要弄清楚)</strong></li>\n</ul>\n</li>\n<li><strong><code>width()</code></strong> 方法<ul>\n<li>取得第一个匹配元素当前计算的实际宽度值（px）</li>\n</ul>\n</li>\n<li><strong><code>height()</code></strong> 方法<ul>\n<li>取得匹配元素当前计算的实际高度值（px）。</li>\n</ul>\n</li>\n<li><strong><code>innerWidth()</code></strong> 方法<ul>\n<li>获取第一个匹配元素内部区域宽度（包括补白、不包括边框）（content + padding）</li>\n</ul>\n</li>\n<li><strong><code>innerHeight()</code></strong> 方法<ul>\n<li>获取第一个匹配元素内部区域高度（包括补白、不包括边框）（content + padding）</li>\n</ul>\n</li>\n<li><strong><code>outerWidth()</code></strong> 方法<ul>\n<li>获取第一个匹配元素外部宽度（默认包括补白和边框）（content + padding + border），参数为<code>true</code>的时候，求出宽度带有<code>margin</code></li>\n</ul>\n</li>\n<li><strong><code>outerHeight()</code></strong> 方法<ul>\n<li>获取第一个匹配元素外部高度（默认包括补白和边框）（content + padding + border），参数为<code>true</code>的时候，求出宽度带有<code>margin</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li><p><strong><code>wrap()</code></strong> 方法</p>\n<ul>\n<li>把选中的元素用其他元素的结构化标记包裹起来</li>\n<li>如：<code>$(&#39;li&#39;).wrap($(&#39;&lt;div&gt;&#39;))</code>，把每一个<code>li</code>用<code>div</code>包裹起来</li>\n<li><code>wrap(function(index,ele)&#123;&#125;)</code> 可以用函数判断包裹</li>\n</ul>\n</li>\n<li><p><strong><code>wrapInner()</code></strong> 方法</p>\n<ul>\n<li>把传入的<code>dom</code>元素包裹住选中元素的内容</li>\n<li>如：<code>$(&#39;li&#39;).wrapInner($(&#39;&lt;div&gt;&#39;))</code>，用<code>div</code>把<code>li</code>里面的内容包裹起来</li>\n</ul>\n</li>\n<li><p><code>wrapInner(function(index,ele)&#123;&#125;)</code> 可以用函数判断包裹</p>\n</li>\n<li><p><strong><code>wrapAll()</code></strong> 方法</p>\n<ul>\n<li>将所有选中的元素用单个元素包裹起来</li>\n<li>容易破坏页面结构<ul>\n<li>就是把所有的被选中的元素集和到了一起，把不属于这个元素的都剔除了，如<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;li&#x27;</span>).wrappAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>unwrap()</code></strong> 方法</p>\n</li>\n<li><p>unwrap() 方法删除被选元素的父元素，也可以传入<code>dom</code>参数</p>\n</li>\n<li><p><strong><code>end()</code></strong> 方法</p>\n<ul>\n<li>回到最近的一个”破坏性”操作之前。即，将匹配的元素列表变为前一次的状态。</li>\n<li>他之前会在<code>prevObject</code>上面存储上一次操作的内容，<code>end()</code>就是调用了prevObject里面的内容，所以说调取<code>end()</code>就相当于调取了<code>prevObject</code></li>\n</ul>\n</li>\n<li><p><strong><code>add()</code></strong> 方法</p>\n<ul>\n<li>将元素添加到选好的元素的集合中</li>\n<li>把<code>&lt;p&gt;</code>和<code>&lt;span&gt;</code>元素添加到已存在的元素组合中<code>&lt;h1&gt;</code></li>\n<li>可以集中操作</li>\n<li><code>$(&#39;li&#39;).eq(0).add($(&#39;li&#39;).eq(4)).css(&#123;width:100&#125;)</code> 选中第一个<code>li</code>和最后一个<code>li</code>添加样式</li>\n</ul>\n</li>\n<li><p><strong><code>slice(a,b)</code></strong> 方法</p>\n<ul>\n<li>选取一个匹配的子集</li>\n<li>选取<code>a</code>到<code>b</code>之间的内容，包括<code>a</code>,不包括<code>b</code>（算头不算尾）</li>\n</ul>\n</li>\n<li><p><strong><code>is()</code></strong> 方法</p>\n<ul>\n<li>判断是不是的</li>\n<li>返回<code>true/false</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六节-jQuery中的事件\"><a href=\"#第六节-jQuery中的事件\" class=\"headerlink\" title=\"第六节 jQuery中的事件\"></a>第六节 jQuery中的事件</h3><hr>\n<ul>\n<li><p><strong>事件对象的属性</strong></p>\n<ul>\n<li><p><code>event.type</code>：获取事件的类型</p>\n</li>\n<li><p><code>event.target</code>:获取到触发事件的元素</p>\n</li>\n<li><p><code>event.preventDefault</code>方法 阻止默认事件行为</p>\n</li>\n<li><p><code>event.stopPropagation()</code>阻止事件的冒泡</p>\n</li>\n<li><p><code>keyCode</code>：只针对于<code>keypress</code>事件，获取键盘键数字 按下回车，<code>13 </code></p>\n</li>\n<li><p><code>event.pageX / event.pageY</code> 获取到光标相对于页面文档的<code>x</code>坐标和<code>y</code>坐标</p>\n<ul>\n<li> 如果没有<code>jQuery</code>，在IE浏览器中用<code>event.x</code> / <code>event.y</code>;在<code>Firefox</code>浏览器中用<code>event.pageX</code> / <code>event.pageY</code>。如果页面上有滚动条还要加上滚动条的宽度和高度</li>\n</ul>\n</li>\n<li><p><code>event.clientX</code>：光标对于浏览器窗口的水平坐标</p>\n</li>\n<li><p><code>event.clientY</code>：光标对于浏览器窗口的垂直坐标</p>\n</li>\n<li><p><code>event.screenX</code>：光标对于电脑屏幕的水平坐标    电脑屏幕</p>\n</li>\n<li><p><code>event.screenY</code>：光标对于电脑屏幕的水平坐标</p>\n</li>\n<li><p> <code>event.which</code> 该方法的作用是在鼠标单击事件中获取到鼠标的左、中、右键，和在键盘事件中的按键 <code>1</code>代表左键  <code>2</code>代表中键  <code>3</code>代表右键</p>\n</li>\n</ul>\n</li>\n<li><p><strong>事件冒泡</strong></p>\n<ul>\n<li>什么是冒泡<ul>\n<li>在页面上可以有多个事件，也可以多个元素影响同一个元素</li>\n<li>从里到外</li>\n<li>嵌套关系</li>\n<li>相同事件</li>\n<li>其中的某一父类没有相同事件时,继续向上查找</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>停止事件冒泡</strong></p>\n<ul>\n<li>停止事件冒泡可以阻止事件中其他对象的事件处理函数被执行</li>\n<li>在<code>jQuery</code>中提供了**<code>stopPropagation()</code>**方法</li>\n</ul>\n</li>\n<li><p><strong>阻止默认行为</strong></p>\n<ul>\n<li>网页中元素有自己的默认行为，例如：单击超链接后会跳转、单击提交后表单会提交，有时需要阻止元素的默认行为</li>\n<li>在<code>jQuery</code>中提供了<code> preventDefault()</code>方法来阻止元素的默认行为</li>\n</ul>\n</li>\n<li><p><strong>事件捕获</strong></p>\n<ul>\n<li>事件捕获和冒泡是相反的过程，事件捕获是从最顶端往下开始触发</li>\n<li>并非所有的浏览器都支持事件捕获，并且这个缺陷无法通过<code>JavaScript</code>来修复。<code>jQuery</code>不支持事件捕获，如需要用事件捕获，要用原生的<code>JavaScript</code></li>\n</ul>\n</li>\n<li><p><strong>绑定自定义事件</strong></p>\n<ul>\n<li><code>trigger(参数1,参数2)</code>：方法触发被选元素的自定义指定事件类型</li>\n<li>参数1:自己定义的事件</li>\n<li>参数2:自己传入的参数</li>\n<li>例如：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#demo&#x27;</span>).on(<span class=\"string\">&#x27;eat&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,a</span>)</span>&#123; <span class=\"comment\">// a就是传入的[100]</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">&#x27;#demo&#x27;</span>).tigger(<span class=\"string\">&#x27;eat&#x27;</span>,[<span class=\"number\">100</span>]);</span><br></pre></td></tr></table></figure></li>\n<li>会事件冒泡</li>\n</ul>\n</li>\n<li><p><strong><code>on()</code>;事件绑定方法</strong></p>\n<ul>\n<li><p><code>on(events,[selector],[data],fn);</code></p>\n</li>\n<li><p><code>on(事件类型,事件源,额外数据,执行函数)</code></p>\n</li>\n<li><p><strong><code>bind()</code>;绑定，旧版本的</strong></p>\n</li>\n<li><p>为匹配元素绑定处理方法</p>\n</li>\n<li><p>需要给一个元素添加多个事件 ，事件执行一样时候</p>\n</li>\n<li><p><code>one()</code>：只执行一次</p>\n</li>\n</ul>\n</li>\n<li><p><strong><code>off()</code>;取消事件绑定方法</strong></p>\n<ul>\n<li>off(events,[selector],fn);</li>\n<li>off(事件类型,事件源,执行函数)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>绑定特定事件类型方法</strong>：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>页面载入方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>页面载入</td>\n<td><code>ready(fn)</code></td>\n<td>当<code>DOM</code>载入就绪可以绑定一个要执行的函数</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>事件绑定（解除绑定）方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事件绑定</td>\n<td><code>on(type,[selector],[data],fn)</code></td>\n<td>在选择元素上绑定一个或者多个事件处理函数，[data]是参数，[selector]是事件源对象</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>off()</code></td>\n<td>移除<code>on</code>绑定的事件，可以添加事件源，分别取消事件,添加事件</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>one()</code></td>\n<td>只触发绑定事件一次</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>bind(type,[data],fn)</code></td>\n<td>为每个匹配元素的特定事件绑定一个事件处理函数</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>unblind()</code></td>\n<td>解除绑定</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>delegate(selector,eventType,handler)</code></td>\n<td>为所有选择匹配元素附加一个或多个事件处理函数</td>\n</tr>\n<tr>\n<td>事件绑定</td>\n<td><code>undelegate()</code></td>\n<td>移除绑定</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>事件动态方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事件动态</td>\n<td><code>live(type,fn)</code></td>\n<td>对动态生成的元素进行事件绑定</td>\n</tr>\n<tr>\n<td>事件动态</td>\n<td><code>die(type,fn)</code></td>\n<td>移除<code>live()</code>绑定的事件</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>鼠标交互方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交互事件</td>\n<td><code>click()</code></td>\n<td>当鼠标指针点击元素时，触发<code>click</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mousedown()</code></td>\n<td>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 <code>mousedow</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mouseenter()</code></td>\n<td>鼠标指针移动到元素上时触发<code>mouseenter</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mouseleave()</code></td>\n<td>当鼠标指针离开元素时，会发生<code>mouseleave</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mousemove()</code></td>\n<td>当鼠标指针在指定的元素中移动时，就会发生<code>mousemove</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mouseout()</code></td>\n<td>当鼠标指针从元素上移开时，发生<code>mouseout</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mouseover()</code></td>\n<td>当鼠标指针位于元素上方时，会发生<code>mouseover</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>mouseup()</code></td>\n<td>当在元素上放松鼠标按钮时，会发生<code>mouseup</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>blur()</code></td>\n<td>当元素失去焦点时触发<code>blur</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>focus()</code></td>\n<td>当元素获得焦点时，触发<code>focus</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>hover()</code></td>\n<td>鼠标移入移出触发<code>hover</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>toggle(fn1,fn2,[fn3],[fn4])</code></td>\n<td>每单击后依次调用函数</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>change()</code></td>\n<td>当元素的值发生改变时，会发生<code>change</code>方法</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td><code>submit()</code></td>\n<td>当提交表单时，会发生<code>submit</code>方法</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>键盘交互方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>键盘事件</td>\n<td><code>keydown</code></td>\n<td>当键盘或按钮被按下时，发生<code>keydown</code>事件。</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>keypress</code></td>\n<td>当键盘按键被按下并释放一个键时发生<code>keypress</code>事件</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td><code>keyup</code></td>\n<td>当按钮被松开时，发生<code>keyup</code>事件。它发生在当前获得焦点的元素上</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>窗口操作方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>窗口操作</td>\n<td><code>resize(fn)</code></td>\n<td>绑定一个处理函数,当调整浏览器窗口的大小时，发生 resize 事件,规定当发生 resize 事件时运行的函数。</td>\n</tr>\n<tr>\n<td>窗口操作</td>\n<td><code>scroll(fn)</code></td>\n<td>绑定一个处理函数,当用户滚动指定的元素时，会发生 scroll 事件,规定当发生 scroll 事件时运行的函数。</td>\n</tr>\n</tbody></table>\n<h3 id=\"第七节-jQuery动画\"><a href=\"#第七节-jQuery动画\" class=\"headerlink\" title=\"第七节 jQuery动画\"></a>第七节 jQuery动画</h3><hr>\n<ul>\n<li><code>JavaScrip</code>t语言本身不支持动画设计，必须通过改变<code>CSS</code>来实现动画效果</li>\n</ul>\n<p><strong>显隐动画</strong></p>\n<ul>\n<li><p><code>show()</code>:显示 <code>hide()</code>:隐藏</p>\n<ul>\n<li>原理：<code>hide()</code>通过改变元素的高度宽度和不透明度，直到这三个属性值到<code>0</code></li>\n<li><code>show()</code>从上到下增加元素的高度，从左到右增加元素宽度，从<code>0</code>到<code>1</code>增加透明度，直至内容完全可见</li>\n<li>参数：<ul>\n<li><code>show(speed,callback)</code><ul>\n<li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li>\n<li><code>callback</code>: 动画完成时执行的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>显示和隐藏式一对密不可分的动画形式</p>\n</li>\n<li><p><strong>显隐切换</strong></p>\n<ul>\n<li><code>toggle()</code>:切换元素的可见状态<ul>\n<li>原理：匹配元素的宽度、高度以及不透明度，同时进行动画，隐藏动画后将<code>display</code>设置为<code>none</code></li>\n<li>参数：<ul>\n<li><code>toggle(speed)</code></li>\n<li><code>toggle(speed,callback)</code></li>\n<li><code>toggle(boolean)</code><ul>\n<li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li>\n<li><code>easing</code>： 使用哪个缓冲函数来过渡的字符串(<code>linear</code>/<code>swing</code>)</li>\n<li><code>callback</code>： 动画完成时执行的方法</li>\n<li><code>boolean</code>:<code>true</code>为显示 <code>false</code>为隐藏</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>滑动</strong></p>\n<ul>\n<li><p> <strong>显隐滑动效果</strong></p>\n</li>\n<li><p><code>slideDown()</code>:滑动显示</p>\n</li>\n<li><p><code>slideUp()</code>:滑动隐藏</p>\n</li>\n<li><p>参数:</p>\n<ul>\n<li><code>slideDown(speed,callback)</code></li>\n<li><code>slideUp(speed,callback)</code></li>\n</ul>\n</li>\n<li><p><strong>显隐切换滑动</strong></p>\n<ul>\n<li><code>slideToggle()</code>:显隐滑动切换</li>\n<li>参数:<ul>\n<li><code>slideToggle(speed,callback)</code></li>\n</ul>\n</li>\n<li>如果是显示的，那么滑动隐藏</li>\n<li>如果是隐藏的，那么滑动显示</li>\n</ul>\n</li>\n</ul>\n<p><strong>渐变：通过改变不透明度</strong></p>\n<ul>\n<li><p><strong>淡入淡出</strong></p>\n<ul>\n<li><code>fadeIn()</code> 淡入,使用透明度效果显示选中的元素</li>\n<li><code>fadeOut()</code> 淡出，使用透明度效果隐藏选中的元素</li>\n<li>参数：<ul>\n<li><code>fadeIn(speed,callback)</code></li>\n<li><code>fadeOut(speed,callback)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>设置淡出透明效果</strong></p>\n<ul>\n<li><code>fadeTo()</code>⁭：以渐进的方式调整到指定透明度</li>\n<li>参数：<ul>\n<li><code>fadeTo(speed,opacity,callback)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p> <strong>渐变切换:结合<code>fadeIn</code>和<code>fadeOut</code></strong></p>\n</li>\n<li><p><code>fadeToggle()</code></p>\n<ul>\n<li>参数:<ul>\n<li><code>fadeOut(speed,callback)</code></li>\n</ul>\n</li>\n<li>如果是显示的，那么淡入</li>\n<li>如果是隐藏的，那么淡出</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>自定义动画：<code>animate()</code></strong><ul>\n<li>注意：在使用<code>animate</code>方法之前，为了影响该元素的<code>top</code>  <code> left</code> <code>bottom</code>  <code>right</code>样式属性，必须先把元素的<code>position</code>样式设置为<code>relative</code>或者<code>absolute</code></li>\n<li><strong>animate()</strong> 方法有四个参数<ul>\n<li><strong>animate({变化参数},’时间’,’运动速率’,’回调函数’)</strong></li>\n<li><strong>变化参数</strong><ul>\n<li>比如：<code>width</code>,<code>height</code></li>\n</ul>\n</li>\n<li><strong>回调函数</strong><ul>\n<li>执行完动画返回的结果，也可以进行下一次动画</li>\n</ul>\n</li>\n<li><strong>运动速率</strong><ul>\n<li><code>linear</code>代表匀速（直线）运动</li>\n<li><code>swing</code>代表慢快慢的运动</li>\n<li><code>jQuery</code>当中就提供了这两种速率，如果想要更多效果，可以引入<code>jQuery</code>插件:<code>jquery.sasing.js</code></li>\n<li><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/jQ/easing.jpg\" alt=\"easing插件的效果\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>停止元素的动画</strong><ul>\n<li>很多时候需要停止匹配正在进行的动画，需要使用stop()</li>\n<li><code>stop()</code>语法结构：<code>stop([clearQueue],[gotoEnd]);</code><ul>\n<li>都是可选参数，为布尔值<ul>\n<li>第一个参数，是否停止后续所有运动，<code>false</code>，不停止，<code>true</code>，停止</li>\n<li>第二个参数：是否立即到达当前目标点，<code>false</code>：不到达，<code>true</code>：到达</li>\n</ul>\n</li>\n<li>如果直接使用<code>stop()</code>方法，会立即停止当前正在进行的动画</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>判断元素是否处于动画状态</strong><ul>\n<li>如果不处于动画状态，则为元素添加新的动画，否则不添加<br><code>if(!$(element).is(&quot;:animated&quot;))&#123; //判断元素是否处于动画状态&#125;</code></li>\n<li>这个方法在<code>animate</code>动画中经常被用到，需要注意</li>\n</ul>\n</li>\n<li><strong>延迟动画：delay()</strong><ul>\n<li>在动画执行过程中，如果你想对动画进行延迟操作，那么使用<code>delay()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>用<code>animate</code>模拟<code>show()</code>:</li>\n<li><code>show</code>: 表示由透明到不透明</li>\n<li><code>toggle</code>: 切换</li>\n<li><code>hide</code>:表示由显示到隐藏</li>\n</ul>\n<blockquote>\n<p>里面可以用各种样式，也可以设置事件，<code>linear</code>代表匀速（直线）运动，<code>swing</code>代表慢快慢的运动</p>\n</blockquote>\n<ul>\n<li><strong>动画方法总结</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>hide()</code>和<code>show()</code></td>\n<td>同时修改多个样式属性即高度和宽度和不透明度</td>\n</tr>\n<tr>\n<td><code>fadeIn()</code></td>\n<td>使用透明度效果,显示隐藏的元素</td>\n</tr>\n<tr>\n<td><code>fadeOut()</code></td>\n<td>使用透明度效果,隐藏显示的效果</td>\n</tr>\n<tr>\n<td><code>slideUp()</code></td>\n<td>使用滑动效果,隐藏选中的元素</td>\n</tr>\n<tr>\n<td><code>slideDown()</code></td>\n<td>使用滑动效果,显示隐藏的效果</td>\n</tr>\n<tr>\n<td><code>fadeTo()</code></td>\n<td>只改变不透明度</td>\n</tr>\n<tr>\n<td><code>toggle()</code></td>\n<td>用来代替<code>show()</code>和<code>hide()</code>方法，所以会同时修改多个属性即高度、宽度和不透明度</td>\n</tr>\n<tr>\n<td><code>slideToggle()</code></td>\n<td>用来代替<code>slideUp</code>和<code>slideDown()</code>方法，使用滑动效果切换元素的可见状态,如果是可见的,则隐藏,如果是隐藏的则显示,所以只能改变高度</td>\n</tr>\n<tr>\n<td><code>fadeToggle()</code></td>\n<td>用来代替<code>fadeIn()</code>和<code>fadeOut</code>方法，使用透明度效果切换元素的可见状态,如果是可见的,则隐藏,如果是隐藏的则显示,只能改变不透明度</td>\n</tr>\n<tr>\n<td><code>animate()</code></td>\n<td>属于自定义动画，以上各种动画方法都是调用了<code>animate</code>方法。此外，用<code>animate</code>方法还能自定义其他的样式属性，例如：<code>left</code> <code>marginLeft ``scrollTop</code>等</td>\n</tr>\n</tbody></table>\n<h3 id=\"第八节-jQuery工具方法\"><a href=\"#第八节-jQuery工具方法\" class=\"headerlink\" title=\"第八节 jQuery工具方法\"></a>第八节 jQuery工具方法</h3><hr>\n<ul>\n<li><p>实例方法是定义在原型上面</p>\n</li>\n<li><p>定义在<code>jQuery</code>函数上面的方法就叫做工具方法，如：<code>jQuery.type()</code>，<code>$.type()</code></p>\n</li>\n<li><p><strong>type()</strong></p>\n<ul>\n<li>判断数据类型</li>\n<li>原生<code>js</code>里面的判断数据类型<ul>\n<li><code>typeof arr</code>;</li>\n<li><code>arr instanceof Array</code></li>\n<li><code>arr.constructor == &#39;Array&#39;</code></li>\n</ul>\n</li>\n<li><code>Object.prototype.toString.call(arr)</code>;</li>\n</ul>\n</li>\n<li><p><strong>trim()</strong></p>\n</li>\n<li><p>消除两边的空格（字符串中间的空格消除不掉）</p>\n</li>\n<li><p><strong>proxy()</strong></p>\n<ul>\n<li>改变<code>this</code>指向</li>\n<li>参数1：要改变<code>this</code>指向的函数或变量</li>\n<li>参数2：<code>this</code>要指向的函数或变量</li>\n<li>如：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(a + <span class=\"string\">&#x27;&#x27;</span> + b);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aimee&#x27;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> $.proxy(show,obj)(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 把show的this指向obj</span></span><br><span class=\"line\"> <span class=\"comment\">// 在最后还可以传参，也可以这样传参</span></span><br><span class=\"line\"> <span class=\"comment\">// $.proxy(show,obj,1,2);</span></span><br><span class=\"line\"> <span class=\"comment\">// $.proxy(show,obj,1)(2);</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 柯里化的思想</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">nianji,xuehao</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(nianji);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(xuehao);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aimee&#x27;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> fn = $.proxy(show,obj,<span class=\"number\">2014</span>);</span><br><span class=\"line\"> fn(<span class=\"number\">201401010101</span>);</span><br><span class=\"line\"> fn(<span class=\"number\">201402020202</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 不用再次传参,直接传需要的，不用传好几个参数了</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>noConflict()</strong></p>\n<ul>\n<li>防止冲突，如<code>var jq = $.noConflict(removeAll)</code></li>\n</ul>\n</li>\n<li><p>让出变量<code>$</code>的<code>jQuery</code>控制权</p>\n<ul>\n<li>为了防止引用两个类库内的全局变量都是$</li>\n</ul>\n</li>\n<li><p>也是为了可以引用好几个不同版本的jQuery文件</p>\n<ul>\n<li>该方法释放 <code>jQuery</code>对<code>$</code>变量的控制。</li>\n</ul>\n</li>\n<li><p>该方法也可用于为<code>jQuery</code>变量规定新的自定义名称</p>\n</li>\n<li><p><strong>parseJSON()</strong></p>\n<ul>\n<li>解析一个<code>JSON</code>字符串，如<code>var obj = $.parseJSON(&#39;&#123;&quot;name&quot;:&quot;John&quot;&#125;&#39;)</code></li>\n<li>用于将符合标准格式的的<code>JSON</code>字符串转为与之对应的<code>JavaScript</code>对象</li>\n</ul>\n</li>\n<li><p><strong>makeArry()</strong></p>\n</li>\n<li><p>把类数组转换成数组</p>\n</li>\n<li><p><strong>extend()</strong></p>\n<ul>\n<li>定义在了<code>jQuery</code>函数上面</li>\n<li>在<code>jQuery</code>源码当中，有很多的工具方法都是基于<code>extend</code>方法来实现的</li>\n<li>扩展提供了新的<code>jQuery</code>工具方法，用来拓展一个新的工具或实例方法</li>\n<li>这两个函数是一样的，只不过一个是在<code>jQuery</code>方法上面，一个是在<code>prototype</code>上面</li>\n<li><strong>$.extend()</strong></li>\n<li><strong>$.fn.extend()</strong><ul>\n<li><code>fn</code>就是<code>prototype</code>,<code>$.fn</code>就是相当于<code>$.prototype</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>这个<code>extend()</code>定义在了<code>prototype</code>上面</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">用来拓展一个新的工具方法，就是自己在<span class=\"string\">`jQuery`</span>方法上创建一个方法,</span><br><span class=\"line\">    </span><br><span class=\"line\">    $.extend(&#123;</span><br><span class=\"line\">      <span class=\"attr\">leftTrim</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\s+/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.replace(reg,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log($.leftTrim(<span class=\"string\">&#x27;         dg&#x27;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 调用这个 leftTree，就和调用其他的 jQuery 方法一样</span></span><br><span class=\"line\">    <span class=\"comment\">// 作用是消除左侧空格</span></span><br><span class=\"line\"></span><br><span class=\"line\">    用来拓展一个新的实例方法，就是在<span class=\"string\">`jQuery`</span>方法的<span class=\"string\">`prototype`</span>上创建一个方法,</span><br><span class=\"line\">       </span><br><span class=\"line\">    $.fn.extend(&#123;</span><br><span class=\"line\">            <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(selector);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.[<span class=\"number\">0</span>] = dom;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.__proto__ = jQuery.prototype;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">还可以合并对象，<span class=\"string\">`fn.extend`</span>同时适用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">parson1</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dg&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">number</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">parson2</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">30</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">weight</span>: <span class=\"string\">&quot;80kg&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> aa = $.extend(<span class=\"literal\">true</span>,obj,obj2)</span><br><span class=\"line\"><span class=\"comment\">// 把obj2和合并到了obj1</span></span><br><span class=\"line\"><span class=\"comment\">// true是深拷贝，取掉true就是浅拷贝</span></span><br><span class=\"line\"><span class=\"comment\">// 后面相同的会覆盖到前面的</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>Callbacks()</strong></p>\n<ul>\n<li><p>回调函数，返回回调函数对象</p>\n</li>\n<li><p>管理回调队列</p>\n</li>\n<li><p>可以混合搭配，同时使用</p>\n<ul>\n<li><strong>fire()</strong> 执行函数（可执行多次）</li>\n<li><strong>add()</strong> 调取函数（可传参多个）</li>\n<li><strong>once()</strong> 参数，只执行一次<code>fire</code>函数</li>\n<li><strong>unique</strong> 参数，在<code>add</code>调用函数里，相同的函数只执行一遍</li>\n<li><strong>memory</strong> 参数，记忆，<code>fire()</code>后面的函数依旧会被执行</li>\n<li><strong>stopOnFalse</strong> 参数，上个回调函数返回<code>false</code>之后中断后面的回调函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn1&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn2&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn3&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cb = $.Callbacks(<span class=\"string\">&#x27;memory once stopFalse unique&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// memory：fire后面的函数依旧会被执行</span></span><br><span class=\"line\"><span class=\"comment\">// once：fire函数只会执行一次</span></span><br><span class=\"line\"><span class=\"comment\">// stopOnFalse：fn2返回了false，fn3不会被执行，和memory相抵触，没有作用</span></span><br><span class=\"line\"><span class=\"comment\">// unique：在一个add调用函数里面，只执行一遍函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">cb.add(fn1,fn1); <span class=\"comment\">// 调用函数fn1,fn1</span></span><br><span class=\"line\">cb.add(fn2); <span class=\"comment\">// 调用函数fn2</span></span><br><span class=\"line\">cb.fire(); <span class=\"comment\">// 执行函数队列</span></span><br><span class=\"line\">cb.fire(); <span class=\"comment\">// 执行函数队列</span></span><br><span class=\"line\">cb.add(fn3); <span class=\"comment\">// 调用函数fn3</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>Deferred()</strong></p>\n<ul>\n<li>延迟回调对象，相当于有状态的<code>Callbacks()</code></li>\n<li>添加函数<ul>\n<li><strong>done</strong> 对象被受理时，调用添加的处理程序</li>\n<li><strong>fail</strong> 对象被拒绝时，调用添加的处理程序</li>\n<li><strong>progress</strong> 调用正在进行中的对象上进行的回调函数</li>\n</ul>\n</li>\n<li>触发函数<ul>\n<li><strong>resolve</strong> 成功的状态</li>\n<li><strong>reject</strong> 失败的状态</li>\n<li><strong>notity</strong> 进行中的状态</li>\n<li><strong>promise</strong> 不能触发函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dtd = $.Deferred();  <span class=\"comment\">// 让一个变量代替Deferred，解决重复使用</span></span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;dtd.notify()&#125;,<span class=\"number\">500</span>)<span class=\"comment\">// notity()，进行中的状态</span></span><br><span class=\"line\"> <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;dtd.reje <span class=\"comment\">// 成功和失败的状态不会改变，如果失败就不会执行成功了，但是进行中可以改变状ct()&#125;,1000)// reject()，失败的状态</span></span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;dtd.resolve()&#125;,<span class=\"number\">2000</span>)<span class=\"comment\">// resolve()，成功的状态</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dtd.promise(); <span class=\"comment\">// 返回dtd函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cb = demo(); <span class=\"comment\">// 闭包，接受dtd函数</span></span><br><span class=\"line\"><span class=\"comment\">//cb.resolve(); 这个不可以在外面执行了，因为dtd返回的是只读的Deferred对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">cb.done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// done，对象成功的时候调用</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;OK&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.fail(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// fail，对象失败的时候调用</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.progress(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// progress，正在进行时调用</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;doing&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 成功和失败的状态不会改变，如果失败就不会执行成功了，但是进行中可以改变状态</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>when()</strong></p>\n<ul>\n<li>里面传的参数是<code>Deferred</code>对象</li>\n<li>执行完之后会<code>return</code>出来一个<code>Deferred</code>对象</li>\n<li>当<code>when</code>里面传的几个<code>Deferred</code>对象，同时都为成功的状态时，才能触发<code>done</code>里面的内容，但凡有一个失败的，就会执行<code>fail</code>里面的内容<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aa</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dtd = $.Deferred();<span class=\"comment\">// 让回调函数有转台</span></span><br><span class=\"line\">  dtd.resolve(); <span class=\"comment\">// 成功的状态</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dtd.promise(); <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dtd = $.Deferred(); <span class=\"comment\">// 让回调函数有转台</span></span><br><span class=\"line\">  dtd.resolve();<span class=\"comment\">// 成功的状态</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dtd.promise();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cb = aa();</span><br><span class=\"line\"><span class=\"keyword\">var</span> cb2 = bb();</span><br><span class=\"line\"></span><br><span class=\"line\">$.when(cb,cb2)</span><br><span class=\"line\">.done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;OK&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.fail(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.progress(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;doing&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第九节-jQuery与Ajax\"><a href=\"#第九节-jQuery与Ajax\" class=\"headerlink\" title=\"第九节 jQuery与Ajax\"></a>第九节 jQuery与Ajax</h3><hr>\n<ul>\n<li><strong>Ajax</strong>简介 :<ul>\n<li> <code>Asynchronous Javascript And XML</code> （异步的<br><code>JavaScript</code>和<code>XML</code>）</li>\n<li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li>\n</ul>\n</li>\n<li><strong><code>Ajax</code>优势与不足</strong><ul>\n<li><strong><code>Ajax</code>优势</strong><ul>\n<li>优秀的用户体验<ul>\n<li>这是<code>Ajax</code>下最大的有点，能在不刷新整个页面前提下更新数据</li>\n</ul>\n</li>\n<li>提高<code>web</code>程序的性能<ul>\n<li> 与传统模式相比，<code>Ajax</code>模式在性能上最大的区别在于传输数据的方式，在传统模式中，数据的提交时通过表单来实现的。<code>Ajax</code>模式只是通过<code>XMLHttpRequest</code>对象向服务器提交希望提交的数据，即按需发送</li>\n</ul>\n</li>\n<li>减轻服务器和带宽的负担<ul>\n<li> <code>Ajax</code>的工作原理相当于在用户和服务器之间加了一个中间层，似用户操作与服务器响应异步化。它在客户端创建<code>Ajax</code>引擎，把传统方式下的一些服务器负担的工作转移到客户端，便于客户端资源来处理，减轻服务器和带宽的负担</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Ajax的不足</strong><ul>\n<li>浏览器对<code>XMLHttpRequest</code>对象的支持度不足</li>\n<li>破坏浏览器前进、后退按钮的正常功能</li>\n<li>对搜索引擎的支持的不足</li>\n<li>开发和调试工具的缺乏</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建一个Ajax请求\"><a href=\"#创建一个Ajax请求\" class=\"headerlink\" title=\"创建一个Ajax请求\"></a>创建一个Ajax请求</h4><hr>\n<ul>\n<li><p><strong><code>serialize()</code></strong> 方法</p>\n<ul>\n<li>串联表单对象，序列表表格内容为字符串，用于 Ajax 请求。</li>\n</ul>\n</li>\n<li><p><strong><code>serializeArray()</code></strong> 方法</p>\n<ul>\n<li>把串联表单对象的形式用数组表示出来</li>\n</ul>\n</li>\n<li><p><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成</p>\n</li>\n<li><p><strong>创建<code>ajax</code>对象 <code>var xhr = new XMLHttpRequest();</code></strong></p>\n</li>\n<li><p><strong>准备发送请求</strong></p>\n<ul>\n<li><p><strong><code>get</code> / <code>post</code></strong></p>\n<ul>\n<li><p><strong><code>get</code></strong></p>\n<ul>\n<li>传递的数据放在<code>URL</code>后面</li>\n<li>中文编码 <code>encodeURI( &#39;&#39; )</code>;</li>\n<li>缓存 在数据后面加上随机数或者日期对象或者……</li>\n</ul>\n</li>\n<li><p><strong><code>post</code></strong></p>\n<ul>\n<li>传递的数据放在<code>send()</code>里面，并且一定要规定数据格式</li>\n<li>没有缓存问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>form</code>表单中:</p>\n<ul>\n<li><code>action</code>:<ul>\n<li><code>method</code>: (默认是<code> get</code>)</li>\n</ul>\n</li>\n<li><code>get</code>: 会在<code>url</code>里面以 <code>name=value</code> , 两个数据之间用 <code>&amp;</code> 连接</li>\n<li><code>post</code>:</li>\n</ul>\n</li>\n<li><p><code>enctype</code>: <code>&quot;application/x-www-form-urlencoded&quot;</code></p>\n</li>\n<li><p><code>url</code></p>\n</li>\n<li><p>是否异步</p>\n<ul>\n<li>同步(<code>false</code>)：阻塞</li>\n<li>异步(<code>true</code>)：非阻塞</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>正式发送请求</strong></p>\n</li>\n<li><p><strong><code>ajax</code>请求处理过程</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\talert( xhr.responseText );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>onreadystatechange</code> ：当处理过程发生变化的时候执行下面的函数</p>\n</li>\n<li><p><code>readyState</code> ：<code>ajax</code>处理过程</p>\n<ul>\n<li>0：请求未初始化（还没有调用 <code>open()</code>）。</li>\n<li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）。</li>\n<li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li>\n<li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li>\n<li>4：响应已完成；您可以获取并使用服务器的响应了。</li>\n</ul>\n</li>\n<li><p><code>responseText</code> ：请求服务器返回的数据存在该属性里面</p>\n</li>\n<li><p><code>status</code> : <code>http</code>状态码</p>\n</li>\n</ul>\n<p><img src=\"https://raw.sevencdn.com/HAODEabcd/Note/master/Web/jQ/HTTP.jpg\" alt=\"HTTP状态码\"></p>\n<ul>\n<li>案例：<code>ajax</code>封装案例</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ajax请求后台数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn =  <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tajax(&#123;<span class=\"comment\">//json格式</span></span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>:<span class=\"string\">&quot;post.php&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>:<span class=\"string\">&quot;username=poetries&amp;pwd=123456&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">asyn</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//封装ajax</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">aJson</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ajx = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> type = aJson.type || <span class=\"string\">&quot;get&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> asyn = aJson.asyn || <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> url = aJson.url;\t\t<span class=\"comment\">// url 接收 传输位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> success = aJson.success;<span class=\"comment\">// success 接收 传输完成后的回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> data = aJson.data || <span class=\"string\">&#x27;&#x27;</span>;<span class=\"comment\">// data 接收需要附带传输的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;<span class=\"comment\">//兼容处理</span></span><br><span class=\"line\">\t\tajx = <span class=\"keyword\">new</span> XMLHttpRequest();<span class=\"comment\">//一般浏览器</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tajx = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);<span class=\"comment\">//IE6+</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (type == <span class=\"string\">&quot;get&quot;</span> &amp;&amp; data)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\turl +=<span class=\"string\">&quot;/?&quot;</span>+data+<span class=\"string\">&quot;&amp;&quot;</span>+<span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化ajax请求</span></span><br><span class=\"line\">\tajx.open( type , url , asyn );</span><br><span class=\"line\">\t<span class=\"comment\">//规定传输数据的格式</span></span><br><span class=\"line\">\tajx.setRequestHeader(<span class=\"string\">&#x27;content-type&#x27;</span>,<span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//发送ajax请求（包括post数据的传输）</span></span><br><span class=\"line\">\ttype == <span class=\"string\">&quot;get&quot;</span> ?ajx.send():ajx.send(aJson.data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//处理请求</span></span><br><span class=\"line\">\tajx.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aJson</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ajx.readState == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ajx.status == <span class=\"number\">200</span> &amp;&amp; ajx.status&lt;<span class=\"number\">300</span>)<span class=\"comment\">//200是HTTP 请求成功的状态码</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//请求成功处理数据</span></span><br><span class=\"line\">\t\t\tsuccess &amp;&amp; success(ajx.responseText);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;请求出错&quot;</span>+ajx.status);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"jQuery中的Ajax-补充部分–来自锋利的jQuery\"><a href=\"#jQuery中的Ajax-补充部分–来自锋利的jQuery\" class=\"headerlink\" title=\"jQuery中的Ajax  [补充部分–来自锋利的jQuery]\"></a>jQuery中的Ajax  [补充部分–来自锋利的jQuery]</h4><hr>\n<p><code>jquery</code>对<code>Ajax</code>操作进行了封装，在<code>jquery</code>中的<code>$.ajax()</code>方法属于最底层的方法，第<code>2</code>层是<code>load()</code>、<code>$.get()</code>、<code>$.post();</code>第<code>3</code>层是<code>$.getScript()</code>、<code>$.getJSON()</code>，第<code>2</code>层使用频率很高</p>\n<h5 id=\"load-方法\"><a href=\"#load-方法\" class=\"headerlink\" title=\"load()方法\"></a><code>load()</code>方法</h5><hr>\n<ul>\n<li><code>load()</code>方法是<code>jquery</code>中最简单和常用的<code>ajax</code>方法，能载入远程<code>HTML</code>代码并插入<code>DOM</code>中 结构为：<code>load(url,[data],[callback])</code></li>\n<li>使用<code>url</code>参数指定选择符可以加载页面内的某些元素 <code>load</code>方法中<code>url</code>语法：<code>url selector</code> 注意：<code>url</code>和选择器之间有一个空格</li>\n<li>传递方式<ul>\n<li><code>load()</code>方法的传递方式根据参数<code>data</code>来自动指定，如果没有参数传递，则采用<code>GET</code>方式传递，反之，采用<code>POST</code></li>\n</ul>\n</li>\n<li>回调参数<ul>\n<li>必须在加载完成后才执行的操作，该函数有三个参数 分别代表请求返回的内容、请求状态、<code>XMLHttpRequest</code>对象</li>\n<li>只要请求完成，回调函数就会被触发</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#testTest&quot;</span>).load(<span class=\"string\">&quot;test.html&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseText,textStatus,XMLHttpRequest</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//respnoseText 请求返回的内容</span></span><br><span class=\"line\">    <span class=\"comment\">//textStatus 请求状态 ：sucess、error、notmodified、timeout</span></span><br><span class=\"line\">    <span class=\"comment\">//XMLHttpRequest</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>load方法参数</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>请求<code>HTML</code>页面的<code>URL</code>地址</td>\n</tr>\n<tr>\n<td><code>data(可选)</code></td>\n<td><code>Object</code></td>\n<td>发送至服务器的<code>key</code> / <code>value</code>数据</td>\n</tr>\n<tr>\n<td><code>callback(可选)</code></td>\n<td><code>Function</code></td>\n<td>请求完成时的回调函数，无论是请求成功还是失败</td>\n</tr>\n</tbody></table>\n<h5 id=\"get-和-post-方法\"><a href=\"#get-和-post-方法\" class=\"headerlink\" title=\"$.get()和$.post()方法\"></a>$.get()和$.post()方法</h5><hr>\n<p><code>load()</code>方法通常用来从web服务器上获取静态的数据文件。在项目中需要传递一些参数给服务器中的页面，那么可以使用<code>$.get()</code>和<code>$.post()</code>或<code>$.ajax()</code>方法</p>\n<ul>\n<li><p>注意：<code>$.get()</code>和<code>$.post()</code>方法是<code>jquery</code>中的全局函数</p>\n</li>\n<li><p><strong>$.get()方法</strong></p>\n<ul>\n<li><code>$.get()</code>方法使用<code>GET</code>方式来进行异步请求</li>\n<li>结构为：<code>$.get(url,[data],callback,type)</code><ul>\n<li>如果服务器返回的内容格式是<code>xml</code>文档，需要在服务器端设置<code>Content-Type</code>类型 代码如下：<code>header(&quot;Content-Type:text/xml:charset=utf-8&quot;)</code> //<code>php</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>$.get()</code>方法参数解析</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>请求<code>HTML</code>页的地址</td>\n</tr>\n<tr>\n<td><code>data(可选)</code></td>\n<td><code>Object</code></td>\n<td>发送至服务器的<code>key</code>/ <code>value</code> 数据会作为<code>QueryString</code>附加到请求URL中</td>\n</tr>\n<tr>\n<td><code>callback(可选)</code></td>\n<td><code>Function</code></td>\n<td>载入成功的回调函数（只有当<code>Response</code>的返回状态是success才调用该方法）</td>\n</tr>\n<tr>\n<td><code>type(可选)</code></td>\n<td><code>String</code></td>\n<td>服务器返回内容的格式，包括<code>xml</code>、<code>html</code>、<code>script</code>、<code>json</code>、<code>text</code>和<code>_default</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><strong>$.post()方法</strong></p>\n<ul>\n<li>它与<code>$.get()</code>方法的结构和使用方式相同，有如下区别<ul>\n<li><code>GET</code>请求会将参数跟张乃URL后进行传递，而<code>POST</code>请求则是作为<code>Http</code>消息的实体内容发送给web服务器，在<code>ajax</code>请求中，这种区别对用户不可见</li>\n<li><code>GET</code>方式对传输数据有大小限制（通常不能大于<code>2KB</code>），而使用<code>POST</code>方式传递的数据量要比<code>GET</code>方式大得多（理论不受限制）</li>\n<li><code>GET</code>方式请求的数据会被浏览器缓存起来，因此其他人可以从浏览器的历史纪录中读取这些数据，如：账号、密码。在某种情况下，<code>GET</code>方式会带来严重的安全问题，而<code>POST</code>相对来说可以避免这些问题</li>\n<li><code>GET</code>和<code>POST</code>方式传递的数据在服务端的获取也不相同。在<code>PHP</code>中，<code>GET</code>方式用<code>$_GET[]</code>获取；<code>POST</code>方式用<code>$_POST[]</code>获取;两种方式都可用<code>$_REQUEST[]</code>来获取</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>总结</strong></p>\n<ul>\n<li>使用<code>load()</code>、<code>$.get()</code>和<code>$.post()</code>方法完成了一些常规的<code>Ajax</code>程序，如果还需要复杂的<code>Ajax</code>程序，就需要用到<code>$.ajax()</code>方式</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"ajax-方法\"><a href=\"#ajax-方法\" class=\"headerlink\" title=\"$.ajax()方法\"></a>$.ajax()方法</h5><hr>\n<ul>\n<li><code>$.ajax()</code>方法是<code>jquery</code>最底层的<code>Ajax</code>实现，它的结构为<code>$.ajax(options)</code></li>\n<li>该方法只有一个参数，但在这个对象里包含了<code>$.ajax()</code>方式所需要的请求设置以及回调函等信息，参数以<code>key</code> / <code>value</code>存在，所有参数都是可选的</li>\n<li><strong>$.ajax()方式常用参数解析</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>(默认为当前页地址)发送请求的地址</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td><code>String</code></td>\n<td>请求方式（<code>POST</code>或<code>GET</code>）默认为<code>GET</code></td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><code>Number</code></td>\n<td>设置请求超时时间（毫秒）</td>\n</tr>\n<tr>\n<td><code>data</code></td>\n<td><code>string</code></td>\n<td>传输数据</td>\n</tr>\n<tr>\n<td><code>context</code></td>\n<td></td>\n<td>回调函数的作用域</td>\n</tr>\n<tr>\n<td><code>async</code></td>\n<td><code>boolean</code></td>\n<td>是否异步，默认true</td>\n</tr>\n<tr>\n<td><code>cache</code></td>\n<td><code>boolean</code></td>\n<td>是否缓存，默认<code>true</code></td>\n</tr>\n<tr>\n<td><code>crossDomain</code></td>\n<td><code>boolean</code></td>\n<td>同域请求为false，跨域请求为true</td>\n</tr>\n<tr>\n<td><code>dataType</code></td>\n<td><code>String</code></td>\n<td>预期服务器返回的类型。可用的类型如下<br /><br /> <strong>xml</strong>:返回<code>XML</code>文档，可用<code>jquery</code>处理<br /><strong>html</strong>:返回纯文本的<code>HTML</code>信息，包含的<code>script</code>标签也会在插入<code>DOM</code>时执行<br /><strong>script</strong>：返回纯文本的<code>javascript</code>代码。不会自动缓存结果，除非设置<code>cache</code>参数。注意：在远程请求时，所有的<code>POST</code>请求都将转为<code>GET</code>请求<br /><strong>json</strong>:返回<code>JSON</code>数据<br /><strong>jsonp</strong>:<code>JSONP</code>格式，使用<code>jsonp</code>形式调用函数时，例如：<code>myurl?call back=?,jquery</code>将自动替换后一个<code>？</code>为正确的函数名，以执行回调函数<br /><strong>text</strong>:返回纯文本字符串</td>\n</tr>\n<tr>\n<td><code>beforeSend</code></td>\n<td><code>Function</code></td>\n<td>发送请求前可以修改<code>XMLHttpRequest</code>对象的函数，例如添加自定义<code>HTTP</code>头。在<code>beforeSend</code>中如果返回<code>false</code>可以取消本次<code>Ajax</code>请求。<code>XMLHttpRequest</code>对象是唯一的参数<br /> function(XMLHttpRequest){<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br>}</td>\n</tr>\n<tr>\n<td><code>complete</code></td>\n<td><code>Function</code></td>\n<td>请求完成后的回调函数（请求成功或失败时都调用）<br /> 参数：<code>XMLHttpRequest</code>对象和一个描述成功请求类型的字符串<br />function(XMLHttpRequest,textStatus){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次Ajax请求时传递的<code>options</code>参数<br>}</td>\n</tr>\n<tr>\n<td><code>success</code></td>\n<td><code>Function</code></td>\n<td>请求成功后调用的回调函数，有两个参数<br />(1)由服务器返回，并根据<code>dataTyppe</code>参数进行处理后的数据<br />(2)描述状态的字符串<br /><code>function</code>(data,textStatus){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<code>data</code>可能是<code>xmlDoc、``jsonObj</code>、<code>html</code>、<code>text</code>等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br />}</td>\n</tr>\n<tr>\n<td><code>error</code></td>\n<td><code>Function</code></td>\n<td>请求失败时被调用的函数</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td><code>Boolean</code></td>\n<td>默认为<code>true</code>。表示是否触发全局<code>Ajax</code>事件，设置为<code>false</code>将不会触发。<code>AjaxStart</code>或<code>AjaxStop</code>可用于控制各种<code>Ajax</code>事件</td>\n</tr>\n</tbody></table>\n<h3 id=\"第十节-插件\"><a href=\"#第十节-插件\" class=\"headerlink\" title=\"第十节 插件\"></a>第十节 插件</h3><hr>\n<ul>\n<li><p><strong>什么是插件</strong></p>\n<ul>\n<li>插件(<code>Plugin</code>)也称为<code>jQuery</code>的扩展。以<code>jQuery</code>核心代码为基础编写的符合一定规范的应用程序。通过<code>js</code>文件的方式引用。</li>\n</ul>\n</li>\n<li><p><strong>插件分为哪几类</strong></p>\n<ul>\n<li><code>UI</code>类、表单及验证类、输入类、特效类、<code>Ajax</code>类、滑动类、图形图像类、导航类、综合工具类、动画类等等</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li> <strong>引入插件的步骤</strong></li>\n<li>引入<code>jquery.js</code>文件，而且在所以插件之前引入</li>\n<li>引入插件</li>\n<li>引入插件相关文件，比如皮肤、中文包</li>\n</ul>\n<ul>\n<li><p><strong>如何自定义插件</strong>：</p>\n<ul>\n<li>插件形式分为3类：<ul>\n<li>封装对象方法插件</li>\n<li>封装全局函数插件</li>\n<li>选择器插件(类似于.<code>find()</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>自定义插件的规范</strong>（解决各种插件的冲突和错误，增加成功率）</p>\n<ul>\n<li>命名：<code>jquery.插件名.js</code></li>\n<li>所有的新方法附加在<code>jquery.fn</code>对象上面，所有新功能附加在<code>jquery</code>上</li>\n<li>所有的方法或插件必须用分号结尾，避免出问题</li>\n<li>插件必须返回jQuery对象，便于链式连缀</li>\n<li>避免插件内部使用<code>$</code>，如果要使用，请传递<code>jQuery</code>(<code>$</code>并不是总等于<code>jQuery</code>，另外其他<code>js</code>框架也可能使用<code>$</code>)</li>\n<li>插件中的<code>this</code>应该指向<code>jQuery</code>对象</li>\n<li>使用<code>this.each()</code>迭代元素</li>\n</ul>\n</li>\n<li><p><strong>自定义插件案例</strong></p>\n<ul>\n<li>为了方便用户创建插件，<code>jQuery</code>提供了 <code>jQuery.extend()</code> 和 <code>jQuery.fn.extend()</code></li>\n<li><code>jQuery.extend()</code>：创建工具函数或者是选择器</li>\n<li><code>jQuery.fn.extend()</code>：创建<code>jQuery</code>对象命令  （<code>fn</code>相当于<code>prototype</code>的别名）</li>\n</ul>\n</li>\n<li><p><strong><code>jQuery</code>官方提供的插件开发模板</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">\t$.fn.plugin=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> defaults = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//各种参数 各种属性</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> options = $.extend(defaults,options);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//实现功能的代码</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义<code>jQuery</code>函数</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">\t$.extend(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;hello plugin&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义<code>jQuery</code>命令</strong>：</p>\n<ul>\n<li>形式1：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">    $.fn.extend(&#123;</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         alert(<span class=\"string\">&quot;hello plugin&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>形式2：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">\t$.fn.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">&quot;hello plugin&quot;</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jQuery源码\"><a href=\"#jQuery源码\" class=\"headerlink\" title=\"jQuery源码\"></a>jQuery源码</h3><hr>\n<blockquote>\n<p>`jQuery的实例方法是在jQuery的原型上定义的，而jQuery的工具方法就是自己的一个独立的方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">简易jQuery实现</span><br><span class=\"line\"></span><br><span class=\"line\">jQuery中有很多的方法，但是为了避免他们的变量名冲突，所以要把他们的作用域都独立起来，jQuery中使用了立即执行函数</span><br><span class=\"line\"><span class=\"number\">1.</span>命名空间</span><br><span class=\"line\"><span class=\"number\">2.</span>立即执行函数</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// global 是window，factory就是执行的函数，两个都是形参，可以说传什么可以由你决定，但是传别的就和jQuery不一样了，同时jquery没有把他的所有的函数在立即执行函数的函数体执行，而是在实参里面去执行。</span></span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">global</span>,factory</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tfactory(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">    \t</span><br><span class=\"line\">\t&#125;(<span class=\"built_in\">this</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">window</span></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"comment\">// 然而当这样，想在外面执行jQuery(&#x27;demo&#x27;).css().html()就不能执行了，因为jQuery成为了一个独立的作用域，window找不到他的，当然也有解决的办法。如：</span></span><br><span class=\"line\">    \t<span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"comment\">// jQuery 的构造函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jQuery</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.prototype.init(selector);</span><br><span class=\"line\">            <span class=\"comment\">// new的话每次返回的都是一个全新的init对象，因为需要把init和jQuery的作用域独立起来，所以需要new一下，如果不new的话init和jQuery中的函数如果冲突的话会执行init里面的函数。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        jQuery.prototype = &#123;</span><br><span class=\"line\">            <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(selector);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>[<span class=\"number\">0</span>] = dom;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.__proto__ = jQuery.prototype;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// jQuery(&quot;demo&quot;).css();</span></span><br><span class=\"line\">            <span class=\"comment\">// 一开始会报错，因为jQuery中的init的prototype是Object，而Object的方法里没有css这个方法,需要把jQuery中的init的prototype指向jQuery的prototype，如：jQuery.prototype.init.prototype = jQuery.prototype; 或者可以在init函数里面把__proto__指向jQuery.prototype</span></span><br><span class=\"line\">            <span class=\"attr\">css</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;css&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">                <span class=\"comment\">// jQuery最重要的是链式调用，调用css()之后还想调用html()，我们要搞清楚谁调用html()？是jQuery(&#x27;dom&#x27;).css()，也就是css()，但是这时候css返回的是undefined，这时候不可以链式调用，所以我们要把css返回值返回为刚才选中的jQuery的DOM对象，所以要return this，this指向的就是jQuery的DOM对象，一开始jQuery对象中没有html这个方法，但是它自己的prototype上有html这个方法</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">html</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;html&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">init模块就是为了找dom结构的</span><br><span class=\"line\"></span><br><span class=\"line\">传入参数类型：</span><br><span class=\"line\">$(selector)</span><br><span class=\"line\"><span class=\"number\">1.</span>$(<span class=\"string\">&#x27;&#x27;</span>) -- 空字符</span><br><span class=\"line\"><span class=\"number\">2.</span>$(<span class=\"literal\">false</span>/<span class=\"literal\">null</span>/<span class=\"literal\">undefined</span>) -- <span class=\"literal\">null</span>/<span class=\"literal\">false</span>/<span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"number\">3.</span>$(<span class=\"string\">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>) $(<span class=\"string\">&#x27;&lt;li/&gt;123123123&#x27;</span>) $(<span class=\"string\">&#x27;&lt;li&gt;&#x27;</span>,&#123;<span class=\"attr\">html</span>:<span class=\"number\">123</span>&#125;) -- 字符串</span><br><span class=\"line\"><span class=\"number\">4.</span>$(<span class=\"string\">&#x27;#id&#x27;</span>) $(<span class=\"string\">&#x27;.class&#x27;</span>) $(<span class=\"string\">&#x27;div&#x27;</span>) $(<span class=\"string\">&#x27;ul li&#x27;</span>) $(<span class=\"string\">&#x27;li&#x27;</span>,<span class=\"string\">&#x27;ul&#x27;</span>) $(<span class=\"string\">&#x27;li:eq(0)&#x27;</span>) -- 选择器</span><br><span class=\"line\"><span class=\"number\">5.</span>$(dom) -- 原生Dom</span><br><span class=\"line\"><span class=\"number\">6.</span>$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;) -- 函数</span><br><span class=\"line\"><span class=\"number\">7.</span>$($()) -- jQuery对象</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"附录一-jQuery各个版本新增的一些常用的方法\"><a href=\"#附录一-jQuery各个版本新增的一些常用的方法\" class=\"headerlink\" title=\"附录一 jQuery各个版本新增的一些常用的方法\"></a>附录一 jQuery各个版本新增的一些常用的方法</h3><hr>\n<ul>\n<li><code>jQuery1.3</code>新增常用的方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>.closest()</code></td>\n<td>从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素</td>\n</tr>\n<tr>\n<td><code> die()</code></td>\n<td>从元素中删除先前用<code>live()</code>方法绑定的所有的事件</td>\n</tr>\n<tr>\n<td><code> live()</code></td>\n<td>附加一个事件处理器到符合目前选择器的所有元素匹配</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>jQuery1.4</code>新增常用的方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>.first()</code></td>\n<td>获取集合中第一个元素</td>\n</tr>\n<tr>\n<td><code> last()</code></td>\n<td>获取集合中最后一个元素</td>\n</tr>\n<tr>\n<td><code> has(selector)</code></td>\n<td>保留包含特定后代的元素，去掉那些不含有指定后代的元素</td>\n</tr>\n<tr>\n<td><code>detach()</code></td>\n<td>从<code>DOM</code>中去掉所有匹配的元素。<code>detach()</code>和<code>remov()</code>一样，除了<code>detach()</code>保存了所有<code>jquery</code>数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入<code>DOM</code>时，这种方法很有用</td>\n</tr>\n<tr>\n<td><code> delegate()</code></td>\n<td>为所有选择器匹配的元素附加一个处理一个或多个事件</td>\n</tr>\n<tr>\n<td><code> undelegate()</code></td>\n<td>为所有选择器匹配的元素删除一个处理一个或多个事件</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>jQuery1.6</code>新增常用的方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>prop(proptyName)</code></td>\n<td>获取在匹配元素集合中的第一个元素的属性值</td>\n</tr>\n<tr>\n<td><code>removeProp(proptyName,value)</code></td>\n<td>为匹配的元素删除设置的属性</td>\n</tr>\n<tr>\n<td><code> :focus</code></td>\n<td>选择当前获取焦点的元素</td>\n</tr>\n</tbody></table>\n<h3 id=\"附录二-jQuery性能优化\"><a href=\"#附录二-jQuery性能优化\" class=\"headerlink\" title=\"附录二 jQuery性能优化\"></a>附录二 jQuery性能优化</h3><hr>\n<ul>\n<li><p><strong>性能优化</strong></p>\n<ul>\n<li><p>使用最新版的jQuery类库</p>\n</li>\n<li><p><strong>使用合适的选择器</strong></p>\n<ul>\n<li><code>$(#id)</code><ul>\n<li>使用<code>id</code>来定位<code>DOM</code>元素是最佳的方式，为了提高性能，建议从最近的<code>ID</code>元素开始往下搜索</li>\n</ul>\n</li>\n<li><code>$(&quot;p&quot;)</code> , <code>$(&quot;div&quot;)</code> , <code>$(&quot;input&quot;)</code><ul>\n<li>标签选择器性能也不错，它是性能优化的第二选择。因为<code>jQuery</code>将直接调用本地方法<code>document.getElementsByTagName()</code>来定位<code>DOM</code>元素</li>\n</ul>\n</li>\n<li><code>$(&quot;.class&quot;)</code><ul>\n<li>建议有选择性的使用</li>\n</ul>\n</li>\n<li><code>$(&quot;[attribute=value]&quot;)</code><ul>\n<li>对这个利用属性定位<code>DOM</code>元素，本地<code>JavaScript</code>并没有直接实现。这种方式性能并不是很理想。建议避免使用。</li>\n</ul>\n</li>\n<li><code>$(&quot;:hidden&quot;)</code><ul>\n<li> 和上面利用属性定位<code>DOM</code>方式类似，建议尽量不要使用</li>\n</ul>\n</li>\n<li><strong>注意的地方</strong><ul>\n<li>尽量使用<code>ID</code>选择器</li>\n<li>尽量给选择器指定上下文</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>缓存对象</strong></p>\n<ul>\n<li>如果你需要在其他函数中使用<code>jQuery</code>对象，你可以把他们缓存在全局环境中</li>\n</ul>\n</li>\n<li><p><strong>数组方式使用<code>jQuery</code>对象</strong></p>\n<ul>\n<li>使用<code>jQuery</code>选择器获取的结果是一个<code>jQuery</code>对象。在性能方面，建议使用<code>for</code>或<code>while</code>循环来处理，而不是<code>$.each()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>事件代理</strong></p>\n<ul>\n<li>每一个<code>JavaScript</code>事件（如：<code>click</code>、<code>mouseove</code>r）都会冒泡到父级节点。当我们需要给多个元素调用同个函数时这点很有用。比如，我们要为一个表单绑定这样的行为：点击td后，把背景颜色设置为红色<ul>\n<li><code>$(&quot;#myTable td&quot;).click(function()&#123;$(this).css(&quot;background&quot;,&quot;red&quot;);&#125;);</code></li>\n<li>假设有<code>100</code>个<code>td</code>元素，在使用以上的方式时，绑定了<code>100</code>个事件，将带来性能影响</li>\n<li>代替这种多元素的事件监听方法是，你只需向他们的父节点绑定一次事件，然后通过<code>event.target</code>获取到点击的当前元素<ul>\n<li><code>$(&quot;#myTable td&quot;).click(function(&#123;$(e.target).css(&quot;background&quot;,&quot;red&quot;)&#125;);</code></li>\n<li><code>e.target</code>捕捉到触发的目标</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在<code>jQuery1.7</code>中提供了一个新的方法<code>on()</code>，来帮助你将整个事件监听封装到一个便利的方法中<ul>\n<li> <code>$(&quot;#myTable td&quot;).on(&quot;click&quot;,&#39;td&#39;,function()&#123;$(this).css(&quot;background&quot;,&quot;red&quot;);&#125;);</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>将你的代码转化成jQuery插件</strong></p>\n<ul>\n<li>它能够使你的代码有更好的重用性，并且能够有效的帮助你组织代码</li>\n</ul>\n</li>\n<li><p><strong>使用join()方法来拼接字符串</strong></p>\n<ul>\n<li>也许你之前使用<code>+</code>来拼接字符串，现在可以改了。它确实有助于性能优化，尤其是长字符串处理的时候</li>\n</ul>\n</li>\n<li><p><strong>合理使用HTML5和Data属性</strong></p>\n<ul>\n<li><code>HTML5</code>的<code>data</code>属性可以帮助我们插入数据，特别是后端的数据交换。<code>jQuery</code>的<code>Data()</code>方法有效利用<code>HTML5</code>的属性<ul>\n<li>例如：<code>&lt;div id=&quot;dl&quot; data-role=&quot;page&quot; data-list-value=&quot;43&quot; data-options=&#39;&#123;&quot;name:&quot;&quot;John&quot;&#125;&#39;&gt;</code></li>\n<li>为了读取数据，你需要使用如下代码<ul>\n<li><code>$(&quot;#dl&#39;).data(&quot;role&#39;;//page)</code></li>\n<li><code>$(&quot;#dl&#39;).data(&quot;lastValue&#39;;//43)</code></li>\n<li><code>$(&quot;#dl&#39;).data(&quot;options&#39;;//john)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>尽量使用原生的JavaScript方法</strong></p>\n</li>\n<li><p><strong>压缩JavaScript代码</strong></p>\n<ul>\n<li>一方面使用<code>Gzip</code>；另一方面去除<code>JavaScript</code>文件里面的注释、空白</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"附录三-常用的jQuery代码片段\"><a href=\"#附录三-常用的jQuery代码片段\" class=\"headerlink\" title=\"附录三 常用的jQuery代码片段\"></a>附录三 常用的jQuery代码片段</h3><hr>\n<ul>\n<li>禁用页面的右键菜单</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"title\">functuion</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">&quot;contextmenu&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新窗口打开页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//例子1：href=&quot;http://&quot;的链接将会在新窗口打开链接</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;a[href=^=&quot;http://&quot;]&#x27;</span>).attr(<span class=\"string\">&quot;target&quot;</span>,<span class=\"string\">&quot;_blank&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//例子2：rel=&quot;external&quot;的超链接将会在新窗口打开链接</span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;a[rel$=&#x27;external&#x27;]&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.target = <span class=\"string\">&quot;_blank&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//use</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://baidu.com&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span>open<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>判断浏览器类型</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).reday(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Firefox2 and above</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( $.browser.mozilla &amp;&amp; $.browser.version&gt;=<span class=\"string\">&quot;1.8&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Safari</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>($.browser.safari)&#123;</span><br><span class=\"line\">     <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Chrome</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>($.browser.chrome)&#123;</span><br><span class=\"line\">     <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Opera</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>($.browser.opera)&#123;</span><br><span class=\"line\">     <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// IE6 and blow</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>($.browser.msie &amp;&amp; $.browser.version&lt;=<span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">     <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// anything above IE6</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>($.browser.msie &amp;&amp; $.browser.version &gt; <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">     <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入框文字获取和失去焦点</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;input.text1&quot;</span>).val(<span class=\"string\">&quot;Enter you search text here&quot;</span>);</span><br><span class=\"line\">    textFill($(<span class=\"string\">&#x27;input.text1&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123;<span class=\"comment\">//input focus text function</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> originvalue = input.val();</span><br><span class=\"line\">    input.focus(<span class=\"function\"><span class=\"title\">funtion</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($.trim(input.val())== originvalue)&#123;</span><br><span class=\"line\">            input.val(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;).blur(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>($.trim(input.val()) == <span class=\"string\">&#x27; &#x27;</span>)&#123;</span><br><span class=\"line\">          input.val(originalvalue);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取鼠标位置</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;#XY&quot;</span>).html(<span class=\"string\">&quot;X:&quot;</span> + e.pageX+ <span class=\"string\">&quot;| Y&quot;</span> + e.pageY);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断元素是否存在</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(<span class=\"string\">&quot;#id&quot;</span>).length)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>点击div也可以跳转</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location  = $(<span class=\"built_in\">this</span>).find(<span class=\"string\">&quot;a&quot;</span>).attr(<span class=\"string\">&quot;href&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;index.html&quot;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span>&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置div在屏幕中央</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    jQuery.fn.center = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.css(<span class=\"string\">&quot;position&quot;</span>,<span class=\"string\">&quot;absolute&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.css(<span class=\"string\">&quot;top&quot;</span>,($(<span class=\"built_in\">window</span>).height() - <span class=\"built_in\">this</span>.lenght()) / <span class=\"number\">2</span> +$(<span class=\"built_in\">window</span>).scrollTop() + <span class=\"string\">&quot;px&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.css(<span class=\"string\">&quot;left&quot;</span>,($(<span class=\"built_in\">window</span>).height() - <span class=\"built_in\">this</span>.lenght()) / <span class=\"number\">2</span> +$(<span class=\"built_in\">window</span>).scrollLeft() + <span class=\"string\">&quot;px&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//use</span></span><br><span class=\"line\"></span><br><span class=\"line\"> $(<span class=\"string\">&quot;#XY&quot;</span>).center();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭所有动画效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    jQuery.fx.off = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测鼠标的右键和左键</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;#xy&quot;</span>).mousedown(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        alert(e.which);<span class=\"comment\">//1 = 鼠标左键  2= 鼠标中间 3 = 鼠标右键</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>回车提交表单</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;input&quot;</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e.which == <span class=\"string\">&quot;13&quot;</span>)&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;回车提交&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置全局的Ajax参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#load&quot;</span>).ajaxStart(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    showLoading();<span class=\"comment\">//显示loading</span></span><br><span class=\"line\">    disableButtons() <span class=\"comment\">//禁用按钮</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> $(<span class=\"string\">&quot;#load&quot;</span>).ajaxComplete(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    hideLoading();<span class=\"comment\">//隐藏loading</span></span><br><span class=\"line\">    enableButtons();<span class=\"comment\">//启用按钮</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取选中的下拉框</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#someElement&quot;</span>).find(<span class=\"string\">&#x27;option:selected&#x27;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#someElement option:selected&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换复选框</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tog = <span class=\"literal\">false</span>;</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;input[type=checkbox]&#x27;).attr(&quot;</span>checked<span class=\"string\">&quot;,!tog);</span></span><br><span class=\"line\"><span class=\"string\">    tog = !tog;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>个性化链接</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     $(<span class=\"string\">&quot;a[href$=&#x27;pdf&#x27;]&quot;</span>).addClass(<span class=\"string\">&quot;pdf&quot;</span>);</span><br><span class=\"line\">     $(<span class=\"string\">&quot;a[href$=&#x27;zip&#x27;]&quot;</span>).addClass(<span class=\"string\">&quot;zip&quot;</span>);</span><br><span class=\"line\">     $(<span class=\"string\">&quot;a[href$=&#x27;psd&#x27;]&quot;</span>).addClass(<span class=\"string\">&quot;psd&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在一段时间后自动隐藏或关闭元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">setTimeOut(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">&quot;div&quot;</span>).fadeIn(<span class=\"number\">400</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//而在1.4之后的版本可以用delay()来实现</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).slideUp(<span class=\"number\">300</span>).delay(<span class=\"number\">3000</span>).fadeIn(<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>使用事件代理绑定元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//为table里面的td元素绑定click事件，不管td是一直存在还是动态创建的</span></span><br><span class=\"line\"> <span class=\"comment\">//jQuery 1.4.2之前使用这种方式</span></span><br><span class=\"line\"> $(<span class=\"string\">&quot;table&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;td&quot;</span>,<span class=\"built_in\">this</span>).live(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       $(<span class=\"built_in\">this</span>).toggleClass(<span class=\"string\">&quot;hover&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jquery 1.4.2使用的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;table&quot;</span>).delegate(<span class=\"string\">&quot;td&quot;</span>,<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).toggleClass(<span class=\"string\">&quot;hover&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jQuery1.7.1使用的方式</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;table&quot;</span>).on(<span class=\"string\">&quot;click&quot;</span>,<span class=\"string\">&quot;td&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).toggleClass(<span class=\"string\">&quot;hover&quot;</span>);</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>预加载图片</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cache = [];</span><br><span class=\"line\">  <span class=\"comment\">// Arguments are image paths relative to the current page.</span></span><br><span class=\"line\">  $.preLoadImages = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args_len = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = args_len; i--;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cacheImage = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;img&#x27;</span>);</span><br><span class=\"line\">      cacheImage.src = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">      cache.push(cacheImage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">jQuery.preLoadImages(<span class=\"string\">&quot;image1.gif&quot;</span>, <span class=\"string\">&quot;/path/to/image2.png&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>让页面中的每个元素都适合在移动设备上展示</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">scr.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, <span class=\"string\">&#x27;https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(scr);</span><br><span class=\"line\">scr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$(<span class=\"string\">&#x27;div&#x27;</span>).attr(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).attr(<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).css(&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;margin&#x27;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;padding&#x27;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;width&#x27;</span>: <span class=\"string\">&#x27;100%&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;clear&#x27;</span>:<span class=\"string\">&#x27;both&#x27;</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>图像等比例缩放</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">window</span>).bind(<span class=\"string\">&quot;load&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// IMAGE RESIZE</span></span><br><span class=\"line\">\t$(<span class=\"string\">&#x27;#product_cat_list img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> maxWidth = <span class=\"number\">120</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> maxHeight = <span class=\"number\">120</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ratio = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> width = $(<span class=\"built_in\">this</span>).width();</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> height = $(<span class=\"built_in\">this</span>).height();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(width &gt; maxWidth)&#123;</span><br><span class=\"line\">\t\t\tratio = maxWidth / width;</span><br><span class=\"line\">\t\t\t$(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;width&quot;</span>, maxWidth);</span><br><span class=\"line\">\t\t\t$(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;height&quot;</span>, height * ratio);</span><br><span class=\"line\">\t\t\theight = height * ratio;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> width = $(<span class=\"built_in\">this</span>).width();</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> height = $(<span class=\"built_in\">this</span>).height();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(height &gt; maxHeight)&#123;</span><br><span class=\"line\">\t\t\tratio = maxHeight / height;</span><br><span class=\"line\">\t\t\t$(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;height&quot;</span>, maxHeight);</span><br><span class=\"line\">\t\t\t$(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;width&quot;</span>, width * ratio);</span><br><span class=\"line\">\t\t\twidth = width * ratio;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">//$(&quot;#contentpage img&quot;).show();</span></span><br><span class=\"line\">\t<span class=\"comment\">// IMAGE RESIZE</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回页面顶部</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Back To Top</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.top&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     $(<span class=\"built_in\">document</span>).scrollTo(<span class=\"number\">0</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//Create a link defined with the class .top</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;top&quot;</span>&gt;</span>Back To Top<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用jQuery打造手风琴式的折叠效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> accordion = &#123;</span><br><span class=\"line\">     <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> $container = $(<span class=\"string\">&#x27;#accordion&#x27;</span>);</span><br><span class=\"line\">           $container.find(<span class=\"string\">&#x27;li:not(:first) .details&#x27;</span>).hide();</span><br><span class=\"line\">           $container.find(<span class=\"string\">&#x27;li:first&#x27;</span>).addClass(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\">           $container.on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"string\">&#x27;li a&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">                  e.preventDefault();</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> $this = $(<span class=\"built_in\">this</span>).parents(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>($this.hasClass(<span class=\"string\">&#x27;active&#x27;</span>))&#123;</span><br><span class=\"line\">                         <span class=\"keyword\">if</span>($(<span class=\"string\">&#x27;.details&#x27;</span>).is(<span class=\"string\">&#x27;:visible&#x27;</span>)) &#123;</span><br><span class=\"line\">                                $this.find(<span class=\"string\">&#x27;.details&#x27;</span>).slideUp();</span><br><span class=\"line\">                         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                $this.find(<span class=\"string\">&#x27;.details&#x27;</span>).slideDown();</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                         $container.find(<span class=\"string\">&#x27;li.active .details&#x27;</span>).slideUp();</span><br><span class=\"line\">                         $container.find(<span class=\"string\">&#x27;li&#x27;</span>).removeClass(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\">                         $this.addClass(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\">                         $this.find(<span class=\"string\">&#x27;.details&#x27;</span>).slideDown();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用jQuery和Ajax自动填充选择框</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">$(<span class=\"string\">&quot;select#ctlJob&quot;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">$.getJSON(<span class=\"string\">&quot;/select.php&quot;</span>,&#123;<span class=\"attr\">id</span>: $(<span class=\"built_in\">this</span>).val(), <span class=\"attr\">ajax</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> options = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; j.length; i++) &#123;</span><br><span class=\"line\">options += <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span> + j[i].optionDisplay + <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">&quot;select#ctlPerson&quot;</span>).html(options);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自动替换丢失的图片</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Safe Snippet</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;img&quot;</span>).error(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t$(<span class=\"built_in\">this</span>).unbind(<span class=\"string\">&quot;error&quot;</span>).attr(<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;missing_image.gif&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Persistent Snipper</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;img&quot;</span>).error(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t$(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;missing_image.gif&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>预防对表单进行多次提交</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;form&#x27;</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> jQuery.data(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;disabledOnSubmit&quot;</span>) == <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      jQuery.data(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;disabledOnSubmit&quot;</span>, &#123; <span class=\"attr\">submited</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;input[type=submit], input[type=button]&#x27;</span>, <span class=\"built_in\">this</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;disabled&quot;</span>, <span class=\"string\">&quot;disabled&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态添加表单元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//change event on password1 field to prompt new input</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#password1&#x27;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//dynamically create new input and insert after password1</span></span><br><span class=\"line\">        $(<span class=\"string\">&quot;#password1&quot;</span>).append(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在窗口滚动时自动加载内容</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((($(<span class=\"built_in\">window</span>).scrollTop()+$(<span class=\"built_in\">window</span>).height())+<span class=\"number\">250</span>)&gt;=$(<span class=\"built_in\">document</span>).height())&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(loading == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\t\tloading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">&#x27;#loadingbar&#x27;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;block&quot;</span>);</span><br><span class=\"line\">\t\t\t$.get(<span class=\"string\">&quot;load.php?start=&quot;</span>+$(<span class=\"string\">&#x27;#loaded_max&#x27;</span>).val(), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">loaded</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t$(<span class=\"string\">&#x27;body&#x27;</span>).append(loaded);</span><br><span class=\"line\">\t\t\t\t$(<span class=\"string\">&#x27;#loaded_max&#x27;</span>).val(<span class=\"built_in\">parseInt</span>($(<span class=\"string\">&#x27;#loaded_max&#x27;</span>).val())+<span class=\"number\">50</span>);</span><br><span class=\"line\">\t\t\t\t$(<span class=\"string\">&#x27;#loadingbar&#x27;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;none&quot;</span>);</span><br><span class=\"line\">\t\t\t\tloading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t$(<span class=\"string\">&#x27;#loaded_max&#x27;</span>).val(<span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导航菜单背景切换效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">&#x27;nav&#x27;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>导航一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>导航二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>导航三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意：代码需要修饰完善</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#nav&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 要知道siblings的使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(e.target).addClass(<span class=\"string\">&#x27;tclass&#x27;</span>).siblings(<span class=\"string\">&#x27;.tclass&#x27;</span>).removeClass(<span class=\"string\">&#x27;tclass&#x27;</span>);;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解决<code>jQuery</code>, <code>prototype</code>共存，<code>$</code>全局变量冲突问题</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;prototype.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://blogbeta.blueidea.com/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span> jQuery.noConflict();<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">注意：一定要先引入prototype.js 再引入jquery.js，先后顺序不可错</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> jQuery 判断元素上是否绑定了事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jQuery event封装支持判断元素上是否绑定了事件，此方法只适用于jQuery绑定的事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $events = $(<span class=\"string\">&quot;#foo&quot;</span>).data(<span class=\"string\">&quot;events&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>( $events &amp;&amp; $events[<span class=\"string\">&quot;click&quot;</span>] )&#123;　　</span><br><span class=\"line\">    <span class=\"comment\">//your code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何正确地使用<code>toggleClass</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切换（toggle）类允许你根据某个类的//是否存在来添加或是删除该类。</span></span><br><span class=\"line\"><span class=\"comment\">//这种情况下有些开发者使用：</span></span><br><span class=\"line\">a.hasClass(<span class=\"string\">&#x27;blueButton&#x27;</span>) ? a.removeClass(<span class=\"string\">&#x27;blueButton&#x27;</span>) : a.addClass(<span class=\"string\">&#x27;blueButton&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//toggleClass允许你使用下面的语句来很容易地做到这一点</span></span><br><span class=\"line\">a.toggleClass(<span class=\"string\">&#x27;blueButton&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如何设置IE特有的功能</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($.browser.msie) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Internet Explorer就是个虐待狂</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何验证某个元素是否为空</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (! $(<span class=\"string\">&#x27;#keks&#x27;</span>).html()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//什么都没有找到;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"string\">&#x27;#keks&#x27;</span>).is(<span class=\"string\">&quot;:empty&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//什么都没有找到;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问IFrame里的元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iFrameDOM = $(<span class=\"string\">&quot;iframe#someID&quot;</span>).contents();</span><br><span class=\"line\"><span class=\"comment\">//然后，就可以通过find方法来遍历获取iFrame中的元素了</span></span><br><span class=\"line\">iFrameDOM.find(<span class=\"string\">&quot;.message&quot;</span>).slideUp();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>管理搜索框的值<ul>\n<li>现在各大网站都有搜索框，而搜索框通常都有默认值，当输入框获取焦点时，默认值消失。而一旦输入框失去焦点，而输入框里又没有输入新的值，输入框里的值又会恢复成默认值，如果往输入框里输入了新值，则输入框的值为新输入的值。这种特效用<code>JQuery</code><br>很容易实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#searchbox&quot;</span>) .focus(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      $(<span class=\"built_in\">this</span>).val(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;) .blur(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> $this = $(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// &#x27;请搜索...&#x27;为搜索框默认值</span></span><br><span class=\"line\">    ($this.val() === <span class=\"string\">&#x27;&#x27;</span>)? $this.val(<span class=\"string\">&#x27;请搜索...&#x27;</span>) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部分页面加载更新<ul>\n<li>为了提高<code>web</code>性能，有更新时我们通常不会加载整个页面，而只是仅仅更新部分页面内容，如图片的延迟加载等。页面部分刷新的特效在<code>JQuery</code>中也很容易实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//每隔5秒钟刷新页面内容 //获取的内容将增加到 id为content的元素后</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;#content&quot;</span>).load(url); &#125;, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>采配置JQuery与其它库的兼容性<ul>\n<li>如果在项目中使用<code>JQuery</code>，<code>$</code> 是最常用的变量名，但<code>JQuery</code>并不是唯一一个使用<code>$</code>作为变量名的库，为了避免命名冲突，你可以按照下面方式来组织你的代码</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一： 为JQuery重新命名为</span></span><br><span class=\"line\"> $jvar $j = jQuery.noConflict();$j(<span class=\"string\">&#x27;#id&#x27;</span>).... <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">方法二： 推荐使用的方式</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123; $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//这儿，你可以正常的使用JQuery语法 &#125;);</span></span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试密码的强度<ul>\n<li>在某些网站注册时常常会要求设置密码，网站也会根据输入密码的字符特点给出相应的提示，如密码过短、强度差、强度中等、强度强等。这又是怎么实现的呢？看下面代码：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pass&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;passstrength&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面的正则表达式建议各位收藏哦，项目上有可能会用得着</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#pass&#x27;</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//密码为八位及以上并且字母数字特殊字符三项都包括</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strongRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;^(?=.&#123;8,&#125;)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$&quot;</span>, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> mediumRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;^(?=.&#123;7,&#125;)(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$&quot;</span>, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> enoughRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;(?=.&#123;6,&#125;).*&quot;</span>, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span> == enoughRegex.test($(<span class=\"built_in\">this</span>).val())) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#passstrength&#x27;</span>).html(<span class=\"string\">&#x27;More Characters&#x27;</span>); &#125;</span><br><span class=\"line\"> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strongRegex.test($(<span class=\"built_in\">this</span>).val())) &#123;</span><br><span class=\"line\">     $(<span class=\"string\">&#x27;#passstrength&#x27;</span>).className = <span class=\"string\">&#x27;ok&#x27;</span>;</span><br><span class=\"line\">     $(<span class=\"string\">&#x27;#passstrength&#x27;</span>).html(<span class=\"string\">&#x27;Strong!&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mediumRegex.test($(<span class=\"built_in\">this</span>).val())) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#passstrength&#x27;</span>).className = <span class=\"string\">&#x27;alert&#x27;</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#passstrength&#x27;</span>).html(<span class=\"string\">&#x27;Medium!&#x27;</span>); &#125;</span><br><span class=\"line\"> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#passstrength&#x27;</span>).className = <span class=\"string\">&#x27;error&#x27;</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#passstrength&#x27;</span>).html(<span class=\"string\">&#x27;Weak!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"附录四-常见CND加速服务\"><a href=\"#附录四-常见CND加速服务\" class=\"headerlink\" title=\"附录四 常见CND加速服务\"></a>附录四 常见CND加速服务</h3><hr>\n<ul>\n<li><a href=\"http://www.bootcdn.cn/\">Bootstrap中文网开源项目免费 CDN 服务</a></li>\n<li><a href=\"http://cdn.code.baidu.com/\">百度静态资源公共库</a></li>\n<li><a href=\"http://libs.useso.com/\">360网站卫士常用前端公共库CDN服务–已停止服务</a></li>\n<li><a href=\"http://staticfile.org/\">开放静态文件 CDN </a></li>\n<li><a href=\"http://www.asp.net/ajax/cdn\">微软CDN服务</a></li>\n<li><a href=\"https://bbs.aliyun.com/read/139395.html\">阿里云</a></li>\n<li><a href=\"http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs\">百度开放云平台</a></li>\n<li><a href=\"http://code.jquery.com/\">jQuery CDN</a></li>\n<li><a href=\"http://www.jq22.com/cdn/\">jQuery cdn加速</a></li>\n<li><a href=\"http://lib.sinaapp.com/\">新浪CDN</a></li>\n</ul>\n<h3 id=\"附录五-jQuery的一些资源\"><a href=\"#附录五-jQuery的一些资源\" class=\"headerlink\" title=\"附录五 jQuery的一些资源\"></a>附录五 jQuery的一些资源</h3><hr>\n<ul>\n<li>速查手册<ul>\n<li><a href=\"http://www.css88.com/jqapi-1.9/\">jQuery API 中文文档–css88</a></li>\n<li><a href=\"http://overapi.com/jquery\">jQuery-overapi</a></li>\n<li><a href=\"http://www.sxt.cn/searchsxt/sxtapipro/index.html\">在线桌面版API</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md\">更多详情—一份实用的API参考手册集合</a></li>\n</ul>\n</li>\n<li><code>jQuery</code>插件</li>\n<li>基础常用<ul>\n<li><a href=\"http://caibaojian.com/scrollfix\">滚动固定在某个位置</a></li>\n<li><a href=\"http://caibaojian.com/power-slider\">jQuery图片滚动插件全能版</a></li>\n<li><a href=\"http://code.ciaoca.com/jquery/wookmark/?utm_source=caibaojian.com\">jQuery Wookmark Load 瀑布流布局</a></li>\n<li><a href=\"http://code.ciaoca.com/jquery/jcrop/?utm_source=caibaojian.com\">jQuery Jcrop 图像裁剪</a></li>\n<li><a href=\"http://code.ciaoca.com/jquery/kxbdmarquee/?utm_source=caibaojian.com\">jQuery kxbdMarquee 无缝滚动</a></li>\n<li><a href=\"http://code.ciaoca.com/jquery/lightbox/?utm_source=caibaojian.com\">jQuery lightBox 灯箱效果</a></li>\n<li><a href=\"http://www.appelsiini.net/projects/lazyload?utm_source=caibaojian.com\">Lazy Load Plugin for jQuery</a></li>\n</ul>\n</li>\n<li>更多插件-动效库整理<ul>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md\">插件动效库</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6.md\">常用组件</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h3><hr>\n<ul>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\">jQuery源码分析系列</a></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><hr>\n<ul>\n<li>锋利的<code>jQuery</code></li>\n</ul>\n","categories":["Javascript"],"tags":["Jquery"]},{"title":"JavaScript","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/2022/05/20/JavaScript/","content":"<h1 id=\"JavaScript-历史及历程\"><a href=\"#JavaScript-历史及历程\" class=\"headerlink\" title=\"JavaScript 历史及历程\"></a>JavaScript 历史及历程</h1><h2 id=\"web-发展史\"><a href=\"#web-发展史\" class=\"headerlink\" title=\"web 发展史\"></a>web 发展史</h2><p>Mosaic,是互上第一个获普遍使用和能够显示图片的网页浏览器。于 1993 年问世。</p>\n<p>1994 年 4 月，马克.安德森和 Silicon Graphics（简称为 SGI，中译为“视算科技”或“硅图”）公司的创始人吉姆·克拉克（Jim Clark）在美国加州设立了“Mosaic CommunicationCorporation”。</p>\n<p>Mosaic 公司成立后，由于伊利诺伊大学拥有 Mosaic 的商标权，且伊利诺伊大学已将技术转让给 Spy Glass 公司，开发团队必须彻底重新撰写浏览器程式码，且浏览器名称更改为 NetscapeNavigator，公司名字于 1994 年 11 月改名为“NetscapeCommunication Corporation”，此后沿用至今，中译为“网景”。</p>\n<p>微软的 Internet Explorer 及 Mozilla Firefox 等，其早期版本皆以 Mosaic 为基础而开发。微软随后买下 Spy Glass 公司的技术开发出 Internet Explorer 浏览器，而 Mozilla Firefox则是网景通讯家开放源代码后所衍生出的版本。</p>\n<h2 id=\"JS-历史\"><a href=\"#JS-历史\" class=\"headerlink\" title=\"JS 历史\"></a>JS 历史</h2><p>JavaScript 作为 Netscape Navigator 浏览器的一部分首次出现在 1996 年。它最初的设计目标是改善网页的用户体验。</p>\n<p>作者：Brendan Eich</p>\n<p>期初 JavaScript 被命名为 LiveScript，后因和 Sun 公司合作，因市场宣传需要改名,JavaScript。后来 Sun 公司被 Oracle 收购，JavaScript 版权归 Oracle 所有。</p>\n<h2 id=\"浏览器组成\"><a href=\"#浏览器组成\" class=\"headerlink\" title=\"浏览器组成\"></a>浏览器组成</h2><ol>\n<li><p>shell 部分——用户能操作部分(壳)</p>\n</li>\n<li><p>内核部分——用户看不到的部分</p>\n<p>1 ) 渲染引擎（语法规则和渲染）</p>\n<p>2 ) JS 引擎</p>\n<p>3 ) 其他模块（如异步)</p>\n</li>\n</ol>\n<h2 id=\"JS-引擎\"><a href=\"#JS-引擎\" class=\"headerlink\" title=\"JS 引擎\"></a>JS 引擎</h2><p>2001 年发布 ie6，首次实现对 JS 引擎的优化。</p>\n<p>2008 年 Google 发布最新浏览器 Chrome，它是采用优化后的 javascript 引擎，引擎代号 V8，因能把 JS 代码直接转化为机械码来执行，进而以速度快而闻名。</p>\n<p>后 Firefox 也推出了具备强大功能的 JS 引擎</p>\n<p>Firefox3.5 TraceMonkey（对频繁执行的代码做了路径优化）</p>\n<p>Firefox4.0 JeagerMonkey</p>\n<h2 id=\"JS-的逼格（特有特色）\"><a href=\"#JS-的逼格（特有特色）\" class=\"headerlink\" title=\"JS 的逼格（特有特色）\"></a>JS 的逼格（特有特色）</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">编译型语言: 通篇翻译后，生成翻译完的文件，程序执行翻译后的文件</span><br><span class=\"line\">代表语言 : C,C++</span><br><span class=\"line\">优点 : 快(常用于系统，游戏)</span><br><span class=\"line\">缺点 : 移植性不好（不跨平台，<span class=\"built_in\">window</span> 和 Linux 不能混用）</span><br><span class=\"line\"></span><br><span class=\"line\">解释性语言 看一行翻译一行，不生成特定文件</span><br><span class=\"line\">代表语言 : JS,PHP，python 带尖角号</span><br><span class=\"line\">优点 : 可以跨平台</span><br><span class=\"line\">缺点 : 稍微慢点</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">主流浏览器（必须有独立内核）市场份额大于 <span class=\"number\">3</span>%</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内核名称:</span></span><br><span class=\"line\">IE ：trident</span><br><span class=\"line\"></span><br><span class=\"line\">chrome ： webkit / blink</span><br><span class=\"line\"></span><br><span class=\"line\">firefox ： gecko</span><br><span class=\"line\"></span><br><span class=\"line\">opera ： presto / Blink</span><br><span class=\"line\"></span><br><span class=\"line\">safari ： webkit</span><br></pre></td></tr></table></figure>\n\n<p>1、JS 是解释性语言：(不需要编译成文件）跨平台</p>\n<p>java 先通过 javac，编译成.class 文件，通过 jvm（Java 虚拟机）进行解释执行<br>.java→java→ 编译 →.class→jvm→ 解释执行（java 可以跨平台）（java 是 oak 语言）</p>\n<p><code>&lt;link rel = &quot;&quot;&gt;</code> 是异步加载</p>\n<p>2、单线程：同一时间只能做一件事——JS 引擎是单线程（同一时间做很多事叫多线程）</p>\n<p>ECMA（欧洲计算机制造联合会）标注：为了取得技术优势，微软推出了 JScript，</p>\n<p>CEnvi 推出 ScriptEase，与 JavaScript 同样可在浏览器上运行。为了统一规格 JavaScript</p>\n<p>兼容于 ECMA 标准，因此也称为 ECMAScript。</p>\n<h1 id=\"开始学习-JS\"><a href=\"#开始学习-JS\" class=\"headerlink\" title=\"开始学习 JS\"></a>开始学习 JS</h1><blockquote>\n<p>JS 三大部分 ECMAScript、DOM、BOM`</p>\n</blockquote>\n<h2 id=\"如何引入-JS\"><a href=\"#如何引入-JS\" class=\"headerlink\" title=\"如何引入 JS\"></a>如何引入 JS</h2><p>1、页面内嵌<code>&lt;script&gt;&lt;/script&gt;</code>标签,写 head 里面也行,写 body 里面也行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//告诉浏览器我们是 js</span></span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、外部 JS 文件，引入<code>&lt;script src=“location.js”&gt;&lt;/script&gt;</code></p>\n<p>例如：以 lesson.js 保存文件，再引入到 html 中,为符合 web 标准（w3c 标准中的一项）结构（html）、行为（js）、样</p>\n<p>式（css）相分离，通常会采用外部引入。</p>\n<p>一个文件中可以包括多个 css，js——不混用特殊写页面，大部分写在外部——不混用,如果同时写了内部的 js 和外部的 js，那么是外部的 js 文件显示出来</p>\n<h1 id=\"js-变量\"><a href=\"#js-变量\" class=\"headerlink\" title=\"js 变量\"></a>js 变量</h1><h2 id=\"变量-variable\"><a href=\"#变量-variable\" class=\"headerlink\" title=\"变量(variable)\"></a>变量(variable)</h2><p>HTML，css 不是编程语言，是计算机语言，编程语言需要有变量和函数<br>变量是存放东西，方便后续使用的框</p>\n<h2 id=\"1）变量声明\"><a href=\"#1）变量声明\" class=\"headerlink\" title=\"1）变量声明\"></a>1）变量声明</h2><p>1、 声明、赋值分解</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> a; <span class=\"comment\">//这个叫变量声明。我们向系统中申请了 var 这个框，命名叫 a,给 a 赋值 100，写作 a =100，这里不是等号是赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a ；a =<span class=\"number\">100</span>；可以简化写成 <span class=\"keyword\">var</span> a=<span class=\"number\">100</span>；</span><br></pre></td></tr></table></figure>\n\n<p>2、 单一 var 声明法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a,b,c,d;————单一 <span class=\"keyword\">var</span> 模式</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var a = 100;                                            var a = 100;</span></span><br><span class=\"line\"><span class=\"comment\">// var a = 200;        var a,b,c,d,e;                          b = 100;</span></span><br><span class=\"line\"><span class=\"comment\">// var a = 300;   &gt;                       &gt;   标准写法:         c = 100;</span></span><br><span class=\"line\"><span class=\"comment\">// var a = 400;        a = 100;                                d = 100;</span></span><br><span class=\"line\"><span class=\"comment\">// var a = 500;                                                e = 100;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如写做：<span class=\"keyword\">var</span> a = <span class=\"number\">10</span>；a=<span class=\"number\">20</span>;那么后面的 <span class=\"number\">20</span> 就会覆盖掉前面的 <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名规则（用接近的英文单词）————-起变量名一定要以英文语义化\"><a href=\"#命名规则（用接近的英文单词）————-起变量名一定要以英文语义化\" class=\"headerlink\" title=\"命名规则（用接近的英文单词）———— 起变量名一定要以英文语义化\"></a>命名规则（用接近的英文单词）———— 起变量名一定要以英文语义化</h2><ol>\n<li>变量名必须以英文字母、_、$ 开头</li>\n<li>变量名可以包括英文字母、_、$、数字</li>\n<li>不可以用系统的关键字、保留字作为变量名</li>\n</ol>\n<h1 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h1><h2 id=\"关键字（有特殊语法含义的字）\"><a href=\"#关键字（有特殊语法含义的字）\" class=\"headerlink\" title=\"关键字（有特殊语法含义的字）\"></a>关键字（有特殊语法含义的字）</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span>       <span class=\"keyword\">else</span>        <span class=\"keyword\">new</span>         <span class=\"keyword\">var</span></span><br><span class=\"line\"><span class=\"keyword\">case</span>        <span class=\"keyword\">finally</span>     <span class=\"keyword\">return</span>      <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"keyword\">catch</span>       <span class=\"keyword\">for</span>         <span class=\"keyword\">switch</span>      <span class=\"keyword\">while</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>     <span class=\"keyword\">if</span>          <span class=\"keyword\">throw</span>       <span class=\"keyword\">delete</span></span><br><span class=\"line\"><span class=\"keyword\">in</span>          <span class=\"keyword\">try</span>         <span class=\"keyword\">do</span>          <span class=\"keyword\">instanceof</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保留字（未来可能当做关键字的词）\"><a href=\"#保留字（未来可能当做关键字的词）\" class=\"headerlink\" title=\"保留字（未来可能当做关键字的词）\"></a>保留字（未来可能当做关键字的词）</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">abstract    enum        int         short</span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>     <span class=\"keyword\">export</span>      interface   <span class=\"keyword\">static</span></span><br><span class=\"line\">byte        <span class=\"keyword\">extends</span>     long        <span class=\"built_in\">super</span></span><br><span class=\"line\">char        final       native      synchronize</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>       <span class=\"title\">float</span>       <span class=\"title\">package</span>     <span class=\"title\">throws</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">const</span>       <span class=\"title\">goto</span>        <span class=\"title\">private</span>     <span class=\"title\">transient</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">debugger</span>    <span class=\"title\">implements</span>  <span class=\"title\">pritected</span>   <span class=\"title\">volatile</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">double</span>      <span class=\"title\">import</span>      <span class=\"title\">public</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面是变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">    c = a + b;</span><br></pre></td></tr></table></figure>\n\n<p>先运算等号右边的 a+b，运算完后，再赋值给左边 c<br>先取值，再赋值</p>\n<blockquote>\n<p>运算大于赋值的优先级</p>\n</blockquote>\n<p>js 是动态语言，动态语言基本上都是解释性语言，解释性语言基本上都是脚本语言</p>\n<p>js 是浮点型语言（带小数点）</p>\n<h2 id=\"值类型（数据类型）\"><a href=\"#值类型（数据类型）\" class=\"headerlink\" title=\"值类型（数据类型）\"></a>值类型（数据类型）</h2><p>1、不可改变的原始值（栈数据）栈 stack<br>Number String Boolean undefined null<br>已经放进去的值不可改变，只会改房间编号为 null(硬盘原理)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Number 数字类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>; <span class=\"built_in\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串类型,语言放双引号里</span></span><br><span class=\"line\">例: <span class=\"keyword\">var</span> a=”语言”，““是空串</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Boolean 布尔数字</span></span><br><span class=\"line\">就两个值，<span class=\"literal\">false</span>，<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined：</span></span><br><span class=\"line\">是没有定义的，表示还没赋值,仅一个值 underfined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null</span></span><br><span class=\"line\">代表空，占位用，用空值来覆盖</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈、堆\"><a href=\"#栈、堆\" class=\"headerlink\" title=\"栈、堆\"></a>栈、堆</h2><p>array、Object、function、…date、RegExp</p>\n<p>原始值存于 stack(栈) 里面的</p>\n<p>引用值存于 heap(堆) 里面的;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">    a = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    答案：<span class=\"number\">10</span></span><br><span class=\"line\">    原始值是我把一个值放到另一个值里面，改了第一个值，第二个值不变</span><br></pre></td></tr></table></figure>\n\n<p>2、引用值（堆数据）大致上放堆 heap 里面</p>\n<blockquote>\n<p>array 数组, Object, function … data,RegExp 正则</p>\n</blockquote>\n<p>var arr = [1,2,3,4,5,false,”abc”]; //这是数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = arr;</span><br><span class=\"line\">arr.push(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\">答案：arr 是 <span class=\"number\">1</span>,<span class=\"number\">2</span>。arr1 是 <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">引用值是把第一个值放到第二个值里面，改第一个值，第二个值也改变</span><br><span class=\"line\">js 由值决定类型。原始值和引用值唯一的不同是赋值形式不同</span><br></pre></td></tr></table></figure>\n\n<p>1、 栈 stack</p>\n<p><code>先进去的东西最后出来，有底没有顶。</code></p>\n<blockquote>\n<p>在栈内存里面放东西，先放在底部</p>\n</blockquote>\n<p>2、 堆 heap</p>\n<blockquote>\n<p>怎么放怎么拿，散列结构</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;<span class=\"keyword\">var</span> b = a；是 a 先取出 <span class=\"number\">10</span>，copy 一份放到 b 里面，改变 a 的值，b 的值是不变的，再把 a=<span class=\"number\">20</span>;时 b 的值还是 <span class=\"number\">10</span>，不发生改变</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 =arr;</span><br><span class=\"line\">arr.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">答案：这往[<span class=\"number\">1</span>,<span class=\"number\">2</span>]放 <span class=\"number\">3</span>，arr 和 arr1 都是[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">引用值是在栈内存里面放堆的地址，拷贝的也是地址，所以改变 arr，arr1 也改变了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 =arr;</span><br><span class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(arr1);</span><br><span class=\"line\">答案：arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>];是新建了一个新的房间。arr1 是 <span class=\"number\">1</span>,<span class=\"number\">2</span>,现在是插入新引入值”房间”,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-语句基本规则\"><a href=\"#js-语句基本规则\" class=\"headerlink\" title=\"js 语句基本规则\"></a>js 语句基本规则</h2><ol>\n<li><p>语句后面要用分号结束“；”但 function test(){}，for(){}，if(){}后面都不用加分号</p>\n</li>\n<li><p>js 语法错误会引发后续代码终止，但不会影响其它 js 代码块</p>\n</li>\n</ol>\n<p>错误分为两种:</p>\n<ol>\n<li><p>低级错误（语法解析错误），不能写中文</p>\n</li>\n<li><p>逻辑错误（标准错误，情有可原，错的那个执行不了）</p>\n</li>\n<li><p>书写格式要规范，“= + / -”两边都应该有空格</p>\n</li>\n</ol>\n<h2 id=\"js-输出\"><a href=\"#js-输出\" class=\"headerlink\" title=\"js 输出\"></a>js 输出</h2><p>console.log();是把信息展示（输出）在控制台</p>\n<p>document.write();是把信息（输出）展示到网页</p>\n<h1 id=\"js-运算符\"><a href=\"#js-运算符\" class=\"headerlink\" title=\"js 运算符\"></a>js 运算符</h1><h2 id=\"一、运算操作符\"><a href=\"#一、运算操作符\" class=\"headerlink\" title=\"一、运算操作符\"></a>一、运算操作符</h2><h3 id=\"“-”，“-”，“-“，“-”，”-“，“-”\"><a href=\"#“-”，“-”，“-“，“-”，”-“，“-”\" class=\"headerlink\" title=\"“-”，“*”，“/“，“%”，”=“，“()”\"></a>“-”，“*”，“/“，“%”，”=“，“()”</h3><blockquote>\n<p>运算符除了 + 号两边的是转换为字符串，其他的运算符全部是转换为 Number 数字类型的</p>\n</blockquote>\n<h4 id=\"（加号）\"><a href=\"#（加号）\" class=\"headerlink\" title=\"+（加号）\"></a>+（加号）</h4><ol>\n<li>“+”作用：数学运算、字符串链接</li>\n</ol>\n<blockquote>\n<p>任何数据类型加字符串都等于字符串</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = “a”+ <span class=\"literal\">true</span> + <span class=\"number\">1</span>; <span class=\"comment\">//打印 atrue1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + “a” + <span class=\"number\">1</span> + <span class=\"number\">1</span>; <span class=\"comment\">//打印 1a11</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + <span class=\"number\">1</span> + “a” + <span class=\"number\">1</span> + <span class=\"number\">1</span>; <span class=\"comment\">//打印 2a11，从左向右运算</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + <span class=\"number\">1</span> + “a” +( <span class=\"number\">1</span> + <span class=\"number\">2</span>); <span class=\"comment\">//打印 2a3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（减号、乘号、除号）\"><a href=\"#（减号、乘号、除号）\" class=\"headerlink\" title=\"- * /（减号、乘号、除号）\"></a>- * /（减号、乘号、除号）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">0</span> – <span class=\"number\">1</span>； <span class=\"comment\">//等于-1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">2</span> * <span class=\"number\">1</span>； <span class=\"comment\">//等于 2</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">0</span> / <span class=\"number\">0</span>； <span class=\"comment\">//答案是 NaN，应该得出一个数字类型的数，但是没法表达，</span></span><br><span class=\"line\">就用 <span class=\"literal\">NaN</span> (<span class=\"literal\">NaN</span> 是 Not a <span class=\"built_in\">Number</span> 非数，不是数，但是是数字类型</span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> / <span class=\"number\">0</span>; <span class=\"comment\">//是 infinity</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = -<span class=\"number\">1</span> / <span class=\"number\">0</span>; <span class=\"comment\">//是-infinity(无穷)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"，（摩尔，模，是取余数的意思）\"><a href=\"#，（摩尔，模，是取余数的意思）\" class=\"headerlink\" title=\"%，（摩尔，模，是取余数的意思）\"></a>%，（摩尔，模，是取余数的意思）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">5</span>%<span class=\"number\">2</span> <span class=\"comment\">//5%2 是五除二的余数，商二余一</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">5</span>%<span class=\"number\">1</span> <span class=\"comment\">//是五除一的余数，结果是 0</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> % <span class=\"number\">5</span>; <span class=\"comment\">//意思是 1 除以 5 的余数。商 0 余 1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">4</span>%<span class=\"number\">6</span> <span class=\"comment\">//是四除六的余数，结果是 4</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;a % = <span class=\"number\">5</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">// 4</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;a % = <span class=\"number\">5</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//0</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;a %= <span class=\"number\">2</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//0</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;a % = <span class=\"number\">4</span>; <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n\n<p><code>优先级”=“最弱【赋值符号优先级最低】，”()”优先级较高</code></p>\n<h3 id=\"“-”，“-”，”-“，“-”，“-“，“-”，“-”\"><a href=\"#“-”，“-”，”-“，“-”，“-“，“-”，“-”\" class=\"headerlink\" title=\"“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”\"></a>“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”</h3><h4 id=\"（加加）\"><a href=\"#（加加）\" class=\"headerlink\" title=\"++（加加）\"></a>++（加加）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>; a = a + <span class=\"number\">1</span>; <span class=\"comment\">//结果 11</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = a + <span class=\"number\">1</span>;写成 a ++是一种简化形式 “++”，是自身加一，再赋值给自身</span><br><span class=\"line\">a ++ 是 a = a + <span class=\"number\">1</span> 的简化形式</span><br><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">10</span>；<span class=\"built_in\">document</span>.write(++a );<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 11；11</span></span><br><span class=\"line\">是先执行++，再执行本条语句 <span class=\"built_in\">document</span>.write(++a)</span><br><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>；<span class=\"built_in\">document</span>.write(a ++);<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 1；2。是先执行</span></span><br><span class=\"line\">语句(<span class=\"built_in\">document</span>.write(a))，再++，所以第一次打印的还是 a，第二次打印 a++后的值</span><br><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">10</span>；<span class=\"keyword\">var</span> b=++a -<span class=\"number\">1</span>+a++;<span class=\"built_in\">document</span>.write(b + “ ” + a) <span class=\"comment\">//答案 21 12</span></span><br><span class=\"line\">先++a，这个时候 a=<span class=\"number\">11</span>，再-<span class=\"number\">1</span>，再加 a，b 就是 <span class=\"number\">21</span>，最后++，a 就是 <span class=\"number\">12</span></span><br><span class=\"line\">赋值的顺序自右向左，计算的顺序自左向右（按数学来）</span><br><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>；<span class=\"keyword\">var</span> b = a ++ + <span class=\"number\">1</span>；<span class=\"built_in\">document</span>.write(b)； <span class=\"comment\">//答案 2，先执行 var b =a+1，</span></span><br><span class=\"line\">再 a++</span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>；<span class=\"keyword\">var</span> b = a ++ + <span class=\"number\">1</span>；<span class=\"built_in\">document</span>.write(a)；<span class=\"built_in\">document</span>.write(b)； <span class=\"comment\">//答案 2，2</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>；<span class=\"keyword\">var</span> b = ++a + <span class=\"number\">1</span>；<span class=\"built_in\">document</span>.write(a)；<span class=\"built_in\">document</span>.write(b)； <span class=\"comment\">//答案 2，3</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;<span class=\"keyword\">var</span> a = i++; <span class=\"comment\">//答案 a = 1; 此时 i 先将值 1 赋给 a,然后自己+1，i=2;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = ++i; <span class=\"comment\">//答案 b = 3；此时 i 先自己+1 为 3.再给 b 赋值，b=3;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"–（减减）\"><a href=\"#–（减减）\" class=\"headerlink\" title=\"–（减减）\"></a>–（减减）</h4><p><code>“--”，是自身减一，在赋值给自身</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"keyword\">var</span> b = a-- + -- a;<span class=\"built_in\">document</span>.write(b); <span class=\"comment\">//答案 0，先执行--a;此时 a 变成</span></span><br><span class=\"line\"><span class=\"number\">0</span>，然后第一个 a 也变成 <span class=\"number\">0</span>，那么 b = <span class=\"number\">0</span>-- + --a</span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"keyword\">var</span> b = --a + --a;<span class=\"built_in\">document</span>.write(b); <span class=\"comment\">//答案-1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"built_in\">document</span>.write(a++);<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 1；2</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"built_in\">document</span>.write(++a);<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 2；2</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>; <span class=\"keyword\">var</span> b = a ++ +<span class=\"number\">1</span>;<span class=\"built_in\">document</span>.write(b); <span class=\"comment\">//答案 2</span></span><br></pre></td></tr></table></figure>\n\n<p>a 写在后面就后运行，先计算 a+1=2 赋值给 b 后再++</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"keyword\">var</span> b = ++a + <span class=\"number\">1</span>;<span class=\"built_in\">document</span>.write(a);<span class=\"built_in\">document</span>.write(b); <span class=\"comment\">//答案 2；3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"，-（加等于、减等于）\"><a href=\"#，-（加等于、减等于）\" class=\"headerlink\" title=\"+= ， -=（加等于、减等于）\"></a>+= ， -=（加等于、减等于）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">10</span>;a ++;a ++;a ++;加十个      简化写法：a +=<span class=\"number\">10</span>;也是 a = a+<span class=\"number\">10</span>;</span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">10</span>;a += <span class=\"number\">10</span> + <span class=\"number\">1</span>; <span class=\"comment\">//答案 21</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;a = a + <span class=\"number\">10</span>;等于 a+=<span class=\"number\">10</span></span><br><span class=\"line\">a++是 a +=<span class=\"number\">1</span> 的写法</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（除等于）\"><a href=\"#（除等于）\" class=\"headerlink\" title=\"/=（除等于）\"></a>/=（除等于）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">a /= <span class=\"number\">2</span>; <span class=\"comment\">//答案 5，是除二赋给自身的意思</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（乘等于）\"><a href=\"#（乘等于）\" class=\"headerlink\" title=\"*=（乘等于）\"></a>*=（乘等于）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">10</span>;a *=<span class=\"number\">2</span>; <span class=\"comment\">//答案：20，是乘二赋给自身的意思</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（模等于）\"><a href=\"#（模等于）\" class=\"headerlink\" title=\"%=（模等于）\"></a>%=（模等于）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a=<span class=\"number\">10</span>;a%=<span class=\"number\">2</span>; <span class=\"comment\">//答案：0， 10 能整除 2,余数是 0,取余，余数赋给自身。</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a=<span class=\"number\">3</span>;a%=<span class=\"number\">4</span>; <span class=\"comment\">//答案：3，3 除以 4，余数为 3，余数赋给自身。</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a=<span class=\"number\">0</span>;a%=<span class=\"number\">4</span>; <span class=\"comment\">//答案：0，0 除以 4，余数为 0，余数赋给自身。</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;a% =<span class=\"number\">10</span>; <span class=\"comment\">//答案：1，1 除以 10，余数为 1，余数赋给自身。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>作业：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、写出打印结果</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =(<span class=\"number\">10</span> * <span class=\"number\">3</span> – <span class=\"number\">4</span> / <span class=\"number\">2</span> + <span class=\"number\">1</span>)%<span class=\"number\">2</span>,b=<span class=\"number\">3</span>;b %= a + <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(a++);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.wtite(“&lt;br&gt;”);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(--b);</span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"keyword\">var</span> a =<span class=\"number\">123</span>; <span class=\"keyword\">var</span> b =<span class=\"number\">234</span>;经过计算交换 a，b 的值</span><br><span class=\"line\"></span><br><span class=\"line\">作业答案</span><br><span class=\"line\"><span class=\"number\">1</span>、 <span class=\"built_in\">document</span>.write(a++);是 <span class=\"number\">1</span>（先打出 <span class=\"number\">1</span> 再++）</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(--b);是 <span class=\"number\">2</span></span><br><span class=\"line\">    b % =a + <span class=\"number\">3</span>,的模等于 <span class=\"number\">4</span>，除不开再赋值给 b，b 还是 <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、 方法一普通方法：<span class=\"keyword\">var</span> c = a; a = b; b = c;<span class=\"built_in\">document</span>.write(a ,b);</span><br><span class=\"line\"></span><br><span class=\"line\">    方法二 a = a + b; b = a – b; a = a – b; <span class=\"built_in\">document</span>.write(a ,b);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、比较运算符\"><a href=\"#二、比较运算符\" class=\"headerlink\" title=\"二、比较运算符\"></a>二、比较运算符</h2><blockquote>\n<p>“&gt;”，”&lt;”，”==”，“&gt;=”，“&lt;=”，”!=”比较结果为 boolean 值</p>\n</blockquote>\n<p>但凡是运算符，都是要有运算的</p>\n<p>用到布尔值，true 或 false</p>\n<p>字符串的比较，比的是 ASCII 码（七位二进制 0000000）</p>\n<h3 id=\"gt-，-lt-（大于、小于）\"><a href=\"#gt-，-lt-（大于、小于）\" class=\"headerlink\" title=\"&gt;， &lt;（大于、小于）\"></a>&gt;， &lt;（大于、小于）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"string\">&quot;a&quot;</span>&gt;<span class=\"string\">&quot;b&quot;</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案是 false</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &gt; <span class=\"number\">2</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案是 false</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &lt; <span class=\"number\">2</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案是 true</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"string\">&quot;1&quot;</span>&gt;<span class=\"string\">&quot;8&quot;</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案是 false</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"string\">&quot;10&quot;</span>&gt;<span class=\"string\">&quot;8&quot;</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 false，不是十和八比，是字符串一</span></span><br><span class=\"line\">零和八比，先用开头的一和八比，比不过就不看第二位了；一样的就拿零和八比</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">    运算结果为真实的值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"，等于\"><a href=\"#，等于\" class=\"headerlink\" title=\"==，等于\"></a>==，等于</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> == <span class=\"number\">2</span>; <span class=\"comment\">//答案是说 1 等不等于 2，因为 1 肯定不等于 2，所以值为 false</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>; <span class=\"comment\">//答案是 false，NaN 不等于任何东西，包括他自己</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"literal\">undefined</span> == underfined; <span class=\"comment\">//答案是 true</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = infinity == infinity; <span class=\"comment\">//答案是 true</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>; <span class=\"comment\">//答案是 false。非数 NaN 是不等于自己的</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>NaN 得不出数，又是数字类型，就是 NaN</strong></p>\n</blockquote>\n<h3 id=\"gt-、-lt-、-（大于等于、小于等于、非等于）\"><a href=\"#gt-、-lt-、-（大于等于、小于等于、非等于）\" class=\"headerlink\" title=\"&gt;=、&lt;=、!=（大于等于、小于等于、非等于）\"></a>&gt;=、&lt;=、!=（大于等于、小于等于、非等于）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">比较结果为 boolean 值：<span class=\"literal\">true</span> 和 <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、逻辑运算符：“-amp-amp-”，“-”，“-“运算结果为真实的值\"><a href=\"#三、逻辑运算符：“-amp-amp-”，“-”，“-“运算结果为真实的值\" class=\"headerlink\" title=\"三、逻辑运算符：“&amp;&amp;”，“||”，“!“运算结果为真实的值\"></a>三、逻辑运算符：“&amp;&amp;”，“||”，“!“运算结果为真实的值</h2><h3 id=\"“-amp-amp-”与运算符（与、并且）\"><a href=\"#“-amp-amp-”与运算符（与、并且）\" class=\"headerlink\" title=\"“&amp;&amp;”与运算符（与、并且）\"></a>“&amp;&amp;”与运算符（与、并且）</h3><blockquote>\n<p>两个表达式：先看第一个表达式转换成布尔值的结果是否为真，如果结果为真，那么它会看第二个表达式转换为布尔值的结果，然后如果只有两个表达式的话，只看第二个表达式，就可以返回该表达式的值了，如果第一位布尔值为 false，不看后面的，返回第一个表达式的值就可以了</p>\n</blockquote>\n<p><code>运算符就是要求结果</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span>;  <span class=\"comment\">//答案 2，如果第一位 1 为真，结果就为第二位的值 2</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">2</span> + <span class=\"number\">2</span>; <span class=\"comment\">//答案 4，如果 1 为真，结果就为 4</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">2</span> + <span class=\"number\">2</span>; <span class=\"comment\">//答案 0</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">8</span>; <span class=\"comment\">//答案 8，先看第一个是否为真，为真再看第二个，</span></span><br><span class=\"line\"></span><br><span class=\"line\">中途如果遇到 <span class=\"literal\">false</span>，那就返回 <span class=\"literal\">false</span> 的值</span><br><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a =<span class=\"number\">1</span> + <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">1</span> – <span class=\"number\">1</span>;<span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>如果是三个或多个表达式，会先看第一个表达式是否为真，如果为真，就看第二个表达式，如果第二个也为真，就看第三个表达式（如果为真就往后看，一旦遇到假就返回到假的值），如果第三个是最后一个表达式，那就直接返回第三个的结果</code></p>\n<blockquote>\n<p>如果第一个是假，就返回第一个值，当是真的时候就往后走，一旦遇到假，就返回被认定为 false(假) 的值：转换为布尔值会被认定为 false 的值 undefined， null， NaN， “”（空串）， 0， false</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">2</span> &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">document</span>.write(‘成哥很帅’) <span class=\"comment\">//意思是如果 2 大于 1，那么就打印成哥很帅，如果前面真才能执行后面的（相当于短路语句使用）</span></span><br><span class=\"line\">   &amp;&amp; 与 运算符是有中断作用的，当短路语句使用(如果。。那么。。)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = ...; <span class=\"comment\">//执行一个语句，会用到 data</span></span><br><span class=\"line\">    data&amp;&amp;执行一个语句全用到 data</span><br><span class=\"line\">data &amp;&amp; <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"amp-与运算-我们一般不用\"><a href=\"#amp-与运算-我们一般不用\" class=\"headerlink\" title=\"&amp;与运算 我们一般不用\"></a>&amp;与运算 我们一般不用</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &amp; <span class=\"number\">2</span>;<span class=\"built_in\">document</span>.write(num); <span class=\"comment\">//答案 0</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &amp; <span class=\"number\">1</span>;<span class=\"built_in\">document</span>.write(num); <span class=\"comment\">//答案 1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &amp; <span class=\"number\">3</span>;<span class=\"built_in\">document</span>.write(num); <span class=\"comment\">//答案 1</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>上下一与，不同为 0，相同为 1</li>\n</ol>\n<ul>\n<li>在二进制中，是 1（为了对齐补的 0） 0 1</li>\n<li>在二进制中，是 11 1 1</li>\n<li>运算结果 0 1</li>\n</ul>\n<h3 id=\"“-”或运算符（或者）\"><a href=\"#“-”或运算符（或者）\" class=\"headerlink\" title=\"“||”或运算符（或者）\"></a>“||”或运算符（或者）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> || <span class=\"number\">3</span>; <span class=\"comment\">//答案 1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">0</span> || <span class=\"number\">3</span>; <span class=\"comment\">//答案 3</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">0</span> || <span class=\"literal\">false</span>; <span class=\"comment\">//答案是 false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>看第一个表达式是否为真，如果为真，则返回第一个值，碰到真就返回</code></p>\n<p><code>如果第一个表达式是假，就看第二个表达式，如果第二个是最后一个，就返回第二个的值</code></p>\n<p><code>关注真假的说法：全假才为假，有一个真就为真</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">0</span> || <span class=\"literal\">false</span> || <span class=\"number\">1</span>; <span class=\"built_in\">document</span>.write(num); <span class=\"comment\">//答案 1</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    div .onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    非 IE 浏览器直接取 e 值</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = e;</span><br><span class=\"line\">    IE 浏览器存在 <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    写成下面这样就解决了兼容性。在所有的浏览器中都好使</span><br><span class=\"line\">    div .onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;<span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"“-“非运算符，否的意思\"><a href=\"#“-“非运算符，否的意思\" class=\"headerlink\" title=\"“!“非运算符，否的意思\"></a>“!“非运算符，否的意思</h3><p>先转成布尔值，再取反</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = !<span class=\"number\">123</span>; <span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 false。123 的布尔值是 true，取反是 false</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = !<span class=\"string\">&quot;&quot;</span>;  <span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 true。空串””布尔值是 false，取反是 true</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = !!<span class=\"string\">&quot;&quot;</span>; <span class=\"built_in\">document</span>.write(a); <span class=\"comment\">//答案 false，取反后，再反过来，结果不变</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>; a =!a; <span class=\"built_in\">document</span>.write(a) <span class=\"comment\">//答案 false，自身取反，再赋值给自身</span></span><br></pre></td></tr></table></figure>\n\n<p><code>!=（非等于）是表达它们不等于</code></p>\n<p><code>被认定为 false 的值：转换为布尔值会被认定为 false 的值 undefined， null， NaN，&quot;&quot;（空串）， 0， false</code></p>\n<h2 id=\"（逗号）操作符\"><a href=\"#（逗号）操作符\" class=\"headerlink\" title=\", （逗号）操作符\"></a>, （逗号）操作符</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> a = (<span class=\"number\">1</span> - <span class=\"number\">1</span>, <span class=\"number\">1</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">    答案：<span class=\"number\">2</span>；</span><br><span class=\"line\"></span><br><span class=\"line\">    逗号操作符，这种情况，会先看一眼<span class=\"number\">1</span>，再看一眼<span class=\"number\">2</span>，然后返回<span class=\"number\">2</span>，就是<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = (</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )();</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">    <span class=\"comment\">// 在控制器中输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  1,2</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = (1,2);</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">，逗号 是一个运算符，由于有 括号() 的加持，所以先执行 (，逗号运算符)</span><br><span class=\"line\"></span><br><span class=\"line\">逗号 操作符的意思是先看前面的表达式，如果前面的表达式需要‘计算’的话，可以先计算，然后在计算后面的表达式(如果后面的表达式用计算的话)，都计算完之后，把后面的表达式计算结果返回回去。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h1><h2 id=\"一、If-语句-if、if-else-if-if-lt-—-gt-amp-amp-转换\"><a href=\"#一、If-语句-if、if-else-if-if-lt-—-gt-amp-amp-转换\" class=\"headerlink\" title=\"一、If 语句 if、if else if if &lt;—&gt; &amp;&amp; 转换\"></a>一、If 语句 if、if else if if &lt;—&gt; &amp;&amp; 转换</h2><p><code>if(条件判断)&#123; 当条件成立时，执行里面的执行语句 &#125; 当 if() 中的条件成立时，才能执行&#123;&#125;内的语句 当条件转化为布尔值，如果为 true 就执行；如果为 false 就不执行</code></p>\n<h3 id=\"放在-if-中是或者的意思，有一个是真就可以了\"><a href=\"#放在-if-中是或者的意思，有一个是真就可以了\" class=\"headerlink\" title=\"|| 放在 if 中是或者的意思，有一个是真就可以了\"></a><strong>|| 放在 if 中是或者的意思，有一个是真就可以了</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">if</span>(<span class=\"number\">1</span> &lt; <span class=\"number\">2</span>)&#123;<span class=\"built_in\">document</span>.write(“老邓很丑”);&#125;</span><br><span class=\"line\">例 <span class=\"keyword\">if</span> ( <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">8</span> &gt; <span class=\"number\">9</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"amp-amp-放在-if-中的，全真才为真，-amp-amp-是并且的意思\"><a href=\"#amp-amp-放在-if-中的，全真才为真，-amp-amp-是并且的意思\" class=\"headerlink\" title=\"&amp;&amp;放在 if 中的，全真才为真，&amp;&amp;是并且的意思\"></a><strong>&amp;&amp;放在 if 中的，全真才为真，&amp;&amp;是并且的意思</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">if</span> ( <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> || <span class=\"number\">8</span> &gt; <span class=\"number\">9</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if-和-amp-amp-的互相转化\"><a href=\"#if-和-amp-amp-的互相转化\" class=\"headerlink\" title=\"if 和&amp;&amp;的互相转化\"></a><strong>if 和&amp;&amp;的互相转化</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    90一100       alibaba</span></span><br><span class=\"line\"><span class=\"comment\">    80一90        tencent toutiao meituan 滴滴</span></span><br><span class=\"line\"><span class=\"comment\">    70一80        baidu eleme xiecheng 58赶集</span></span><br><span class=\"line\"><span class=\"comment\">    60一70        蘑菇街</span></span><br><span class=\"line\"><span class=\"comment\">    60以下        你肯定不是我教的!!!</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> score = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">90</span> &amp;&amp; score &lt;= <span class=\"number\">100</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;alibaba&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">80</span> &amp;&amp; score &lt;= <span class=\"number\">90</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;tencent&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">70</span> &amp;&amp; score &lt;= <span class=\"number\">80</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;baidu&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">60</span> &amp;&amp; score &lt;= <span class=\"number\">70</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;mogujie&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">60</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;Oh my god!!! &quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>不能写 (90 &lt; score &lt; 100),这样写会先比 90 &lt; score,等于 true 以后再跟 100 比</code></p>\n<p><code>else if 满足了第一条就不看第二条了，用 else if 要满足条件与条件之间互斥，不能有交叉点。除了上面所有以外的。else if 除了这个以外，满足第一个就不看了，不满足就看后面的</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    else if 除了这以外在看这个满不满足。满足条件后就不看了，上面的写法不够简洁</span></span><br><span class=\"line\"><span class=\"comment\">    下面 是 上面这个条件的补集</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> score = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">90</span> &amp;&amp; score &lt;= <span class=\"number\">100</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;alibaba&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">80</span> &amp;&amp; score &lt;= <span class=\"number\">90</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;tencent&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">70</span> &amp;&amp; score &lt;= <span class=\"number\">80</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;baidu&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">60</span> &amp;&amp; score &lt;= <span class=\"number\">70</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;mogujie&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">60</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;Oh my god!!! &quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"amp-amp-和-比较常用在条件判断中\"><a href=\"#amp-amp-和-比较常用在条件判断中\" class=\"headerlink\" title=\"&amp;&amp;和 || 比较常用在条件判断中\"></a><strong>&amp;&amp;和 || 比较常用在条件判断中</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">1</span> &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">上面与右边效果完全一样 <span class=\"number\">1</span> &gt; <span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、for-循环-for-循环不固定，非常灵活\"><a href=\"#二、for-循环-for-循环不固定，非常灵活\" class=\"headerlink\" title=\"二、for 循环(for 循环不固定，非常灵活)\"></a>二、for 循环(for 循环不固定，非常灵活)</h2><blockquote>\n<p>格式 for (var i = 0; i &lt; 10; i++) { }</p>\n</blockquote>\n<p><code>for 是关键字，（）括号里面三个语句用两个分号隔开，&#123;&#125;里面是循环体</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印十个 a，写成：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>执行顺序如下</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>) <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(‘a’)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把条件判断放到 if 里面,条件判断成立，就执行&#123;&#125;中间的执行体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>) i ++</span><br><span class=\"line\"><span class=\"comment\">// 看 i++，此时 i 变成 1，i = 1；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>) <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(‘a’)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把条件判断放到 if 里面,条件判断成立，就执行&#123;&#125;中间的执行体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>) i ++</span><br><span class=\"line\"><span class=\"comment\">// 看 i++，此时 i 变成 1，i=1；</span></span><br><span class=\"line\">——————如此反复</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">先执行一遍(<span class=\"number\">1</span>)，</span><br><span class=\"line\">判断(<span class=\"number\">2</span>)执行语句成不成立，条件成立就执行(<span class=\"number\">3</span>),</span><br><span class=\"line\">判断(<span class=\"number\">2</span>)执行语句成不成立，条件成立就执行(<span class=\"number\">3</span>),</span><br><span class=\"line\">......当有一次判断不成立，就停止</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为看的是执行顺序，写外面也可以，执行顺序是一样，打印十个 a，也可以写成：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; i &lt; <span class=\"number\">10</span>; ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印十个 a 也可以写成:</span></span><br><span class=\"line\"><span class=\"comment\">// 1.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cout = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; i; ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  count++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; i; ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例:打印 0-9:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求 0-9 的和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  count += i;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(count + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印 100 以内能被 3 整除，或者能被 5 整除，或者能被 7 整除的数：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span> || i % <span class=\"number\">5</span> == <span class=\"number\">0</span> || i % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;i&quot;</span> + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 for 循环打印一百个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for 循环中的三句只能写一句，打印 100 个数：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; i &lt; <span class=\"number\">100</span>; ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for 循环中的函数体里面只能写一句，打印 100 个数：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; i--; ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、while-do-while\"><a href=\"#三、while-do-while\" class=\"headerlink\" title=\"三、while, do while\"></a>三、while, do while</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><p><code>while 循环是 for 循环的简化版 for( ； ； )&#123;&#125;，while 循环底层机制是 for 循环。</code></p>\n<p><code>for ( ; 只在这一部分写，前后不写 ; )&#123;&#125;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">上下这两个完全相等;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 死循环 never-ending loop 无限循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(i);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例打印一百以内，7 的倍数就输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;i&quot;</span> + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例打印一百以内，7 的倍数或逢 7 就输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">7</span> == <span class=\"number\">0</span> || i % <span class=\"number\">10</span> == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"do-while-循环\"><a href=\"#do-while-循环\" class=\"headerlink\" title=\"do while 循环\"></a>do while 循环</h3><p><code>do while 是不管满不满足条件都会先执行一次，再判断成不成立，如果成立才会执行 第二次，不成立就停止, 一般没人用</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><ul>\n<li><p>（先找规律，再写出来） 提示：var n = parseIn(window.prompt(‘input’));</p>\n</li>\n<li><p>JS 可以进行浮点计算</p>\n</li>\n</ul>\n<ol>\n<li>计算 2 的 n 次幂，n 可输入，n 为自然数。</li>\n<li>计算 n 的阶乘，n 可输入。即 5！=5<em>4</em>3<em>2</em>1，最好写个 if</li>\n<li>著名的斐波那契额数列(这个数列从第 3 项开始，每一项都等于前两项之和) 1 1 2 3 5 8 输出第 n 项</li>\n<li>编写一程序，输入一个三位数的正整数，输出时反向输出。如：输入 456,输出 654</li>\n<li>输入 a,b,c 三个数字，打印出最大的。</li>\n<li>打印出 100 以内的质数（从 1 除到他本身，只能有两个因数）</li>\n</ol>\n<h2 id=\"作业答案\"><a href=\"#作业答案\" class=\"headerlink\" title=\"作业答案\"></a>作业答案</h2><p>1、原有结果 * 2,mul 是存上一个数的结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.promt(<span class=\"string\">&quot;input&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; n;i ++)&#123;</span><br><span class=\"line\">        mul *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(mul);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2、计算 n 的阶乘，n 可输入。即 5！=5<em>4</em>3<em>2</em>1，最好写个 if</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.promt(<span class=\"string\">&quot;input&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt;= n; i ++)&#123;</span><br><span class=\"line\">        mul *= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(mul);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3、斐不那契数列 第六位是四次运算，第七位是五次运算（第三位=第一位+第二位） 第一次计算的完整过程是把第一位和第二位相加，等于第三位，并且把游标向后挪 一位。下面 for（里面的 i 是控制循环圈数的）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = <span class=\"number\">1</span>;</span><br><span class=\"line\">        second = <span class=\"number\">1</span>;</span><br><span class=\"line\">        third;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">2</span>; i ++)&#123;</span><br><span class=\"line\">            third = first + second;</span><br><span class=\"line\">            first = second;</span><br><span class=\"line\">            second = third;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(third);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4、取模除减。先把 456 提出出来，再反过来。6 是取模除减%10 余 6。再用 456 减 6， 剩下 450；450%100 是 50，50 除以 10，取出 5，450-50 剩下 400；400%100，再反着乘一遍，十位乘以 10，百位乘以 100。（中间的位数其实可以不动）</p>\n<p>5、输入 a,b,c 三个数字，打印出最大的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.promot(<span class=\"string\">&quot;input&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = pars0eInt(<span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a &gt; c) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b &gt; c) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>, write(c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、有一个判断质数的算法,看看每一个 i 是不是质数,从自身开始除一直除到 1，只能被自己和 1 整除，只能整除 2 次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 看一看每一个 i 是否是质数</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= i; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>以下是最简单的方法：从 1 到 10 能整除，除平方数以下的</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 看一看每一个 i 是否是质数</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= <span class=\"built_in\">Math</span>.sqrt(i); j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"条件语句补充\"><a href=\"#条件语句补充\" class=\"headerlink\" title=\"条件语句补充\"></a>条件语句补充</h1><h2 id=\"一、switch-case-条件判断语句\"><a href=\"#一、switch-case-条件判断语句\" class=\"headerlink\" title=\"一、switch case 条件判断语句\"></a>一、switch case 条件判断语句</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件判断)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(条件)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> 写条件：里面判是否相符：</span><br><span class=\"line\">        如果相符合就执行 <span class=\"keyword\">case</span> 后面的语句比如 <span class=\"built_in\">console</span>.log(‘a’)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>switch 不负责任，如果判断了 a 是符合条件的，也会把后面的连带打印出来</code></p>\n<p><code>加个 break，就可以终止语句</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;a&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"literal\">true</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>switch 找到满足要求的语句后，后面的语句虽然不判断了，但是也会执行出来</code></p>\n<p><code>加个 break，就可以终止 swich case 语句</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;a&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"literal\">true</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>例 if( score == 90){}else if ( score == 100){}</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(date)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;monday&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;working&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;tuesday&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;working&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;wednesday&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;working&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;thursday&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;working&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;friday&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;working&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;周六&quot;</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;relaxing&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;周日&quot;</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;relaxing&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>简化写法:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(date)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;monday&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;tuesday&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;wednesday&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;thursday&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;friday&quot;</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;working&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;周六&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;周日&quot;</span>:</span><br><span class=\"line\">            condole.log(<span class=\"string\">&quot;relaxing&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、break-的标准定义是终止循环，break-必须要放在循环里面，switch-for-while-都是循环\"><a href=\"#二、break-的标准定义是终止循环，break-必须要放在循环里面，switch-for-while-都是循环\" class=\"headerlink\" title=\"二、break 的标准定义是终止循环，break 必须要放在循环里面，switch, for,while 都是循环\"></a>二、break 的标准定义是终止循环，break 必须要放在循环里面，switch, for,while 都是循环</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    i ++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>break 终止的是 while，对 if 没有影响</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">从 <span class=\"number\">0</span> 开始加，加到 <span class=\"number\">100</span> 以上就停止</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum &gt; <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、continue-继续、终止本次循环，来进行下一次循环\"><a href=\"#三、continue-继续、终止本次循环，来进行下一次循环\" class=\"headerlink\" title=\"三、continue 继续、终止本次循环，来进行下一次循环\"></a>三、continue 继续、终止本次循环，来进行下一次循环</h2><p>终止本次循环，后面的都不执行了，来进行下一次的循环</p>\n<p>js 里面是没有 goto 的，c 语言里面有</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">当 i 是 <span class=\"number\">7</span> 的倍数，或尾数是 <span class=\"number\">7</span> 的时候，不打印</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( i % <span class=\"number\">7</span> == <span class=\"number\">0</span> || i % <span class=\"number\">10</span> == <span class=\"number\">7</span>)&#123;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>下面写法更好</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">7</span> == <span class=\"number\">0</span> || i % <span class=\"number\">10</span> == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初识引用值\"><a href=\"#初识引用值\" class=\"headerlink\" title=\"初识引用值\"></a>初识引用值</h1><h2 id=\"一、数组（下面方括号的），arr-也是数组\"><a href=\"#一、数组（下面方括号的），arr-也是数组\" class=\"headerlink\" title=\"一、数组（下面方括号的），arr =也是数组\"></a>一、数组（下面方括号的），arr =也是数组</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,”abc”,<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">arr [<span class=\"number\">0</span>] 代表查数组的第一位，因为数字是从 <span class=\"number\">0</span> 开始的算的</span><br><span class=\"line\">arr [<span class=\"number\">0</span>] = <span class=\"number\">3</span>; 是指把数组的第一位改成 <span class=\"number\">3</span>，显示 <span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>, ”abc”,<span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.length;是数组的长度，有多少位就有多少</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length); <span class=\"comment\">//答案是 8 位</span></span><br></pre></td></tr></table></figure>\n\n<p>1.<strong>利用 for 循环把数组中的每一位都拿出来——遍历</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.letter; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.<strong>把数组中的每一位都改成 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  arr[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>把数组中的每一位都加 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, , <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  arr[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、对象-object\"><a href=\"#二、对象-object\" class=\"headerlink\" title=\"二、对象 object\"></a>二、对象 object</h2><blockquote>\n<p>面向对象的编程方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    里面存属性和方法</span><br><span class=\"line\">    key 属性名：value 属性值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>在&#123;&#125;面用。属性与属性之间用逗号隔开</code></p>\n<p><code>属性值可以双引号或单引号；属性名是为了方便找到他，只是一个辅助</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> deng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">lastName</span> : <span class=\"string\">&quot;Deng&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        <span class=\"attr\">wife</span> : <span class=\"string\">&quot;xiaoliu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">father</span> : <span class=\"string\">&quot;dengdaye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">son</span> : <span class=\"string\">&quot;xiaodeng&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">handsome</span> :<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(deng.lastName); <span class=\"comment\">//取值方式 deng.lastName</span></span><br><span class=\"line\">赋值 deng.lastName = “old deng”;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(deng.lastName);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编程形式的区别\"><a href=\"#编程形式的区别\" class=\"headerlink\" title=\"编程形式的区别\"></a>编程形式的区别</h1><p><code>面向过程，如 c (第一步干嘛，第二步干嘛)</code></p>\n<p><code>面向对象（对象 object） （现在 js 是一半面向过程，一半面向对象，前面学的都是面向过程）</code><br>``</p>\n<h1 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h1><blockquote>\n<p>typeof 能返回的六种数据类型（区分数字类型）</p>\n</blockquote>\n<p><code>number、string、boolean、undefined、object、function</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num)); <span class=\"comment\">//返回 number</span></span><br></pre></td></tr></table></figure>\n\n<p><code>写成 console.log(typeof num );也可以,不过最好加括号</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> num = &#123;&#125;; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num)); <span class=\"comment\">//泛泛的引入值都返回 object</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = [];<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num)); <span class=\"comment\">//泛泛的引入值都返回 object</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"literal\">null</span>;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num)); <span class=\"comment\">//答案 null 返回 object，最早是代替空对象的</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"literal\">undefined</span>;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num)); <span class=\"comment\">//答案返回 undefined</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"function\"><span class=\"title\">fuction</span>(<span class=\"params\"></span>)</span>&#123;&#125;;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num)); <span class=\"comment\">// 答案返回 function</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> +“<span class=\"number\">1</span>”; <span class=\"comment\">//显示 11</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> *“<span class=\"number\">1</span>”;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num); <span class=\"comment\">//显示 number:1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">1</span> -“<span class=\"number\">1</span>”;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num); <span class=\"comment\">//显示 number:0</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = “<span class=\"number\">2</span>” -“<span class=\"number\">1</span>”;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num); <span class=\"comment\">//显示 number:1</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = “<span class=\"number\">2</span>” *“<span class=\"number\">1</span>”;<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num); <span class=\"comment\">//显示 number:2</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上例子说明 js 有类型转换</p>\n</blockquote>\n<h2 id=\"一、显示类型转换\"><a href=\"#一、显示类型转换\" class=\"headerlink\" title=\"一、显示类型转换\"></a>一、显示类型转换</h2><h3 id=\"Number-mix-是想把里面的东西转换成数字\"><a href=\"#Number-mix-是想把里面的东西转换成数字\" class=\"headerlink\" title=\"Number(mix) 是想把里面的东西转换成数字\"></a>Number(mix) 是想把里面的东西转换成数字</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(‘<span class=\"number\">123</span>’);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"number\">123</span>，把字符串类型的 <span class=\"number\">123</span> 转换成了 number 类型</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “<span class=\"number\">123</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"number\">123</span>，上面那一行的 <span class=\"built_in\">Number</span> 是为了把()里面转换成数字类型</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"number\">1</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"number\">0</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"number\">0</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"literal\">NaN</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “abc”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"literal\">NaN</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “-<span class=\"number\">123</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:-<span class=\"number\">123</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “123abc”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 <span class=\"built_in\">Number</span>:<span class=\"literal\">NaN</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parseInt-string-radix\"><a href=\"#parseInt-string-radix\" class=\"headerlink\" title=\"parseInt(string,radix)\"></a>parseInt(string,radix)</h3><blockquote>\n<p>parse 是转化，Int 是整型，整数，目的是把里面转换成整数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo =”<span class=\"number\">123</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number:<span class=\"number\">123</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"literal\">NaN</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"literal\">NaN</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"number\">123.9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">123</span>，此处是直接去掉小数，不是四舍五入</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “<span class=\"number\">10</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo ,<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>var num = parseInt(demo ,radix); //radix 是基底的意思</p>\n</blockquote>\n<p><strong>radix 写成 16，系统会认为是以 16 进制为基底， 10（一零）是 16 进制的一零，是<br>以 16 进制为基底，把他转成为 10 进制的数字（就是 16），上面是以目标进制为基底，<br>转换成十进制（radix 范围是 2-36）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “<span class=\"number\">3</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo ,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"literal\">NaN</span></span><br><span class=\"line\">例</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “b”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo ,<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">11</span></span><br><span class=\"line\">例</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “123abc”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">123</span></span><br><span class=\"line\">例</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “100px”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>parseInt 从数字类开始看，看到非数字类为止，返回原来的数</p>\n</blockquote>\n<h3 id=\"parseFloat-string\"><a href=\"#parseFloat-string\" class=\"headerlink\" title=\"parseFloat(string)\"></a>parseFloat(string)</h3><blockquote>\n<p>parseFloat(string)转换成浮点数字，就是正常小数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “<span class=\"number\">100.2</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span> (demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">100.2</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “<span class=\"number\">100.2</span><span class=\"number\">.3</span>”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span> (demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">100.2</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “<span class=\"number\">100.</span>2abc”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span> (demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 number: <span class=\"number\">100.2</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>parseFloat 从数字类开始看，看到除了第一个点以外的非数字类为截止，返回前面的数</p>\n</blockquote>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><blockquote>\n<p>把 谁 变成字符串类型 (以 10 为基底转换为目标进制)（undefined 和 null 不可以用 toString 方法）；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = demo.toString();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 string: <span class=\"number\">123</span>。相当于把 <span class=\"number\">123</span> 转换字符串。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>想把谁转换成字符串，就写成谁.toString，上面是想把 demo 转换成 toString，写成 demo.toString</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = demo.toString();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示报错，<span class=\"literal\">undefined</span> 和 <span class=\"literal\">null</span> 不能用 toString</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = demo.toString(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案 <span class=\"number\">173</span>，把 <span class=\"number\">123</span> 转成为八进制</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的 radix 意思是以十进制为基底，转换成目标进制（即 8 进制）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = demo.toString(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案 <span class=\"number\">12</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = demo.toString(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案 <span class=\"number\">24</span>。以十进制为基底，把 <span class=\"number\">20</span> 转换成 <span class=\"number\">8</span> 进制，就是 <span class=\"number\">24</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    给你一个二进制的数，转换成十六进制，是先从二进制到十进制再到十六进制</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">10101010</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"built_in\">parseInt</span>(num, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.toString(<span class=\"number\">16</span>));</span><br><span class=\"line\">    答案 aa</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"built_in\">parseInt</span>(num, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.toString(<span class=\"number\">16</span>));</span><br><span class=\"line\">    答案 <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String-mix\"><a href=\"#String-mix\" class=\"headerlink\" title=\"String(mix)\"></a>String(mix)</h3><blockquote>\n<p>String(mix)转换成字符串，写什么都成了字符串</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"number\">123.234</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">String</span> (demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 string: <span class=\"number\">123.234</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">String</span> (demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 string: <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean()\"></a>Boolean()</h3><blockquote>\n<p>Boolean()转换成布尔值 false 和 true</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = “”;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">String</span> (demo);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “:” + num);</span><br><span class=\"line\">    答案显示 boolean: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toFixed\"><a href=\"#toFixed\" class=\"headerlink\" title=\"toFixed\"></a>toFixed</h3><blockquote>\n<p>toFixed 就是保留小数点几位</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">var</span> num = <span class=\"number\">123.456789</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.toFixed(<span class=\"number\">3</span>));</span><br><span class=\"line\">效果：</span><br><span class=\"line\">num = <span class=\"number\">123.457</span>(四舍五入)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、隐式类型转换\"><a href=\"#二、隐式类型转换\" class=\"headerlink\" title=\"二、隐式类型转换\"></a>二、隐式类型转换</h2><ol>\n<li><p>隐式类型转换是跟你转换了也不知道</p>\n</li>\n<li><p>隐式类型转换内部隐式调用的是显示的方法</p>\n</li>\n<li><p>隐式类型转换包括 isNaN () ，++，–， +/-（一元正负），+，*，% ，，&amp;&amp;，|| ，！，&lt;，&gt;，&lt;= ，&gt;= ，== ，!=</p>\n</li>\n</ol>\n<h3 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN ();\"></a>isNaN ();</h3><blockquote>\n<p>isNaN ();当你把一个数放到()里，它能判断是不是 NaN，先比括号里面的放到 number 里面转换，然后返回来</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">//答案 true</span></span><br><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(“<span class=\"number\">123</span>”); <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(“abc”); <span class=\"comment\">//答案 true。会调用 number，先把“abc”</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>放 number 里面转换，通过 number 的转换再和 NaN 比对，如果相等就是 true</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">null</span>); <span class=\"comment\">//答案 false，在 number 里面放 null 是 0，不是 NaN</span></span><br><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">//答案 true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"–（加加减减）-（一元正负）\"><a href=\"#–（加加减减）-（一元正负）\" class=\"headerlink\" title=\"++/–（加加减减） +/-（一元正负）\"></a>++/–（加加减减） +/-（一元正负）</h3><ol>\n<li>++/–（加加减减）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = “<span class=\"number\">123</span>”;</span><br><span class=\"line\">    a ++;</span><br><span class=\"line\">    答案 <span class=\"number\">124</span>，++这个符号放到这里，还没运算之前，先把前面的 a 转换成 number 的 <span class=\"number\">123</span></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = “abc”;</span><br><span class=\"line\">    a ++;</span><br><span class=\"line\">    答案 <span class=\"literal\">NaN</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>+/-（一元正负）</li>\n</ol>\n<blockquote>\n<p>+a;-a;正 a 和负 a 都会变换成数字</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a =+<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a + “:” + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">答案 <span class=\"literal\">NaN</span>:number。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>尽管转换不成数字，也会转换成数字类型，因为里面隐式的调用了一个 number</p>\n</blockquote>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h3><blockquote>\n<p>+隐式类型会转换成 string，当加号两侧有一个是字符串，就用调用 string，把两个都变成字符串</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"keyword\">var</span> a = <span class=\"string\">&quot;a&quot;</span> +<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a + <span class=\"string\">&quot;:&quot;</span> + <span class=\"keyword\">typeof</span>(a));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"* , %\"></a>* , %</h3><blockquote>\n<p>*和% 乘和模都会转换成 number</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&quot;1&quot;</span> *<span class=\"number\">1</span>; <span class=\"built_in\">console</span>.log(a + <span class=\"string\">&quot;:&quot;</span> + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案 <span class=\"number\">1</span>：number</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&quot;:&quot;</span> *<span class=\"number\">1</span>; <span class=\"built_in\">console</span>.log(a + <span class=\"string\">&quot;:&quot;</span> + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案 <span class=\"number\">1</span>：number，先是 number(<span class=\"string\">&quot;a&quot;</span>)的结果乘以 number(<span class=\"number\">1</span>)的结果，最后是 <span class=\"literal\">NaN</span>*<span class=\"number\">1</span>，还是 <span class=\"literal\">NaN</span>，但是数据类型是 number</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"&amp;&amp; || !\"></a>&amp;&amp; || !</h3><blockquote>\n<p>与或非，都是有类型转换的，不过是返回的是表达式的值，不是隐式类型转换的值，但是判断是一个类型转换的值</p>\n</blockquote>\n<h3 id=\"lt-，-gt-，-lt-，-gt\"><a href=\"#lt-，-gt-，-lt-，-gt\" class=\"headerlink\" title=\"&lt; ， &gt; ， &lt;= ， &gt;=\"></a>&lt; ， &gt; ， &lt;= ， &gt;=</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =<span class=\"number\">1</span> &gt; “<span class=\"number\">2</span>”; <span class=\"built_in\">console</span>.log(a + “:” + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案 <span class=\"literal\">false</span>:boolean，有数字相比较的，就会隐士类型转换成数字类型</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =”<span class=\"number\">3</span>” &gt; “<span class=\"number\">2</span>”; <span class=\"built_in\">console</span>.log(a + “:” + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案这个没类型转换，这个比的是 ASCⅡ</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =”<span class=\"number\">3</span>” &gt; <span class=\"number\">2</span>; <span class=\"built_in\">console</span>.log(a + “:” + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案 <span class=\"literal\">true</span>：boolean 会转换成数字，因为数字优先</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"，-，\"><a href=\"#，-，\" class=\"headerlink\" title=\"== ， ! ， =\"></a>== ， ! ， =</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> == “<span class=\"number\">1</span>”; <span class=\"built_in\">console</span>.log(a + “:” + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案 <span class=\"literal\">true</span>:boolean，也有隐士类型转换</span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> == <span class=\"literal\">true</span>; <span class=\"built_in\">console</span>.log(a + “:” + <span class=\"keyword\">typeof</span>(a));</span><br><span class=\"line\">    答案相等</span><br></pre></td></tr></table></figure>\n\n<p>！= 也是这样<br>特殊东西，在控制台操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"literal\">false</span> &gt; <span class=\"literal\">true</span>; <span class=\"comment\">//答案 false，会先转换成数字，0&gt;1 当然是错的</span></span><br><span class=\"line\">例: <span class=\"number\">2</span> &gt; <span class=\"number\">1</span> &gt; <span class=\"number\">3</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"number\">2</span> &gt; <span class=\"number\">3</span> &lt; <span class=\"number\">1</span>; <span class=\"comment\">//答案 true</span></span><br><span class=\"line\">例: <span class=\"number\">10</span> &gt; <span class=\"number\">100</span> &gt; <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"number\">100</span> &gt; <span class=\"number\">10</span> &gt; <span class=\"number\">0</span>; <span class=\"comment\">//答案 true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上都是挨个算的，先看前面的是 true 还是 false，再和后面的比，不是顺着下来</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"literal\">undefined</span> &gt; <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"literal\">undefined</span> == <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"literal\">undefined</span> &lt; <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"literal\">null</span> &gt; <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"literal\">null</span> == <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"literal\">null</span> &lt; <span class=\"number\">0</span>; <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例: <span class=\"literal\">undefined</span> == <span class=\"literal\">null</span>; <span class=\"comment\">//答案 true</span></span><br><span class=\"line\">例: <span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>; <span class=\"comment\">//答案 false，NaN 是唯一一个连自己都不等于的</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、不发生类型转换\"><a href=\"#三、不发生类型转换\" class=\"headerlink\" title=\"三、不发生类型转换\"></a>三、不发生类型转换</h2><h3 id=\"绝对等于（三个等号）-绝对不等于\"><a href=\"#绝对等于（三个等号）-绝对不等于\" class=\"headerlink\" title=\"===绝对等于（三个等号） !==绝对不等于\"></a>===绝对等于（三个等号） !==绝对不等于</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"number\">1</span> === <span class=\"number\">1</span> <span class=\"comment\">//答案 true</span></span><br><span class=\"line\">例 <span class=\"number\">1</span> === “<span class=\"number\">1</span>” <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例 <span class=\"number\">1</span> !== “<span class=\"number\">1</span>” <span class=\"comment\">//答案 true</span></span><br><span class=\"line\">例 <span class=\"number\">1</span> !== <span class=\"number\">1</span> <span class=\"comment\">//答案 false</span></span><br><span class=\"line\">例 <span class=\"literal\">NaN</span> =<span class=\"literal\">NaN</span> <span class=\"comment\">//答案 false 特殊的</span></span><br><span class=\"line\">例 <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//如果定量没定义就直接访问，就 a is not defined 报错；</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有一种特殊情况，当且仅当把未定义的变量放到 console.log(typeof(a));里面就访问，<br>不报错，返回 undefined</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(a)); <span class=\"comment\">//答案 undefined，这个 undefined 是字符串</span></span><br><span class=\"line\">例 <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">typeof</span>(a))); <span class=\"comment\">//答案 string。console.log(typeof(typeof(a)));</span></span><br></pre></td></tr></table></figure>\n\n<p><code>可以先解析成 console.log(typeof(“undefined”));再返回一次就是 string 字符串</code></p>\n<p><code>上面考的是 typeof(a)返回的六种类型的值（number、string、boolean、undefined、object、function）都是 undefined 字符串</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">作业</span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(a)); <span class=\"comment\">//返回 string</span></span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">//返回 string，undefined</span></span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(<span class=\"literal\">NaN</span>)); <span class=\"comment\">//返回 number</span></span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(<span class=\"literal\">null</span>)); <span class=\"comment\">//返回 object</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> a = “123abc”; <span class=\"comment\">//返回 string</span></span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(+a)); <span class=\"comment\">//返回 number，NaN</span></span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(!!a)); <span class=\"comment\">//返回 boolean</span></span><br><span class=\"line\">例 alert(<span class=\"keyword\">typeof</span>(a + “”)); <span class=\"comment\">//返回 string</span></span><br><span class=\"line\">例 alert(<span class=\"number\">1</span> == “<span class=\"number\">1</span>”); <span class=\"comment\">//显示 true</span></span><br><span class=\"line\">例 alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>); <span class=\"comment\">//显示 false</span></span><br><span class=\"line\">例 alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">undefined</span>); <span class=\"comment\">//显示 false</span></span><br><span class=\"line\">例 alert( “<span class=\"number\">11</span>” + <span class=\"number\">11</span>); <span class=\"comment\">//显示 1111</span></span><br><span class=\"line\">例 alert( <span class=\"number\">1</span> === “<span class=\"number\">1</span>”); <span class=\"comment\">//显示 false</span></span><br><span class=\"line\">例 alert(<span class=\"built_in\">parseInt</span>(“123abc”)); <span class=\"comment\">//显示 123【parseInt 是截断数字】</span></span><br><span class=\"line\">例 <span class=\"keyword\">typeof</span>(<span class=\"keyword\">typeof</span>(a)); <span class=\"comment\">//返回 string</span></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> num = <span class=\"number\">123123.345789</span>;alert(num.toFixed(<span class=\"number\">3</span>));</span><br><span class=\"line\">答案 <span class=\"number\">123123.346</span>【toFixed(<span class=\"number\">3</span>)是保留三位小数的意思，四舍五入】</span><br><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\">alert(‘a’);就是弹出框，相当于 <span class=\"built_in\">console</span>.log</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数 function\"></a>函数 function</h1><blockquote>\n<p>function 随便起个名(){}</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">if</span> (<span class=\"number\">1</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">2</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">1</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">2</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">3</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>以上情况就是偶合，偶合度非常高，偶合代码就是低效代码</strong></li>\n<li><strong>编程讲究高内聚，弱偶合</strong></li>\n<li>右上方是简便写法：可以用 test 调用执行，写几个 test 就调用执行几次</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = a + b;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    test()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">答案 <span class=\"number\">357</span>。写了一个 test（）；就执行了一遍函数语句，如果不写 test（）；就相当于</span><br><span class=\"line\">有一个框来存东西，但是不执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(‘hello world’);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>函数 function 可以先定义功能，之后再去用</p>\n</blockquote>\n<h2 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h2><h3 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h3><blockquote>\n<p>定义一个函数可以先写一个 function,函数就是另一个类型的变量</p>\n</blockquote>\n<p>我声明一个函数 test,test 是函数名。写成下面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  函数体;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>函数名起名：开发规范要求，函数名和变量名如果由多个单词拼接，必须符合小驼峰原则（第一个单词首字母小写，后面的首字母大写）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">theFirstName</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(theFirstName);</span><br><span class=\"line\">答案 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">theFirstName</span>(<span class=\"params\"></span>)</span>&#123;&#125;。打印出来的是函数体</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这与 c 语言和 c++，他们打印指针，会输出指针的地址，而 js 这种弱数据语言（解释性语言）永远不输出地址，输出地址指向房间</p>\n</blockquote>\n<h3 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a><strong>函数表达式</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = fuction test ()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(‘a’);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">答案 a。这种方式像定义一个变量</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面这种方式，可以演变成第三种，匿名表达式【不写 test 这种函数名】</p>\n</blockquote>\n<h4 id=\"命名函数表达式\"><a href=\"#命名函数表达式\" class=\"headerlink\" title=\"命名函数表达式\"></a><strong>命名函数表达式</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例 <span class=\"keyword\">var</span> demo = fuction <span class=\"function\"><span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(‘a’);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>上面这个函数的函数名 name 是 abc</p>\n</li>\n<li><p>在控制台 console 直接输出 test 就会出现 →</p>\n</li>\n<li><p>在控制台 console 直接输出 abc 会报错，表达式就会忽略他的名字 abc。</p>\n</li>\n<li><p>在上面例子中，fuction abc(){document.write(‘a’);}这一部分叫表达式，是会忽略 abc 这个地方的名字，会变成匿名函数表达式，不如直接写成匿名函数</p>\n</li>\n</ul>\n<h4 id=\"匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）\"><a href=\"#匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）\" class=\"headerlink\" title=\"匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）\"></a><strong>匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、组成形式\"><a href=\"#二、组成形式\" class=\"headerlink\" title=\"二、组成形式\"></a>二、组成形式</h2><h3 id=\"函数名称\"><a href=\"#函数名称\" class=\"headerlink\" title=\"函数名称\"></a>函数名称</h3><p>function test(){}其中 function 是函数关键字，test 是函数名，必须有(){}，参数可有可<br>没有，参数是写在()括号里面的。</p>\n<p>如果写成 function test(a，b){}，相当于隐式的在函数里面 var a，var b 申明了两个变<br>量，（）括号里面不能直接写 var</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">document</span>.write(a + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">答案 <span class=\"number\">3</span>。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面这个例子，1 就会到 a 里面去，2 就会到 b 里面去，这是传参的形式</p>\n</blockquote>\n<h3 id=\"参数-可有可没有，但是高级编程必有\"><a href=\"#参数-可有可没有，但是高级编程必有\" class=\"headerlink\" title=\"参数(可有可没有，但是高级编程必有)\"></a>参数(可有可没有，但是高级编程必有)</h3><p><code>形参（形式参数）：指的是 function sum（a，b）&#123;&#125;括号里面的 a 和 b</code></p>\n<p><code>实参（实际参数）：指的是 sum（1，2）；里面的 1，2</code></p>\n<p><code>天生不定参，形参可以比实参多，实参也可以比形参多</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = a + b;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    sum(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">答案 <span class=\"number\">37</span>，参数把函数抽象了，可以组成很多形式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    如果第一个实参的数大于 <span class=\"number\">10</span>，就减第二个数的运算结果；如果第一个实参的数小于 <span class=\"number\">10</span>，就加第二个数的运算结果</span><br><span class=\"line\">    <span class=\"comment\">//function test()&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 形式参数 ———— 形参</span></span><br><span class=\"line\">    funtion <span class=\"function\"><span class=\"title\">sum</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.write(a - b);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a &lt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.write(a + b);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 实际参数 ———— 实参</span></span><br><span class=\"line\">    sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>）</span><br><span class=\"line\">    答案：<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    上面改成sum(<span class=\"number\">11</span>,<span class=\"number\">2</span>)    <span class=\"comment\">//答案 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">答案 <span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b, c,d</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">答案 <span class=\"number\">11</span>,<span class=\"literal\">undefined</span>，上面这道题是形参多，实参少</span><br></pre></td></tr></table></figure>\n\n<p>js 参数不限制数量，天生不定参数</p>\n<p>在每一个函数里面都有一个隐式的东西 arguments 这个是实参列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">答案[<span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]，<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argument.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">答案 <span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a,b,c,d</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum.length &gt;<span class=\"built_in\">arguments</span>.length)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;形参多了&quot;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum.length &lt; <span class=\"built_in\">arguments</span>.length)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;实参多了&quot;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;相等&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际参数 ———— 实参</span></span><br><span class=\"line\">sum(<span class=\"number\">11</span>,<span class=\"literal\">undefined</span><span class=\"number\">.3</span>,<span class=\"string\">&quot;abc&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    形参长度求法</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, c, d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(sum.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    答案 <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">任意个数求和(不定参才能求出来)</span><br><span class=\"line\"></span><br><span class=\"line\">    funtion <span class=\"function\"><span class=\"title\">sum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// arguments [1,2,3,4,5,6,7];</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length;i ++)&#123;</span><br><span class=\"line\">            result += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>形参永远有尽头，要实现任意的数求和，无法定义形参。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// arguments [1,2]</span></span><br><span class=\"line\">        <span class=\"comment\">// var a = 1;</span></span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">答案是 <span class=\"number\">2</span>。a 变，<span class=\"built_in\">arguments</span> 跟着变化。有一个映射的关系。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// arguments [1,2]</span></span><br><span class=\"line\">        <span class=\"comment\">// var a = 1;</span></span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(argument[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">答案 <span class=\"number\">3</span>。<span class=\"built_in\">arguments</span> 里面一个变，一个跟着变，但是[<span class=\"number\">1</span>,<span class=\"number\">2</span>]是两个独立的人，相当于映射关系。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:当形参两个，实参一个</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//arguments[1]没值</span></span><br><span class=\"line\">    b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">1</span>);</span><br><span class=\"line\">答案: <span class=\"literal\">undefined</span>，实参列表出生时有几个，就有几个，在写 b=<span class=\"number\">2</span>，也不加在 <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]里面了，此处的 b 就当变量用，他和实参不映射。</span><br><span class=\"line\"></span><br><span class=\"line\">形参实参完全对应上才相互映射</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//arguments[1]没值</span></span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum(<span class=\"number\">1</span>);</span><br><span class=\"line\">答案 <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回值-return\"><a href=\"#返回值-return\" class=\"headerlink\" title=\"返回值 return\"></a>返回值 return</h3><p><code>结束条件和返回值 return，return 有终止函数的功能</code></p>\n<p><code>没写 return，实际上是加上了一个隐式的 return</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘a’);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘b’);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    答案 a，b</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘a’);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘b’);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    答案 a</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>return 最常用的是返回值。本意是把一个值返回到函数以外</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">自己定义的函数也能返回,<span class=\"keyword\">return</span> 空格 <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘a’);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = sum();</span><br><span class=\"line\">    答案这里的 num 就是 <span class=\"number\">123</span>，而且 <span class=\"built_in\">console</span>.log(‘a’);无效，这里的 <span class=\"keyword\">return</span> 又终止函数，又返回变量</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    把 target 转成数字</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNumber</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> + target; <span class=\"comment\">//利用+隐式的转换成了数字类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = myNumber(‘<span class=\"number\">123</span>’);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(num) + “” + num);</span><br><span class=\"line\">    答案 number <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>一般函数处理完一个参数，是为了返回</p>\n</li>\n<li><p>typeof()也是返回值，也是函数</p>\n</li>\n<li><p>typeof(123)也可以写成 typeof 123【typeof 空格 123】，只是看起来不方便</p>\n</li>\n</ol>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a><strong>练习</strong></h3><ol>\n<li>写一个函数，功能是告知你所选定的小动物的叫声。</li>\n<li>写一个函数，实现加法计数器。</li>\n<li>定义一组函数，输入数字，逆转并输出汉字形式。</li>\n<li>写一个函数，实现 n 的阶乘。</li>\n<li>写一个函数，实现斐波那契数列。</li>\n</ol>\n<p>一、写一个函数，功能是告知你所选定的小动物的叫声。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scream</span>(<span class=\"params\">animal</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (animal) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;dog&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;cat&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;miao!&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;fish&quot;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;o~o~o~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此处可以用 break , 也可以用 return</p>\n</blockquote>\n<p>二、写一个函数，实现加法计数器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">任意个数求和(不定参才能求出来)</span><br><span class=\"line\"></span><br><span class=\"line\">    funtion <span class=\"function\"><span class=\"title\">sum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// arguments [1,2,3,4,5,6,7];</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> resule = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length;i ++)&#123;</span><br><span class=\"line\">            result += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>);</span><br></pre></td></tr></table></figure>\n\n<p>三、定义一组函数，输入数字，逆转并输出汉字形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = num.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    str += transfer(num[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reverse();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;壹&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;贰&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;3&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;叁&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;4&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;肆&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;5&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;伍&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;6&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;陆&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;7&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;柒&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;8&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;捌&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;9&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;玖&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">属性补充：</span><br><span class=\"line\"></span><br><span class=\"line\">str.charAt(<span class=\"number\">0</span>)意思是字符串的第零位</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = num.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>)这是倒着拿的意思</span><br><span class=\"line\"></span><br><span class=\"line\">一个字符串长度是 <span class=\"number\">3</span>，他的第三位字符串是 <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">可以把第二个 <span class=\"function\"><span class=\"keyword\">function</span> 放第一个里面，但是一般单独写，因为 <span class=\"title\">transfer</span> 是转换</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">str</span> += <span class=\"title\">transfer</span>(<span class=\"params\">num[i]</span>)</span>;是先执行后面的 transfer(num[i])，再赋值给前面</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p><code>写一个函数，实现 n 的阶乘。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法一: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jc</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//n 的阶乘</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    num *= i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">方法二: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mul</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * mul(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二叫递归</p>\n<p>1、找规律，</p>\n<p>2、找出口（找停的点）</p>\n<blockquote>\n<p>递归的优点是代码简洁，但是运行慢</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">导图: <span class=\"keyword\">return</span> <span class=\"number\">5</span> * mul(<span class=\"number\">5</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> (<span class=\"number\">5</span> - <span class=\"number\">1</span>) * mul(<span class=\"number\">5</span> - <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">3</span> * mul(<span class=\"number\">5</span> - <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> (<span class=\"number\">5</span> - <span class=\"number\">3</span>) * mul(<span class=\"number\">5</span> - <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>5、拿递归写斐波那契数列 fb(n)==fb(n - 1) + fb(n - 2);</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fb</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n== <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fb(n - <span class=\"number\">1</span>) + fb(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fb(<span class=\"number\">5</span>) == &gt; fb(<span class=\"number\">4</span>) + fb(<span class=\"number\">3</span>);</span><br><span class=\"line\">fb(<span class=\"number\">4</span>) == &gt; fb(<span class=\"number\">3</span>) + fb(<span class=\"number\">2</span>);</span><br><span class=\"line\">fb(<span class=\"number\">3</span>) == &gt; fb(<span class=\"number\">2</span>) + fb(<span class=\"number\">1</span>);</span><br><span class=\"line\">fb(<span class=\"number\">2</span>) == &gt; fb(<span class=\"number\">1</span>) + fb(<span class=\"number\">0</span>);</span><br><span class=\"line\">fb(<span class=\"number\">1</span>) == &gt; fb(<span class=\"number\">1</span>) + fb(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归返回的顺序：先执行的最后被返回，最后执行完（等最底层的一层层返回）</p>\n</blockquote>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><blockquote>\n<p>定义：此类函数没有声明，在一次执行过后即释放（被销毁）。适合做初始化工作。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">针对初始化功能的函数：只想让它执行一次的函数</span><br><span class=\"line\"></span><br><span class=\"line\">立即执行的函数也有参数，也有返回值，有预编译</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                 <span class=\"comment\">//写成(function abc()&#123;&#125;())也调用不到</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;())</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a + b + c * <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))         <span class=\"comment\">//这一行里面的(1,2,3)是实参</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = a + b + c * <span class=\"number\">2</span> – <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">答案 num = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"立即执行函数的五种写法\"><a href=\"#立即执行函数的五种写法\" class=\"headerlink\" title=\"立即执行函数的五种写法\"></a>立即执行函数的五种写法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">标准写法:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;()); <span class=\"comment\">//在 W3C 建议使用这一种</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(‘a’);&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">这个被()包起来的 <span class=\"function\"><span class=\"keyword\">function</span> 函数声明变表达式了，就能被外面的最后的(<span class=\"params\"></span>)执行</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">(<span class=\"params\"><span class=\"keyword\">function</span> test()&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">console</span>.log(‘a’);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125;()</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">最外面的大括号是数学运算符号，是最先被执行，其余的括号都是有语法意义的，就把函数变表达式了</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">(<span class=\"params\"></span>)也是数学执行符，能打印 <span class=\"title\">a</span>，但是执行 <span class=\"title\">test</span> 就报错，所以干脆就不写 <span class=\"title\">test</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> <span class=\"keyword\">var</span> num = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    &#125;();</span><br></pre></td></tr></table></figure>\n\n<p>只有表达式才能被执行符号执行</p>\n<p>能被执行符号执行的表达式，这个函数的名字就会被自动忽略（放弃名字）</p>\n<p>能被执行符号执行的表达式基本上就是立即执行函数</p>\n<p>函数声明和函数表达式是两个东西，虽然都能定义函数</p>\n<p>函数声明：function test ( ){}</p>\n<p>函数表达式：var test = function( ){}</p>\n<p><code>其中 = function ()&#123;&#125;把 function 赋到 num 里面去叫表达式，var num 是声明在执行时，会放弃这个函数储存到 test 里面的储存引用，让这个 test 恢复到被声明的状态</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4.</span> +、-、！ <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\"></span>)</span>&#123;&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">    + <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    - <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    ! <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    &#125;()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>加了个”正”，在趋势上要把他转换成数字，就是表达式了，既然是表达式就能被执行，就会放弃名字，此时 console.log (test)，就会报错；这就是立即执行函数，同样放了正号，负号，！就会放弃函数名字，转换成表达式；但是*和/不行，&amp;&amp;||前面放东西也行</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5.</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c,d</span>)</span>&#123;<span class=\"built_in\">console</span>.log(a + b + c + d)&#125;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c,d</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a + b + c + d);</span><br><span class=\"line\">    &#125;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>理论上坚决不能执行，如果括号里面没有数字的话,系统会认为这是一个执行符号，但是如果在里面写上数字，系统就不会给你当成执行符号，它会当成这样写：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c,d</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a + b + c + d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样就不会报错了，因为 逗号（,）也是一个运算符，它会后面的位返回。所以它也是一个正常语法。但是它也不会执行,也不会报错,test还是函数体。</p>\n</blockquote>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点:\"></a>要点:</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1.1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">先定义一个 <span class=\"number\">10</span> 位数的数组，就是在 <span class=\"keyword\">var</span> arr = [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(i);&#125;有十个[]并且把数组返回</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//定义个函数 test</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = []; <span class=\"comment\">//定义一个空数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//丰满空数组，让空数组添加十条数组</span></span><br><span class=\"line\">        <span class=\"comment\">// 每一条都是一个 function()&#123;&#125;</span></span><br><span class=\"line\">        arr[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//随着 for 循环 i 变，</span></span><br><span class=\"line\">        <span class=\"comment\">// 数组 i 也变，arr 每一次都等于一个全新的函数体</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr; <span class=\"comment\">//把 arr 返回到外部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArr = test();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j ++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分别执行十个函数体，函数体里面定义了 document.write</span></span><br><span class=\"line\">    myArr[j]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 答案 10 10 10 10 10 10 10 10 10 10</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个 for 是为了打印这个数组，麻烦写法 myArr<a href=\"\">0</a>; myArr<a href=\"\">1</a>; 。。。myArr<a href=\"\">9</a>;</p>\n<p>过程 for (var i = 0; i &lt; 10; i ++){}执行了十次，产生了十个彼此独立的函数。并且把这十个函数放在数组里面去，还把数组返回了，这十个函数和 test 一起产生了一个闭包。</p>\n<p>既然是闭包，那么访问 test 里面的变量时，实际上访问的是同一套，而 test 产生了<br>arr 和 i 变量（写在 for 循环里面的 i 变量），而这十个函数在外边要访问 i 变量，其实访问的是同一个 i。</p>\n<p>什么时候访问的？在 test 执行完以后，在下面 for(j)访问的第一个 i=0，转到 9 的时候，i ++变 10 终止 for 循环，结束的时候 i=10，结束之后把return arr 返回，arr；</p>\n<p>这十个函数都是为了打印 i 的，在外部访问 i 的时候 i=10，所以打印的是 10</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write( i + “ ”);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理解过程：</p>\n<p>在这个函数体中，当<code>arr[0]</code>时<code>document.write(i)</code>的<code>i</code>是不变的，还是<code>i</code>，等函数保存到外部之后，等执行的时候，才会去找<code> i</code>的值。</p>\n<p>这个赋值语句中<code>arr[0] = 函数;</code>把一个函数体或者说是一个函数引用赋给数组的当前位，数组的当前位需要马上被索取出来的（数组现在当前第几位，我们是知道的，因为这个是执行语句），当<code>for(var i = 0)</code>时，<code>arr[i]</code>会变成<code>arr[0]</code>但是这个 i 跟函数体里面的<code>document.write(i + &quot; &quot;）</code>里面的<code>i</code>是没有关系的，因为函数体 function(){}不是现在执行，不会在意函数里面写的是什么，不是现在执行那么里面的<code>document.write</code>不会变成现实的值，不是现在执行就是函数引用（函数引用就是被折叠起来的，系统不知道里面写的是什么）</p>\n<p>在执行<code>myArr[j]();</code>的时候，系统才会读<code>document.write(i + &quot;&quot;)</code>里面的语句</p>\n<p>在定义函数的时候是不看里面的，在执行的时候才看</p>\n<h3 id=\"要点2\"><a href=\"#要点2\" class=\"headerlink\" title=\"要点2:\"></a>要点2:</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1.2</span>:</span><br><span class=\"line\">我们让上面这个变成打印 <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>，用立即执行函数解决</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++)&#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">            arr[j] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.write( j + “ ”);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(i));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArr = test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j ++)&#123;</span><br><span class=\"line\"> myArr[j]();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理解过程：</p>\n<p>相当于在 for 循环里面有十个立即执行函数<code>function(j)&#123;&#125;</code><br>在第一圈 i 是 0，j 也是 0，<code>function()&#123;document.write( j + “ ”)&#125;</code>拿着<code>j=0</code>进行循环的第二圈 <code>i </code>是 1，又有了一个新的 <code>j</code> 是 1，反复循环,形成了十个立即执行函数，有十个<code>j</code>对应</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">答案 <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span></span><br><span class=\"line\"></span><br><span class=\"line\">例</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++)&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">中间 <span class=\"function\"><span class=\"keyword\">function</span> 这个会执行 10 次</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用域初探\"><a href=\"#作用域初探\" class=\"headerlink\" title=\"作用域初探\"></a>作用域初探</h1><blockquote>\n<p><strong>作用域定义：变量（变量作用于又称上下文）和函数生效（能被访问）的区域</strong></p>\n</blockquote>\n<p>全局、局部变量</p>\n<p>作用域的访问顺序</p>\n<p>作用域:函数里面的可以访问外面的全局变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = <span class=\"number\">234</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(b);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    demo();</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>函数外面不能用函数里面的。里面的可以访问外面的，外面的不能访问里面的，彼此独立的区间不能相互访问</p>\n</blockquote>\n<ul>\n<li>test{}和 demo{}不能互相访问，但是可以访问外面的全局变量</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\">彼此独立的区间不能相互访问 全局变量都可以访问</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    demo();</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(b);</span><br><span class=\"line\"></span><br><span class=\"line\">上面的 <span class=\"built_in\">document</span>.write(b);不能访问 <span class=\"keyword\">var</span> b ;</span><br><span class=\"line\">上面的 <span class=\"built_in\">document</span>.write(a);可以访问 a ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>外层函数不能访问里层的，里层的可以访问外层的，越往里权限越大</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">作业:</span><br><span class=\"line\"></span><br><span class=\"line\">要求输入一串低于 <span class=\"number\">10</span> 位的数字，输入这串数字的中文大写。</span><br><span class=\"line\"></span><br><span class=\"line\">例如：input :<span class=\"number\">10000</span>     output:壹万 ;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：input :<span class=\"number\">1001010</span>   output:壹佰万壹仟零壹拾 ;</span><br><span class=\"line\"></span><br><span class=\"line\">千分位如果是 <span class=\"number\">0</span>必须读零 ;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"js-运行三部曲-预编译\"><a href=\"#js-运行三部曲-预编译\" class=\"headerlink\" title=\"js 运行三部曲(预编译)\"></a>js 运行三部曲(预编译)</h1><blockquote>\n<p>语法分析 → 预编译 → 解释执行</p>\n</blockquote>\n<h2 id=\"预编译前奏\"><a href=\"#预编译前奏\" class=\"headerlink\" title=\"预编译前奏\"></a>预编译前奏</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘a’);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\">上面能执行</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘a’);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">也能执行，因为有预编译的存在</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">答案 <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">答案 <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\">只写 <span class=\"built_in\">console</span>.log(a);就会报错</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>函数声明整体提升：函数不管写到哪里，都会被提到逻辑的最前面。所以不管在哪里调用，本质上都是在后面调用变量 声明提升：把 var a 提升到最前面</p>\n</blockquote>\n<ul>\n<li>var a = 123;这是变量声明再赋值。</li>\n</ul>\n<blockquote>\n<p>变量声明提升是把他拆分成 var a; a = 123;然后把 var a 提升到最前面<br>上面这两句话没办法解决下面例子(全部)的问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  a();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象(就是 window)所有。</p>\n</blockquote>\n<p><code>全局对象是 window</code></p>\n<p>例 window.a = 10;</p>\n<p>例 a = 10; ===&gt; windows.a = 10;</p>\n<p>eg: var a = b = 123;</p>\n<blockquote>\n<p>一切声明的全局变量，全是 window 的属性。</p>\n</blockquote>\n<p>例 var a = 123; ===&gt; window.a = 123;</p>\n<blockquote>\n<p>window 就是全局的域</p>\n</blockquote>\n<p>如果在全局变量在 var a = 123；那么就会返回到 window</p>\n<p>例 var a = 123<br>console.log(a) ===&gt; console.log(window.a)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b = <span class=\"number\">234</span>;</span><br><span class=\"line\">是把 <span class=\"number\">234</span> 的值赋给 b，在把 b 的值赋给 a</span><br><span class=\"line\"></span><br><span class=\"line\">例 :</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a);</span><br><span class=\"line\">    答案：<span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b);</span><br><span class=\"line\">    答案：<span class=\"number\">123</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\">写 test()代表执行 test，赋值是自右向左的，上面先把 <span class=\"number\">123</span> 赋给 b 的时候，b 未经声明，然后再声明 a，再 b 的值赋给 a，导致 b 未经声明，所以 b 归 <span class=\"built_in\">window</span> 所有访问 <span class=\"built_in\">window</span>.a 是 <span class=\"literal\">undefined</span>，访问 <span class=\"built_in\">window</span>.b 是 <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b);</span><br><span class=\"line\">答案 <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span> 就是全局</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); ==&gt; <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a);</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">345</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>&#123;</span><br><span class=\"line\"> <span class=\"attr\">a</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\"> <span class=\"attr\">b</span> : <span class=\"number\">234</span>,</span><br><span class=\"line\"> <span class=\"attr\">c</span> : <span class=\"number\">345</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如果 <span class=\"keyword\">var</span> a 对应会有 <span class=\"built_in\">window</span>.a,在<span class=\"built_in\">window</span>中也会有a = <span class=\"number\">123</span>,b = <span class=\"number\">234</span>,c = <span class=\"number\">345</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预编译（解决执行顺序问题）\"><a href=\"#预编译（解决执行顺序问题）\" class=\"headerlink\" title=\"预编译（解决执行顺序问题）\"></a>预编译（解决执行顺序问题）</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">答案是 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125; 、<span class=\"number\">123</span> 、<span class=\"number\">123</span> 、<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这个例子的形参是（a），变量声明也是 a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">上面的例子按四部曲变化如下:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>创建AO对象</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 找形参和变量声明，将变量和形参(a)名作为 AO 属性名，值为 <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 把实参值传到形参里</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 在函数体里面找函数声明，值赋予函数体</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;&#125;和 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span> (<span class=\"params\"></span>) </span>&#123;&#125;都是函数声明，但是 <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;不是。</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行第一行 <span class=\"built_in\">console</span>.log(a);时，用的是</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"keyword\">var</span> a =<span class=\"number\">123</span>;改变的是</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">在 b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;时</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>预编译发生在函数即将执行的前一刻</p>\n</blockquote>\n<h2 id=\"（函数）预编译的四部曲\"><a href=\"#（函数）预编译的四部曲\" class=\"headerlink\" title=\"（函数）预编译的四部曲\"></a>（函数）预编译的四部曲</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 创建 AO 对象 Activation <span class=\"built_in\">Object</span>(执行期上下文，作用是函数解的作用域，函数产生的执行空间库)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 找形参和变量声明，将变量和形参名作为 AO 属性名，值为 <span class=\"literal\">undefined</span>,相当于</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 将实参值和形参统一（把实参值传到形参里）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 在函数体里面找函数声明，值赋予函数体（先看自己的 AO，再看全局的 GO）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">    a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">答题过程：</span><br><span class=\"line\"></span><br><span class=\"line\">找形参和变量声明，将变量和形参名作为 AO 属性名，值为 <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">函数声明 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;和 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;，AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a);答案是 <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">执行 c = <span class=\"number\">0</span>;变</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c 不用管，因为 c 已经在 AO 里面了</span><br><span class=\"line\"></span><br><span class=\"line\">执行 a = <span class=\"number\">3</span>;改</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\"> <span class=\"attr\">a</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\"> <span class=\"attr\">b</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\"> <span class=\"attr\">c</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 b = <span class=\"number\">2</span>;改</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\"> <span class=\"attr\">a</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\"> <span class=\"attr\">b</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\"> <span class=\"attr\">c</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"attr\">d</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(b);答案是 <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span> (<span class=\"params\"></span>) </span>&#123;&#125;和 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;已经提过了，不用管执行 <span class=\"built_in\">console</span>.log(b);答案是 <span class=\"number\">2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a , b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// function a()&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 234</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    b = <span class=\"number\">234</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 123</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// function b()&#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">答题过程：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 将变量和形参名作为 AO 属性名</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 将实参值和形参统一</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 找函数声明 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a);答案是 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(b);答案是 <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;变</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"number\">234</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(b);答案是 <span class=\"number\">234</span></span><br><span class=\"line\"></span><br><span class=\"line\">执行 a = <span class=\"number\">123</span>;变</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"number\">234</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a);答案是 <span class=\"number\">123</span></span><br><span class=\"line\">然后 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;;<span class=\"keyword\">var</span> a ;都可以不看了</span><br><span class=\"line\"></span><br><span class=\"line\">执行 b = <span class=\"number\">234</span>，b 值还是 <span class=\"number\">234</span>，不变</span><br><span class=\"line\">执行 <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;，变</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a);答案是 <span class=\"number\">123</span></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(b);答案是 <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一旦有重名的，一但有 a 变量又有 a 函数【如 function a (){}】，又在第一条访问的是 a，一定是函数答题过程： 将变</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">下面开始讲全局的预编译</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">答案 <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">答案是打印 a 是 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局的预编译三部曲\"><a href=\"#全局的预编译三部曲\" class=\"headerlink\" title=\"全局的预编译三部曲\"></a>全局的预编译三部曲</h2><ol>\n<li><p>生成了一个 GO 的对象 Global Object（window 就是 GO）</p>\n</li>\n<li><p>找形参和变量声明，将变量和形参名作为 GO 属性名，值为 undefined</p>\n</li>\n<li><p>在函数体里面找函数声明，值赋予函数体</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">答案过程:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 函数声明 GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 执行 <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;变 GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a);就是 <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GO === window， GO 和 window 是一个东西</p>\n</blockquote>\n<p>console.log(a);和 console.log(window.a);和 console.log(go.a);是一样</p>\n<blockquote>\n<p>任何全局变量都是 window 上的属性 , 没有声明变量就赋值了，归 window 所有，就是在 GO 里面预编译</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">答案 <span class=\"built_in\">window</span>.a 是 <span class=\"literal\">undefined</span>，<span class=\"built_in\">window</span>.b 是 <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\">先生成 GO&#123;</span><br><span class=\"line\"> <span class=\"attr\">b</span> : <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">再有 AO&#123;</span><br><span class=\"line\"><span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>先生成 GO 还是 AO</p>\n</li>\n<li><p>想执行全局，先生成 GO，在执行 test 的前一刻生成 AO</p>\n</li>\n<li><p>在几层嵌套关系，近的优先，从近的到远的，有 AO 就看 AO，AO 没有再看 GO</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">test</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"number\">234</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">答题过程:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 想执行全局,先有 GO,</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">2.</span> 发现有函数声明</span><br><span class=\"line\"></span><br><span class=\"line\"> GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;..... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(test),</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 执行 test(<span class=\"number\">1</span>)之前生成</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 执行 <span class=\"keyword\">var</span> test = <span class=\"number\">234</span>;变成</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span> : <span class=\"number\">234</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>AO 上面有就用 AO 的，没有就看 GO 的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">global</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">global</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\"></span><br><span class=\"line\">答题过程</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">global</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">fn</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;.....&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"keyword\">var</span> <span class=\"built_in\">global</span> = <span class=\"number\">100</span>;变</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">global</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">fn</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">不看 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;...&#125;里面的东西</span><br><span class=\"line\">执行 fn()之前</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\"> 访问 GO的 <span class=\"built_in\">global</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">global</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">global</span>);</span><br><span class=\"line\">    <span class=\"built_in\">global</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">global</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">global</span> = <span class=\"number\">300</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">global</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">答题过程:</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">global</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"attr\">fn</span> : <span class=\"literal\">undefined</span>(没用可以不写)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">变:</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">global</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">fn</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 fn()之前，</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">global</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行结果是 <span class=\"literal\">undefined</span>，<span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    c = <span class=\"number\">234</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//234</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">test();</span><br><span class=\"line\">a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//234</span></span><br><span class=\"line\"></span><br><span class=\"line\">过程</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span> <span class=\"comment\">//不管 if(a)&#123;&#125;，可以提出 var b的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行到 c=<span class=\"number\">234</span>，</span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"number\">234</span>,</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行到 a=<span class=\"number\">10</span>，</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"number\">234</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">    foo = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">11</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar());</span><br><span class=\"line\"></span><br><span class=\"line\">答案：<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">如果在第一行 <span class=\"keyword\">return</span> foo，下面有 foo 这个函数，一定打印这个函数;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar());</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">11</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">答案 <span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">答案是 <span class=\"literal\">undefined</span> <span class=\"comment\">// 因为var b = undefined 是函数表示，不是函数声明;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\">现在因为语法的改变 在 <span class=\"keyword\">if</span> 里面定义函数声明 <span class=\"function\"><span class=\"keyword\">function</span> 是不允许的，但是过去可以，下面就是过去的旧题，可以按着来做一下</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">a</span> = 100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//......</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">    a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(b);</span><br><span class=\"line\">    f = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(c);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">demo(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(f);</span><br><span class=\"line\"></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"attr\">demo</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">开始执行 a=<span class=\"number\">100</span>，</span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">100</span>，</span><br><span class=\"line\">    <span class=\"attr\">demo</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">形参实参相统一，AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">赋值 AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span> : <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span> (<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span>, <span class=\"comment\">//------旧规则里面可以提出 function()&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行 <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;实参列表和传参是否相映射，变</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(e);答案 <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)由于 a 在 AO 里面是 <span class=\"literal\">undefined</span>，所以不运行</span><br><span class=\"line\"></span><br><span class=\"line\">执行 a = <span class=\"number\">10</span>;变</span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(b)，答案 <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">执行 f = <span class=\"number\">123</span>，变</span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">demo</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">f</span> : <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(c); 之前打印 <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;，改语法后打印 <span class=\"literal\">undefined</span></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a); 答案 <span class=\"number\">10</span></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(a); 因为在外面是全局的，答案 <span class=\"number\">100</span></span><br><span class=\"line\">执行 <span class=\"built_in\">console</span>.log(f); 答案 <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>  <span class=\"keyword\">var</span> str = <span class=\"literal\">false</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>  <span class=\"keyword\">var</span> demo = <span class=\"literal\">false</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(demo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(a) &amp;&amp; -<span class=\"literal\">true</span> + (-<span class=\"literal\">undefined</span>) + <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;基础扎实&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>  <span class=\"keyword\">if</span>(<span class=\"number\">11</span> + <span class=\"string\">&quot;11&quot;</span> * <span class=\"number\">2</span> == <span class=\"number\">33</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;基础扎实&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>  ！！<span class=\"string\">&quot; &quot;</span> + !!<span class=\"string\">&quot;&quot;</span> - !!<span class=\"literal\">false</span> || <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;你觉得可以打印，你就是猪&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">答题:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> <span class=\"literal\">false</span> + <span class=\"number\">1</span> 因为有 +，两边都不是字符串，就转换成数字,<span class=\"number\">0</span> + <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> <span class=\"literal\">false</span> 是 <span class=\"number\">0</span> ，<span class=\"literal\">false</span> <span class=\"literal\">false</span> == <span class=\"number\">1</span>，<span class=\"literal\">false</span> 肯定不等于 <span class=\"number\">1</span>，所以把 <span class=\"literal\">false</span> 再赋给 demo</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span></span><br><span class=\"line\">(<span class=\"number\">1</span>) <span class=\"keyword\">typeof</span>(a) 是 <span class=\"string\">&quot;undefined&quot;</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>) -<span class=\"literal\">true</span> 转换成数字是-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t+<span class=\"literal\">undefined</span> 显示“<span class=\"literal\">NaN</span>”</span><br><span class=\"line\">    -<span class=\"number\">1</span> + <span class=\"literal\">NaN</span> = <span class=\"literal\">NaN</span></span><br><span class=\"line\">    -<span class=\"number\">1</span> + <span class=\"literal\">NaN</span> + <span class=\"string\">&quot;&quot;</span> = <span class=\"string\">&quot;NaN&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//&quot;undefined&quot; &amp;&amp;  &quot;NaN&quot; 转换成 boolean，就都是 true</span></span><br><span class=\"line\"><span class=\"comment\">//因为两边都是字符串，所以是true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"string\">&quot;11&quot;</span> * <span class=\"number\">2</span> 是*把两边转换成了数字，所以 <span class=\"number\">11</span> + <span class=\"string\">&quot;11&quot;</span> * <span class=\"number\">2</span> = <span class=\"number\">33</span>，<span class=\"number\">33</span> == <span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"comment\">// 两边相等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span></span><br><span class=\"line\">(<span class=\"number\">1</span>) !! 非非 就是 正</span><br><span class=\"line\">    <span class=\"string\">&quot; &quot;</span> 这不是空串，是空格字符串</span><br><span class=\"line\">    !!<span class=\"string\">&quot; &quot;</span> 转换成 <span class=\"built_in\">Boolean</span> 为 <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>) !!<span class=\"string\">&quot;&quot;</span> 非非空串，转换为 <span class=\"built_in\">Boolean</span> 为 <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">3</span>) !!<span class=\"literal\">false</span> 就是 <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>) <span class=\"literal\">true</span> + <span class=\"literal\">false</span> - <span class=\"literal\">false</span> = <span class=\"number\">1</span> + <span class=\"number\">0</span> – <span class=\"number\">0</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">5</span>) <span class=\"number\">1</span> || <span class=\"built_in\">document</span>.write(‘你觉得能打印？’)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// || 运算符 遇到真就停，1 为真，所以返回 1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">(<span class=\"built_in\">window</span>.foo || (<span class=\"built_in\">window</span>.foo = ‘bar’));</span><br><span class=\"line\"></span><br><span class=\"line\">求 <span class=\"built_in\">window</span>.foo</span><br><span class=\"line\"></span><br><span class=\"line\">答案”bar”</span><br><span class=\"line\"></span><br><span class=\"line\">这道题要先看</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">window</span>.foo = ‘bar’)这一边的，再看左边的 <span class=\"built_in\">window</span>.foo</span><br><span class=\"line\"></span><br><span class=\"line\">因为运算符的顺序问题，让这道题错误的读法（从左到右）也是 bar，所以怎样读，都是正确答案 : bar</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">window</span>.foo || <span class=\"built_in\">window</span>.foo = ‘bar’);这么写就报错;</span><br><span class=\"line\"><span class=\"comment\">// 因为 ||或 运算符优先级高于 =等号 运算符 , 而 ()括号 运算符 则大于一切运算符</span></span><br><span class=\"line\">所以，必须要写成：</span><br><span class=\"line\">(<span class=\"built_in\">window</span>.foo || (<span class=\"built_in\">window</span>.foo = <span class=\"string\">&quot;bar&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用域精解\"><a href=\"#作用域精解\" class=\"headerlink\" title=\"作用域精解\"></a>作用域精解</h1><p>每个 javascript 函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供 javascript 引擎存取，**[[scope]]<strong>就是其中一个。</strong>[[scope]]**指的就是我们所说的作用域,其中存储了运行期上下文的集合。</p>\n<p><strong>作用域链</strong>：[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。</p>\n<p><strong>运行期上下文</strong>:当函数在执行的前一刻，会创建一个称为执行期上下文的内部对象。<br>一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。</p>\n<p><strong>查找变量</strong>：在哪个函数里面查找变量，就从哪个函数作用域链的顶端依次向下查找函数类对象</p>\n<p>我们能访问 test.name</p>\n<blockquote>\n<p>test.[[scope]]隐式属性——作用域</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    …………</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">第一次执行 test(); → AO&#123;&#125; <span class=\"comment\">//AO 是用完就不要的</span></span><br><span class=\"line\">第二次执行 test(); → AO&#123;&#125; <span class=\"comment\">//这是另外的 AO</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> glob = <span class=\"number\">100</span>;</span><br><span class=\"line\">a();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> 是最顶端，<span class=\"number\">1</span> 是次顶端，查找顺序是从最顶端往下查</span><br></pre></td></tr></table></figure>\n\n<p>执行顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> a 函数刚刚被被定义时，它的[[scope]]就已经存入了信息，发生了以下过程</span><br><span class=\"line\"></span><br><span class=\"line\">                                    |   Global      <span class=\"built_in\">Object</span>    |</span><br><span class=\"line\">                                  / ———————————————————————————</span><br><span class=\"line\">    a               scope chain  /  |    <span class=\"built_in\">this</span>    |   <span class=\"built_in\">window</span>   |</span><br><span class=\"line\">————————           —————————————/   ———————————————————————————</span><br><span class=\"line\">[[scope]]             <span class=\"number\">0</span>  |          |   <span class=\"built_in\">window</span>   |  (object)  |</span><br><span class=\"line\">                                    ———————————————————————————</span><br><span class=\"line\">                                    |  <span class=\"built_in\">document</span>  |  (object)  |</span><br><span class=\"line\">                                    ———————————————————————————</span><br><span class=\"line\">                                    |     a      | (<span class=\"function\"><span class=\"keyword\">function</span>) |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">global</span>   |     100    |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |            |            |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span> a 函数被执行时，[[scope]]发生了以下过程</span><br><span class=\"line\">                                    | Activation     <span class=\"built_in\">Object</span>   |</span><br><span class=\"line\">                                  / ———————————————————————————</span><br><span class=\"line\">    a               scope chain  /  |    <span class=\"built_in\">this</span>    |   <span class=\"built_in\">window</span>   |</span><br><span class=\"line\">————————           —————————————/   ———————————————————————————</span><br><span class=\"line\">[[scope]]             <span class=\"number\">0</span>  |          |  <span class=\"built_in\">arguments</span> |     []     |</span><br><span class=\"line\">                   —————————————    ———————————————————————————</span><br><span class=\"line\">                      <span class=\"number\">1</span>  |          |      a     |     <span class=\"number\">123</span>    |</span><br><span class=\"line\">                   ————————————\\    ———————————————————————————</span><br><span class=\"line\">                                \\   |      b     | (<span class=\"function\"><span class=\"keyword\">function</span>) |</span></span><br><span class=\"line\"><span class=\"function\">                                 \\  ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                  \\</span></span><br><span class=\"line\"><span class=\"function\">                                   \\</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">Global</span>     <span class=\"title\">Object</span>     |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |    <span class=\"title\">this</span>    |   <span class=\"title\">window</span>   |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">window</span>   |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |  <span class=\"title\">document</span>  |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |     <span class=\"title\">a</span>      | (<span class=\"params\"><span class=\"keyword\">function</span></span>) |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">global</span>   |     100    |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.</span> b 函数被创建并且被定义的时候，[[scope]]发生了以下的过程</span><br><span class=\"line\"></span><br><span class=\"line\">                                    | Activation     <span class=\"built_in\">Object</span>   |</span><br><span class=\"line\">                                  / ———————————————————————————</span><br><span class=\"line\">    b               scope chain  /  |    <span class=\"built_in\">this</span>    |   <span class=\"built_in\">window</span>   |</span><br><span class=\"line\">————————           —————————————/   ———————————————————————————</span><br><span class=\"line\">[[scope]]             <span class=\"number\">0</span>  |          |  <span class=\"built_in\">arguments</span> |     []     |</span><br><span class=\"line\">                   —————————————    ———————————————————————————</span><br><span class=\"line\">                      <span class=\"number\">1</span>  |          |      a     |     <span class=\"number\">123</span>    |</span><br><span class=\"line\">                   ————————————\\    ———————————————————————————</span><br><span class=\"line\">                                \\   |      b     | (<span class=\"function\"><span class=\"keyword\">function</span>) |</span></span><br><span class=\"line\"><span class=\"function\">                                 \\  ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                  \\</span></span><br><span class=\"line\"><span class=\"function\">                                   \\</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">Global</span>     <span class=\"title\">Object</span>     |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |    <span class=\"title\">this</span>    |   <span class=\"title\">window</span>   |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">window</span>   |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |  <span class=\"title\">document</span>  |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |     <span class=\"title\">a</span>      | (<span class=\"params\"><span class=\"keyword\">function</span></span>) |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |   <span class=\"title\">global</span>   |     100    |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4.</span> b 函数被执行的时候，[[scope]]发生了以下的过程</span><br><span class=\"line\"></span><br><span class=\"line\">                                        | Activation     <span class=\"built_in\">Object</span>   |</span><br><span class=\"line\">                                      / ———————————————————————————</span><br><span class=\"line\">                                     /  |    <span class=\"built_in\">this</span>    |   <span class=\"built_in\">window</span>   |</span><br><span class=\"line\">                                    /   ———————————————————————————</span><br><span class=\"line\">                                   /    |  <span class=\"built_in\">arguments</span> |     []     |</span><br><span class=\"line\">                                  /     ———————————————————————————</span><br><span class=\"line\">    b               scope chain  /      |      b     |     <span class=\"number\">234</span>    |</span><br><span class=\"line\">————————           —————————————/       ———————————————————————————</span><br><span class=\"line\">[[scope]]             <span class=\"number\">0</span>  |             |            |            |</span><br><span class=\"line\">                   —————————————        ———————————————————————————</span><br><span class=\"line\">                      <span class=\"number\">1</span>  |      \\</span><br><span class=\"line\">                   ————————————— \\</span><br><span class=\"line\">                      <span class=\"number\">2</span>  |        \\     | Activation     <span class=\"built_in\">Object</span>   |</span><br><span class=\"line\">                     /             \\    ———————————————————————————</span><br><span class=\"line\">                    /               \\   |    <span class=\"built_in\">this</span>    |   <span class=\"built_in\">window</span>   |</span><br><span class=\"line\">                   /                 \\  ———————————————————————————</span><br><span class=\"line\">                  /                   \\ |  <span class=\"built_in\">arguments</span> |     []     |</span><br><span class=\"line\">                 /                     \\———————————————————————————</span><br><span class=\"line\">                /                       |     a      |     <span class=\"number\">123</span>    |</span><br><span class=\"line\">               /                        ———————————————————————————</span><br><span class=\"line\">              /                         |     b      | (<span class=\"function\"><span class=\"keyword\">function</span>) |</span></span><br><span class=\"line\"><span class=\"function\">             /                          ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">            /</span></span><br><span class=\"line\"><span class=\"function\">        |   <span class=\"title\">Global</span>     <span class=\"title\">Object</span>     |</span></span><br><span class=\"line\"><span class=\"function\">        ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">        |    <span class=\"title\">this</span>    |   <span class=\"title\">window</span>   |</span></span><br><span class=\"line\"><span class=\"function\">        ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">        |   <span class=\"title\">window</span>   |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">        ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">        |  <span class=\"title\">document</span>  |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">        ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">        |     <span class=\"title\">a</span>      | (<span class=\"params\"><span class=\"keyword\">function</span></span>) |</span></span><br><span class=\"line\"><span class=\"function\">        ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">        |   <span class=\"title\">global</span>   |     100    |</span></span><br><span class=\"line\"><span class=\"function\">        ———————————————————————————</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bb = <span class=\"number\">234</span>;</span><br><span class=\"line\">            aa = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aa = <span class=\"number\">123</span>;</span><br><span class=\"line\">        b();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">global</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">    a();</span><br><span class=\"line\"></span><br><span class=\"line\">答案：<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>理解过程：<br>bb 的 AO 是拿到 aa 的 AO，就是同一个 AO，bb 只是引用了 aa 的 AO，GO 也都是同一个。function b(){}执行完，干掉的是 b 自己的 AO（销毁执行期上下文）（去掉连接线），下次 function b 被执行时，产生的是新的 b 的 AO。b 执行完只会销毁自己的 AO，不会销毁 a 的 AO。function a(){}执行完，会把 a 自己的 AO 销毁【会把 function b 也销毁】，只剩 GO（回归到 a 被定义的时候），等下次 function a再次被执行时，会产生一个全新的 AO，里面有一个新的 b 函数。。。。。。周而复始</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        funcion <span class=\"function\"><span class=\"title\">c</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">        c();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br><span class=\"line\"></span><br><span class=\"line\">理解过程：</span><br><span class=\"line\"></span><br><span class=\"line\">a 被定义 a.[[scope]] → <span class=\"number\">0</span> : GO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a 被执行 a.[[scope]] → <span class=\"number\">0</span> : a.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">1</span> : GO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b 被定义 b.[[scope]] →  <span class=\"number\">0</span> : a.AO&#123;&#125;</span><br><span class=\"line\">                        <span class=\"number\">1</span> : GO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b 被执行 b.[[scope]] → <span class=\"number\">0</span> : b.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">1</span> : a.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">2</span> : GO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c 被定义 c.[[scope]] → <span class=\"number\">0</span> : b.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">1</span> : a.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">2</span> : GO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c 被执行 c.[[scope]] → <span class=\"number\">0</span> : c.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">1</span> : b.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">2</span> : a.AO&#123;&#125;</span><br><span class=\"line\">                       <span class=\"number\">3</span> : GO&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">当 c 执行完后，会干掉自己的 cAO，回到 c 被定义的状态，当 c 再被执行时，会生成一个新的 newcAO&#123;&#125;，其余都一样，因为基础都是 c 的被定义状态 c 被执行</span><br><span class=\"line\"></span><br><span class=\"line\">c.[[scope]] → <span class=\"number\">0</span> : <span class=\"keyword\">new</span> c.AO&#123;&#125;</span><br><span class=\"line\">              <span class=\"number\">1</span> : b.AO&#123;&#125;</span><br><span class=\"line\">              <span class=\"number\">2</span> : a.AO&#123;&#125;</span><br><span class=\"line\">              <span class=\"number\">3</span> : GO&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果<code>function a</code>不被执行，下面的<code>function b</code>和<code>function c</code>都是看不到的（也不会被执行，被折叠）。只有<code>function a</code>被执行，才能执行<code>function a 里面的内容</code>a()<code>; 如果不执行，根本看不到</code>function a (){}`里面的内容;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aa = <span class=\"number\">345</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bb = <span class=\"number\">234</span>;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                cc = <span class=\"number\">123</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            c();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a();</span><br><span class=\"line\"></span><br><span class=\"line\">执行过程：</span><br><span class=\"line\"></span><br><span class=\"line\">先执行 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">var</span> aa = <span class=\"number\">345</span>;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span> (<span class=\"params\"></span>)</span>&#123;&#125;b();&#125;</span><br><span class=\"line\">想要执行完上面的 b();就需要执行完 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> bb = <span class=\"number\">234</span>; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;c();&#125;，</span><br><span class=\"line\">想要执行 c();就要先执行完 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> cc =<span class=\"number\">123</span>;&#125;,</span><br><span class=\"line\">b();是一个复合语句，执行完 b 里面的每一句话，才能执行 b();</span><br><span class=\"line\"></span><br><span class=\"line\">销毁顺序：</span><br><span class=\"line\"></span><br><span class=\"line\">哪个先被执行完，哪个先被销毁</span><br><span class=\"line\">当 c 执行完，先销毁 c 自己的执行期的上下文，</span><br><span class=\"line\">当 c();执行完，那么 b 也执行完了，就销毁 b 的执行期上下文；</span><br><span class=\"line\">当 b();执行完，那么 a 也执行完了，就销毁 a 的执行期上下文</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><blockquote>\n<p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露。</p>\n</blockquote>\n<p><code>内存泄漏就是内存占用，内存被占用的越多，内存就变得越来越少了，就像内存被泄露了一样</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(aaa);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aaa = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = a();</span><br><span class=\"line\">    demo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> b 以后，就返回出去，再销毁 fn a。</span><br><span class=\"line\"></span><br><span class=\"line\">答案：<span class=\"number\">123</span>;。因为没有 b();此时 b 还是被定义的状态，和 a 执行的状态是一样的。<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;是在 <span class=\"keyword\">return</span> b 之后才执行完，才销毁。<span class=\"keyword\">return</span> b 让 a 执行时的 AO 被保存到了外面。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       a执行                    | Activation     <span class=\"built_in\">Object</span>   |</span><br><span class=\"line\">                              / ———————————————————————————</span><br><span class=\"line\">    a           scope chain  /  |    <span class=\"built_in\">this</span>    |   <span class=\"built_in\">window</span>   |</span><br><span class=\"line\">————————       —————————————/   ———————————————————————————</span><br><span class=\"line\">[[scope]]         <span class=\"number\">0</span>  |     /    |  <span class=\"built_in\">arguments</span> |     []     |</span><br><span class=\"line\">               —————————————    ———————————————————————————</span><br><span class=\"line\">                  <span class=\"number\">1</span>  |          |    aaa     |     <span class=\"number\">123</span>    |</span><br><span class=\"line\">               —————————\\———   / ———————————————————————————</span><br><span class=\"line\">                         \\    / |      b     | (<span class=\"function\"><span class=\"keyword\">function</span>) |</span></span><br><span class=\"line\"><span class=\"function\">                          \\  /  ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                           \\/</span></span><br><span class=\"line\"><span class=\"function\">                           /\\</span></span><br><span class=\"line\"><span class=\"function\">                          /  \\      |   <span class=\"title\">Global</span>     <span class=\"title\">Object</span>     |</span></span><br><span class=\"line\"><span class=\"function\">                         /    \\    /———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">b</span>被定义，并被保存出来./      \\  / |    <span class=\"title\">this</span>    |   <span class=\"title\">window</span>   |</span></span><br><span class=\"line\"><span class=\"function\">                       /        \\/  ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                      /         /\\  |   <span class=\"title\">window</span>   |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"title\">b</span>           <span class=\"title\">scope</span> <span class=\"title\">chain</span>     /  \\ ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">—————————     —————————————   /     |  <span class=\"title\">document</span>  |  (<span class=\"params\">object</span>)  |</span></span><br><span class=\"line\"><span class=\"function\">[[<span class=\"title\">scope</span>]]        0  |        /      ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">              ————————————— /       |     <span class=\"title\">a</span>      | (<span class=\"params\"><span class=\"keyword\">function</span></span>) |</span></span><br><span class=\"line\"><span class=\"function\">                 1  |      /        ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">              —————————————         |   <span class=\"title\">global</span>   |     100    |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br><span class=\"line\"><span class=\"function\">                                    |    <span class=\"title\">demo</span>    | (<span class=\"params\"><span class=\"keyword\">function</span></span>) |</span></span><br><span class=\"line\"><span class=\"function\">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure>\n\n<p><code>return b</code>是把<code>b（包括 a 的 AO</code>保存到外部了（放在全局）<br>当 a 执行完砍掉自己的<code>AO</code>时，b 依然可以访问到<code>a</code>的<code>AO(因为 return b)</code></p>\n<blockquote>\n<p>但凡是内部的函数被保存到外部，一定生成闭包</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            num ++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = a();</span><br><span class=\"line\">    demo();</span><br><span class=\"line\">    demo();</span><br><span class=\"line\"></span><br><span class=\"line\">答案 <span class=\"number\">101</span>,<span class=\"number\">102</span></span><br><span class=\"line\"></span><br><span class=\"line\">理解过程:</span><br><span class=\"line\"></span><br><span class=\"line\">    a 被执行 <span class=\"number\">0</span> : a.AO: num = <span class=\"number\">100</span>;</span><br><span class=\"line\">             <span class=\"number\">1</span> : GO: demo = a();</span><br><span class=\"line\"></span><br><span class=\"line\">    b 被执行 <span class=\"number\">0</span> : b.AO :</span><br><span class=\"line\">             <span class=\"number\">1</span> : a.AO : num = <span class=\"number\">100</span>;</span><br><span class=\"line\">             <span class=\"number\">2</span> : GO: demo = a();</span><br></pre></td></tr></table></figure>\n\n<p>在第一次执行<code>function b</code>时，<code>num ++</code>就把<code>aAO</code>变成<code>&#123;num : 101&#125;</code>，当 <code>function b</code>执行完毕时，剪断的是<code>bAO</code>，而<code>aAO</code>不变，当执行<code>function a</code>的<code>return b</code>时就把<code>aAO,GO</code>都存在了外部，执行完<code>a</code>销毁<code>scope</code>时去掉 <code>a</code>的连接线，但是因为<code>return b</code>把<code>aAO,GO</code>存在了外部，所以依然还是可以访问值</p>\n<p>在第二次执行<code>function b</code>时，<code>aAO&#123;num : 101&#125;</code>，<code>在</code>num ++<code>就是</code>102`</p>\n<h2 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h2><h3 id=\"一、实现公有变量\"><a href=\"#一、实现公有变量\" class=\"headerlink\" title=\"一、实现公有变量\"></a>一、实现公有变量</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数累加器：</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            count ++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = add();</span><br><span class=\"line\">    counter();</span><br><span class=\"line\">    counter();</span><br><span class=\"line\">    counter();</span><br><span class=\"line\">    counter();</span><br><span class=\"line\">    counter();</span><br><span class=\"line\"></span><br><span class=\"line\">每回调用 counter 就会在原有基础上加一次</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、可以做缓存（存储结构）\"><a href=\"#二、可以做缓存（存储结构）\" class=\"headerlink\" title=\"二、可以做缓存（存储结构）\"></a>二、可以做缓存（存储结构）</h3><blockquote>\n<p>eg:eater。缓存是外部不可见的，但是确实有存储结构</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    fnction <span class=\"function\"><span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            num ++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            num --;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [a,b];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myArr = test();</span><br><span class=\"line\">    myArr[<span class=\"number\">0</span>]();</span><br><span class=\"line\">    myArr[<span class=\"number\">1</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\">答案 <span class=\"number\">101</span> 和 <span class=\"number\">100</span>，思考过程：说明两个用的是一个 AO</span><br><span class=\"line\"></span><br><span class=\"line\">test doing test[[scope]] <span class=\"number\">0</span> : test.AO</span><br><span class=\"line\">                         <span class=\"number\">1</span> : GO</span><br><span class=\"line\">a defined a.[[scope]]    <span class=\"number\">0</span> : test.AO</span><br><span class=\"line\">                         <span class=\"number\">1</span> : GO</span><br><span class=\"line\">b defined b.[[scope]]    <span class=\"number\">0</span> : test.AO</span><br><span class=\"line\">                         <span class=\"number\">1</span> : GO</span><br><span class=\"line\"></span><br><span class=\"line\">当执行 myArr[<span class=\"number\">1</span>]();时:</span><br><span class=\"line\"></span><br><span class=\"line\">b doing b.[[scope]] <span class=\"number\">0</span> : b.AO</span><br><span class=\"line\">                    <span class=\"number\">1</span> : a 运行后的 test.AO</span><br><span class=\"line\">                    <span class=\"number\">2</span> : GO</span><br><span class=\"line\"></span><br><span class=\"line\">a 运行后的 test.AO， 与 a doing 里面的 test.AO 一模一样</span><br><span class=\"line\">a 和 b 连线的都是 test 环境，对应的一个闭包</span><br></pre></td></tr></table></figure>\n\n<p><code>function a</code>和<code>function b</code>是并列的，不过因为<code>function a</code>在前，所以先执行<code>num ++</code>，在执行<code>num --</code></p>\n<p><code>myArr[0]</code>是数组第一位的意思，即<code>a</code>，<code>myArr[0]()</code>;就是执行函数<code>a</code>的意思;</p>\n<p><code>myArr[1]</code>是数组第二位的意思，即<code>b</code>，<code>myArr[1]()</code>; 就是执行函数<code>b</code>的意思;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eater</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> food = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">            <span class=\"attr\">eat</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;I am eating&#x27;</span> + food);</span><br><span class=\"line\">                food = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">push</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myFood</span>)</span>&#123;</span><br><span class=\"line\">                food = myFood;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> eater1 = eater();</span><br><span class=\"line\"></span><br><span class=\"line\">    eater1.push(<span class=\"string\">&#x27;banner&#x27;</span>);</span><br><span class=\"line\">    eater1.eat();</span><br><span class=\"line\"></span><br><span class=\"line\">答案: I am eating banana，eat 和 push 操作的是同一个 food;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>function eater()&#123;里面的 food&#125;</code>就相当于一个隐式存储的机构<code>obj</code>对象里面是可以有<code>function</code>方法的,也可以有属性，方法就是函数的表现形式</p>\n<h3 id=\"三、可以实现封装，属性私有化\"><a href=\"#三、可以实现封装，属性私有化\" class=\"headerlink\" title=\"三、可以实现封装，属性私有化\"></a>三、可以实现封装，属性私有化</h3><p><code>例为什么在外部执行的 divorce 能用内部的变量？能换成 xiaozhang</code></p>\n<p><code>因为 this.divorce 在对象上，由于对象被返回了，这个方法也被返回了。 因为闭包。这个函数被储存到了外部，所以储存了这个函数的执行期上下文。</code></p>\n<p><code>所以可以用这个闭包。所以 var prepareWife 被下面的 this=fn 三个函数共用，这三个函数分别与 fn Deng 形成了闭包，共同用 Deng 的 AO,所以可以在外部随意存取。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Deng</span>(<span class=\"params\">name,wife</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> prepareWife = <span class=\"string\">&#x27;xiaozhang&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.wife = wife;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.divorce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">this</span>.wife = prepareWife;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.changePrepareWife = <span class=\"function\"><span class=\"title\">funtion</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">             prepareWife = target;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.sayPrapreWife = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(prepareWife);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> deng = <span class=\"keyword\">new</span> Deng(<span class=\"string\">&#x27;Deng&#x27;</span>,<span class=\"string\">&#x27;xiaoliu&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  从控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Deng</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; changePrepareWife(target)</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; divorce:()</span></span><br><span class=\"line\">    <span class=\"comment\">//         name : &quot;deng&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; sayPrapreWife:()</span></span><br><span class=\"line\">    <span class=\"comment\">//         wife : &#x27;xiaoliu&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; __proto__ : Object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng.divorce()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng.wife</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;xiaozhang&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng.prepareWife</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>deng.prepareWife 是 undefined 的，表面上看起来不是自己的，但是<code>实际上只有对象自己通过对象自己设置的方法可以去操作他，外部用户通过对象，prepareWife 是看不到的</code>，只有自己能看到，就是闭包的私有化运用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">    F.prototype = Origin.prototype;</span><br><span class=\"line\">    Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    Target.prototype.constructor = Target;</span><br><span class=\"line\">    Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 执行完是这个样子</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inherit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">  F.prototype = Origin.prototype;</span><br><span class=\"line\">  Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  Target.prototype.constructor = Target;</span><br><span class=\"line\">  Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>上面的 var F 这个 F 形成了闭包，成为了这个函数的私有化变量，而且变成私有化变量就更好</code></p>\n<h3 id=\"四、模块化开发，防止污染全局变量\"><a href=\"#四、模块化开发，防止污染全局变量\" class=\"headerlink\" title=\"四、模块化开发，防止污染全局变量\"></a>四、模块化开发，防止污染全局变量</h3><h2 id=\"闭包的防范\"><a href=\"#闭包的防范\" class=\"headerlink\" title=\"闭包的防范\"></a>闭包的防范</h2><blockquote>\n<p>闭包会导致多个执行函数共用一个公有变量，如果不是特殊需要，应尽量防止这种情况发生。</p>\n</blockquote>\n<h1 id=\"对象，包装类\"><a href=\"#对象，包装类\" class=\"headerlink\" title=\"对象，包装类\"></a>对象，包装类</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"1-用已学的知识点，描述一下你心目中的对象\"><a href=\"#1-用已学的知识点，描述一下你心目中的对象\" class=\"headerlink\" title=\"1.用已学的知识点，描述一下你心目中的对象\"></a>1.用已学的知识点，描述一下你心目中的对象</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mrDeng  = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;MrDeng&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">health</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">smoke</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;I am smoking ! cool !!! &#x27;</span>);</span><br><span class=\"line\">            mrDeng.health --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">dring</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;I am drink&#x27;</span>);</span><br><span class=\"line\">            mrDeng.health ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.health</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.drink()</span></span><br><span class=\"line\">    <span class=\"comment\">//  I am drink</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.drink()</span></span><br><span class=\"line\">    <span class=\"comment\">//  I am dring</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.health</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 102</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.smoke()</span></span><br><span class=\"line\">    <span class=\"comment\">//  I am smiking ! cool !!!</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.health</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 99</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  mrDeng.dring()</span></span><br><span class=\"line\">    <span class=\"comment\">//  I am dring</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>灰色的 undefined 是返回值，因为没有设置返回值，所以就是灰色的 undefined</p>\n</blockquote>\n<h4 id=\"代表函数引用\"><a href=\"#代表函数引用\" class=\"headerlink\" title=\"代表函数引用\"></a>代表函数引用</h4><blockquote>\n<p>改 mrDeng.health 为 this.health，此处 this 指代的是自己，是第一人称，指的就是 mrDeng。因为 this 是在一个方法里面，所以指的这个方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">smoke</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(‘I am good’)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.health --;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-属性的增、删、改、查\"><a href=\"#2-属性的增、删、改、查\" class=\"headerlink\" title=\"2.属性的增、删、改、查\"></a>2.属性的增、删、改、查</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例</span><br><span class=\"line\"></span><br><span class=\"line\">在上面的基础上 mrDeng.wife = <span class=\"string\">&#x27;xiaoliu&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">也可以在控制台操作</span><br><span class=\"line\"></span><br><span class=\"line\">=<span class=\"string\">&#x27;&#x27;</span>等号后面的引号里面需要有值才可以</span><br><span class=\"line\"></span><br><span class=\"line\">删除必须借助 <span class=\"keyword\">delete</span> mrDeng.sex</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增加一个属性\"><a href=\"#增加一个属性\" class=\"headerlink\" title=\"增加一个属性\"></a>增加一个属性</h4><p>给一个对象增加属性和方法，就直接给一个对象添加，如下:</p>\n<blockquote>\n<p>（对象.属性名 = 属性值） 如 ： mrDeng.wife = ‘xiaoliu’</p>\n</blockquote>\n<p><code>例 ：mrDeng.wife = &quot;xiaoliu&quot;</code></p>\n<h4 id=\"查看一个属性\"><a href=\"#查看一个属性\" class=\"headerlink\" title=\"查看一个属性\"></a>查看一个属性</h4><blockquote>\n<p>对象名.属性名</p>\n</blockquote>\n<h4 id=\"修改一个属性\"><a href=\"#修改一个属性\" class=\"headerlink\" title=\"修改一个属性\"></a>修改一个属性</h4><blockquote>\n<p>直接在对象名外面或控制器里面写 （对象名.属性名 = “属性值”）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">var</span> mrDeng = &#123;</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mrDeng.sex = <span class=\"string\">&quot;female&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除一个属性\"><a href=\"#删除一个属性\" class=\"headerlink\" title=\"删除一个属性\"></a>删除一个属性</h4><p>删除一个属性，需要添加一个属性‘delete’,</p>\n<blockquote>\n<p>delete 对象名.属性名</p>\n</blockquote>\n<p>这样就会删除对应的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">var</span> mrDeng = &#123;</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">health</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"attr\">fring</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I am dring&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> mrDeng.sex;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-对象的创建方法\"><a href=\"#3-对象的创建方法\" class=\"headerlink\" title=\"3.对象的创建方法\"></a>3.对象的创建方法</h3><h4 id=\"1-var-obj-对象字面量-对象直接量-plainObject\"><a href=\"#1-var-obj-对象字面量-对象直接量-plainObject\" class=\"headerlink\" title=\"1. var obj = {} 对象字面量 / 对象直接量 plainObject\"></a>1. var obj = {} <code>对象字面量 / 对象直接量 plainObject</code></h4><h4 id=\"2-构造函数-系统自带的构造函数-Object-new-Object-Array-Number-Boolean-Date\"><a href=\"#2-构造函数-系统自带的构造函数-Object-new-Object-Array-Number-Boolean-Date\" class=\"headerlink\" title=\"2. 构造函数 系统自带的构造函数 Object() new Object(); Array(); Number(); Boolean(); Date();\"></a>2. 构造函数 <code>系统自带的构造函数 Object() new Object(); Array(); Number(); Boolean(); Date();</code></h4><p>一、系统自带的构造函数</p>\n<blockquote>\n<p>Object()可以批量生成对象，每一个对象都一样，但是彼此相互独立。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">在 <span class=\"built_in\">Object</span>()前面加个 <span class=\"keyword\">new</span>，变成 <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()的执行，就会真正的返回一个对象，通过 <span class=\"keyword\">return</span> 返回，拿变量接受。<span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();和 <span class=\"keyword\">var</span> obj = &#123;&#125;;这样写区别不大</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        obj.name = ‘abc’;</span><br><span class=\"line\">        obj.sex = “male”;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>双引号和单引号都是表示的字符串，写双引号也可以写单引号，但是为了跟后端 php 配合最好写单引号。如果要打印一个单个的引号，用正则表达式转义字符<code>/* \\&#39; */</code>注意 等号 和 冒号 的用法 <code>obj.say = function()&#123;&#125; var obj = &#123; name : &#39;abc&#39;&#125;</code></strong></p>\n<p>二、自定义</p>\n<blockquote>\n<p>Object.create(原型)方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person 是可以随便写的，也是构造函数</span><br><span class=\"line\">    构造函数跟函数结构上没有任何区别</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> person();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>必须用 new 这个操作符，才能构造出对象</p>\n</blockquote>\n<p><code>构造函数必须要按照大驼峰式命名规则，但凡是构造函数就要大写，例如 TheFirNa</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;BMW&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = <span class=\"string\">&#x27;1400&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lang = <span class=\"string\">&#x27;4900&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.weight = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.health = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.run = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.health --;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"><span class=\"keyword\">var</span> car1 = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"></span><br><span class=\"line\">car.name = <span class=\"string\">&#x27;Maserati&#x27;</span>;</span><br><span class=\"line\">car1.name = <span class=\"string\">&#x27;Merz&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出时。显示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  car</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Car &#123;name : &#x27;Maserati&#x27;,height : &#x27;1400&#x27;,lang : &#x27;4900&#x27;,weight : 1000&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  car1</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Car &#123;name : &#x27;Merz&#x27;,height : &#x27;1400&#x27;,lang : &#x27;4900&#x27;,weight : 1000&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>car1 和 car 是长得一样，但是是不同的两个 car。方法名和对象名尽量不一样</code></p>\n<p><code>a 和 A 变量是两个变量，var car = new Car 里面 car 和 Car 是两个变量</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;BMW&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.height = <span class=\"string\">&quot;1400&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.lang = <span class=\"string\">&quot;4900&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.weight = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.health = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.health--;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"string\">&quot;red&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> car1 = <span class=\"keyword\">new</span> Car(<span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一行的 color 可以和上面的参数重复，通过参数，使参数发生变化，变成自定义</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.grade = <span class=\"number\">2017</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;male&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数内部原理\"><a href=\"#构造函数内部原理\" class=\"headerlink\" title=\"构造函数内部原理\"></a>构造函数内部原理</h3><blockquote>\n<p>前提必须要加 new，以下三步都是隐式的：</p>\n</blockquote>\n<ol>\n<li><p>在函数体最前面隐式的加上 var this = {} 空对象</p>\n</li>\n<li><p>执行 this.xxx = xxx;</p>\n</li>\n<li><p>隐式的返回 return this</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// var this&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// name : &quot;&quot;;</span></span><br><span class=\"line\">  <span class=\"comment\">// age : &quot;&quot;;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.grade = <span class=\"number\">2017</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//return this;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;male&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//隐式的 var this = &#123;&#125;，下面正常执行 this</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.height = height;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.say = funtion ()&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.say);</span><br><span class=\"line\">            <span class=\"comment\">//此处的 this 和外面的 this 不同</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 隐式的 return this;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person(‘xiaowang’, <span class=\"number\">180</span>).name);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例;</span><br><span class=\"line\"><span class=\"comment\">// 也可以这样显式的写出来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = &#123;&#125;; <span class=\"comment\">//显式写出来</span></span><br><span class=\"line\">  that.name = name;</span><br><span class=\"line\">  that.height = height;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> that; <span class=\"comment\">//显式写出来</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// var this = &#123;&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.height = height;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.say);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"comment\">// return this;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;xiaowang&quot;</span>, <span class=\"number\">180</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;xiaozhang&quot;</span>, <span class=\"number\">175</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出时。显示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Person&#123;name : &#x27;xiaowang&#x27;,height : 180&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person1</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Person&#123;name : &#x27;xiaozhang&#x27;,height : 175&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 答案现在的 peson 和 person1 都是 Object&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 return 写成 return 123，会使 return 失效，如上</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有 new 了以后就不能返回原始值，例如 123</p>\n</blockquote>\n<h2 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h2><p><code>new String(); new Boolean(); new Number();</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num =<span class=\"number\">123</span>;  →  原始值数字</span><br><span class=\"line\"></span><br><span class=\"line\">只有原始值数字是原始值，原始值不能有属性和方法</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>属性和方法只有对象有，包括对象自己，数组，function</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台输出。显示</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num.abc = &#x27;a&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num.abc</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Number&#123;abc:&#x27;a&#x27;,[[primitiveValue]]:123&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>); ——&gt; 构造函数。是对象<span class=\"number\">123</span>，不是原始数字</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num * 2</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 246</span></span><br></pre></td></tr></table></figure>\n<p><strong>数字的对象如果参与运算，就会变回原始值，但如果不参与运算，加属性和方法，又可以当对象用，字符串 和<code>Boolean</code>类型完全一致。</strong></p>\n<h3 id=\"字符串类型的对象\"><a href=\"#字符串类型的对象\" class=\"headerlink\" title=\"字符串类型的对象\"></a>字符串类型的对象</h3><ol>\n<li><p>var num = new Nunber(123); <code>数字类型对象</code></p>\n</li>\n<li><p>var str = new String(‘abcd’); <code>字符串类型对象</code></p>\n</li>\n<li><p>var bol = new Boolean(‘true’); <code>布尔类型对象</code></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &gt;  num</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  str</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· String&#123;[[PrimitiveValue]]:abcd&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  Boolean</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Boolean&#123;[[PrimitiveValue]]:true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>undefined 和 null 不可以有属性</p>\n</blockquote>\n<p><code>不能写成 undefined.abc = 123;会报错</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    原始值不可能有属性和方法，但经过了包装类(加隐式)可以调用一些属性与方法</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">4</span>；</span><br><span class=\"line\">    num.len = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">//系统隐式的加上 new Number(4).len = 3; 然后 delete</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num.len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//系统隐式的加上 new Number(4).len; 但是这个 new Number 和上面的 new Number不是同一个，所以返回 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    而上面这些隐式的过程就是包装类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>;</span><br><span class=\"line\">    str.length = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//隐式的加上 new string(‘abcd’).length = 2; 然后delete</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    答案是 abcd，<span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    str += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"keyword\">typeof</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(test.length == <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">        test.sign = <span class=\"string\">&#x27;typeof的返回结果可能是 Strings&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.sign);</span><br><span class=\"line\"></span><br><span class=\"line\">理解过程:</span><br><span class=\"line\">    str += <span class=\"number\">1</span>; <span class=\"comment\">//abc1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"keyword\">typeof</span>(str); <span class=\"comment\">//test == “string”，返回 string，string 长度是 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(test.length == <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">        test.sign = “<span class=\"keyword\">typeof</span> 的返回结果可能为 <span class=\"built_in\">String</span>”;</span><br><span class=\"line\">        <span class=\"comment\">//这是原始值,原始值要赋属性值需要调用包装类，赋了跟没赋值是一样的，new String(test).sign=’xxx’;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    conlogo.log(test.sign); <span class=\"comment\">//new String(test).sign</span></span><br><span class=\"line\">    答案 <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例题<span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 分析一下javasript代码段</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emproyee</span>(<span class=\"params\">name,code</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;wangli&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = <span class=\"string\">&#x27;Aoo1&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newemp = <span class=\"keyword\">new</span> emproyee(<span class=\"string\">&#x27;zhangming&#x27;</span>,A002);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;雇员姓名&#x27;</span> + newemp.name + <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;雇员代号&#x27;</span> + newemmp.code + <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出结果是（）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// A. 雇员姓名：wangli 雇员代号 A001</span></span><br><span class=\"line\">    <span class=\"comment\">// B. 雇员姓名：zhangming 雇员代号 A002</span></span><br><span class=\"line\">    <span class=\"comment\">// C. 雇员姓名：null 雇员代号 null</span></span><br><span class=\"line\">    <span class=\"comment\">// D. 输出错误，无输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    答案 A，里面并没有用参数，被写死了，传参不成功</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sss</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            a ++;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.write(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.say = sss;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oPerson = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    oPerson.say();</span><br><span class=\"line\">    oPerson.say();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oPerson1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    oPerson1.say();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 答案 ：1，2，1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>,y = z = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    y = add(x);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n = n + <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    z = add(x);</span><br><span class=\"line\">    <span class=\"comment\">// x  y  z</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 答案: 1, 4, 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 下面代码中 console.log 的结果是[1,2,3,4,5]的选项是</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// A.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// B.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// C</span></span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;)(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// D</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;bar.apply(<span class=\"literal\">null</span>,<span class=\"built_in\">arguments</span>)&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)&#125;</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 答案: ACD</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 请问一下表达式的结果是什么？</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">parseInt</span>(<span class=\"number\">3</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">parseInt</span>(<span class=\"number\">3</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">parseInt</span>(<span class=\"number\">3</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    答案:<span class=\"number\">3</span>,<span class=\"literal\">NaN</span>，<span class=\"number\">3</span>(有的浏览器遇到 <span class=\"number\">0</span> 进制 是报 <span class=\"literal\">NaN</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 一下那些是 javascript 语言 typeof 可能返回的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    A.string     B. array    C.object    D.null</span><br><span class=\"line\"></span><br><span class=\"line\">    答案: A、C</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 看看下面 alert 的结果是什么？</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span> (<span class=\"params\">x, y, a</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">        alert( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果函数体改成下面，结果又会是什么？</span></span><br><span class=\"line\">    a = <span class=\"number\">10</span>；</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[ <span class=\"number\">2</span> ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    答案 <span class=\"number\">10</span>，<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例题<span class=\"number\">8</span>:</span><br><span class=\"line\">    写一个方法，求一个字符串的字节长度。(提示：字符串有一个方法 charCodeAt(); 一个中文占两个字节，一个英文占一个字节。)</span><br><span class=\"line\"></span><br><span class=\"line\">    定义和用法:</span><br><span class=\"line\">    charCodeAt(); 方法可返回指定位置的字符的 Uncode 编码，这个返回值是<span class=\"number\">0</span> - <span class=\"number\">65535</span> 之间的整数。(当返回值是 &lt;=<span class=\"number\">255</span>时为英文，当返回值 &gt;<span class=\"number\">255</span>时为中文)</span><br><span class=\"line\"></span><br><span class=\"line\">    语法:</span><br><span class=\"line\">    stringObject.charCodeAt(index)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">eg</span>:</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span> = <span class=\"string\">&#x27;javascrip/text&#x27;</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Hello word&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">document</span>.write(str.charCodeAt(<span class=\"number\">1</span>))  <span class=\"comment\">//输出101</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello world 邓哥身体好&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        str.charCoeAt(<span class=\"number\">0</span>); <span class=\"comment\">// 输出 104</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello world 邓哥身体好&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; str.length; i ++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(str.charCodeAt(i));</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    解题</span><br><span class=\"line\"></span><br><span class=\"line\">    方式<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;1111111111111&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bytesLength</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; str.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str.charCodeAt(i) &gt; <span class=\"number\">255</span>)&#123;</span><br><span class=\"line\">                    count += <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count; <span class=\"comment\">// 闭包</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> Str = bytesLength(str); <span class=\"comment\">//Str 接受闭包</span></span><br><span class=\"line\"></span><br><span class=\"line\">    方式<span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;222222222222&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bytesLength</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> count = str.length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(str.charCodeAt(i) &gt; <span class=\"number\">255</span>)&#123;</span><br><span class=\"line\">                    count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count; <span class=\"comment\">// 闭包</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> Str = bytesLength(str); <span class=\"comment\">//Str 接受闭包</span></span><br><span class=\"line\"></span><br><span class=\"line\">小于等于 <span class=\"number\">255</span> 是一个字节，</span><br><span class=\"line\">大于是两个字节</span><br><span class=\"line\">返回值大于 <span class=\"number\">255</span> 是中文</span><br><span class=\"line\">上面 是两种方法 → Unicode 编码涵盖 asc 码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><ol>\n<li><p>定义：原型是 function 对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。</p>\n</li>\n<li><p>利用原型特点和概念，可以提取共有属性。</p>\n</li>\n<li><p>对象属性的增删和原型上属性增删改查。</p>\n</li>\n<li><p>对象如何查看原型 ==&gt; 隐式属性 __proto__。</p>\n</li>\n<li><p>对象如何查看对象的构造函数 ==&gt; constructor。</p>\n</li>\n</ol>\n<h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><blockquote>\n<p>原型，一种继承关系，出生（一开始）就被定义好了</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">person.prototype <span class=\"comment\">//原型（描述一种继承关系），出生时就被定义好了</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.prototype = &#123;&#125; <span class=\"comment\">//是祖先</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Person.prototype  ————&gt;  原型</span></span><br><span class=\"line\"><span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">Person.prototyp.name = <span class=\"string\">&#x27;hehe&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Person&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.name</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;hehe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">右上的 person 和 person1 都有一个共有的祖先 Person.prototype</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// Person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">例<span class=\"number\">1</span>: <span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">Person.prototype.LastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hehe&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.LastName = <span class=\"string\">&quot;Ji&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.LastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Ji&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">例<span class=\"number\">2</span>: <span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">Person.prototype.LastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hehe&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;xuming&quot;</span>, <span class=\"number\">35</span>, <span class=\"string\">&quot;male&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Person&#123;name:&#x27;xuming&#x27;,age:35,sex:&#x27;male&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.name</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;xuming&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.LastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自己身上有需要的属性，原型上也有属性，取近的，用自己的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">  <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">// person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">    <span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">color,owner</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.carName = <span class=\"string\">&#x27;BMW&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.height = <span class=\"number\">1400</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lang = <span class=\"number\">4900</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.owner = owner;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;prof.ji&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 1) 上面代码提取出来放在原型里面就如 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">    <span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">    Car.prototype.height = <span class=\"number\">1400</span>;</span><br><span class=\"line\">    Car.prototype.lang = <span class=\"number\">4900</span>;</span><br><span class=\"line\">    Car.prototype.carName = <span class=\"string\">&#x27;BMW&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">color,owner</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.owner = owner;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;prof.ji&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;laodeng&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">例: <span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">Person.prototype.lastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;xuming&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台打印:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.lastName = &#x27;James&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;James&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Person&#123;name : &#x27;xuming&#x27;,lastName : &#x27;James&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.lastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;James&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面通过对象（后代）改原型（祖先）是不行的，在对象里面修改，只是作用给自己的，给自己加了一个属性。改原型都不行，增加肯定也不行。对象可以删除属性</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">  <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">// person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">    <span class=\"comment\">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">    Person.prototype.height = <span class=\"number\">1400</span>;</span><br><span class=\"line\">    Person.prototype.lang = <span class=\"number\">4900</span>;</span><br><span class=\"line\">    Person.prototype.carName = <span class=\"string\">&#x27;BMW&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pereson = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;xuming&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1) 的简化写法见 2):</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">    <span class=\"comment\">// person.prototype  ————&gt;  祖先（原型）</span></span><br><span class=\"line\">    Car.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">1400</span>,</span><br><span class=\"line\">        <span class=\"attr\">lang</span> : <span class=\"number\">4900</span>,</span><br><span class=\"line\">        <span class=\"attr\">carName</span> : BMW</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h2><p><code>constructor 是构造的意思</code></p>\n<blockquote>\n<p>原型内部自带 constructor，指的是 Car。通过 constructor 能找的谁构造的自己</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span>例<span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台中输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  car.constructor</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· function Car()&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Car.prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        constructor:Car()  ————&gt;  粉色字体</span></span><br><span class=\"line\">    <span class=\"comment\">//        __proto__:Object   ————&gt;  粉色字体</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">construnctor 是构造的意思(隐式是浅粉色)</span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"comment\">//Person.prototype  ————&gt; 原型</span></span><br><span class=\"line\">    <span class=\"comment\">//Person.prototype  ————&gt; 祖先（原型）</span></span><br><span class=\"line\">    Car.prototype.abc = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台中输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Car.prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//      abc : &#x27;123&#x27;  ————&gt;  紫色字体</span></span><br><span class=\"line\">    <span class=\"comment\">//      constructor:Car()  ————&gt;  粉色字体</span></span><br><span class=\"line\">    <span class=\"comment\">//      __proto__:Object   ————&gt;  粉色字体</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">粉红色是系统帮你设置的，深紫色是自己设置的</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在原型内部自带 constructor，指的是 Car。通过 constructor 能找的谁构造的自己，也可以通过 constructor 来改变自己的构造对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"comment\">// Person.prototype  ————&gt;  原型</span></span><br><span class=\"line\">    <span class=\"comment\">// Person.prototype=&#123;&#125;  ————&gt;  祖先(原型)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Car.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">constructor</span> : Person</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  car.constructor</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· function Person()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// car的构造对象本来是 function Car()&#123;&#125; 但是经过 constructor属性 的更改，car的构造对象变成了 function Person()&#123;&#125;, constructor属性也可以，找构造函数所对应的构造对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">constructor</span> 可以被人工手动更改</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"proto\"><a href=\"#proto\" class=\"headerlink\" title=\"proto\"></a><strong>proto</strong></h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Person.prototype.name = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//var this = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// __proto__: Person.prototype</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      __proto__ : Object&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          constructor:Person()</span></span><br><span class=\"line\"><span class=\"comment\">//          __protot__:Object</span></span><br><span class=\"line\"><span class=\"comment\">//      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.__proto__</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          constructor : Person()  ————&gt; 粉色字体</span></span><br><span class=\"line\"><span class=\"comment\">//          name : &#x27;abc&#x27;            ————&gt; 紫色字体</span></span><br><span class=\"line\"><span class=\"comment\">//          __proto__ : Object      ————&gt; 粉色字体</span></span><br><span class=\"line\"><span class=\"comment\">//      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">浅粉色的__proto__是系统的隐式的属性,前面两个_后面两个_，可以修改，尽量不改。</span><br><span class=\"line\"></span><br><span class=\"line\">在开发的时候，如果很私人可以写成_private，告诉同事别动。</span><br><span class=\"line\"></span><br><span class=\"line\">上面的__proto__放的是原型。__proto__存的对象的原型</span><br><span class=\"line\"></span><br><span class=\"line\">上面的 <span class=\"keyword\">var</span> <span class=\"built_in\">this</span> =&#123;<span class=\"attr\">__proto__</span>:person.prototype&#125;;这个对象并不是空的，这个 proto，当你访问这个对象的属性时，如果对象没有这个属性，那么就会访问 proto 索引，看看有没有。有一个连接的关系，原型和自己连接到一起</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Person.prototype.name = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//var this = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// __proto__ : Person.prototype</span></span><br><span class=\"line\">  <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;sunny&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.__proto__ = obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.__proto__</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.__proto__ = obj</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;name : &#x27;sunny&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.name</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;sunny&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Person 的原型是可以被修改的</p>\n</blockquote>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Person.prototype.name = <span class=\"string\">&quot;sunny&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">&quot;cherry&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; person.name</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;· &#x27;cherry&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Person.prototype.name = <span class=\"string\">&quot;sunny&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">&quot;cherry&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; person.name</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;· &#x27;cherry&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Person.prototype.name = <span class=\"string\">&quot;sunny&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//var this = &#123;__proto : Person.prototype&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cherry&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; person.name</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;· &#x27;sunny&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person.prototype.name 这种.的写法是在原有的基础上把值改了。改的是属性，也就是房间里面的东西。</span><br><span class=\"line\"></span><br><span class=\"line\">而 Person.prototype=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;cherry&#x27;</span>&#125;是把原型改了，换了新的对象。改了个房间。</span><br><span class=\"line\"></span><br><span class=\"line\">上面在 <span class=\"keyword\">new</span> 的时候 <span class=\"keyword\">var</span> <span class=\"built_in\">this</span> = &#123;<span class=\"attr\">__proto__</span>:Person.prototype&#125;里面的指向 Person，此时Person.prototype 与__proto__指向的是一个空间，把他返回给 <span class=\"keyword\">var</span> person。</span><br><span class=\"line\"></span><br><span class=\"line\">先 <span class=\"keyword\">new</span> 再 Person.prototype=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;cherry&#x27;</span>&#125;已经晚了</span><br><span class=\"line\"></span><br><span class=\"line\">在 Person.prototype=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;cherry&#x27;</span>&#125;时，Person.prototype 空间改了，但是__proto指向的空间不变。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">上面的步骤实际（简化）上是→</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.prototype = &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;a&#x27;</span>&#125;;</span><br><span class=\"line\">    __proto__ = Person.prototype;</span><br><span class=\"line\">    Person.prototype = &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;a&quot;</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj1 = obj;</span><br><span class=\"line\">    obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;b&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  obj1</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;name:&#x27;a&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;name:&#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    Person.prototype.name = <span class=\"string\">&#x27;sunny&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//var this = &#123;__proto : Person.prototype&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;cherry&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    上面这种思考过程：程序执行顺序</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>先把 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;在预编译的过程中提到最上面</span><br><span class=\"line\"><span class=\"number\">2.</span>再执行 Person.prototype.name = <span class=\"string\">&#x27;sunny&#x27;</span>这一样行</span><br><span class=\"line\"><span class=\"number\">3.</span>再执行 Person.prototype = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;cherry&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"number\">4.</span>最后执行 <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();执行到 <span class=\"keyword\">new</span> 的时候，才会发生    <span class=\"comment\">//var this=&#123;__proto__:Person.prototype&#125;</span></span><br><span class=\"line\"><span class=\"number\">5.</span>下面的把上面的覆盖了</span><br><span class=\"line\"><span class=\"number\">6.</span>答案是 cherry</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>铺垫原型链</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  Person.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt; constructor : Person()</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt; __proto__ : Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这说明原型里面有原型</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: 原型链</span><br><span class=\"line\"></span><br><span class=\"line\">Grand.prototype.lastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Grand</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> grand = <span class=\"keyword\">new</span> Grand();</span><br><span class=\"line\"></span><br><span class=\"line\">Father.prototype = grand;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;xuming&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\">Son.prototype = father;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.hobbit = <span class=\"string\">&quot;smoke&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出时:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  son.hobbit</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;smoke&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  son.name</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;xuming&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  son.lastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  Grand.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object</span></span><br><span class=\"line\"><span class=\"comment\">//     ·&gt; constructor : Gran()</span></span><br><span class=\"line\"><span class=\"comment\">//         lastName : &#x27;Deng&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//     ·&gt; __proto__ : Object</span></span><br><span class=\"line\"><span class=\"comment\">//         ·&gt; __defineGetter__;</span></span><br><span class=\"line\"><span class=\"comment\">//         ·&gt; __defineSetter__;</span></span><br><span class=\"line\"><span class=\"comment\">//         ·&gt; __lookupGetter__;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  Object.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  Object.prototype.__proto__</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· null</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">执行 son.toString <span class=\"comment\">//返回 function toString( )&#123; [native code] &#125;，这里返回的是原型链终端的 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">Grand.prototype.__proto__ = <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">// Object.prototype 是原型链的终端</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、如何构成原型链?(如下)</span><br><span class=\"line\"></span><br><span class=\"line\">原型链</span><br><span class=\"line\"></span><br><span class=\"line\">    Grand.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Grand</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> grand = <span class=\"keyword\">new</span> Grand();</span><br><span class=\"line\"></span><br><span class=\"line\">    Father.prototype = grand;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;xuming&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\">    Son.prototype = father;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobbit = <span class=\"string\">&#x27;smoke&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出时:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.hobbit</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;smoke&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.name</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;xuming&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.lastName</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Grand.prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object</span></span><br><span class=\"line\">    <span class=\"comment\">//     ·&gt; constructor : Gran()</span></span><br><span class=\"line\">    <span class=\"comment\">//         lastName : &#x27;Deng&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//     ·&gt; __proto__ : Object</span></span><br><span class=\"line\">    <span class=\"comment\">//         ·&gt; __defineGetter__;</span></span><br><span class=\"line\">    <span class=\"comment\">//         ·&gt; __defineSetter__;</span></span><br><span class=\"line\">    <span class=\"comment\">//         ·&gt; __lookupGetter__;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Object.prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Object.prototype.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、原型链上属性的增删改查，原型链上的增删改查和原型基本上是一致的。只有本人有的权限，子孙是没有的。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、谁调用的方法内部 <span class=\"built_in\">this</span> 就是谁-原型案例</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、绝大多数对象的最终都会继承自 <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、<span class=\"built_in\">Object</span>.create(原型);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span>、原型方法上的重写</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">     Grand.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Grand</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> grand = <span class=\"keyword\">new</span> Grand();</span><br><span class=\"line\"></span><br><span class=\"line\">    Father.prototype = grand;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;xuming&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fortune = &#123;</span><br><span class=\"line\">            <span class=\"attr\">card1</span> : <span class=\"string\">&#x27;visa&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\">    Son.prototype = father;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobbit = <span class=\"string\">&#x27;smoke&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.fortune</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;card1 : &#x27;visa&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.fortune = 200;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 200</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Son&#123;hobbit : &#x27;smoke&#x27;,fortune : 200&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  father.fortune</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;card1 : &#x27;visa&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.fortune.card2 = &#x27;master&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;master&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Son&#123;hobbit : &#x27;smoke&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  father</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Grand&#123;name : &#x27;xuming&#x27;,fortune : Object&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     ·&gt; fortune : Object</span></span><br><span class=\"line\">    <span class=\"comment\">//         card1 : &#x27;visa&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//         card2 : &#x27;master&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//         __proto__ : Object</span></span><br><span class=\"line\">    <span class=\"comment\">//         name : &#x27;xuming&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//     ·&gt; __proto__ : Grand</span></span><br><span class=\"line\"></span><br><span class=\"line\">son.fortune.card2=<span class=\"string\">&#x27;master&#x27;</span>这种改，这是引用值自己的修改。属于 fortune.name 给自己修改，这是一种调用方法的修改</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    Grand.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Grand</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> grand = <span class=\"keyword\">new</span> Grand();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fahter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;xuming&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fortune = &#123;</span><br><span class=\"line\">            <span class=\"attr\">card1</span> : <span class=\"string\">&#x27;visa&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\">    Son.prototype = father;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobbit = <span class=\"string\">&#x27;smoke&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.num++</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  father.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 101</span></span><br><span class=\"line\"></span><br><span class=\"line\">son.num++ 是 son.num = son.num+<span class=\"number\">1</span>，是先把父级的取过来再赋值+<span class=\"number\">1</span>，所以父级的没变</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Pereson();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  person.sayName()</span></span><br><span class=\"line\"><span class=\"comment\">//    a</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//如果写成 name 就会错，没有这个变量</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        sayName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pereson</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person.sayName()</span></span><br><span class=\"line\">    <span class=\"comment\">//    b</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person.prototype.sayName()</span></span><br><span class=\"line\">    <span class=\"comment\">//    a</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a.sayName() 方法调用，就是 sayName 里面的 <span class=\"built_in\">this</span> 指向，是谁调用的这个方法，<span class=\"built_in\">this</span> 就指向谁</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">  <span class=\"number\">1</span>)</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.height ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person.eat()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Person&#123;height : 101&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;height : 100&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.height ++; <span class=\"comment\">//这后面默认有一个 return undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2</span>)</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.height ++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person.eat()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;；也是有原型的</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;; 与 <span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); 的效果是一样的</span><br><span class=\"line\">    写 <span class=\"keyword\">var</span> obj = &#123;&#125;; 系统会在内部来一个 <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    obj1.__proto__  ————&gt;  <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">    但是在构造对象的时候，能用对象自变量 <span class=\"keyword\">var</span> obj = &#123;&#125;; 就不要用 <span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">1</span>)</span><br><span class=\"line\">    Person.prototype = &#123;&#125;  ————&gt;  <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\">    funtion <span class=\"function\"><span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    对象自变量的原型就是 <span class=\"built_in\">Object</span>.prototype;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-create-原型\"><a href=\"#Object-create-原型\" class=\"headerlink\" title=\"Object.create 原型\"></a>Object.create 原型</h2><p><code>var obj = Object.create(原型)</code></p>\n<blockquote>\n<p>Object.create 也能创建对象。var obj = Object.create(这里必须要有原型)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//var obj = Object.create(原型)</span></span><br><span class=\"line\">例: <span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sunny&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"built_in\">Object</span>.create(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  obj1</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  obj1.name</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;sunny&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"comment\">//var obj = Object.create(原型)</span></span><br><span class=\"line\">    Person.prototype.name = <span class=\"string\">&#x27;sunny&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"built_in\">Object</span>.create(Person.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">绝大多数对象的最终都会继承自 <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如: 控制台输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html 里面没有添加任何东西，这样就会报错</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  Object.create()</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html里面没有添加任何东西，只在控制台加上null</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  Object.create(null)</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· Object</span></span><br><span class=\"line\"><span class=\"comment\">//         No Properties</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var obj = Object.create(null);</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  obj.name = 123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· 123</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  obj</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· Object</span></span><br><span class=\"line\"><span class=\"comment\">//         name : 123</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  obj.__proto__ = &#123;name : &#x27;sunny&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· Object&#123;name : &#x27;sunny&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  obj</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· Object&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  obj.name</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     &gt;  obj.toString()</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;· 报错</span></span><br></pre></td></tr></table></figure>\n\n<p><code>原型是隐式的内部属性，你加是没有用的</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"comment\">//var obj = Object.create(原型)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"number\">123</span>); <span class=\"comment\">// 在控制台中会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.create() 在括号里面只能放 <span class=\"literal\">null</span> 或者 <span class=\"built_in\">Object</span>,其余会报错</span><br><span class=\"line\"><span class=\"literal\">undefined</span> 和 <span class=\"literal\">null</span> 没有原型，也就不可能有 toString 方法,如下:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制器输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  undefined.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 报错</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  null.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 报错</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>:</span><br><span class=\"line\">下面 <span class=\"number\">123.</span>toString 首先会识别成浮点型，所以在后面直接加.toString 是不行的</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  true.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;true&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  123.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = 123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var obj = &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;[object Object]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">数字想用 toString 方法，要经过包装类包装 <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(num) 然后.toString</span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>:加深上面的理解</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"comment\">//num.toString(); ————&gt;  new Number(num).toString();</span></span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Number.prototype.__proto__ = Object.prototype</span></span><br><span class=\"line\"></span><br><span class=\"line\">而 <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(num). toString 的原型是 Nunber.prototype，而 <span class=\"built_in\">Number</span>.prototype 上面有一个.toString 方法，<span class=\"built_in\">Number</span>.prototype 也有原型 <span class=\"built_in\">Number</span>.prototype.__proto__，原型是<span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">假如 <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span> 上面的 prototype 上面有这个 toString，那么就不用<span class=\"built_in\">Object</span>.prototype的 toString。而这个 number 上面有这个 toString。</span><br><span class=\"line\"></span><br><span class=\"line\">然后 number 上面的 toString 调用的是自己重写的 toString。</span><br><span class=\"line\"></span><br><span class=\"line\">原型上有这个方法，我自己又写了一个和原型上同一名字，但不同功能的方法，叫做重写（同一名字的函数，不同重写方式）</span><br><span class=\"line\"></span><br><span class=\"line\">通过返回值，形参列表不同传参</span><br><span class=\"line\"></span><br><span class=\"line\">同样的名实现不同功能的，就是重写</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"comment\">// num.toString();  ————&gt;  new Number(num).toString();</span></span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Number.prototype.__proto__ = Object.prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.toString = function()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">  <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">// var obj = Object.create(原型)</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.toString = function()&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  person.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;[object Object]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">和原型链上终端方法名字一样，但实现不同的功能，叫做方法的重写。也就是覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// var obj = Object.create(原型);</span></span><br><span class=\"line\">    <span class=\"comment\">//Object.prototype.toString = function()&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"attr\">toString</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hehe&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pereson = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  person.toString()</span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;hehe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">下面这个也是重写:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">// var obj = Object.create(原型);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    object.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  person.toString()</span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">让上面的 <span class=\"number\">1</span>)、<span class=\"number\">2</span>)、<span class=\"number\">3</span>) 中的 object 上面的 toString 重写了。</span><br><span class=\"line\">所以num.toString()调用的是 number.prototype.toString。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.prototype.toString</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.toString</span><br><span class=\"line\">    <span class=\"built_in\">Boolean</span>.prototype.toString</span><br><span class=\"line\">    <span class=\"built_in\">String</span>.prototype.toString</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制器输出:</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = 123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果调用的是 object. prototype.toString 结果会不一样。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Object.prototype.toString.call(123)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;[object Number]&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Object.prototype.toStrin.call(true)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;[object Boolean]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">  <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;老大身体好&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = 123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;老邓身体好&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2</span>)</span><br><span class=\"line\">     <span class=\"keyword\">var</span> obj = <span class=\"number\">123</span>;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.write(obj);</span><br><span class=\"line\"><span class=\"comment\">// 答案:123</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(obj);</span><br><span class=\"line\"><span class=\"comment\">// 答案:[object Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(obj);</span><br><span class=\"line\"><span class=\"comment\">//  答案:报错</span></span><br><span class=\"line\"><span class=\"comment\">// 解析: document.write 会隐式的调用 toString 方法，其实打印的是 toString的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(obj.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有原型就不能 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    obj.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;老大身体好&#x27;</span>；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(obj);</span><br><span class=\"line\"><span class=\"comment\">// 答案: 老邓身体好</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面这个例子表示：我要打印的是 obj，实际上打印出来的是 toString 方法，也证明了 document.write 调用的是 toString 方法</p>\n</blockquote>\n<h2 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call / apply\"></a>call / apply</h2><blockquote>\n<p>作用，改变 this 指向。 <code>区别，后面传的参数不一样</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">toFixed 是保留两位有效数字</span><br><span class=\"line\"></span><br><span class=\"line\">例:有一个 bug,在控制台 <span class=\"number\">0.14</span> * <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\">// 答案 : 1400000000000002,是js开发精度不精准</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:向上取整 <span class=\"built_in\">Math</span>.ceil(<span class=\"number\">123.234</span>)</span><br><span class=\"line\"><span class=\"comment\">// 答案 124</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:向下取整 <span class=\"built_in\">Math</span>.floor(<span class=\"number\">123.999</span>)</span><br><span class=\"line\"><span class=\"comment\">// 答案 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">例: <span class=\"built_in\">Math</span>.random()是产生一个 <span class=\"number\">0</span> 到 <span class=\"number\">1</span> 区间的开区间 随机数</span><br><span class=\"line\"></span><br><span class=\"line\">例: <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>;i ++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.random().toFixed(<span class=\"number\">2</span>) * <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">&#125;<span class=\"comment\">//所以一般在这种情况下，我们不用 toFixed，因为精度不准确</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:用这种方法取整更好，就不会精度不准确</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意：之前 js 在小数点后面最多能容纳 <span class=\"number\">15</span>-<span class=\"number\">17</span> 位，但是升级后能用科学计数法表示</span><br><span class=\"line\">如 <span class=\"number\">2e-17</span>（是 <span class=\"number\">2</span> 乘以 <span class=\"number\">10</span> 的负 <span class=\"number\">17</span> 次方）</span><br><span class=\"line\">而小数点前面只能容纳 <span class=\"number\">16</span> 位的运算， 可正常计算的范围是小数点前后 <span class=\"number\">16</span> 位</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 任何一个方法都可以 .call ,.call 才是一个方法执行的真实面目</span></span><br><span class=\"line\"></span><br><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Persom</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this == obj</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;deng&quot;</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">Person.call(obj, <span class=\"string\">&quot;Yu&quot;</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test() ————&gt; test.call()</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">直接执行 Person.call ( )和 Person ( )没有区别</span><br><span class=\"line\"></span><br><span class=\"line\">Person.call( );括号里面可以传东西</span><br><span class=\"line\"></span><br><span class=\"line\">如果 Person.call( obj );里面的 call 让 person 所有的 <span class=\"built_in\">this</span> 都变成 obj</span><br><span class=\"line\"></span><br><span class=\"line\">不 <span class=\"keyword\">new</span> 的话，<span class=\"built_in\">this</span> 默认指向 <span class=\"built_in\">window</span>。call 的使用必须要 <span class=\"keyword\">new</span></span><br><span class=\"line\"></span><br><span class=\"line\">call 的第一位参数用于改变 <span class=\"built_in\">this</span> 指向，第二位实参（对应第一个形参）及以后的参数都当做正常的实参，传到形参里面去借用别人的方法，实现自己的功能。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>例写 test（）和写 test.call（）是一样的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name,age,sex,tel,grade</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.grae = grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student(<span class=\"string\">&#x27;sunny&#x27;</span>,<span class=\"number\">123</span>,<span class=\"string\">&#x27;male&#x27;</span>,<span class=\"number\">139</span>,<span class=\"number\">2019</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">call 改变 <span class=\"built_in\">this</span> 指向，借用别人的函数，实现自己的功能。</span><br><span class=\"line\">只能在你的需求完全涵盖别人的时候才能使用</span><br><span class=\"line\">如果不想要 age 这个，就不能使用这种方法：如下</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name,age,sex,tel,grade</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//var this = &#123;name : &#x27;&#x27;,age : &#x27;&#x27;,sex : &#x27;&#x27;&#125;;</span></span><br><span class=\"line\">        Person.call(<span class=\"built_in\">this</span>,name,age,sex);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.grade = grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Studnet(<span class=\"string\">&#x27;sunny&#x27;</span>,<span class=\"number\">123</span>,<span class=\"string\">&#x27;male&#x27;</span>,<span class=\"number\">139</span>,<span class=\"number\">2019</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Person.call(<span class=\"built_in\">this</span>, name, age, sex);里面的 <span class=\"built_in\">this</span> 现在是 <span class=\"keyword\">new</span> 了以后的 <span class=\"keyword\">var</span> <span class=\"built_in\">this</span>=&#123;&#125;</span><br><span class=\"line\">利用 Person 方法，实现了 Student 自己的封装</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Wheel</span>(<span class=\"params\">wheelSize,style</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style = style;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.wheelSize = wheelSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sit</span>(<span class=\"params\">c,sitColor</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.c = c;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sitColor = sitColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Model</span>(<span class=\"params\">height,widht,len</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = height;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.widht = widht;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.len = len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">wheelSize,style,c,sitColor,height,widht,len</span>)</span>&#123;</span><br><span class=\"line\">    Wheel.call(<span class=\"built_in\">this</span>,wheelSize,style);</span><br><span class=\"line\">    Sit.call(<span class=\"built_in\">this</span>,c,sitColor);</span><br><span class=\"line\">    Model.call(<span class=\"built_in\">this</span>,height,widht,len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"number\">100</span>,<span class=\"string\">&#x27;花里胡哨&#x27;</span>,<span class=\"string\">&#x27;真皮&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"number\">1800</span>,<span class=\"number\">1900</span>,<span class=\"number\">4900</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>apply 也是改变 this 指向的，只是传参列表不同，第一位也是改变 this 指向的人，第二位，apply 只能传一个实参，而且必须传数组 argunments</code></p>\n<p><code>call 需要把实参按照形参的个数传进去</code></p>\n<p><code>new以后才有意义</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Wheel</span>(<span class=\"params\">wheelSize,style</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.style = style;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.wheelSize = wheelSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sit</span>(<span class=\"params\">c,sitColor</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.c = c;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sitColor = sitColor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Model</span>(<span class=\"params\">height,widht,len</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.height = height;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.widht = widht;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.len = len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">wheelSize,style,c,sitColor,height,widht,len</span>)</span>&#123;</span><br><span class=\"line\">        Wheel.apply(<span class=\"built_in\">this</span>.[wheelSize,style]);</span><br><span class=\"line\">        Sit.apply(<span class=\"built_in\">this</span>,[c,sitColor]);</span><br><span class=\"line\">        Model.apply(<span class=\"built_in\">this</span>,[height,widht,len]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(<span class=\"number\">100</span>,<span class=\"string\">&#x27;花里胡哨&#x27;</span>,<span class=\"string\">&#x27;真皮&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"number\">1800</span>,<span class=\"number\">1900</span>,<span class=\"number\">4900</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"继承发展史\"><a href=\"#继承发展史\" class=\"headerlink\" title=\"继承发展史\"></a>继承发展史</h2><h3 id=\"一、-传统形式-gt-原型链\"><a href=\"#一、-传统形式-gt-原型链\" class=\"headerlink\" title=\"一、 传统形式 ==&gt; 原型链\"></a>一、 传统形式 ==&gt; 原型链</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Grand.prototype.lastName = <span class=\"string\">&quot;Ji&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Grand</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> grand = <span class=\"keyword\">new</span> Grand();</span><br><span class=\"line\"></span><br><span class=\"line\">Father.prototype = grand;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;hehe&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\">Son.prototype = father;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、借用构造函数-gt-利用-call、apply\"><a href=\"#二、借用构造函数-gt-利用-call、apply\" class=\"headerlink\" title=\"二、借用构造函数 ==&gt; 利用 call、apply\"></a>二、借用构造函数 ==&gt; 利用 call、apply</h3><p><code>所以不算标准的集成模式</code></p>\n<p><code>1）不能继承借用构造函数的原型</code></p>\n<p><code>2）每次构造函数都要多走一个函数 ==&gt; 浪费效率</code></p>\n<p>this 放进去的前提，这个函数必须是 new 来的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, grade</span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"built_in\">this</span>, name, age, sex);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.grade = grade;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、共享原型（比较好的继承方法，不能随便改动自己的原型）\"><a href=\"#三、共享原型（比较好的继承方法，不能随便改动自己的原型）\" class=\"headerlink\" title=\"三、共享原型（比较好的继承方法，不能随便改动自己的原型）\"></a>三、共享原型（比较好的继承方法，不能随便改动自己的原型）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: Father.prototype.lastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Son.prototype = Father.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  son.lastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  father.lastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>例:可以用上面的方式封装函数，实现一个继承</code></p>\n<p><code>extend 和 inherit 都是继承的意思</code></p>\n<p><code>inherit 是 css 的一个值，也是继承的意思。</code></p>\n<p><code>文字类属性都有要给传递的特性:子元素没有设置文字类属性，子元素默认继承父元素的属性。</code></p>\n<p><code>font-size:inherit(我没有继承父亲的)</code></p>\n<p><code>在 inherit（Target，Origin）里面传进去的值是构造函数，需要大驼峰式书写，origin是（原始）的意思，让 target（目标）继承 origin</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        Target.prototype = Orign.prototype</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inherit(Son,Father);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.lastName</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面这种方式，让 son 里面有了 father 原型的属性</span></span><br><span class=\"line\"><span class=\"comment\">// 应该是inherit继承，后使用</span></span><br><span class=\"line\"><span class=\"comment\">// 下面这种情况就是先继承了，后改变原型已经晚了，因为他继承的还是原来的空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        Target.prototype = Origin.prototype;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    inherit(Son,Father);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这种写法，son.prototype 和 father.prototype 指向的是一个房间，改 son 就改了father。我们希望 son 用的 father 的原型，但是改变 son 自己的属性不影响 father</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        Target.prototype = Origin.prototype;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inherit(Son,Father);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Fahter();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  son.sex</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;male&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  father.sex</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;male&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、圣杯模式\"><a href=\"#四、圣杯模式\" class=\"headerlink\" title=\"四、圣杯模式\"></a>四、圣杯模式</h3><p><code>圣杯模式是在方法三的共有原型的基础上有所改变</code></p>\n<p><code>共享原型是：son.prototype = father.prototype</code></p>\n<p>圣杯模式是：另外加个构造函数 function F(){} 当作中间层，然后让 F 和 father 共有一个原型 F.prototype = father.prototype,然后 son.prototype = new F();使用原型链形成了继承关系，现在改 son.prototype 就不会影响 father.prototype</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Father.prototype</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">F.prototype  = Father.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">Son.prototype = <span class=\"keyword\">new</span> F();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = Origin.prototype;</span><br><span class=\"line\">        Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    inherit(Son, Father);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; father.lastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; son.lastName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;Deng&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Son.prototype.sex = &#x27;male&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;male&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; son.sex</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;male&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; father.sexx</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; Father.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· Object&#123;lastName:&#x27;Deng&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>son.__proto__ --&gt; new F().__proto__ --&gt; Father.prototype</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    原型上默认有个 <span class=\"title\">constructor</span>，<span class=\"title\">constructor</span> 默认值指向他的构造函数，<span class=\"title\">son</span>.<span class=\"title\">constructor</span> 应该指向 <span class=\"title\">Son</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // &gt; <span class=\"title\">son</span>.<span class=\"title\">constructor</span></span><br><span class=\"line\">    // &lt;· <span class=\"title\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    所以指向了 father 就是混乱了，所以指一下，如下:</span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">        F.prototype = Origin.prototype;</span><br><span class=\"line\">        Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        Target.prototype.constructor = Target; <span class=\"comment\">//----&gt; 让它的 constructor 可以指向自己</span></span><br><span class=\"line\">        Target.prototype.uber = Origin.prototype; <span class=\"comment\">//----&gt; 让它可以知道自己继承自谁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father.prototype.lastName = <span class=\"string\">&#x27;Deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    inherit(Son,Father);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Fahter();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Target.prototype.uber = Origin.prototype;</span></span><br></pre></td></tr></table></figure>\n<p><strong>我们希望我们构造出的对象，能找到自己的超类，超级父级（究竟继承自谁）应该起名为super 但这个是保留字，我们就以 uber 命名。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 左下这种方法就不好使了，相当于右下。还是原型指向有问题，new 的时候用的是原来的原型，再 F.prototype =father.prototype 没用，son.prototype 没发生改变</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    F.prototype = Origin.prototype();</span><br><span class=\"line\">    Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    Target.prototype.constructor = Target;</span><br><span class=\"line\">    Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Father.prototype.lastName = <span class=\"string\">&quot;Deng&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">inherit(Son, Father);</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例，在雅虎时代，封装了 YUI3 库来解决方法三的不足，与圣杯模式相似。现在不用</span></span><br><span class=\"line\"><span class=\"comment\">// YUI3 库，现在用 jquery</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正常：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = Origin.prototype;</span><br><span class=\"line\">    Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    Target.prototype.constructor = Target;</span><br><span class=\"line\">    Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 雅虎：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#x27;</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        F.prototype = Origin.prototype;</span><br><span class=\"line\">        Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        Target.prototype.constructor = Target;</span><br><span class=\"line\">        Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面的 var inherit 与右边的 var inherit 是一样的意思,建议写上面的这种</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        F.prototype = Origin.prototype;</span><br><span class=\"line\">        Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        Target.prototype.constructor = Target;</span><br><span class=\"line\">        Target.prototypu.uber = Origin.prototype;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> demo;</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包、属性私有化、封装\"><a href=\"#闭包、属性私有化、封装\" class=\"headerlink\" title=\"闭包、属性私有化、封装\"></a>闭包、属性私有化、封装</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例为什么在外部执行的 divorce 能用内部的变量？能换成 xiaozhang？</span><br><span class=\"line\"></span><br><span class=\"line\">因为 <span class=\"built_in\">this</span>.divorce 在对象上，由于对象被返回了，这个方法也被返回了。</span><br><span class=\"line\">因为闭包。这个函数被储存到了外部，所以储存了这个函数的执行期上下文。</span><br><span class=\"line\"></span><br><span class=\"line\">所以可以用这个闭包。所以 <span class=\"keyword\">var</span> prepareWife 被下面的 <span class=\"built_in\">this</span> = fn 三个函数共用，这三个函数分别与 fn Deng 形成了闭包，共同用 Deng 的 AO,所以可以在外部随意存取。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Deng</span>(<span class=\"params\">name,wife</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> prepareWife = <span class=\"string\">&#x27;xiaozhang&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.wife = wife;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.divorce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">this</span>.wife = prepareWife;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.changePrepareWife = <span class=\"function\"><span class=\"title\">funtion</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">             prepareWife = target;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.sayPrapreWife = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(prepareWife);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> deng = <span class=\"keyword\">new</span> Deng(<span class=\"string\">&#x27;Deng&#x27;</span>,<span class=\"string\">&#x27;xiaoliu&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  从控制器输出:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Deng</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; changePrepareWife(target)</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; divorce:()</span></span><br><span class=\"line\">    <span class=\"comment\">//         name : &quot;deng&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; sayPrapreWife:()</span></span><br><span class=\"line\">    <span class=\"comment\">//         wife : &#x27;xiaoliu&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &gt; __proto__ : Object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng.divorce()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng.wife</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;xiaozhang&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  deng.prepareWife</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>deng.prepareWife 是 undefined 的，表面上看起来不是自己的，但是<code>实际上只有对象自己通过对象自己设置的方法可以去操作他，外部用户通过对象，prepareWife 是看不到的</code>，只有自己能看到，就是闭包的私有化运用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: <span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">    F.prototype = Origin.prototype;</span><br><span class=\"line\">    Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    Target.prototype.constructor = Target;</span><br><span class=\"line\">    Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 执行完是这个样子</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inherit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Target, Origin</span>) </span>&#123;</span><br><span class=\"line\">  F.prototype = Origin.prototype;</span><br><span class=\"line\">  Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  Target.prototype.constructor = Target;</span><br><span class=\"line\">  Target.prototype.uber = Origin.prototype;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>上面的 var F 这个 F 形成了闭包，成为了这个函数的私有化变量，而且变成私有化变量就更好</code></p>\n<h1 id=\"命名空间（对象模块化开发-其实就是对象）\"><a href=\"#命名空间（对象模块化开发-其实就是对象）\" class=\"headerlink\" title=\"命名空间（对象模块化开发,其实就是对象）\"></a>命名空间（对象模块化开发,其实就是对象）</h1><blockquote>\n<p>管理变量，防止污染全局，适用于模块化开发</p>\n</blockquote>\n<p><code>多人开发，对象命名容易重复，就要解决命名空间的问题</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">以前的命名空间老旧的解决方法，如下：</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> org = &#123;</span><br><span class=\"line\">        <span class=\"attr\">department1</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">jicheng</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">age</span> : <span class=\"number\">123</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">xuming</span> : &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;，</span><br><span class=\"line\">        <span class=\"attr\">departmeng2</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">zhangsan</span> : &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">lisi</span> : &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是用的写法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> jicheng = org.department1.jicheng;</span><br><span class=\"line\">    jicheng.name</span><br></pre></td></tr></table></figure>\n\n<p><code>下面是现在公司最常见的方法：用闭包来解决（也可用 webpack），返回方法的调用。init 是初始化，入口函数，入口名字。init 调用了这个函数的功能</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;bcd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> init = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        callName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> initDeng = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        callName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\">initDeng();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  init()</span></span><br><span class=\"line\"><span class=\"comment\">//    abc</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  initDeng()</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  initDeng()</span></span><br><span class=\"line\"><span class=\"comment\">//    123</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· undefined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"思考问题（连续调用）\"><a href=\"#思考问题（连续调用）\" class=\"headerlink\" title=\"思考问题（连续调用）\"></a>思考问题（连续调用）</h1><blockquote>\n<p>如何实现调用模式（模仿 jquery）</p>\n</blockquote>\n<p><code>obj.eat().smoke().drink().eat().sleep;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">&quot;div&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;red&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .width(<span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .height(<span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .html(<span class=\"number\">123</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .css(<span class=\"string\">&quot;postion&quot;</span>, <span class=\"string\">&quot;absolute&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .css(<span class=\"string\">&quot;left&quot;</span>, <span class=\"string\">&quot;100px&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .css(<span class=\"string\">&quot;top&quot;</span>, <span class=\"string\">&quot;100px&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">smoke</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Smoke,…… xuan cool!!!&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">drink</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;drinking……,ye cool!&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">perm</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;preming……，cool&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deng.smoke();</span><br><span class=\"line\">    deng.drink();</span><br><span class=\"line\">    deng.prem();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能连续调用 deng.smoke().drink();</span></span><br><span class=\"line\"></span><br><span class=\"line\">上面改成下面的写法:用<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>，就可以连续调用和执行了。deng.smoke().drink()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> deng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">smoke</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Smoke,... xuan cool!!!&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">drink</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;drinking...,ye cool!&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">prem</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;preming..., cool!&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deng.smoke().drink().perm().smoke().drink();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面使用 return this 连续的调用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"属性的表示方法（查看属性）\"><a href=\"#属性的表示方法（查看属性）\" class=\"headerlink\" title=\"属性的表示方法（查看属性）\"></a>属性的表示方法（查看属性）</h1><p><code>obj.prop 查看就用 .prop</code></p>\n<p><code>obj[&quot;prop&quot;] 中括号也是访问属性的方法</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">想要传出去序号几，就会调用几</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的是老旧办法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> deng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">wife1</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xioaliu&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">wife2</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaozhang&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">wife3</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaomeng&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">wife4</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaowang&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">sayWife</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(num)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.wife1;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.wife1;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.wife1;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.wife1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deng.switch(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面用 switch 的方法不是很好，下面的方法比较完善一些</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var obj = &#123;name : &#x27;abc&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用方括号来访问属性也是一样的（里面必须是字符串）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这两种基本上完全相同 obj.name  ---&gt;   obj[&#x27;name&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 想要实现属性名的拼接，只能用方括号的形式</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.name</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj[&#x27;name&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> deng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">wife1</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaoliu&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">wife2</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaozhang&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">wife3</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaomeng&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">wife4</span> : &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaownag&#x27;</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">sayWife</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>[<span class=\"string\">&#x27;wife&#x27;</span> + num];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对象的枚举（enumeration）\"><a href=\"#对象的枚举（enumeration）\" class=\"headerlink\" title=\"对象的枚举（enumeration）\"></a>对象的枚举（enumeration）</h1><p><code>for in 循环（简化版 for 循环），目的是遍历对象，通过对象属性的个数来控制循环圈数，这个对象有多少属性循环多少圈，而且在每一圈的时候，都把对象的属性名放到 Prop 里面，在枚举面前，一定要写成 obj[prop]不能加字符串</code></p>\n<p><code>1. hasOwnProperty</code></p>\n<p><code>2. in</code></p>\n<p><code>3. instanceof</code></p>\n<blockquote>\n<p>枚举也就是遍历，挨个知道信息的过程就叫这个数据组的遍历</p>\n</blockquote>\n<h2 id=\"for-变量-in-对象\"><a href=\"#for-变量-in-对象\" class=\"headerlink\" title=\"for(变量 in 对象)\"></a>for(变量 in 对象)</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>: <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"comment\">// 遍历 枚举 enumeration</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for( in ) 循环</span></span><br><span class=\"line\">例<span class=\"number\">2</span>: <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;13&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">height</span>: <span class=\"number\">180</span>,</span><br><span class=\"line\">  <span class=\"attr\">weight</span>: <span class=\"number\">75</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(prop + <span class=\"string\">&quot; &quot;</span> + <span class=\"keyword\">typeof</span> prop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// name     string</span></span><br><span class=\"line\"><span class=\"comment\">// age      string</span></span><br><span class=\"line\"><span class=\"comment\">// sex      string</span></span><br><span class=\"line\"><span class=\"comment\">// height   string</span></span><br><span class=\"line\"><span class=\"comment\">// weight   string</span></span><br></pre></td></tr></table></figure>\n\n<p><code>上面就是 for in 循环，就是遍历用的。通过对象的属性个数来控制循环圈数，有多少个属性就会循环多少圈。</code></p>\n<p><code>for（var prop in obj）在循环每一圈的时候，他会把对象的属性名放在 prop 里面。</code></p>\n<p><code>想遍历谁就 in 谁，prop 可以写别的，obj 就是我们想要遍历的对象。</code></p>\n<p><code>for(XX in XX) 的格式是固定的。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 也可以写在外面，写成 var key; for(key in obj1) 效果是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span> : <span class=\"number\">234</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span> : <span class=\"number\">345</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> key;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> obj1)&#123;</span><br><span class=\"line\">    obj.key ++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">写成下面会出错</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;                         <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,                        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,                          <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,                       <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">180</span>,                       <span class=\"attr\">height</span> : <span class=\"number\">180</span>,</span><br><span class=\"line\">        <span class=\"attr\">weight</span> : <span class=\"number\">75</span>                         weight : <span class=\"number\">75</span></span><br><span class=\"line\">                                            <span class=\"attr\">prop</span> : <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;               <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj.prop);              <span class=\"built_in\">console</span>.log(obj.prop);</span><br><span class=\"line\">    &#125;                                   &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 答案：undefined * 5              答案：123*6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面的 console.log(obj.prop); 系统以为我们写的是 console.log(obj[&#x27;prop&#x27;]);，系统会以为我们是在让他访问 prop 这个属性，不会把 prop 当成一个变量来使用。写成 obj[prop]就可以成功访问了。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">180</span>,</span><br><span class=\"line\">        <span class=\"attr\">weight</span> : <span class=\"number\">75</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(obj.prop  ----&gt;   obj[&#x27;prop&#x27;]);</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj[prop]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写对象时用方括号的形式不容易犯错</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">180</span>,</span><br><span class=\"line\">        <span class=\"attr\">weight</span> : <span class=\"number\">75</span>,</span><br><span class=\"line\">        <span class=\"attr\">__proto__</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;Deng&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj[prop])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 答案：13、123、male、180、75、deng</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h2><p><code>如果在遍历的时候，我们不想把原型上面的属性拿出来，可以用 hasOwnProperty,一般与 for in 循环成套出现</code></p>\n<p><code>hasOwnProperty 是一个方法，来判断这个对象是你自己的还是原型的，任何要给对象里面都有 hasOwnProperty，里面是需要传参的，把属性传进去（如 prop），下面达到了如果不是自己的属性，是原型上的属性，就不会返回</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">180</span>,</span><br><span class=\"line\">        <span class=\"attr\">weight</span> : <span class=\"number\">75</span>,</span><br><span class=\"line\">        <span class=\"attr\">__proto__</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;deng&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(obj[prop]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 答案:  13、123、male、180、75</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注明：for in 循环理论上可以返回原型和原型链上的东西，一旦这个原型链延展到了的 object.prototype 上，不会打印系统的，只会打印自带的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">__proto__</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;deng&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">__proto__</span> : <span class=\"built_in\">Object</span>.prototype    <span class=\"comment\">// 不会打印这个 object.prototype</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">加 <span class=\"built_in\">Object</span>.prototype.abc = <span class=\"string\">&#x27;123&#x27;</span>; 加个 ！变成只有不是它的才打印</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">180</span>,</span><br><span class=\"line\">        <span class=\"attr\">weight</span> : <span class=\"number\">75</span>,</span><br><span class=\"line\">        <span class=\"attr\">__proto__</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;deng&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!obj.hasOwnProperty(prop))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(obj[prop]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h2><p><code>in 操作符：很少用</code></p>\n<blockquote>\n<p>in 操作符，你的也是你的，你父亲的也是你的，只能判断这个对象能不能访问到这个属性，包括原型上，不是判断属性属不属于这个对象的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;13&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">180</span>,</span><br><span class=\"line\">        <span class=\"attr\">weight</span> : <span class=\"number\">75</span>,</span><br><span class=\"line\">        <span class=\"attr\">__proto__</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;deng&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!obj.hasOwnProperty(prop))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(obj[prop]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    &gt;  height <span class=\"keyword\">in</span> obj</span><br><span class=\"line\">    &lt;· 报错</span><br><span class=\"line\">    &gt;  <span class=\"string\">&#x27;height&#x27;</span> <span class=\"keyword\">in</span> obj</span><br><span class=\"line\">    &lt;· <span class=\"literal\">true</span></span><br><span class=\"line\">    &gt;  <span class=\"string\">&#x27;lastName&#x27;</span> <span class=\"keyword\">in</span> obj</span><br><span class=\"line\">    &lt;· <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个属性属不属于这个对象的只能用 hasOwnProperty</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><blockquote>\n<p>instanceof 操作符类似于 in，但是完全不同</p>\n</blockquote>\n<p><code>A instanceof B 的意思是 A 的对象是不是 B 构造函数构造函数构造出来的，记住是：看 Ａ 对象的原型链上有没有 B 的原型</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解决了</span></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制器输出 :</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  pereson instanceof Object</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  [] instanceof Array</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  [] instanceof Object</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj instanceof Person</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· false</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  typeof([])</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;object&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  typeof(&#123;&#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;object&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:区别传的变量是数组还是对象的方法：一是 <span class=\"title\">constructor</span>，二是 <span class=\"title\">instanceof</span></span><br><span class=\"line\">    <span class=\"title\">var</span> <span class=\"title\">arr</span> = &#123;&#125;;<span class=\"comment\">//[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.constructor</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· function Object()&#123;[native code]&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  [] instanceof Array</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var obj = &#123;&#125;;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj instanceof Array</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例:第三种区分数组还是对象的方法：想让数组调用他的 toString 方法</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.prototype.toString.call([]);    <span class=\"comment\">//[] 会替换this</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 识别this(谁调的它，这个 this 就是谁）就返回相应的及如果)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出:</span></span><br><span class=\"line\">    &gt;  <span class=\"built_in\">Object</span>.prototype.toString.call([]);</span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;[object Array]&#x27;</span></span><br><span class=\"line\">    &gt;  <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">123</span>);</span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;[object Number]&#x27;</span></span><br><span class=\"line\">    &gt;  <span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;);</span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"this-笔试真题-进制\"><a href=\"#this-笔试真题-进制\" class=\"headerlink\" title=\"this,笔试真题,进制\"></a>this,笔试真题,进制</h1><h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><p><code>十六进制 0 1 2 3 4 5 6 7 8 9 a b c d e f</code></p>\n<p><code>十六进制的中 10 是十进制的 16， 1f = 16 + 15</code></p>\n<p><code>二进制中的 10是十进制的 2，11 是十进制的3</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">|    在十进制中：    |    在二进制中：   |</span><br><span class=\"line\">————————————————————————————————————————</span><br><span class=\"line\">|  <span class=\"number\">1</span> = <span class=\"number\">1</span>            |   <span class=\"number\">1</span> = <span class=\"number\">1</span>          |</span><br><span class=\"line\">————————————————————————————————————————</span><br><span class=\"line\">|  <span class=\"number\">10</span> = <span class=\"number\">10</span>          |   <span class=\"number\">10</span> = <span class=\"number\">2</span>         |</span><br><span class=\"line\">————————————————————————————————————————</span><br><span class=\"line\">|  <span class=\"number\">100</span> = <span class=\"number\">10</span> ^ <span class=\"number\">2</span>     |   <span class=\"number\">100</span> = <span class=\"number\">2</span> ^ <span class=\"number\">2</span>    |</span><br><span class=\"line\">————————————————————————————————————————</span><br><span class=\"line\">|  <span class=\"number\">1000</span> = <span class=\"number\">10</span> ^ <span class=\"number\">3</span>    |   <span class=\"number\">1000</span> = <span class=\"number\">2</span> ^ <span class=\"number\">3</span>   |</span><br><span class=\"line\">————————————————————————————————————————</span><br><span class=\"line\">|  <span class=\"number\">10000</span> = <span class=\"number\">10</span> ^ <span class=\"number\">4</span>   |   <span class=\"number\">10000</span> = <span class=\"number\">2</span> ^ <span class=\"number\">4</span>  |</span><br><span class=\"line\">————————————————————————————————————————</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p><code>函数预编译过程 this ---&gt; 指向 window</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">c</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// var this = Object.creat(test.prototype);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">// __proto__ : test.prototype</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// AO&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     arguments : [1],</span></span><br><span class=\"line\">    <span class=\"comment\">//     this : window,</span></span><br><span class=\"line\">    <span class=\"comment\">//     c : 1,</span></span><br><span class=\"line\">    <span class=\"comment\">//     a : undefined,</span></span><br><span class=\"line\">    <span class=\"comment\">//     b : function()&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">    <span class=\"comment\">// 前面的 var this = Object.creat(test.prototype);是最标准的写法</span></span><br><span class=\"line\">    <span class=\"comment\">// new test();就会让 var this = Object.creat(test.prototype);如果不 new this 就会指向 window</span></span><br><span class=\"line\"></span><br><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// &gt;  window</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Window&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// .........</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>全局作用域里 this ---&gt; 指向 window</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;  <span class=\"built_in\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;· Window&#123;......&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>call / apply 可以改变函数运行时的 this 指向</code></p>\n</li>\n<li><p><code>obj.func(); func()里面的 this 就指向谁</code></p>\n</li>\n</ol>\n<blockquote>\n<p>总结</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name : <span class=\"string\">&#x27;222&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;111&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun = a.say;</span><br><span class=\"line\">    fun() <span class=\"comment\">// 222</span></span><br><span class=\"line\">    a.say() <span class=\"comment\">// 111</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;333&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>)</span>&#123;</span><br><span class=\"line\">            fun();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.say(a.say); <span class=\"comment\">// 222</span></span><br><span class=\"line\">    b.say = a.say;</span><br><span class=\"line\">    b.say(); <span class=\"comment\">// 333</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分析：</span></span><br><span class=\"line\">        <span class=\"comment\">// a.say 是 function 函数体</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// this  --&gt;   b</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(this) --&gt; b</span></span><br><span class=\"line\">            fun();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// fun()空执行，走预编译</span></span><br><span class=\"line\">        <span class=\"comment\">// 在 b.say(a.say)中</span></span><br><span class=\"line\">        <span class=\"comment\">// a.say 当作参数传进来了</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.a();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"笔试真题\"><a href=\"#笔试真题\" class=\"headerlink\" title=\"笔试真题\"></a>笔试真题</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>：下面这段代码执行完毕后，x,y,z的值分别是多少？</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = z = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    y = add(x);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n = n + <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    z = add(x);</span><br><span class=\"line\"><span class=\"comment\">// 答案：1，4，4; 同一个函数，后面的肯定会覆盖前面的，因为预编译会覆盖</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：下面代码中 <span class=\"built_in\">console</span>.log 的结果是[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]的选项是：</span><br><span class=\"line\">    A. <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    B. <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x</span><br><span class=\"line\">        &#125;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    C. (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;)(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    D. <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            bar.apply(<span class=\"literal\">null</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 答案：A、C、D 其中b执行不了，但是不报错，bar里面传了一下参数。bar.apply(null,arguments); 写成 bar(arguments);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">3</span>：一行文本，水平垂直居中</span><br><span class=\"line\">    <span class=\"comment\">// 答案：height = line height;     text-align:center</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">4</span>：请问以下表达式的结果是什么？</span><br><span class=\"line\">    <span class=\"built_in\">parseInt</span>(<span class=\"number\">3</span>,<span class=\"number\">8</span>)       <span class=\"built_in\">parseInt</span>(<span class=\"number\">3</span>,<span class=\"number\">2</span>)       <span class=\"built_in\">parseInt</span>(<span class=\"number\">3</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    A<span class=\"number\">.3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>     B<span class=\"number\">.3</span>,<span class=\"number\">3</span>,<span class=\"literal\">NaN</span>     C<span class=\"number\">.3</span>,<span class=\"literal\">NaN</span>,<span class=\"literal\">NaN</span>     D.other</span><br><span class=\"line\">    <span class=\"comment\">// 答案:C 或 D（有的浏览器 0 进制报错，有的不报错）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">5</span>：以下那些是 javascript 语言 <span class=\"keyword\">typeof</span> 可能返回的结果</span><br><span class=\"line\">    A. string   B.array    C.object    D.null</span><br><span class=\"line\">    <span class=\"comment\">//答案：A、C (typeof 只能返回 number、string、undefined、boolean、object、function)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">6</span>：javascript 的 call 和 apply 方法是做什么的？两者有什么区别</span><br><span class=\"line\"></span><br><span class=\"line\">    Wheel.apply(<span class=\"built_in\">this</span>,[wheelSize,style]);</span><br><span class=\"line\">    Wheel.call(<span class=\"built_in\">this</span>,wheelSize,style);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//答案：call 和 apply 的作用都是改变 this 指向的，不过两个的传参列表不同，apply 只能传一个实参，而且必须传数组 arguments</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">7</span>：看看下面 alert 的结果是什么？</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">        alert(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果函数体改成下面，结果会是怎么样</span></span><br><span class=\"line\">    a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"comment\">//答案：10，10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">8</span>：逗号操作符，这种情况，会先看一眼<span class=\"number\">1</span>，再看一眼<span class=\"number\">2</span>，然后返回<span class=\"number\">2</span>，就是<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = (</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )();</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">    <span class=\"comment\">// 在控制器中输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  1,2</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = (1,2);</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">9</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        x += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    <span class=\"comment\">// 分析：用括号把 function f()&#123;&#125; 转换成一个表达式，就会被立即执行了，就找不到了，因为 function f() &#123;&#125; 肯定是 true，所以会执行 &#123;&#125;，但是 typeof 中的 f 已经找不到了</span></span><br><span class=\"line\">    <span class=\"comment\">// 答案：1undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">10</span>：以下哪些表达式的结果为<span class=\"literal\">true</span>的</span><br><span class=\"line\">    A.undefined == <span class=\"literal\">null</span>     B.undefined === <span class=\"literal\">null</span>     C.isNaN(<span class=\"string\">&#x27;100&#x27;</span>)     D.parseInt(<span class=\"string\">&#x27;1a&#x27;</span>) == <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">// 答案：A、C、D    isNaN(&#x27;100&#x27;)意思是这个数经过 number 转换后是不是NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    C。<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myIsNaN</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = <span class=\"built_in\">Number</span>(num);</span><br><span class=\"line\">        ret += <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"string\">&#x27;NaN&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  myIsNaN(&#x27;123&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  myIsNaN(&#x27;NaN&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">10</span>：引用值比的是地址</span><br><span class=\"line\">    &gt;  &#123;&#125; == &#123;&#125;</span><br><span class=\"line\">    &lt;· <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">    &lt;· <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  <span class=\"keyword\">var</span> obj1 = obj</span><br><span class=\"line\">    &lt;· <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  obj1 == obj</span><br><span class=\"line\">    &lt;· <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  obj1 == obj</span><br><span class=\"line\">    &lt;· <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">11</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;456&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.foo = <span class=\"string\">&#x27;789&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print();</span><br><span class=\"line\">    <span class=\"comment\">// 456</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把上面的题变形</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.foo = <span class=\"number\">234</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print();</span><br><span class=\"line\">    <span class=\"comment\">// 答案打印 234，要 console.log(foo);是全局的 foo，但是这里 this.foo 的 this是指向全局 window 的，相当于就把外面的 123 改成了 234</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在变形一下</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// var this = Object.creat(print.prototype)</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.foo = <span class=\"number\">234</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.logf(foo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> print();</span><br><span class=\"line\">    <span class=\"comment\">// 答案:123</span></span><br><span class=\"line\">    <span class=\"comment\">//，new 了以后，隐式 var this = Object.create(print.prototype)这时候 this.foo 不 再指向 window，转而指向 var this，所以打印的时候找不到 234，就到全局找到 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">12</span>：运行 test() 和 <span class=\"keyword\">new</span> test() 的结果分别是什么？</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        alert(a);</span><br><span class=\"line\">        alert(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">        alert(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// 答案：0，5，0</span></span><br><span class=\"line\">    <span class=\"comment\">// new test() 之后是 0，undefined，0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分析: 【之前其中 this.a 指代的是 window，所以是 0，5，0】</span></span><br><span class=\"line\">    <span class=\"comment\">//       【之后，因为 this 上没有 a ,所以打印 undefined】</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">13</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(hello);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print();</span><br><span class=\"line\">    <span class=\"comment\">// 答案：undefiend,2,hello is no defined(报错，因为hello 没有被定义，所以报错)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">14</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> test;</span><br><span class=\"line\">        test();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print();</span><br><span class=\"line\">    <span class=\"comment\">// 答案 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">15</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;One!&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x === <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Two!&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 答案：One</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">16</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> marty = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span> : <span class=\"string\">&#x27;marty&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">printName</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> test1 = &#123;<span class=\"attr\">name</span> : <span class=\"string\">&quot;test1&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> test2 = &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;test2&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> test3 = &#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;test3&#x27;</span>&#125;;</span><br><span class=\"line\">        test3.printName = marty.printName;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> printName2 = marty.printName.bind(&#123;<span class=\"attr\">name</span>:<span class=\"number\">123</span>&#125;);<span class=\"comment\">//做不了</span></span><br><span class=\"line\">        marty.printName.call(test1);</span><br><span class=\"line\">        marty.printName.apply(test2);</span><br><span class=\"line\">        marty.printName();</span><br><span class=\"line\">        printName2();</span><br><span class=\"line\">        test3.printName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print();</span><br><span class=\"line\">    <span class=\"comment\">// 答案：test1，test2，marty，做不了有bind，test3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">17</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = &#123;<span class=\"attr\">a</span> : <span class=\"string\">&#x27;002&#x27;</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        bar.a = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.prototype.b = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(bar.a);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(bar.b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print()();</span><br><span class=\"line\">    <span class=\"comment\">// 答案：a,b</span></span><br><span class=\"line\">    <span class=\"comment\">// print()() 第一个括号返回的是一个函数，第二个再来函数执行</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"arguments-callee、function-caller\"><a href=\"#arguments-callee、function-caller\" class=\"headerlink\" title=\"arguments.callee、function.caller\"></a>arguments.callee、function.caller</h1><p><code>arguments.callee 指向函数的引用(函数自己)</code></p>\n<p><code>function.caller 返回本执行程序的坏境名称</code></p>\n<h2 id=\"一、callee\"><a href=\"#一、callee\" class=\"headerlink\" title=\"一、callee\"></a>一、callee</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// 答案：test</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee == test);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// 答案:true</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">3</span>：我们要初始化数据，是<span class=\"number\">100</span>以内的阶乘，用立即执行函数找自己的引用来解决</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n * arguemtns.callee(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">4</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(arguemtns.callee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        demo(); <span class=\"comment\">// demo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test(); <span class=\"comment\">// test</span></span><br><span class=\"line\">    <span class=\"comment\">// 在那个函数里面的 argument.callee 就指代了哪个函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、caller\"><a href=\"#二、caller\" class=\"headerlink\" title=\"二、caller\"></a>二、caller</h2><p><code>caller 是他在哪个环境执行，就返回哪个环境的名字，不能再arguments里面</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    demo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(demo.caller);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo 被调用的环境是 test</span></span><br><span class=\"line\"><span class=\"comment\">// 所以这个 caller 指代的 test</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h1><p><code>浅层克隆</code></p>\n<p><code>深层克隆</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>：这个是做的浅层克隆</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;female&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj1 = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">            target[prop] = origin[prop];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    clone(obj,obj1);</span><br><span class=\"line\">    <span class=\"comment\">// 在控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj1</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">把上面的改一下，写一个兼容性的写法，为了防止用户不传 target（容错），给了参数就直接用，不给就当空对象，见下方：</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;female&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj1 = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> target = target || &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">            target[prop] == origin[prop];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    clone(obj,obj1);</span><br><span class=\"line\">    <span class=\"comment\">// 在控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj1</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.name = &#x27;bcd&#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;bcd&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj1.name</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;female&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">card</span> : [<span class=\"string\">&#x27;visa&#x27;</span>,<span class=\"string\">&#x27;unionpay&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj1 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> target = target || &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">            target[prop] == origin[prop];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    clone(obj,obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj1</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//    card : Array[2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj1.card.push(&#x27;master&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj1.crad</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#123;&#x27;visa&#x27;,&#x27;unionpay&#x27;,&#x27;master&#x27;sss&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;,card : Array[3]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.card</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [&#x27;visa&#x27;,&#x27;unionpay&#x27;,&#x27;master&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">现在我们想实现深度克隆（只考虑数组和对象），copy过去后，我改，但是你不会改， 引用值不能直接拷贝</span><br></pre></td></tr></table></figure>\n\n<p><code>思考上一道题做深度克隆，分析它是什么，建立是什么，收尾需要要给递归，提示：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例: obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">card</span>: [<span class=\"string\">&quot;visa&quot;</span>, <span class=\"string\">&quot;unionpay&quot;</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">card</span>: [obj.card[<span class=\"number\">0</span>], obj.card[<span class=\"number\">1</span>], []]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>作业：做一个深度克隆（copy后，各自独立，互不影响）</code></p>\n<p><code>思路：需要一个分析环节，分析是什么，是原始值就按原来的方法拷贝过来，是引 用值就分析是数组还是对象。如果是数组，就新建一个数组；如果是对象，就新建一个对象。再一层层看，里面有一个递归。引用值不能直接拷贝，引用值拷贝的是 地址</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">card</span> : [<span class=\"string\">&#x27;visa&#x27;</span>,<span class=\"string\">&#x27;master&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">wife</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;bcd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">son</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span> : <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">origin, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = target || &#123;&#125;, <span class=\"comment\">// 有就用你的，没有就用后面的</span></span><br><span class=\"line\">        toStr = <span class=\"built_in\">Object</span>.prototype.toString, <span class=\"comment\">// 引用，目的是简化</span></span><br><span class=\"line\">        arrStr = <span class=\"string\">&#x27;[Object Array]&#x27;</span>; <span class=\"comment\">// 引用，目的是简化比对</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin) &#123; <span class=\"comment\">// 从原始 origin 拷贝到 target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (origin.hasOwnProperty(prop)) &#123; <span class=\"comment\">// 先判断是不是原型上的属性，如果是 false 就是原型上的</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (origin[prop]) !== <span class=\"string\">&#x27;null&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> (origin[prop]) == <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((toStr.call(origin[prop])) == arrStr) &#123;</span><br><span class=\"line\">                    target[prop] = [];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    target[prop] = &#123;&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                deepClone(origin[prop], target[prop]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// else 后面是原始值</span></span><br><span class=\"line\">                target[prop] = origin[prop];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">agfe</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">card</span> : [<span class=\"string\">&#x27;visa&#x27;</span>,<span class=\"string\">&#x27;master&#x27;</span>] <span class=\"comment\">//原始对象</span></span><br><span class=\"line\">    <span class=\"attr\">wife</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;bcd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">son</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span> : <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">card</span> : [obj.card[<span class=\"number\">0</span>],obj.card[<span class=\"number\">1</span>]],</span><br><span class=\"line\">    <span class=\"comment\">// 要拷贝的对象，进行 obj 里面的数组，对这个数组的拷贝再一次拷贝</span></span><br><span class=\"line\">    <span class=\"attr\">wife</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;bcd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">son</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span> : <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">深度克隆的步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">1.</span> 先把所有的值都遍历一遍（看是引用值和原始值）</span><br><span class=\"line\">       用<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj),对象和数组都可以使用</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">2.</span> 判断是原始值，还是引用值？用<span class=\"keyword\">typeof</span>判断是不是object</span><br><span class=\"line\">        <span class=\"number\">1</span>) 如果是原始值就直接拷贝</span><br><span class=\"line\">        <span class=\"number\">2</span>) 如果是引用值，判断是数组还是对象</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">3.</span> 判断是数组还是对象？（方法 intanceof 【看 a 的原型链上有没有 b 的原型链】、toString、<span class=\"title\">constructor</span>,建议用 <span class=\"title\">toString</span>，另外两个有个小 <span class=\"title\">bug</span> ———— 跨父子域不行）</span><br><span class=\"line\">        1）如果是数组，就新建一个空数组</span><br><span class=\"line\">        2）如果是对象，就新建一个空对象</span><br><span class=\"line\"></span><br><span class=\"line\">    4. 建立了数组以后，如果是挨个看原始对象里面是什么，都是原始值就可以直接拷过来了；或者，建立了对象以后，挨个判断对象里面的每一个值，看是原始值还是引用值</span><br><span class=\"line\"></span><br><span class=\"line\">    5. 递归</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h1><p><code>形式：?（问号）前面是一个条件判断，判断true就执行:（冒号）前面的；false就执行:（冒号）后面的，并且返回值</code></p>\n<p><code>条件判断 ? 是 : 否 并且会返回值</code></p>\n<p><code>三木运算符是 简化 版的if（条件判断）&#123;是在这里&#125;else&#123;否在这里&#125;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> ? <span class=\"number\">2</span> + <span class=\"number\">2</span> : <span class=\"number\">1</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 答案：4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &lt; <span class=\"number\">0</span> ? <span class=\"number\">2</span> + <span class=\"number\">2</span> : <span class=\"number\">1</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 答案：2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> ? (<span class=\"string\">&#x27;10&#x27;</span> &gt; <span class=\"number\">9</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>) : <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 答案：1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> ? (<span class=\"string\">&#x27;10&#x27;</span> &gt; <span class=\"string\">&#x27;9&#x27;</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>) : <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 答案：0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析：因为 &#x27;10&#x27; &gt; &#x27;9&#x27; 比的是 ASCII 码，一位位比，10（一零）小于 9 ，先用 1 和 9 比，在 ASCII 码里面 1 小于 9；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当“10” &gt;  9 字符串和数字比，会先转换成数字再比较</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可利用三木运算符简化克隆代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">&#x27;yu&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span> : <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">card</span> : [<span class=\"string\">&#x27;visa&#x27;</span>,<span class=\"string\">&#x27;master&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">wife</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;Long&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">son</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;YU&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">origin,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = target || &#123;&#125;,</span><br><span class=\"line\">        toStr = <span class=\"built_in\">Object</span>.prototype.toString,</span><br><span class=\"line\">        arrStr = <span class=\"string\">&#x27;[Object Array]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> origin)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(origin.hasOwnProperty(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(origin[prop] !== <span class=\"string\">&#x27;null&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span>(origin[prop]) == <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">                target[prop] = (toStr.call(origin[prop]) == arrStr) ? [] : &#123;&#125;;</span><br><span class=\"line\">                deepClone(target[prop],origin[prop]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                target[prop] = origin[prop];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">deepClone(obj,obj1);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组-预习\"><a href=\"#数组-预习\" class=\"headerlink\" title=\"(数组)预习\"></a>(数组)预习</h1><p><code>定义对象方式：自变量，构造函数，自定义的构造函数，Object.create</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">定义数组的方式：</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">1.</span> <span class=\"keyword\">var</span> arr = [];   数组自变量（自定义）；</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2.</span> <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();  系统提供</span><br><span class=\"line\"></span><br><span class=\"line\">    两者区别就只一位数的情况</span><br><span class=\"line\"></span><br><span class=\"line\">    数组能用的方法来源于 <span class=\"built_in\">Array</span>.prototype</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">如果写出 <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,,<span class=\"number\">1</span>],出来就是 <span class=\"number\">1</span>,<span class=\"literal\">undefined</span>*<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\">数组不是每一位都有值，稀疏数组</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);和自定义数组显示效果一样</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 系统提供的数组和自定义的数组有一点不同，如下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">长度为<span class=\"number\">10</span>的稀疏数组，括号里面只有一位数，就代表着长度，并且里面每一位都没有值，<span class=\"built_in\">console</span> 里面会是 <span class=\"literal\">undefined</span> * <span class=\"number\">10</span>。并且里面不能写小数，会报错。</span><br></pre></td></tr></table></figure>\n\n<p><code>数组的读和写，基本上没有报错的情况，除非是引用了没有的方法</code></p>\n<p><code>js数组是基于对象的，数组是一种特殊的对象</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;  arr[<span class=\"number\">10</span>] = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">&lt;  <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  arr</span><br><span class=\"line\">&lt;  [<span class=\"literal\">undefined</span> * <span class=\"number\">10</span>,<span class=\"string\">&#x27;abc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  arr.length</span><br><span class=\"line\">&lt;  <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h2 id=\"一、数组的定义（来源于-Array-prototype）\"><a href=\"#一、数组的定义（来源于-Array-prototype）\" class=\"headerlink\" title=\"一、数组的定义（来源于 Array.prototype）\"></a>一、数组的定义（来源于 Array.prototype）</h2><p><code>1）系统提供 new Array(length / content) var arr = new Array(1,2,3,4,5)</code></p>\n<p><code>2）自变量 var arr = [1,2,3,4,5];</code></p>\n<h2 id=\"二、数组的-‘读’-和-‘写’\"><a href=\"#二、数组的-‘读’-和-‘写’\" class=\"headerlink\" title=\"二、数组的 ‘读’ 和 ‘写’\"></a>二、数组的 ‘读’ 和 ‘写’</h2><p><code>arr[num] // 不可以溢出读，结果 undefiend</code></p>\n<p><code>arr[num] = XXX; // 不可以溢出读</code></p>\n<p><code>arr[num] = xxx; // 可以溢出读</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">es3<span class=\"number\">.0</span> 最标准最基础</span><br><span class=\"line\"></span><br><span class=\"line\">es5<span class=\"number\">.0</span>  es6<span class=\"number\">.0</span>，最新的 es7<span class=\"number\">.0</span>还没有普及，今天讲的都是 es3<span class=\"number\">.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">对象的定义方式</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> 自变量</span><br><span class=\"line\"><span class=\"number\">2</span> 构造函数</span><br><span class=\"line\"><span class=\"number\">3</span> 自定义构造函数</span><br><span class=\"line\"><span class=\"number\">4</span> object.create 数组是一种特殊的对象，在本质上两者没有太大的区别</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以写 <span class=\"keyword\">var</span> arr = [,]    <span class=\"comment\">// 稀松数组，相当于定义了两个位置，console(控制台 结果是 undefiend)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,,,,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 答案[1, 2, undefiend * 3, 3, 4]</span></span><br><span class=\"line\">    <span class=\"comment\">// arr.length = 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []; 和 <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); 唯一的区别实在 <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); 只传了一个参数的情况下，会被当成长度，并且成为一个稀松数组</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>); <span class=\"comment\">// [undefined * 10]</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>]; <span class=\"comment\">// [10]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    如果传进去一个小数，就非法：<span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10.2</span>); <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr[10]</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr[10] = &#x27;abc&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [undefined * 10, &#x27;abc&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.length</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 11</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h2><h3 id=\"一、改变原数组（在原来数组基础上去改变）\"><a href=\"#一、改变原数组（在原来数组基础上去改变）\" class=\"headerlink\" title=\"一、改变原数组（在原来数组基础上去改变）\"></a>一、改变原数组（在原来数组基础上去改变）</h3><p><code>1）reverse，sort，push，pop，unshift，shift</code></p>\n<p><code>2）splice</code></p>\n<h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`push`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`push 在数组的最后一位添加数据，可以添加一个，也可以添加很多个`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.push(10)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [10]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.push(11)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [10,11]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.push(9)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [10,11,9]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.push(1,2,3,4,5,6,7)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3,4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：</span><br><span class=\"line\">    <span class=\"comment\">// 说明能重写</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.push()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;haha&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">3</span>：数组有三位，想在数组的最后一位添加东西</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; 如果在第四位加东西写成 arr = [<span class=\"number\">3</span>]  <span class=\"comment\">// length - 1 位添加东西</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"built_in\">arguments</span>.length; i ++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>[<span class=\"built_in\">this</span>.length] = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.push(4,5,6)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 6</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3,4,5,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`Array.prototype.push = function()&#123;&#125;    不能写形参`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop\"></a>pop</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`pop`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`pop 是剪切方法（把最后一位数剪切出去）。在 pop() 括号里面不能传参，写了会忽略`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.pop()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.pop()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = arr.pop()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在控制台操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.pop(2)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift\"></a>unshift</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`unshift`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`unshift 是从第一位加东西`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.unshift(0)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [0,1,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.unshift(-1,0)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [-1,0,1,2,3]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift\"></a>shift</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`shift`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`shift 是从第一位减东西`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.shife()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：数组不能从 -<span class=\"number\">1</span> 位插入东西</span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr[-1] = 0</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3]</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以用两个数组拼接成一个数组的方式添加东西</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse\"></a>reverse</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`reverse`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`reverse 逆反`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 consolel 操作</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.reverse()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [3,2,1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.reverse()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 把类数组转换成数组的时候经常用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&#x27;splice&#x27;:Array.prototype.splice`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`splice`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`splice 一种剪切，切片`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`arr.splice(从第几位开始，截取多少长度，传参在切口处添加新的数据)`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    arr.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//从第 1 位开始截取 2 位，传参可以不填</span></span><br><span class=\"line\">    <span class=\"comment\">// 截取的是[1,2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 consolel 操作</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.splice(1,2)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.splice(0,3)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,1,2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [2,3,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.splice(1,1,0,0,0)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 consolel 操作</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.splice(0.3)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,0,0,0,2,2,3,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：</span><br><span class=\"line\">    arr.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//意思是从第 1 位起截取 1 位，然后加上0，0，0这三个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">3</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>];   <span class=\"comment\">//1是第0位，2是第1位, 3是第2位，5是第3位</span></span><br><span class=\"line\">    arr.splice(<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 答案：[1,2,3,4,5];</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">4</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">    arr.splice(-<span class=\"number\">1</span>,<span class=\"number\">1</span>);   <span class=\"comment\">// 这里的 -1 是倒数第一位，数组一般的方法都可以带负数</span></span><br><span class=\"line\">    <span class=\"comment\">// 答案：[1,2,3];</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">5</span>：下面是系统内部解决附属问题的兼容</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    splice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pos</span>)</span>&#123;</span><br><span class=\"line\">        pos += pos &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"built_in\">this</span>.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// -1 + 4 = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">6</span>：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"built_in\">this</span>.length,</span><br><span class=\"line\">        j = +i + (i &lt; <span class=\"number\">0</span> ? len : <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.pushStack(j &gt;= &amp;&amp; j &lt; len ? [<span class=\"built_in\">this</span> [j] ]d : [])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// splice = function (pos)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// pos += pos &gt; 0 ? 0 : this.length;</span></span><br><span class=\"line\">        pos &gt;= <span class=\"number\">0</span> || pos &lt;</span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`sort`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`sort 给数组排序，（按照从小到大），改变原数组`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 consolel 操作</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.sotr()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [-1,0,1,3,4,9]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在sort后面加 reversve 就是降序</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.sotr().reverse()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [9,4,3,1,0,-1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：下面这个按照 ASCII 码排序的</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 consolel 操作</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.sotr()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [-1,10,3,4,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`所以给我们留了一个接口，如下</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1 必须写两形参</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2 看返回值 return</span></span><br><span class=\"line\"><span class=\"string\">    1）当返回值为负数时，那么前面的数放在前面，</span></span><br><span class=\"line\"><span class=\"string\">    2）当返回值为正数时，那么后面的数在前，</span></span><br><span class=\"line\"><span class=\"string\">    3）为0，不动</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">1</span>：</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;    <span class=\"comment\">//此处的 1代表返回正的 return -1;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>    <span class=\"comment\">//此处的-1 代表返回负的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">思维方式:上面就控制了升序</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">这个函数第一次调动时，会把数组的第一位和第二位传进来，也就是 a=1，b=3，然 后通过规则比较，当你把返回值返回为正，为负，为 0。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">传参的顺序（但是这个顺序是位置的顺序，不是按数字比），第一次是1,3，第二次 1,5,第三次1,4,第四次 1,10，第五次 3,5,第六次3,4,第七次 3,10，第八次 5,4，第九次 5,10，第十次 4,10；依次传参（符合冒号排序的算法）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">是以换位置的方式改变顺序</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：<span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>,<span class=\"number\">13</span>,<span class=\"number\">19</span>,<span class=\"number\">4</span>];   <span class=\"comment\">// 到 13 这一位的时候，换位置变成了[2,4,19,13]</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">3</span>：下面变成了降序</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">13</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a &lt; b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">4</span>：</span><br><span class=\"line\">    <span class=\"string\">`升序简化版`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">20</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">13</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a - b &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">`再简化版`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">20</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">13</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`升序 return a - b`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`降序 return b - a`</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">5</span>：直接调用 arr.sort() 比的是 ASCII 码，要在里面填函数才可以</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">20</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">13</span>,<span class=\"number\">4</span>,,<span class=\"number\">8</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// return a - b; 升序</span></span><br><span class=\"line\">        <span class=\"comment\">// return b - a; 降序</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> b - a;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 从 consolel 操作</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [20,13,10,9,8,4,2];</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.sort(function()&#123;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">6</span>：给一个有序的数组，让它乱序，当我们没规律可以遵循的时候，返回时是随机的</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr= [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Math.random() 回生成一个 0 到 1 （包括 0，但是不包括 1）的随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">7</span>：给以下按照年龄排序</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cheng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;cheng&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">face</span> : <span class=\"string\">&#x27;handsome&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deng = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;deng&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        <span class=\"attr\">face</span> : <span class=\"string\">&#x27;amazing&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zhang = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;zhang&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [cheng,deng,zhang];</span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.age &gt; b.age)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 简化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [cheng,deng,zhang];</span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.age - b.age;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">7</span>：按照字符串长度排序</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;ab&#x27;</span>,<span class=\"string\">&#x27;abcde&#x27;</span>,<span class=\"string\">&#x27;abcd&#x27;</span>,<span class=\"string\">&#x27;abcdefg&#x27;</span>,,<span class=\"string\">&#x27;abcdef&#x27;</span><span class=\"string\">&#x27;abc&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.length - b.length;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">8</span>：按照字节长度排序</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">retBytes</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = str.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.charCode(i) &gt; <span class=\"number\">255</span>)&#123;</span><br><span class=\"line\">                num ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;ac&#x27;</span>,<span class=\"string\">&#x27;alkdjf于lkajsd&#x27;</span>,<span class=\"string\">&#x27;aksd泽jfk&#x27;</span>,<span class=\"string\">&#x27;iuwe龙oiru&#x27;</span>,<span class=\"string\">&#x27;dddd&#x27;</span>,<span class=\"string\">&#x27;aaa&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retBytes(a) - retBytes(b);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、不改变原数组\"><a href=\"#二、不改变原数组\" class=\"headerlink\" title=\"二、不改变原数组\"></a>二、不改变原数组</h3><p><code>1）forEach，filter，map，reduce，reduceRight</code></p>\n<p><code>2）slice，concat，join ————&gt; split，toString</code></p>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`concat`</span><span class=\"string\">`concat 连接，把后面的数组拼接到前面，并成立一个新的数组，不影响之前的两个数组，不能改变原数组`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">例: <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  var result = arr.concat(arr1)</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [1,2,3,4,5,6,7,8,9]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [1,2,3,4,5,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  arr1</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [7,8,9]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  result</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"toString\"><a href=\"#toString\" class=\"headerlink\" title=\"toString\"></a>toString</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`toString`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`toString 是把数组当作字符串展示出来`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`slice`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`slice 从该位开始截取，截取到该位，并不改变原数组，这里也可以写负数`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"comment\">// slice(从改位开始截取，截取到该位)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.slice(1,2)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1,2,3,4,5,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">`slice 并不改变原数组，slice完了以后需要有东西接受，不然没有意义`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"comment\">// slice(从改位开始截取，截取到该位)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = arr.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  newArr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [2,3]</span></span><br><span class=\"line\"><span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  newArr</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [2,3]</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">slice 里面可以填 0 个参数，也可以填 1 个参数，也可以填两个参数</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. 如果填两个参数，slice（从该位开始截取，截取到该位）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   如：arr.slice(1,2)，从第一位开始截取，截取到第二位</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. 如果填一个参数，从第几位开始截取，一直截取到最后。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    如：arr.slice(1)，从第 1 位开始截取，截取到最后一位</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. 不写参数就是整个截取数组`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`join`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`join 括号里面需要用字符串形式（标准语法规定），就会用加的东西连接起来数组`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.join(&#x27;-&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1-2-3-4-5-6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.join(&#x27;!&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1!2!3!4!5!6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  arr.join(&#x27;~&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [1~2~3~4~5~6]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`split`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`split() 是string字符串方法 是 join() 方法的可逆方法，join方法是输入什么连接什么，split是输入什么拆分什么`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = arr.join(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 操作：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  str.split(&#x27;4&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [&#x27;1-2-3-&#x27; , &#x27;-5-6&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  str</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;1-2-3-4-5-6&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  str.split(&#x27;-&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`split 按照什么拆分为数组。用什么拆，什么就没了，按 - 拆就去掉了，按 4 拆就去掉了4.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">split 可以返回数组，数组可以返回字符串`</span></span><br><span class=\"line\"></span><br><span class=\"line\">把下面啊字符串拼到一起</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;alibaba&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;baidu&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;tencent&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;toutiao&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str4 = <span class=\"string\">&#x27;wangyi&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str5 = <span class=\"string\">&#x27;xiaowang&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str6 = <span class=\"string\">&#x27;nv&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这种写法不好，字符串是在栈内存里面的，先进后出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str Final = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [str,str1,str2.str3,str4];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; arr.length; i ++)&#123;</span><br><span class=\"line\">        strFinal += arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用下面这种方式更好，join 里面不传参默认用逗号连接，传空串如下图</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 散列</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [str,str1,str2,str3,str4,str5,str6];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"forEach-–-循环遍历数组\"><a href=\"#forEach-–-循环遍历数组\" class=\"headerlink\" title=\"forEach() – 循环遍历数组\"></a>forEach() – 循环遍历数组</h4><p><code>forEach(function(ele,index,array)&#123;&#125;) -- 循环遍历数组</code></p>\n<p><strong>参数：</strong></p>\n<p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p>\n<p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p>\n<p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personArr = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王港&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/3.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;颈椎不好&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/5.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我是谁&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王秀莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/4.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我很好看&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘金雷&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/1.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;陌生的脸&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘飞翔&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/2.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;六六六&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">personArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index,array</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// ele : 循环遍历的每一个元素对象</span></span><br><span class=\"line\"><span class=\"comment\">// index : 相当于for循环的那个 i，代表索引，遍历第一遍：0，第二遍：1</span></span><br><span class=\"line\"><span class=\"comment\">// array : 相当于this，就是调用的是那个数组，一般用不到</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ele); <span class=\"comment\">// 打印出循环遍历的每一位</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">forEach的源码剖析：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myForEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"built_in\">this</span>.length;i ++)&#123;</span><br><span class=\"line\">        func(<span class=\"built_in\">this</span>[i],i,<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// break不能使用，因为break在源码中不是写到for循环里面，而是写到了func函数里面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// return不能使用，因为return的话，就只是在return的那个遍历的对象不执行了，直接跳到下一个遍历对象执行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"filter-–-筛选元素\"><a href=\"#filter-–-筛选元素\" class=\"headerlink\" title=\"filter – 筛选元素\"></a>filter – 筛选元素</h4><p><code>fliter 筛选，和 forEach 一样会遍历循环，也有三个参数，不过筛选出来的值由 return 来决定</code></p>\n<p><code>filter 循环遍历筛选，返回判断是 true 的值，然后 return 出来，false，丢掉</code></p>\n<p><code>filter(function(ele,index,array)&#123;&#125;) -- 循环遍历筛选数组</code></p>\n<p><strong>参数：</strong></p>\n<p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p>\n<p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p>\n<p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p>\n<blockquote>\n<p>意思是现在循环遍历的数组，如果循环遍历的返回值是true的话，就留下,如果说 返回如果循环遍历的返回值是false的话，就不要了。并且把所有返回true的数组（元素）放到到一个新的数组里面，所以说 filter 会有返回一个结果，这个结果就是 filter 筛选出来的元素组合成的一个新的数组。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personArr = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王港&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/3.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;颈椎不好&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/5.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我是谁&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王秀莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/4.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我很好看&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘金雷&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/1.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;陌生的脸&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘飞翔&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/2.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;六六六&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = personArr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// ele : 循环遍历的每一个元素对象</span></span><br><span class=\"line\"><span class=\"comment\">// index : 相当于for循环的那个 i，代表索引，遍历第一遍：0，第二遍：1</span></span><br><span class=\"line\"><span class=\"comment\">// array : 相当于this，就是调用的是那个数组，一般用不到</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">// 这个返回的可以是任何东西，只要转换完成之后不是 空 就可以。</span></span><br><span class=\"line\">    <span class=\"comment\">// 意思是现在循环遍历的数组，如果循环遍历的返回值是true的话，就留下</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果说 返回如果循环遍历的返回值是false的话，就不要了。</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且把所有返回true的数组（元素）放到到一个新的数组里面</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br><span class=\"line\"><span class=\"comment\">// 打印筛选的元素组成的新数组</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">判断<span class=\"literal\">false</span>和<span class=\"literal\">true</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> personArr = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王港&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/3.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;颈椎不好&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/5.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我是谁&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王秀莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/4.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我很好看&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘金雷&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/1.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;陌生的脸&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘飞翔&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/2.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;六六六&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = personArr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ele.sex == <span class=\"string\">&#x27;f&#x27;</span>)&#123; <span class=\"comment\">// 可以来判断true和false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [&#123;…&#125;, &#123;…&#125;]，两个女生</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">filter源码剖析：</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myfilter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"built_in\">this</span>.length;i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(func(<span class=\"built_in\">this</span>[i],i,<span class=\"built_in\">this</span>))&#123;</span><br><span class=\"line\">            arr.push(<span class=\"built_in\">this</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"map-–-循环遍历数组，返回一个新的数组\"><a href=\"#map-–-循环遍历数组，返回一个新的数组\" class=\"headerlink\" title=\"map – 循环遍历数组，返回一个新的数组\"></a>map – 循环遍历数组，返回一个新的数组</h4><p><code>map 就是直接返回一个新的数组，你可以在map里面判断条件，也可以不判断条件，可以用任何条件，来返回旧的数组里面的数据</code></p>\n<p><code>map 直接由 return 返回出来的值来返回，把当前 return 返回的值放到新的数组当中</code></p>\n<p><code>map 返回结果，和 forEach和filter 一样会遍历循环，也有三个参数，功能也一样，不过筛选出来的值由 return 返回出来的结果来决定，就是 return 每一次返回的值是什么，就返回什么每一次的结果</code></p>\n<p><code>map(function(ele,index,array)&#123;&#125;) -- 循环遍历筛选数组</code></p>\n<p><strong>参数：</strong></p>\n<p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p>\n<p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p>\n<p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personArr = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王港&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/3.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;颈椎不好&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/5.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我是谁&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;王秀莹&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/4.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;我很好看&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘金雷&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/1.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;陌生的脸&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘飞翔&#x27;</span>, <span class=\"attr\">src</span>:<span class=\"string\">&#x27;./img/2.png&#x27;</span>,<span class=\"attr\">des</span>:<span class=\"string\">&#x27;六六六&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;m&#x27;</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">// 给男生加上一个 girF = true，给女生加一个boyF = true;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = personArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ele.sex == <span class=\"string\">&#x27;m&#x27;</span>)&#123;</span><br><span class=\"line\">        ele.girlF = <span class=\"string\">&#x27;true&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        ele.boyF = <span class=\"string\">&#x27;true&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">//(5) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]，五个对象</span></span><br><span class=\"line\"><span class=\"comment\">// newArr 和 personArr 的对象来自通过一个地址，你改我也改</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`map的源码剖析，浅拷贝`</span>：</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"built_in\">this</span>.length;i ++)&#123;</span><br><span class=\"line\">        arr.push(func(<span class=\"built_in\">this</span>[i],i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`map的源码剖析，深度拷贝（配合深度克隆来解决）`</span>：</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>[i] &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>[i] == <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> newObj = &#123;&#125;;</span><br><span class=\"line\">            deepClone(ownObj,<span class=\"built_in\">this</span>[i]);</span><br><span class=\"line\">            arr.push(func(newObj,i));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr.push(func(<span class=\"built_in\">this</span>[i], i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`深度拷贝（深度克隆）`</span>：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">target, origin</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop,</span><br><span class=\"line\">        src,</span><br><span class=\"line\">        copy;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> origin) &#123;</span><br><span class=\"line\">            src = target[prop];</span><br><span class=\"line\">            copy = origin[prop];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (copy &amp;&amp; <span class=\"keyword\">typeof</span> copy == <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(copy) == <span class=\"string\">&#x27;[object Array]&#x27;</span>) &#123;</span><br><span class=\"line\">                    src = [];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    src = &#123;&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                target[prop] = deepClone(src, copy);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                target[prop] = copy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aimee&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hobby</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">sing</span>: <span class=\"string\">&#x27;good&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dance</span>: <span class=\"string\">&#x27;well&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">deepClone(obj1, obj2);</span><br><span class=\"line\"><span class=\"comment\">// 这是一个深拷贝的过程，谁改变自己里面的东西，都和另一个对象没有关系</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"reduce-–-累加器（从左向右执行）\"><a href=\"#reduce-–-累加器（从左向右执行）\" class=\"headerlink\" title=\"reduce – 累加器（从左向右执行）\"></a>reduce – 累加器（从左向右执行）</h4><p><code>reduce 从左向右循环遍历数组，累加器（就是把之前遍历的数组），取出来的值只有一个。效率及其高</code></p>\n<p><code>该方法应用一个函数是&quot;累加器&quot;，并处理列表的每个值（从左到右），以便将其减少到单个值。</code></p>\n<p><code>reduce 返回结果，一样会遍历循环，有四个参数，它是会等全部循环遍历完成之后，然后在取那个 return 的值，意思就是取最后return出来的那个结果</code></p>\n<p><strong>参数：</strong></p>\n<p><strong>preValue</strong> : 代表上一次回调函数调用返回的值 <code>（第 1 个参数）</code></p>\n<p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 2 个参数，什么变量都可以）</code></p>\n<p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 3 个参数，什么变量都可以）</code></p>\n<p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 4 个参数，什么变量都可以）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preValue,ele,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(preValue);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;,<span class=\"number\">10</span>) <span class=\"comment\">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">累加器:</span><br><span class=\"line\"><span class=\"comment\">// 为什么说要用 reduce 做累加器呢，因为效率比for循环高</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> value = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preValue,ele,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preValue + ele;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(value);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">reduce 源码剖析：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myReduce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, init</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = init,</span><br><span class=\"line\">        k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        previous = <span class=\"built_in\">this</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k; k &lt; <span class=\"built_in\">this</span>.length; k++) &#123;</span><br><span class=\"line\">        previous = func(previous, <span class=\"built_in\">this</span>[k], k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previous;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"reduceRight-累加器（从右向左）\"><a href=\"#reduceRight-累加器（从右向左）\" class=\"headerlink\" title=\"reduceRight 累加器（从右向左）\"></a>reduceRight 累加器（从右向左）</h4><p><code>reduce 从右向左循环遍历数组，累加器（就是把之前遍历的数组），取出来的值只有一个。效率及其高</code></p>\n<p><code>该方法应用一个函数是&quot;累加器&quot;，并处理列表的每个值（从左到右），以便将其减少到单个值。</code></p>\n<p><code>reduceRight 返回结果，一样会遍历循环，有四个参数，它是会等全部循环遍历完成之后，然后在取那个 return 的值，意思就是取最后return出来的那个结果</code></p>\n<p><strong>参数：</strong></p>\n<p><strong>preValue</strong> : 代表上一次回调函数调用返回的值 <code>（第 1 个参数）</code></p>\n<p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 2 个参数，什么变量都可以）</code></p>\n<p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 3 个参数，什么变量都可以）</code></p>\n<p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 4 个参数，什么变量都可以）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preValue,ele,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(preValue);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;,<span class=\"number\">10</span>) <span class=\"comment\">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">累加器:</span><br><span class=\"line\"><span class=\"comment\">// 为什么说要用 reduce 做累加器呢，因为效率比for循环高</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> value = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preValue,ele,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preValue + ele;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(value);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">reduce 源码剖析：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myReduce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, init</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = init,</span><br><span class=\"line\">        k = <span class=\"built_in\">this</span>.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        previous = <span class=\"built_in\">this</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        k = <span class=\"built_in\">this</span>.length - <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k; k &gt; <span class=\"built_in\">this</span>.length; k --) &#123;</span><br><span class=\"line\">        previous = func(previous, <span class=\"built_in\">this</span>[k], k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previous;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h2><p><code>1. 可以利用属性名模拟数组的特性</code></p>\n<p><code>2. 可以动态的增长 length 属性</code></p>\n<p><code>3. 如果强行让类数组调用 push 方法，则会根据 length 属性值的位置进行属性的扩充</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">这个看着像数组，但是数组有的方法，他全部都没有，所以他是类数组</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        concole.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        argumetns.push(<span class=\"number\">7</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  [1,2,3,5,6,7]</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`类数组长得很像数组，但是没有数组所拥有的方法`</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span> : <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj[0]</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;a&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj[0]</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`下面就是类数组的基本形态`</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span> : <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;push&#x27;</span> : <span class=\"built_in\">Array</span>.prototype.push</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.push(&#x27;d&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 4</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;0:&#x27;a&#x27;,1:&#x27;b&#x27;,2:&#x27;c&#x27;,3:&#x27;d&#x27;,length:4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 分析：在控制台 push(&#x27;d&#x27;) 以后，obj的object多了一个 3 : d,长度也变成了 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`类数组：属性要为索引（数字）属性，必须要有 length 属性，最好加上 push 方法。`</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果给一个对象加上 splice 方法，那么这个对象就长得像数组了。但是他仍探视对象，但是可以当作数组来用，需要自己添方法。</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span> : <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;push&#x27;</span> : <span class=\"built_in\">Array</span>.prototype.push,</span><br><span class=\"line\">        <span class=\"string\">&#x27;splice&#x27;</span> : <span class=\"built_in\">Array</span>.prototype.splice <span class=\"comment\">// 可以把类数组变成数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>[<span class=\"built_in\">this</span>.length] = target;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.length ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">`如果对象 obj 调用这个方法，那么 this 变成了 obj`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">        obj[obj.length] = target;</span><br><span class=\"line\">        obj.length ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">阿里巴巴题目，问这个 obj 长什么样子？</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;3&#x27;</span> : <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span> : <span class=\"number\">2</span>，</span><br><span class=\"line\">        <span class=\"string\">&#x27;push&#x27;</span> : <span class=\"built_in\">Array</span>.prototype.push</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj.push(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    obj.push(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 答案：</span></span><br><span class=\"line\">    <span class=\"comment\">// obj</span></span><br><span class=\"line\">    <span class=\"comment\">// Object&#123;2:&#x27;c&#x27;,3:&#x27;d&#x27;,length:4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`关键点在 length 上面，根据 length 改变而改变，走一下length，既：`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">taret</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>[obj.length] = target;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.length ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span> : <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;3&#x27;</span> : <span class=\"string\">&#x27;d&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;push&#x27;</span> : <span class=\"built_in\">Array</span>.prototype.push</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj.push(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 答案：“ 1”：“a”，“2”：“ c”，“ 3”：“b”，“ length”： 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span> : <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">length</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">push</span> : <span class=\"built_in\">Array</span>.prototype.push,</span><br><span class=\"line\">        <span class=\"attr\">splice</span> : <span class=\"built_in\">Array</span>.prototype.splice</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从 console 输出:</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.name</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.age</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj.length</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  for(var prop in obj)&#123;console.log(obj[prop])&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· a</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· b</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· c</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· abc</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 3</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· function push()&#123;[native code]&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· function splice()&#123;[native code]&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作业，练习\"><a href=\"#作业，练习\" class=\"headerlink\" title=\"作业，练习\"></a>作业，练习</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 封装 type 方法达到下面的效果</span><br><span class=\"line\">    <span class=\"comment\">// 封装 type</span></span><br><span class=\"line\">    <span class=\"keyword\">typeof</span>([]) -- array</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span>(&#123;&#125;) -- object</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"keyword\">function</span>) -- <span class=\"title\">object</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">typeof</span>(<span class=\"params\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>()</span>) -- <span class=\"title\">number</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">typeof</span>(<span class=\"params\"><span class=\"number\">123</span></span>) -- <span class=\"title\">number</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">console</span> 输出</span></span><br><span class=\"line\"><span class=\"function\">    // &gt;  <span class=\"title\">Object</span>.<span class=\"title\">prototype</span>.<span class=\"title\">toString</span>.<span class=\"title\">call</span>(<span class=\"params\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>)</span>)</span></span><br><span class=\"line\"><span class=\"function\">    // &lt;· &#x27;[<span class=\"title\">object</span> <span class=\"title\">Number</span>]&#x27;</span></span><br><span class=\"line\"><span class=\"function\">    // &gt;  <span class=\"title\">Object</span>.<span class=\"title\">prototype</span>.<span class=\"title\">toSTring</span>.<span class=\"title\">call</span>(<span class=\"params\"><span class=\"number\">123</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    // &lt;· &#x27;[<span class=\"title\">object</span> <span class=\"title\">Number</span>]&#x27;</span></span><br><span class=\"line\"><span class=\"function\"></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">答案:</span><br><span class=\"line\">    <span class=\"number\">1.</span> 封装 type （这个方法是一个工具类方法，可以存放在库里面），区分 <span class=\"keyword\">typeof</span> 方法</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">1</span>）先分类，原始值，引用值</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">2</span>）区分引用值，先判断是不是 <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    数组，对象，包装类（<span class=\"keyword\">new</span> number）会返回 object，通过 <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"number\">1.</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> template = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;[object Array]&#x27;</span> : <span class=\"string\">&#x27;array&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;[object Object]&#x27;</span> : <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;[object Number]&#x27;</span> : <span class=\"string\">&#x27;number - object&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;[object Boolean]&#x27;</span> : <span class=\"string\">&#x27;boolean - object&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;[object String]&#x27;</span> : <span class=\"string\">&#x27;string - object&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(target) == <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;function&#x27;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(target) == <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str = <span class=\"built_in\">Object</span>.prototype.toString.call(target);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> template(str);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span>(target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`简化之后`</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"number\">2.</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> template = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Array]&#x27;</span> : <span class=\"string\">&#x27;array&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Object]&#x27;</span> : <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Number]&#x27;</span> : <span class=\"string\">&#x27;number - object&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Boolean]&#x27;</span> : <span class=\"string\">&#x27;boolean - object&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object String]&#x27;</span> : <span class=\"string\">&#x27;string - object&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(target === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(target))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> str = <span class=\"built_in\">Object</span>.prototype.toString.call(target);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> template[str];</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span>(target);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">`进一步简化`</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> ret = <span class=\"keyword\">typeof</span>(target);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> temp = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Array]&#x27;</span> : <span class=\"string\">&#x27;array&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Object]&#x27;</span> : <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Number]&#x27;</span> : <span class=\"string\">&#x27;number - object&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object Boolean]&#x27;</span> : <span class=\"string\">&#x27;boolean - object&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;[object String]&#x27;</span> : <span class=\"string\">&#x27;string - object&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(target === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret = <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> str = <span class=\"built_in\">Object</span>.prototype.toString.call(target);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> temolate[str];</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span> 数组去重</span><br><span class=\"line\">    <span class=\"comment\">// 数组去重</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>]</span><br><span class=\"line\">    arr.unique() --&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`数组去重(利用对象的特性做数组去重，去重就是去掉重复)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">思路：写一个对象，把数组的每一位当做对象的属性名。利用对象的特性（同一属性名不可以出现两次），先把第一位当作属性名添加进去，属性值随便写个，在看第一二位，如果第二位在对象里面有属性名，就看下一位，如果对象没有属性名，就把这个值添加进去当属姓名，只看对象的属性名，就去重了，这个方法叫 hash</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">答案：</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = &#123;&#125;,</span><br><span class=\"line\">            arr = [],</span><br><span class=\"line\">            len = <span class=\"built_in\">this</span>.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len; i ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!temp[<span class=\"built_in\">this</span>[i]])&#123;</span><br><span class=\"line\">                temp[<span class=\"built_in\">this</span>[i]] = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">                arr.push(<span class=\"built_in\">this</span>[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`每一圈循环都要 this.length; 写成 var len = this.length;这样直接放值能少一些运算。 [this[i]]代表数组的第几位。 “abc”可以随便填值（要求是字符串，但是不为 false）， 但是填[this[i]]= [this[i]];在数组有 0 的时候就会有 bug。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">if 里面取到值什么都不敢，取到 undefined才开始操作，所以写非！，没有值，才处理 `</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h1><h2 id=\"复习包装类\"><a href=\"#复习包装类\" class=\"headerlink\" title=\"复习包装类\"></a>复习包装类</h2><p><code>引用值就是一种对象（泛泛的概括类对象），包括数组，函数，对象。在内存里面存储。原始值不能有属性和方法，引用之才可以有，但是经过包装类后，原始值就能有属性和方法。</code></p>\n<p><code>通过原始值访问属性和方法，系统为了让语法好用，不报错，系统会帮我们进行一个 js 内部机制包装类</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// new String(&#x27;abc&#x27;).length</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`思路：即隐式的 new String构造出一个字符串对象，然后把字符串内容与原来保持一 致 new String (‘abc’)，因为我们进行了 str.length 操作，那么他也加上.length，变成 了隐式 new String (‘abc’).length。这里虽然写的是 console.log(str.length)，实际上执 行的是 console.log(new String (‘abc’).length)  这样隐式的执行过程就是包装类。`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    num.abc = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// new Number(num).abc = &#x27;abc&#x27;; --&gt; delete</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// new Number(num).abc;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num.abc);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`答案 undefined思路：当num.abc = “abc”时，系统会进行包装类，隐式的 new Number(num).abc = “abc”；执行完这一步以后就会delet 掉这个隐式的值，并不保 留。等下一步又遇到 num.abc 时，又隐式的 new了一个 number。但是这个和上一个 是两个 new Number，是两个彼此独立的对象。`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`new.Number(123).abc 和 var num = new Number(123); num.abc 是一样的`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习原型\"><a href=\"#复习原型\" class=\"headerlink\" title=\"复习原型\"></a>复习原型</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`任何函数都有原型，包括构造函数，这是一个构造函数，原型需要基于构造函数，没有原型的构造函数没有意义，任何一个函数都有 prototype`</span></span><br><span class=\"line\">    Person.prototype.lastName = <span class=\"string\">&#x27;deng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pereson</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"built_in\">this</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">__proto__</span> : Person.prototype</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person.lastName);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习-creat\"><a href=\"#复习-creat\" class=\"headerlink\" title=\"复习 creat\"></a>复习 creat</h2><p><code>Object.creat(); 是创造的对象，对象必须要有原型，Object.creat();需要指定创建对象的原型是谁，括号里面就要填谁（所以括号里面一定要估值）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = &#123;</span><br><span class=\"line\">        <span class=\"attr\">lastName</span> : <span class=\"string\">&#x27;deng&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.creat(demo);</span><br><span class=\"line\">    obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">__proto__</span> : demo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`Object.creat(prototype.definedProperty)还能填第二个参数。第一个填的 prototype 表示你的原型是谁，第二个参数 definedProperty 是特性.(可读可写都是特性)`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 console 中控制：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  delete num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· false</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  delete widnow.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· false</span></span><br><span class=\"line\"><span class=\"string\">`这个 nun 算是 window 的苏醒。写在全局的属性，一旦经历了 var 的操作，所得出的属性 window，这种属性叫做不可配置的属性，不可配置的属性，delete不掉。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">直接增加的属性卡叫做可配置属性，delete 只能删除可配置的属性`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">    obj.num;</span><br><span class=\"line\">    <span class=\"comment\">// 从 console 中控制：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  delete obj.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  obj</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">直接在控制台操作对比，发现 <span class=\"keyword\">var</span> 过的属性是不可配置的属性,<span class=\"keyword\">delete</span>不掉</span><br><span class=\"line\">    <span class=\"comment\">// 从 console 中控制：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  window.num = 123</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  delete window.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· true</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  window.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var num = 123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  window.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  delete window.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· false</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  window.num</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习-this-amp-call\"><a href=\"#复习-this-amp-call\" class=\"headerlink\" title=\"复习 this &amp; call\"></a>复习 this &amp; call</h2><p><code>1. 预编译 this --&gt; window</code></p>\n<p><code>2. 谁调用的，this 指向谁</code></p>\n<p><code>3. call 和 apply 能改变 this 的指向</code></p>\n<p><code>4. 全局 this --&gt; window</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">注释掉的是预编译的过程</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// test() --&gt; AO&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     arguments : &#123;&#125;，</span></span><br><span class=\"line\">    <span class=\"comment\">//     this : window,</span></span><br><span class=\"line\">    <span class=\"comment\">//     num : undefined,</span></span><br><span class=\"line\">    <span class=\"comment\">//     a : function()&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">test();完全是等于 test.call();执行，其实 test() 执行会内部转换成 test.call();执行</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test.call();</span><br><span class=\"line\">    <span class=\"comment\">// Window</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果我们在 test.call();里面传值，第一个值就会作为函数执行时的 <span class=\"built_in\">this</span> 环境</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// test();</span></span><br><span class=\"line\">    test.call(&#123;<span class=\"attr\">name</span> : <span class=\"string\">&#x27;deng&#x27;</span>&#125;); <span class=\"comment\">// Object&#123;name : &#x27;deng&#x27;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// test() --&gt; AO&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         arguments : &#123;&#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">//         this : &#123;name : &#x27;deng&#x27;&#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">//         num : undefined,</span></span><br><span class=\"line\">    <span class=\"comment\">//         a : function()&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span> : <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj.say();</span><br><span class=\"line\">    <span class=\"comment\">//  obj</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span> : <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj.say.call(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">    <span class=\"comment\">//  window</span></span><br><span class=\"line\"><span class=\"string\">`obj.say.call(window);有 call 就打破一切规则，call() 里面传的是谁，就是谁`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">naem</span> : <span class=\"string\">&#x27;obj&#x27;</span>m</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun = obj.say;</span><br><span class=\"line\">    fun(); <span class=\"comment\">//--&gt; 只能走预编译</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`var fun = obj.say 先当与 var fun = say : function()&#123;&#125; 里面的函数体`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`fun(); 相当于让 say : function 在这函数在全局范围内自调用，不是谁调用的，就只能走预编译，this 就是 window`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">say</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun = obj.say;</span><br><span class=\"line\">    fun.call(obj);</span><br><span class=\"line\">    <span class=\"comment\">// obj</span></span><br><span class=\"line\"></span><br><span class=\"line\">想让 Person 实现 Student 的功能</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// var this = Object.creat(Student.prototype);</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age; <span class=\"comment\">// 简化为 Person.call(this,name,age);</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> Student(<span class=\"string\">&#x27;long&#x27;</span>,<span class=\"number\">18</span>,<span class=\"string\">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习闭包\"><a href=\"#复习闭包\" class=\"headerlink\" title=\"复习闭包\"></a>复习闭包</h2><p><code>闭包表象：一个函数套着另外一个函数，你把被嵌套的函数保存到套他的函数外面（a 套着 b，你把 b 弄出 a 里面），就形成了闭包（不一定要 return）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">下面两种都可以实现闭包</span><br><span class=\"line\">  <span class=\"number\">1</span>)<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">2</span>)<span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        obj.fun = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a();</span><br><span class=\"line\">    <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"comment\">// this call</span></span><br><span class=\"line\">    go &#123;</span><br><span class=\"line\">        <span class=\"attr\">a</span> : <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ao &#123;</span><br><span class=\"line\">        <span class=\"attr\">a</span> : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        a = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习构造函数\"><a href=\"#复习构造函数\" class=\"headerlink\" title=\"复习构造函数\"></a>复习构造函数</h2><p><code>通过构造函数构造对象的时候用 new,我执行函数的时候就不用 new</code></p>\n<p><code>构造对象必须是 new 加上构造函数执行（如 person();）才能构造出对象</code></p>\n<p><code>有了 new 之后，才会发生两步隐式变化（var this = &#123;&#125;； return this）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// var this = &#123;&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"comment\">// return this;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pereson = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"comment\">// 没有 var person = new Person(); 只 Person 会走预编译，此时 this 指向 window</span></span><br><span class=\"line\"></span><br><span class=\"line\">私有化属性看不到 Var money = <span class=\"number\">100</span>; 外部看不到 <span class=\"keyword\">var</span> money,就是闭包</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// var this = &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">// makeMoney : function()&#123;&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// offer : function()&#123;&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> money = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.makeMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            money ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.offer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            money --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// return this;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">            F.prototype = Origin.prototype;</span><br><span class=\"line\">            Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;())</span><br><span class=\"line\">    <span class=\"string\">`立即执行函数执行完就成下面这样了`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inherit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Target,Origin</span>)</span>&#123;</span><br><span class=\"line\">        F.prototype = Origin.prototype;</span><br><span class=\"line\">        Target.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">引用值也可以进行类型转换</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`数组不等于数组，因为里面的地址不一样`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出</span></span><br><span class=\"line\">    &gt;  [] + <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &gt;  [] + <span class=\"number\">2</span></span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">    &gt;  <span class=\"built_in\">Number</span>([])</span><br><span class=\"line\">    &lt;· <span class=\"number\">0</span></span><br><span class=\"line\">    &gt;  [] == []</span><br><span class=\"line\">    &lt;· <span class=\"literal\">false</span></span><br><span class=\"line\">    &gt;  <span class=\"built_in\">String</span>([]) + <span class=\"number\">1</span></span><br><span class=\"line\">    &lt;· <span class=\"string\">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习克隆\"><a href=\"#复习克隆\" class=\"headerlink\" title=\"复习克隆\"></a>复习克隆</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">naem</span> : <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">    &#125;               <span class=\"comment\">// 浅克隆</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj1 = &#123;    <span class=\"comment\">// 当拷贝引用值的收就不行了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> prop)&#123;</span><br><span class=\"line\">        obj1[prop] = obj[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">`这样浅度克隆，克隆的是地址，缺点是你改我也改`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`深度克隆解决的就是引用值`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`null 和 undefined 不能和数字进行比较，不会进行类型转换，他们不作为比较值存在`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复习题\"><a href=\"#复习题\" class=\"headerlink\" title=\"复习题\"></a>复习题</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">私有化变量</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sss</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            a ++;</span><br><span class=\"line\">            documents.write(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.say = sss;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bst oPrtrdon = mre Person();</span><br><span class=\"line\">    oPerson.say();</span><br><span class=\"line\">    oPerson.say();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oPerson1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    oPerson1.say();</span><br><span class=\"line\">    <span class=\"comment\">// 打印 1，2，1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 答案 1，删不掉x，该是什么是什么</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// 返回 object</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> h = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">23</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a());</span><br><span class=\"line\">    <span class=\"comment\">// error : a is not a defined</span></span><br><span class=\"line\">    <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">选择你熟悉的一种方式实现JavaScript 对象的继承</span><br><span class=\"line\">    <span class=\"comment\">// 案：声明模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">实现 object 类型的 clone()方法</span><br><span class=\"line\">    <span class=\"comment\">// 答案：深度克隆</span></span><br><span class=\"line\"></span><br><span class=\"line\">尝试优化以下代码，让代码看起来更优雅</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDay</span>(<span class=\"params\">day</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(day)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Monday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Tuesday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Wednesday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Thursday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Friday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Saturday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Sunday&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                documents.wirte(<span class=\"string\">&#x27;Error&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 答案：</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">retDate</span>(<span class=\"params\">date</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ret = arr[date - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ret === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error&#x27;</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`SEO 是搜索引擎优化`</span></span><br><span class=\"line\"></span><br><span class=\"line\">HTML布局实现：头和尾固定，中间自适应。</span><br><span class=\"line\"><span class=\"comment\">// 答案：三栏布局，头尾是指左右</span></span><br><span class=\"line\"></span><br><span class=\"line\">在页面中增加一个 div（宽度 400px，高度400px，背景颜色蓝色，边框颜色红 色），该 div要求在页面中居中显示。</span><br><span class=\"line\">简单画图描述CSS盒模型</span><br><span class=\"line\"></span><br><span class=\"line\">css中的选择器有哪些？</span><br><span class=\"line\"><span class=\"comment\">// 答案：id 选择器是 xxx，先说类型在举例</span></span><br><span class=\"line\"></span><br><span class=\"line\">JavaScript 中有哪些数据类型？</span><br><span class=\"line\"><span class=\"comment\">// 答案：原始值里面有 XXX，引用值里面有 XXXX</span></span><br><span class=\"line\"></span><br><span class=\"line\">什么是 rem布局？</span><br><span class=\"line\">html 顶部的DOCTYPE 有什么作用？有什么影响？</span><br><span class=\"line\">Display的参数值及其含义</span><br><span class=\"line\"></span><br><span class=\"line\">描述一下盒模型</span><br><span class=\"line\"><span class=\"comment\">// 答案：需要讲两种才满分</span></span><br><span class=\"line\"></span><br><span class=\"line\">css3可用伪类都有那些？</span><br><span class=\"line\">position属性有哪些值，有什么区别？</span><br><span class=\"line\">如何创建一个 div，并添加到页面里。</span><br><span class=\"line\">写一个正则表达式，检验字符串首尾是否含有数字</span><br><span class=\"line\">跨域请求数据的方法都有哪些？</span><br><span class=\"line\">编写一个类和类继承，类名为Person，含有属性 name，age，含有方法$。一个 student 类，继承自Person，自由属性 score，自有方法 study</span><br><span class=\"line\">（类指的就是构造函数）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`一个字符串[a - z]组成，请找出该字符串第一只出现一次的字母。`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`字符串去重`</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"try…catch\"><a href=\"#try…catch\" class=\"headerlink\" title=\"try…catch\"></a>try…catch</h1><p><code>防止我们报错的</code></p>\n<p><code>try花括号&#123;里面会正常执行，但是遇到 b 报错时 b 就执行不出来，后面的代码 c 就不执行了，但是外面的代码 d 还能执行&#125;catch(e),这个 e 是可以随便写的，写 abc 都可以，也是一个形参</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\"><span class=\"string\">`报错后，不执行后续的代码，但是依然可以执行外面的d`</span></span><br></pre></td></tr></table></figure>\n\n<p><code>在 try 里面发生的错误，不会执行错误后的 try 的里面的代码</code></p>\n<p><code>catch</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\"><span class=\"string\">`如果 try里面的代码不出错，在 catch 里面的代码就不执行；`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\"><span class=\"string\">`如果 try里面的代码出错，catch 负责补抓到错误信息封装到里面（error.massage    error.name）， 错误对象只有 message 和 name。 `</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;<span class=\"comment\">// error   error.message error.name --&gt; error</span></span><br><span class=\"line\">        onsole.log(e.message + <span class=\"string\">&quot; &quot;</span> + e.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// a</span></span><br><span class=\"line\">    <span class=\"comment\">// b is not defined ReferenceError</span></span><br><span class=\"line\">    <span class=\"comment\">// d</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.name + <span class=\"string\">&#x27; : &#x27;</span> + e.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// a</span></span><br><span class=\"line\">    <span class=\"comment\">// ReferenceError : b is not defined</span></span><br><span class=\"line\">    <span class=\"comment\">// d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`try&#123;&#125;catch(e)finally&#123;&#125;`</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Error-name-的六种值对应的信息\"><a href=\"#Error-name-的六种值对应的信息\" class=\"headerlink\" title=\"Error.name 的六种值对应的信息\"></a>Error.name 的六种值对应的信息</h1><p><code>Error.name : 前面是错误名称，后面是错误信息</code></p>\n<p><code>1. EvalError : eval() 使用与定义不一致不一致（eval 是不允许被使用的）</code></p>\n<p><code>2. RangeError : 数值越界</code></p>\n<p><code>3. ReferenceError : 非法或不能识别的引用数值（未经声明就使用，未经定义就使用）</code></p>\n<p><code>4. SyntaxError : 操作数类型错误</code></p>\n<p><code>5. TypeError : 操作数类型错误</code></p>\n<p><code>6. URIError : URI处理函数使用不当（引用地址错误）</code></p>\n<blockquote>\n<p>大部分都是 3 和 4 这种错误，</p>\n</blockquote>\n<p><code>伪代码也可以写，就比如 var 老于 = 123; 这就是伪代码</code></p>\n<p><code>var str = avs ==&gt; ReferenceError</code></p>\n<h1 id=\"es5-0-严格模式\"><a href=\"#es5-0-严格模式\" class=\"headerlink\" title=\"es5.0 严格模式\"></a>es5.0 严格模式</h1><p><code>（这一章就是讲 es3.0 和 es5.0产生冲突的部分）</code></p>\n<p><code>浏览器是基于 es3.0 和 es5.0 的新增方法使用的。</code></p>\n<p><code>如果两种发生了冲突，就用 es3.0。</code></p>\n<p><code>es5.0 严格模式是指 es3.0 和 es5.0 产生冲突发部分就是用 es5.0，否则就用 es3.0</code></p>\n<p><code>es5.0 严格模式的启动方式，在页面逻辑最顶端写 &#39;use strict&#39;</code></p>\n<p><code>用法在整个页面的最顶端写 &#39;use strict&#39;,可以写在全局的最顶端，也可以写在 某函数（局部）的最顶端，推荐使用局部的</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">es5<span class=\"number\">.0</span> 不能用 argument.callee,但是 es3<span class=\"number\">.0</span> 可以用</span><br><span class=\"line\">    <span class=\"comment\">// es5.0 严格模式的启动</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(argumetns.callee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// 报错：es5.0模式下不能用 callee 和 caller</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;&#125; 里面加 <span class=\"string\">&#x27;use strict&#x27;</span>; 是局部启动严格模式</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    demo();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// function demo()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(arguments.callee)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&#39;use strict&#39;</code></p>\n<blockquote>\n<p>不在兼容 es3.0 的一些不规则语法。使用全新的 es5.0 规范。两种用法：</p>\n</blockquote>\n<p><code>一、全局严格模式</code></p>\n<p><code>局部函数内严格模式（推荐）</code></p>\n<p><code>就是一行字符串，不会对不兼容严格模式的浏览器产生影响。</code></p>\n<p><code>不支持 with，argumetns.callee，function.caller，变量赋值前必须声明，局部 this 必须被赋值（Perosn.call(null/unfined)) 赋值什么就是什么，拒绝重复属性和参数</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\">浏览器升级到 es5<span class=\"number\">.0</span> 才好用</span><br><span class=\"line\">写成 strice();就有风险</span><br><span class=\"line\">写成 <span class=\"string\">&#x27;use strict&#x27;</span>; 就有一个向后兼容的作用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">es5<span class=\"number\">.0</span> 严格模式下不能用 <span class=\"keyword\">with</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> 可以改变作用域链</span><br><span class=\"line\">    <span class=\"keyword\">with</span>()括号里面的代码会按照正常顺序执行，但是如果在括号里面添加了对象，就会把对象当作 <span class=\"keyword\">with</span> 要执行的代码体的作用域链的最顶端（最直接的最近的 AO）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">下面这个 <span class=\"keyword\">with</span> 看到的就是 <span class=\"keyword\">var</span> obj 的 name （<span class=\"keyword\">with</span> 改变作用域链）</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">        age = <span class=\"number\">234</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> age = <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;spoce&#x27;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">with</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// obj,234</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">命名空间应该像下面这样用的，<span class=\"keyword\">with</span> 可以简化代码</span><br><span class=\"line\">    <span class=\"keyword\">var</span> org = &#123;</span><br><span class=\"line\">        <span class=\"attr\">dp1</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">jc</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span> : <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">age</span> : <span class=\"number\">123</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">deng</span> : &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span> : <span class=\"string\">&#x27;xiaodeng&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">age</span> : <span class=\"number\">234</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">dp2</span> : &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">with</span>(<span class=\"params\">org.dp1.jc</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">with</span>(<span class=\"params\"><span class=\"built_in\">document</span></span>)</span>&#123;</span><br><span class=\"line\">        write(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">`这也是 with 的运用方式，用with 表示 document.write();`</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>with 过于强大，可以改变作用域链，失去效率，所以es5.0不能用</p>\n</blockquote>\n<p><code>argumetns.callee</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argumetns.callee);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 报错 -- TypeError ：&#x27;caller&#x27;,&#x27;callee&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">arguments</span>.callee 在 es5<span class=\"number\">.0</span> 严格模式下报错</span><br><span class=\"line\">    <span class=\"string\">&#x27;use strice&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(test.caller);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    demo();</span><br><span class=\"line\">    <span class=\"comment\">// 报错 -- TypeError ：&#x27;caller&#x27;,&#x27;callee&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>es5.0 严格模式下：变量赋值前必须声明，局部 this 必须被赋值</code></p>\n<p><code>（Person.call(null/undefined) 赋值什么就是什么），拒绝重复属性和参数（this 不在指向 window）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">局部 <span class=\"built_in\">this</span> 必须被赋值 (Person.call(<span class=\"literal\">null</span>/<span class=\"literal\">undefined</span>)赋值什么就是什么)</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">该对象的 <span class=\"title\">constructor</span>是 <span class=\"title\">Test</span></span><br><span class=\"line\">    &#x27;<span class=\"title\">use</span> <span class=\"title\">strict</span>&#x27;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    <span class=\"comment\">// Test&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Test.call(&#123;&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Test.call(<span class=\"number\">123</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`在 es3.0 里面是不能这样的`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Test.call(<span class=\"number\">123</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  new Number(123) 这是包装类的显示形式</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">在 es5<span class=\"number\">.0</span> 中全局的 <span class=\"built_in\">this</span> 还是指向 <span class=\"built_in\">window</span></span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);  <span class=\"comment\">//--全局范围</span></span><br><span class=\"line\">    <span class=\"comment\">// Window</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">拒绝重复属性和参数（<span class=\"built_in\">this</span> 不在指向 <span class=\"built_in\">window</span>）</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name,name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name,name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`在 es3.0 里面重复的参数是不报错的，但是在 es5.0 里面是会报错的`</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name,name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// SyntaxError:Duplicate  -- 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`重复的属性名在 es5.0 也不行，但是不报错（后面会覆盖前面的）`</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">&#x27;234&#x27;</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>eval 很强大，能把字符串当成代码来执行</code></p>\n<p><code>但是约定俗成在 es3.0 中都不能使用 eval。eval是魔鬼，因为会改变作用域</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;console.log(a)&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es3.0 都不能 eval();eval 是魔鬼</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">global</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">global</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;console.log(global)&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    test();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果改变 <span class=\"built_in\">global</span>，他改变的是全局的</span><br><span class=\"line\"></span><br><span class=\"line\">当情况不同，<span class=\"built_in\">eval</span> 改变的作用域是不同的</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span> 还有自己独立的作用域</span><br><span class=\"line\"></span><br><span class=\"line\">理解：可以把回调函数理解为先定义好了函数，执行的时候再回头调用</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"什么是DOM\"><a href=\"#什么是DOM\" class=\"headerlink\" title=\"什么是DOM\"></a>什么是DOM</h1><ol>\n<li><p>DOM  —&gt;    Document Object Model（文档对象模型</p>\n</li>\n<li><p>DOM 定义了表示和修改文档所需的方法（对象，这些对象的行为和属性以及这些对象之间的关系。）DOM 对象即为宿主对象，有浏览器厂商定义，用来操作 html 和 xml 功能的一类对象的集合。</p>\n</li>\n</ol>\n<p><code>也有人称 DOM 是对 HTML 以及 XML 的标准编程接口</code></p>\n<p><code>xml ==&gt; xhtml ==&gt; html</code></p>\n<p><code>xml 是最早的版本，xml里面的标签是可以自己定义的，被 js 里面的 jeson 取代了，dom 不能改变 css 样式表，但是可以简介改变行间样式的 css</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">说的是改变不了 css 是指改变不了 css 的样式表，但是可以通过间接方式改变 html 的行间样式来改变</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.widht = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`1. 找到 html 的方法：如 document。getElementsByTagName(&#x27;div&#x27;)就能把所有的 div 都选出来。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果想要拿到第一个 div ，写成 document.getElementByTagName(&#x27;div&#x27;) 后面就要加一个[0];就可以实现了</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. div.style 选出来代表行间样式，选出来的就是 dom 对象</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. js 不能写 -(号) ，只能用小驼峰方法写。如 background-color 写成 bakgroundColor</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">有 dom 操作以后就变成动态交互可以操作的了（你动一下，他给你一个反应）</span><br><span class=\"line\">div.onclick 是一个交互效果的事件监听</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.style.widht = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.sytle.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;green&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">this</span>.style.widht = <span class=\"string\">&#x27;200px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">this</span>.style.height = <span class=\"string\">&#x27; 50px;&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">this</span>.style.borderRadius = <span class=\"string\">&#x27;50%&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">实现点击一下改变一下颜色</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.style.widht = 100px;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div..style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.onlick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            count ++;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">if</span>(count % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;green&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;<span class=\"keyword\">else</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">选项卡</span><br><span class=\"line\"><span class=\"string\">`写个选项卡，点第一个按钮出现第一对应的信息，点第二个按钮，第一个消失，第二个显示`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"selector-class\">.content</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">                <span class=\"attribute\">display</span>:none;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">                <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">                <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">                <span class=\"attribute\">border</span>:<span class=\"number\">2px</span> solid red;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"selector-class\">.active</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">                <span class=\"attribute\">background-color</span>:yellow;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:block&quot;</span>&gt;</span>1111<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>2222<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>3333<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.ElementsByTagName(<span class=\"string\">&#x27;button&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.ElementsByClassName(<span class=\"string\">&#x27;content&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btn.length; i ++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    btn[i].onlick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; btn.length; j ++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        btn[i].className = <span class=\"string\">&#x27;&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        div[i].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;active&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    div[i].style.display = <span class=\"string\">&#x27;block&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;(i))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">小方块应用</span><br><span class=\"line\"><span class=\"string\">`document.body.appendChild(div); -- 意思是在body里面放一个 div`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`setInterval(function()&#123;&#125;,100) -- 是一个定时器功能，意思是每隔 100毫秒 就执行一次`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">    div.style.width = <span class=\"string\">&#x27;100px&#x27;</span>;</span><br><span class=\"line\">    div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span><br><span class=\"line\">    div.style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">    div.style.position = <span class=\"string\">&#x27;absolute&#x27;</span>;</span><br><span class=\"line\">    div.style.left = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    div.style.top = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left) + <span class=\"number\">2</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        div.style.top = <span class=\"built_in\">parseInt</span>(div.style.left) + <span class=\"number\">2</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">`把上面的 setInterval(function()&#123;&#125;) 改成下面样式`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        speed += speed / <span class=\"number\">7</span>;</span><br><span class=\"line\">        div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        div.style.top = <span class=\"built_in\">parseInt</span>(div.style.top) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">`把上面的 setInterval(function()&#123;&#125;) 改成以下样式，可以让定时器停止`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        speed += speed / <span class=\"number\">20</span>;</span><br><span class=\"line\">        div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        div.style.top = <span class=\"built_in\">parseInt</span>(div.style.top) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(div.style.top) &gt; <span class=\"number\">200</span> &amp;&amp; <span class=\"built_in\">parseInt</span>(div.style.left) &gt; <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">实现键盘控制小方块</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">    div.style.widht = <span class=\"string\">&#x27;100px&#x27;</span>;</span><br><span class=\"line\">    div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span><br><span class=\"line\">    div.style.background = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">    div.style.position = <span class=\"string\">&#x27;absolute&#x27;</span>;</span><br><span class=\"line\">    div.style.left = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    div.style.top = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(e.which)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">38</span>:</span><br><span class=\"line\">                div.style.top = <span class=\"built_in\">parseInt</span>(div.style.top) - <span class=\"number\">5</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 向下</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">40</span>:</span><br><span class=\"line\">                div.style.top =  <span class=\"built_in\">parseInt</span>(div.style.top) + <span class=\"number\">5</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 向上</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">37</span>:</span><br><span class=\"line\">                div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left - <span class=\"number\">5</span> + <span class=\"string\">&#x27;px&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 向右</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">39</span>:</span><br><span class=\"line\">                div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left) + <span class=\"number\">5</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 向左</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">点击运动加速</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`思路：每一次按下的时候都记录一个新的时间片段，都减去上一个执行的时间 片段，如果时间片段都小于一定的毫秒数的话，我们让一个计数器去++，当连续小 于的时候，就让计数器连续++,如果++到一定数的时候，我们认为是连续按了，再按 就加速了，让每一次按的时候都判断一下,如果时间间隔过大的话，就让计数器重新 归 0`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`按住加速：就是这一次按下与下一次按下的速度间隔时间十分短暂，就认为他加速 了。`</span></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"xml\">            width: 100px;height: 50px;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"xml\">            background:linear-gradient(to left,#999,#000,#432,#fcc);position: fixed;right:0;top:50%;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"xml\">            text-align: center;line-height: height;color: #fff;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"xml\">            font-size: 25px;font-family: Arial;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            加速<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;button&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">document</span>.body.appendChild(div);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.width = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.position = <span class=\"string\">&#x27;absolute&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.left = <span class=\"string\">&#x27;0&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            div.style.top = <span class=\"string\">&#x27;0&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> speed = <span class=\"number\">5</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            btn. = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                speed++;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"keyword\">switch</span> (e.which) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"keyword\">case</span> <span class=\"number\">38</span>:</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        div.style.top = <span class=\"built_in\">parseInt</span>(div.style.top) - speed + <span class=\"string\">&#x27;px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"keyword\">break</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"keyword\">case</span> <span class=\"number\">40</span>:</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        div.style.top = <span class=\"built_in\">parseInt</span>(div.style.top) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"keyword\">break</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"keyword\">case</span> <span class=\"number\">37</span>:</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left) - speed + <span class=\"string\">&#x27;px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"keyword\">break</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"keyword\">case</span> <span class=\"number\">39</span>:</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        div.style.left = <span class=\"built_in\">parseInt</span>(div.style.left) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"keyword\">break</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">划过出现颜色</span><br><span class=\"line\"><span class=\"string\">`box-sizing:border-box -- 启动了另外一种盒模型（IE盒模型）`</span></span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">            padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        li &#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: 10px;</span><br><span class=\"line\">            height: 10px;</span><br><span class=\"line\">            <span class=\"comment\">/* border: 1px solid black; */</span></span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            list-style-type: none;</span><br><span class=\"line\">            box-sizing: border-box;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ul &#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: 200px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">img-data</span>=<span class=\"string\">&#x27;0&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span> * 400 <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ul&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        ul.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.evnet;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            target.style.backgroundColor = <span class=\"string\">&#x27;rgb(0,255, &#x27;</span>+ target.getAttribute(<span class=\"string\">&#x27;img-data&#x27;</span>) + <span class=\"string\">&#x27;)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            target.setAttribute(<span class=\"string\">&#x27;img-data&#x27;</span>,<span class=\"built_in\">parseInt</span>(target.getAttribute(<span class=\"string\">&#x27;img-data&#x27;</span>)) + <span class=\"number\">6</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DOM-基本操作-①（大部分都是类数组）——-方法类选中操作\"><a href=\"#DOM-基本操作-①（大部分都是类数组）——-方法类选中操作\" class=\"headerlink\" title=\"DOM 基本操作 ①（大部分都是类数组）—— 方法类选中操作\"></a>DOM 基本操作 ①（大部分都是类数组）—— 方法类选中操作</h1><p><code>对节点的增删改查</code></p>\n<p>() 号里面都不用写 . 或 #</p>\n<p>查，查看元素节点</p>\n<p>document：代表整个文档（如果给 html 标签上面再套一层标签就是 document）</p>\n<h2 id=\"（Id）getElementById\"><a href=\"#（Id）getElementById\" class=\"headerlink\" title=\"（Id）getElementById\"></a>（Id）getElementById</h2><p><code>元素 id 在 Ie8 以下的浏览器，不区分 id 大小写，而且也返回 name 属性的元素，通过 id 标识我们来选择这个元素，一一对应</code></p>\n<p><code>getElementById</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div name=<span class=\"string\">&#x27;only&#x27;</span>&gt;<span class=\"number\">123</span>&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementId(<span class=\"string\">&#x27;only&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>除了 id 以外，其余选择出来的都是一组，很少用 id 选择器</p>\n<h2 id=\"（标签）getElementsByTagName\"><a href=\"#（标签）getElementsByTagName\" class=\"headerlink\" title=\"（标签）getElementsByTagName\"></a>（标签）getElementsByTagName</h2><p><code>标签名，这是一个类数组，最主流的用法，经常用</code></p>\n<p><code>getElementsByTagName</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">把页面里面的所有的 div 都选择出来</span><br><span class=\"line\">&lt;div id=<span class=\"string\">&#x27;only&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsTagName(<span class=\"string\">&#x27;div&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [div#only]</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.push(1)</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 报错</span></span><br><span class=\"line\">从 dom 开始，我们所学的一切系统给我们生成数组的东西，基本上都是类数组</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">加个 [<span class=\"number\">0</span>] 就选中了第一个 div，如果不加 <span class=\"number\">0</span> ，那个 div 表示的是一个数组，设置背景颜色就会报错</span><br><span class=\"line\">&lt;div id=<span class=\"string\">&#x27;only&#x27;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（name）getElementsByName\"><a href=\"#（name）getElementsByName\" class=\"headerlink\" title=\"（name）getElementsByName\"></a>（name）getElementsByName</h2><p><code>IE不支持需注意，只有部分标签 name 可生效（表单，表单元素，img，iframe）不是在所有的浏览器都能用——开发一般不用</code></p>\n<p><code>getElementsByName</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input name=<span class=\"string\">&quot;fruit&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&#x27;frult&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">把下面所有的 div 都拿出来</span><br><span class=\"line\">&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>只拿出第二个 div，加上[1],或在控制台上打 div[1]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">选择第一个 p 的方式如下</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;p&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（Class）getElementsByClassName\"><a href=\"#（Class）getElementsByClassName\" class=\"headerlink\" title=\"（Class）getElementsByClassName\"></a>（Class）getElementsByClassName</h2><p><code>类名 -&gt;缺点： ie8和ie8 以下的 ie 版本中没有，可以多个 class 一起，不是所有浏览器都能用</code></p>\n<p><code>getElementsByClassName</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">只选择 .demo 的 p 标签 写法如下：</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;demo&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;demo&#x27;</span>)[<span class=\"number\">0</span>]</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">注意哪怕整个文只有一个 demo，也要加 [<span class=\"number\">0</span>],不然选出来的就是一个组</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（CSS）-querySelector-lt-gt-querySelectorAll\"><a href=\"#（CSS）-querySelector-lt-gt-querySelectorAll\" class=\"headerlink\" title=\"（CSS）.querySelector()   &lt;&gt;  .querySelectorAll()\"></a>（CSS）.querySelector()   &lt;&gt;  .querySelectorAll()</h2><p><code>.querySelector -- css选择器，只能选择一个，在 ie7 和 ie7 以下的版本中没有</code></p>\n<p><code>.querySelectorAll -- css选择器，全选，选一组，在 ie7 和 ie7 以下的版本中没有</code></p>\n<p><code>.querySelectorAll()和.querySelector()选出来的元素不是实时的（是静态的），所以一般不用，其他的再怎么修改，跟原来的没有关系 id 选择器不能太依赖，一般当顶级框架使用，在 css 中一般用 class 选择器</code></p>\n<p><code>query 是一个词条</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">.querySelector()和.querySelectorAll()选出来的元素不是实时的，是静态的，是副本</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;demo&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div &gt; span strong.demo&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> strong1 = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;div &gt; span strong.demo&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;strong class=&#x27;demo&#x27;&gt;123&lt;strong&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong1</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [strong.demo]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`下面的都是实时的`</span></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;demo&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> demo = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;demo&#x27;</span>)[<span class=\"number\">0</span>]</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> newDiv = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">document</span>.body.appendChild(newDiv);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [div,div.demo,div,div]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">.querySelectorAll()选中了所有的 div，但是实时操作不能实时反馈</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;demo&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        var div = document.querySelectorAll(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"xml\">        var demo = document.getElementsByClassName(&#x27;demo&#x27;)[0];</span></span><br><span class=\"line\"><span class=\"xml\">        var newDiv = document.createElement(&#x27;div);</span></span><br><span class=\"line\"><span class=\"xml\">        document.body.appendChild(newDiv);</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DOM基本操作-②-—-非方法类的节点操作\"><a href=\"#DOM基本操作-②-—-非方法类的节点操作\" class=\"headerlink\" title=\"DOM基本操作 ② — 非方法类的节点操作\"></a>DOM基本操作 ② — 非方法类的节点操作</h1><h2 id=\"遍历节点树\"><a href=\"#遍历节点树\" class=\"headerlink\" title=\"遍历节点树\"></a>遍历节点树</h2><p><code>遍历节点树：（灵活，兼容好）--- 关系类的选择</code></p>\n<p>parentNode ——&gt; 父节点（最顶端的 parentNode 为 #document）</p>\n<p>childNodes ——&gt; 子节点们（直接的节点数）节点包括文本节点，属性节点</p>\n<p>firstChild ——&gt; 第一个子节点</p>\n<p>lastChild ——&gt; 最后一个子节点</p>\n<p>nextSibling ——&gt; 后一个兄弟节点</p>\n<p>previousSibling ——&gt; 前一个兄弟节点</p>\n<h3 id=\"parentNode-–-gt-父节点\"><a href=\"#parentNode-–-gt-父节点\" class=\"headerlink\" title=\"parentNode –&gt; 父节点\"></a>parentNode –&gt; 父节点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.parentNode</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;div&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.parentNode.parentNode</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.parentNode.parentNode.parentNode</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;html lang=&#x27;en&#x27;&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.parentNode.parentNode.parentNode.parentNode</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· #document</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.parentNode.parentNode.parentNode.parentNode.parentNode</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"childNodes-–-gt-子节点\"><a href=\"#childNodes-–-gt-子节点\" class=\"headerlink\" title=\"childNodes –&gt; 子节点\"></a>childNodes –&gt; 子节点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [text,strong,text,span,text,em,text]</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes.length</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解释：</span></span><br><span class=\"line\">    <span class=\"comment\">// 为什么是7个节点？</span></span><br><span class=\"line\">    第一个节点是 &lt;div&gt; 后面的文本节点（空格回车），第二个节点是元素节点 &lt;strong&gt;&lt;<span class=\"regexp\">/span&gt;1&lt;/</span>span&gt;&lt;<span class=\"regexp\">/strong&gt;,第三个节点是跟着的文本节点（空格回车），第四个节点是 &lt;span&gt;&lt;/</span>span&gt; 第五个是跟着的文本节点（空格回车）第六个是 &lt;em&gt;&lt;/em&gt;，第七个是跟着的文本节点（空格回车）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"firstChild-amp-lastChild-–-gt-第一个子节点，最后一个子节点\"><a href=\"#firstChild-amp-lastChild-–-gt-第一个子节点，最后一个子节点\" class=\"headerlink\" title=\"firstChild &amp; lastChild –&gt; 第一个子节点，最后一个子节点\"></a>firstChild &amp; lastChild –&gt; 第一个子节点，最后一个子节点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This si comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">sctipt</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    var div = document.getElementsByTagName(&#x27;div&#x27;)[0];</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">sctipt</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.firstChild</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &quot;123&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.lastChild</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· #text</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"previousSibling-amp-nextSibling-–-gt-前一个兄弟节点，后一个兄弟节点\"><a href=\"#previousSibling-amp-nextSibling-–-gt-前一个兄弟节点，后一个兄弟节点\" class=\"headerlink\" title=\"previousSibling &amp; nextSibling –&gt; 前一个兄弟节点，后一个兄弟节点\"></a>previousSibling &amp; nextSibling –&gt; 前一个兄弟节点，后一个兄弟节点</h3><p><code>previousSibling   前一个兄弟节点</code></p>\n<p><code>nextSibling  后一个兄弟节点</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&lt;/sctipt&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nextSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· #text</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nextSibling.nextSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nextSibling.nextSibling.nextSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· #text</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nextSibling.nextSibling.nextSibling.nextSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.previousSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· #text</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.previousSibling.previousSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· comment</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.previousSibling.previousSibling.previousSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· #text</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于元素节点树的遍历-–-不包含文本节点\"><a href=\"#基于元素节点树的遍历-–-不包含文本节点\" class=\"headerlink\" title=\"基于元素节点树的遍历 – 不包含文本节点\"></a>基于元素节点树的遍历 – 不包含文本节点</h2><p>parentElement – 遍历元素父节点</p>\n<p>children – 遍历元素子节点</p>\n<p>childElementCount – 查看元素子节点的个数</p>\n<p>firstElementChild – 第一个元素子节点</p>\n<p>lastElementChild – 最后一个元素子节点</p>\n<p>previousElementSibling – 前一个兄弟节点</p>\n<p>nextElementSibling – 后一个兄弟节点</p>\n<p><code>除 children 外，其余的 ie9 及以下不兼容</code></p>\n<h3 id=\"parentElement-–-gt-返回当前元素的父元素节点-–-IE不兼容\"><a href=\"#parentElement-–-gt-返回当前元素的父元素节点-–-IE不兼容\" class=\"headerlink\" title=\"parentElement –&gt; 返回当前元素的父元素节点 – IE不兼容\"></a>parentElement –&gt; 返回当前元素的父元素节点 – IE不兼容</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;sctipt&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.parentElement</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.parentElement.parentElement</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;html lang=&#x27;en&#x27;&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.parentElement.parentElement.parentElement</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"children-–-gt-只返回当前元素的元素子节点\"><a href=\"#children-–-gt-只返回当前元素的元素子节点\" class=\"headerlink\" title=\"children –&gt; 只返回当前元素的元素子节点\"></a>children –&gt; 只返回当前元素的元素子节点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.children</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· [strong,span]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"childElementCount-–-当前元素节点的子元素节点个数\"><a href=\"#childElementCount-–-当前元素节点的子元素节点个数\" class=\"headerlink\" title=\"childElementCount – 当前元素节点的子元素节点个数\"></a>childElementCount – 当前元素节点的子元素节点个数</h3><p><code>childElementCount === children.length  当前元素节点的子元素节点个数（IE 不兼容）———— 基本不用，因为与 length 相等</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childElementCount</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.children.length</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"firstElementChild-amp-lastElementChild-–-gt-第一个元素节点，最后一个元素节点\"><a href=\"#firstElementChild-amp-lastElementChild-–-gt-第一个元素节点，最后一个元素节点\" class=\"headerlink\" title=\"firstElementChild &amp; lastElementChild –&gt; 第一个元素节点，最后一个元素节点\"></a>firstElementChild &amp; lastElementChild –&gt; 第一个元素节点，最后一个元素节点</h3><p><code>firstElementChild --&gt; 返回的是第一个元素节点（IE不兼容）</code></p>\n<p><code>lastElementChild --&gt; 返回的是最后一个元素节点（IE不兼容）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.firstElementChild</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.lastElementChild</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"previousElementSibling-amp-nextElementSibling-–-gt-前一个兄弟元素节点，后一个兄弟元素\"><a href=\"#previousElementSibling-amp-nextElementSibling-–-gt-前一个兄弟元素节点，后一个兄弟元素\" class=\"headerlink\" title=\"previousElementSibling &amp; nextElementSibling –&gt; 前一个兄弟元素节点，后一个兄弟元素\"></a>previousElementSibling &amp; nextElementSibling –&gt; 前一个兄弟元素节点，后一个兄弟元素</h3><p><code>previousElementSibling --&gt; 前一个兄弟元素节点</code></p>\n<p><code>nextElementSibling --&gt; 后一个兄弟元素</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This si comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nextElementSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nexElementSibling.nextElementSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;em&gt;&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.nextElementSibling.nextElementSibling.nextElementSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  strong.previousElementSibling</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· null</span></span><br></pre></td></tr></table></figure>\n\n<p><code>除 children 外，parentElement、node.childElementCount、firstElementChild、lastElementChild、nextElementSibling、previousElementSibling 在 ie9 及以下不兼容</code></p>\n<p><code>真正常用的就是 children，兼容性好</code></p>\n<h2 id=\"每一个节点的四个属性\"><a href=\"#每一个节点的四个属性\" class=\"headerlink\" title=\"每一个节点的四个属性\"></a>每一个节点的四个属性</h2><p>nodeName – 节点标签名</p>\n<p>nodeValue – 文本注释节点</p>\n<p>nodeType – 查看节点类型</p>\n<p>attributes – 属性节点</p>\n<p>hasChildNodes – 判断有没有子节点</p>\n<h3 id=\"nodeName-–-节点标签名\"><a href=\"#nodeName-–-节点标签名\" class=\"headerlink\" title=\"nodeName – 节点标签名\"></a>nodeName – 节点标签名</h3><p><code>元素的标签名，以大写形式表示，只读，不可写</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This si comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  从控制器输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[1].nodeName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;#comment&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[3].nodeName = &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  divchildNodes[3].nodeName</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;strong&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nodeValue-–-文本-注释节点\"><a href=\"#nodeValue-–-文本-注释节点\" class=\"headerlink\" title=\"nodeValue – 文本/注释节点\"></a>nodeValue – 文本/注释节点</h3><p><code>Text 文本节点或 Comment 注释节点的文本内容，可读写</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[0].nideValue</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.chidlNodes[0].nodeValue = 234</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 234</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[0].nodeValue</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;234&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[0]</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;234&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[1].nodeValue</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;This si comment&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[1].nodeValue = &#x27;That si comment&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;That si comment&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[1]</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &gt;!-- That is comment --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nodeType（最有用）-–-节点类型\"><a href=\"#nodeType（最有用）-–-节点类型\" class=\"headerlink\" title=\"nodeType（最有用） – 节点类型\"></a>nodeType（最有用） – 节点类型</h3><p><code>该节点的类型，只读返回这个 div 的所有的元素节点</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">数字是调用 nodeType 返回的数字，代表着每一个节点的类型</span><br><span class=\"line\"></span><br><span class=\"line\">元素节点 —— <span class=\"number\">1</span></span><br><span class=\"line\">属性节点 —— <span class=\"number\">2</span></span><br><span class=\"line\">文本节点 —— <span class=\"number\">3</span></span><br><span class=\"line\">注释节点 —— <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"built_in\">document</span> —— <span class=\"number\">9</span></span><br><span class=\"line\">DocumentFragment —— <span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[0].nodeType</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 3(文本节点)</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.childNodes[3].nodeType</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 1(元素节点)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">把 div 下面所有的直接子元素节点挑出来，放在数组里面返回，不能用 children</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"number\">123</span></span><br><span class=\"line\">    &lt;!-- This is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">retElementChild</span>(<span class=\"params\">node</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// no children</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> temp = &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"attr\">length</span> : <span class=\"number\">0</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"attr\">push</span> : <span class=\"built_in\">Array</span>.prototype.push,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"attr\">splice</span> : <span class=\"built_in\">Array</span>.prototype.splice</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            child = node.childNodes,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            len = child.length;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len;i ++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">if</span>(child[i].node.length === <span class=\"number\">1</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                temp.push(child[i]);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span> temp;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(retElementChild(div));</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// [strong，span，em，i，b]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attributes-–-属性节点\"><a href=\"#attributes-–-属性节点\" class=\"headerlink\" title=\"attributes – 属性节点\"></a>attributes – 属性节点</h3><p><code>Element 节点的属性集合</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;only&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.attributes</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· NamedNodeMap&#123;0: id,1: class,length: 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.attributes[0]</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· id=&#x27;only&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.attributes[0].nodeType</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 2</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.attributes[0].value</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;only&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.attributes[0].name</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;id&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div.attributes[0].value = &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· &lt;div id=&#x27;abc&#x27; class=&#x27;demo&#x27;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性名不能改，属性值可以，但是我们一般不会用这种方法</p>\n<p>我们一般用 getAttribute 和 setAttribute 去取</p>\n<h3 id=\"hasChildNodes-–-判断有没有子节点\"><a href=\"#hasChildNodes-–-判断有没有子节点\" class=\"headerlink\" title=\"hasChildNodes – 判断有没有子节点\"></a>hasChildNodes – 判断有没有子节点</h3><p><code>节点的一个方法 Node.hasChildNodes(); -- 他有没有子节点，返回值是 true 或 false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;only&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\"><span class=\"comment\">// div.hasChildNodes()</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;only&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!-- <span class=\"built_in\">this</span> is comment --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\"><span class=\"comment\">// div.hasChildNodes()</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;only&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\"><span class=\"comment\">// div.hasChildNodes()</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">当这种情况下是 <span class=\"literal\">false</span> （没有空格，没有回车）</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">&quot;only&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\"><span class=\"comment\">// div.hasChildNodes()</span></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">属性的节点是 div 上面的，不是 div 里面的</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/span&gt;&lt;/</span>span&gt;</span><br><span class=\"line\">    &lt;!-- thsi is comment --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DOM接口-结构树\"><a href=\"#DOM接口-结构树\" class=\"headerlink\" title=\"DOM接口/结构树\"></a>DOM接口/结构树</h1><p><code>dom 结构树代表的是一系列继承关系</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">                       |-- XMLDocument</span><br><span class=\"line\">        |-- Document --|</span><br><span class=\"line\">        |              |-- HTMLDocument</span><br><span class=\"line\">        |</span><br><span class=\"line\">        |                   |-- Text       |-- HTMLHeadElement</span><br><span class=\"line\">        |-- characterData --|              |</span><br><span class=\"line\">Node ---|                   |-- Comment    |-- HTMLBodyElement</span><br><span class=\"line\">        |                                  |</span><br><span class=\"line\">        |                                  |-- HTMLTitleElement</span><br><span class=\"line\">        |                                  |</span><br><span class=\"line\">        |-- Element -- HTMLElement --------|-- TMLParagraphElement</span><br><span class=\"line\">                                           |</span><br><span class=\"line\">                                           |-- HTMLInputElement</span><br><span class=\"line\">                                           |</span><br><span class=\"line\">                                           |-- HTMLTableElement</span><br><span class=\"line\">                                           |</span><br><span class=\"line\">                                           |-- …etc…</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`Document 和 document的关系`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  Document</span><br><span class=\"line\">&lt;· <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Document</span>(<span class=\"params\"></span>)</span>&#123;[native code]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  Document.prototype.abc = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">&lt;· <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  <span class=\"built_in\">document</span>.abc</span><br><span class=\"line\">&lt;· <span class=\"string\">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>document --&gt; HTMLDocument.prototype --&gt; Document.prototype</code></p>\n<p>document 继承自 HTMLDocument.prototype</p>\n<p>HTMLDocument.prototype 继承自 Document.prototype</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">圆形是不是一个对象？</span><br><span class=\"line\"></span><br><span class=\"line\">HTMLDocument.prototype = &#123;</span><br><span class=\"line\">    <span class=\"attr\">__proto__</span> : Document.prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\">    <span class=\"built_in\">document</span> --&gt; HTMLDocument.prototype --&gt; Document.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  HTMLDocument.prototype.bcd = &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· #document</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document..bcd</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  Document.prototype.bcd = &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  HTMLDocument.prototype.bcd = &#x27;234&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;234&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.bcd</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;234&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>DOM 结构树中，Node也是构造函数，comment 是注释</p>\n<p>HTMLDocument 和 HTMLElement 实际上并列了对应的 XML，但是因为不用了 XML 就省略了，HTMLHeadElement 就是 head 标签，其余类推</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">    HTMLBodyElement.protootype.abc=<span class=\"string\">&#x27;demo&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;body&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console输出</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  body.abc</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;demo&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  head..bcd</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefiend</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`如果使用 HTMLElement.prototype.abc=&quot;demo&quot;; 定义，则body和head都可以使用`</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">看一看一层一层返回的是什么东西</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console输出</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· HTMLDocument&#123;Symbol&#123;symbol.toStringTag&#125;:&#x27;HTMLDocument&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.__proto__.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Document&#123;Symbol&#123;Symbol.toStringTag&#125;:&#x27;Document&#x27;,Symbol&#123;symbol.unscopables&#125;:Object&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.__proto__.__proto__.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Node &#123;ELEMENT_NODE: 1, ATTRIBUTE_NODE: 2, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, ENTITY_REFERENCE_NODE: 5, …&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.__proto__.__proto__.__proto__.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· EventTarget &#123;Symbol(Symbol.toStringTag): &quot;EventTarget&quot;, : ƒ, removeEventListener: ƒ, dispatchEvent: ƒ, constructor: ƒ&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.__proto__.__proto__.__proto__.__proto__.__proto__</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· Object&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.body</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;body&gt;…&lt;/body&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.body.toString()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;[object HTMLBodyElement]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>思路：</strong> 绘制<code>dom</code>树，符合深度优先（纵向）原则，比如先看<code>head → title → meta → body → div → strong → span</code></p>\n<p><code>dom</code>树是节点解析，<code>dom</code>树解析完毕代表<code>dom</code>数所有的节点解析完毕，不代表加载<br>（下载完毕）完毕。如看到<code>img</code>标签就放到<code>dom</code>树上，然后同时下载。</p>\n<p><code>dom</code>树形成完了以后，就等<code>css</code>树形成【<code>cssTree</code>也是深度优先原则。】。</p>\n<p><code>domTree + cssTree = randerTree，randerTree</code>形成以后才，渲染引擎才会绘制页面，<br><code>domTree</code>改变，<code>randerTree</code>也会改变，会重排，影响效率,要尽量避免重排。</p>\n<p><code>randerTree</code>触发重排<code>（reflow）</code>的情况：<code>dom</code>节点的删除，添加，<code>dom</code>节点的宽高变<br>化，位置变化，<code>display none ==&gt; block，offsetWidth，offsetLeft</code></p>\n<p><code>repaint</code>重绘：效率也比较低，效率影响较小。触发情况：改颜色，图片</p>\n<h1 id=\"DOM-基本操作-定义方法-③\"><a href=\"#DOM-基本操作-定义方法-③\" class=\"headerlink\" title=\"DOM 基本操作 - 定义方法 ③\"></a>DOM 基本操作 - 定义方法 ③</h1><h2 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h2><p>一、<code>getElementById</code>方法定义在<code>Document.prototype</code>上，即<code>Element</code>节点上不能使</p>\n<p>二、<code>getElementsByName</code>定义在<code>HTMLDocument.prototype</code>上，既非<code>html</code>中的<code>document</code>以外不能使用<code>（xml document,Element）</code></p>\n<p>三、<code>getElementsByTagName</code>方法定义在<code>Document.prototype</code>和<code>Element.prototype</code>上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:选取 div 里面的 span</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;dib&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  span</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;span&gt;1&lt;/span&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`开发中，经常利用先选择的父级，在他父级里面再次选什么元素来定位一个元素`</span></span><br></pre></td></tr></table></figure>\n\n<p><code>var div = document.getElementsByTagName(&#39;*&#39;);  选择所有</code></p>\n<p>四、<code>HTMLDocument.prototype</code>定义了一些常用的属性，<code>body、head</code>分别指代<code>HTML</code>文档中的<code>&lt;body&gt;、&lt;head&gt;</code>标签</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.body</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.head</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;head&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>五、<code>Document.prototype</code>定义了<code>documentElement</code>属性，指代文档的根元素，在<code>HTML</code>文档中，他总是指代<code>&lt;html&gt;</code>元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">    <span class=\"comment\">// &gt;  document.documentElement</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;html lang=&#x27;en&#x27;&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//         &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//         &lt;body&gt;&lt;/body&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>六、<code>getElementsByClassName、querySelectorAll、querySelector</code>在<code>Document,Element</code>类中均有定义<code>div.getElementsByClassName(&#39;&#39;)</code></p>\n<h2 id=\"作业练习\"><a href=\"#作业练习\" class=\"headerlink\" title=\"作业练习\"></a>作业练习</h2><h3 id=\"一、遍历元素节点数，要求不用-children-属性（在原型链上编程）\"><a href=\"#一、遍历元素节点数，要求不用-children-属性（在原型链上编程）\" class=\"headerlink\" title=\"一、遍历元素节点数，要求不用 children 属性（在原型链上编程）\"></a>一、遍历元素节点数，要求不用 children 属性（在原型链上编程）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">低级方法，给一个父节点，把子节点全部遍历出来，并打印</span><br><span class=\"line\"></span><br><span class=\"line\">高级方法：打印树形结构 → 分层打印出来 先看 div 再看子元素节点， 再挨个判断</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、封装函数，返回元素-e-的第-n-层祖先元素\"><a href=\"#二、封装函数，返回元素-e-的第-n-层祖先元素\" class=\"headerlink\" title=\"二、封装函数，返回元素 e 的第 n 层祖先元素\"></a>二、封装函数，返回元素 e 的第 n 层祖先元素</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">retParent</span>(<span class=\"params\">elem,n</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">while</span>(elem &amp; n)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            elem = elem.parentElement;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            n--;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span> elem;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;i&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出</span></span><br><span class=\"line\">    &gt;  retParent(i,<span class=\"number\">1</span>)</span><br><span class=\"line\">    &lt;· &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;  retParent(i,<span class=\"number\">2</span>)</span><br><span class=\"line\">    &lt;· &lt;strong&gt;&lt;/strong&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、封装函数，返回元素-e-的第-n-个兄弟节点，n为证，返回后面的兄弟节点，n-为负，返回前面的，n-为-0，返回自己\"><a href=\"#三、封装函数，返回元素-e-的第-n-个兄弟节点，n为证，返回后面的兄弟节点，n-为负，返回前面的，n-为-0，返回自己\" class=\"headerlink\" title=\"三、封装函数，返回元素 e 的第 n 个兄弟节点，n为证，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己\"></a>三、封装函数，返回元素 e 的第 n 个兄弟节点，n为证，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    &lt;!-- <span class=\"built_in\">this</span> is comment --&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">retSibling</span>(<span class=\"params\">e,n</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">while</span>(e &amp;&amp; n)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            e = e.nextElementSibling;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            n--;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;<span class=\"keyword\">else</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            e = e.previousElementSibling;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            n++;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span> e;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.getElmentsByTagName(<span class=\"string\">&#x27;strong&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,1)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;i&gt;​&lt;/i&gt;​</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,2)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;address&gt;​&lt;/address&gt;​</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,3)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· null</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,1000)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· null</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,-1)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;p&gt;​&lt;/p&gt;​</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,-2)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;span&gt;​&lt;/span&gt;​</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,-3)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· null</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,-300)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· null</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  retSibling(strong,0)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;strong&gt;​&lt;/strong&gt;​</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 ie9 不兼容，考虑到兼容性，可以按照下面思路写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">retSibling</span>(<span class=\"params\">e,n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(e &amp;&amp; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(e.nextElementSibling)&#123;</span><br><span class=\"line\">                e = e.nextElementSibling;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(e = e.nextSibling; e &amp;&amp; e.nodeType !== <span class=\"number\">1</span>; e = e.nextSibling);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n --;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.previousElementSibling) &#123;</span><br><span class=\"line\">                e = e.previousElementSibling;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType !== <span class=\"number\">1</span>;e = e.previousSibling);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`如果 for 循环执行体是空的，那么可以不写&#123;&#125;`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、编辑函数，封装-children功能，解决以前部分浏览器的兼容问题\"><a href=\"#四、编辑函数，封装-children功能，解决以前部分浏览器的兼容问题\" class=\"headerlink\" title=\"四、编辑函数，封装 children功能，解决以前部分浏览器的兼容问题\"></a>四、编辑函数，封装 children功能，解决以前部分浏览器的兼容问题</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\">      abc</span><br><span class=\"line\">      &lt;!-- <span class=\"built_in\">this</span> is comment --&gt;</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">Element.prototype.myChildren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> child = <span class=\"built_in\">this</span>.childNodes;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> len = child.length;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> arr = [];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len;i ++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">if</span>(child[i].nodeType == <span class=\"number\">1</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            arr.push(child[i]);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> arr;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自己封装-hasChildren-方法，不可以用children属性\"><a href=\"#五、自己封装-hasChildren-方法，不可以用children属性\" class=\"headerlink\" title=\"五、自己封装 hasChildren()方法，不可以用children属性\"></a>五、自己封装 hasChildren()方法，不可以用children属性</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;i&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    Element.prototype.myHasChildNodes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> child = <span class=\"built_in\">this</span>.childNodes;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = child.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(child[i].nodeType == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DOM-基本操作-增-插-删-替④\"><a href=\"#DOM-基本操作-增-插-删-替④\" class=\"headerlink\" title=\"DOM 基本操作 - 增|插|删|替④\"></a>DOM 基本操作 - 增|插|删|替④</h1><h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><h3 id=\"document-createElement-—-增加或创建元素节点（标签）-–-常用\"><a href=\"#document-createElement-—-增加或创建元素节点（标签）-–-常用\" class=\"headerlink\" title=\"document.createElement(); — 增加或创建元素节点（标签） – 常用\"></a>document.createElement(); — 增加或创建元素节点（标签） – 常用</h3><h3 id=\"document-createTextNode-—-创建文本节点\"><a href=\"#document-createTextNode-—-创建文本节点\" class=\"headerlink\" title=\"document.createTextNode(); — 创建文本节点\"></a>document.createTextNode(); — 创建文本节点</h3><h3 id=\"document-createComment-—-创建注释节点\"><a href=\"#document-createComment-—-创建注释节点\" class=\"headerlink\" title=\"document.createComment(); — 创建注释节点\"></a>document.createComment(); — 创建注释节点</h3><h3 id=\"document-createDocumentFragment-—-创建文档碎片节点\"><a href=\"#document-createDocumentFragment-—-创建文档碎片节点\" class=\"headerlink\" title=\"document.createDocumentFragment(); — 创建文档碎片节点\"></a>document.createDocumentFragment(); — 创建文档碎片节点</h3><h2 id=\"插-—-剪切操作\"><a href=\"#插-—-剪切操作\" class=\"headerlink\" title=\"插 — 剪切操作\"></a>插 — 剪切操作</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">.appendChild()可以理解为.push</span><br><span class=\"line\"></span><br><span class=\"line\">insertBefore(a,b)一定是先insert a，before b，就是拿 a 插入到 b 的前面</span><br><span class=\"line\"></span><br><span class=\"line\">insertAfter(a,b)就是拿 a 插入到 b 的后面</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"appendChild\"><a href=\"#appendChild\" class=\"headerlink\" title=\"appendChild()\"></a>appendChild()</h3><p><code>.appendChild()</code>可以理解为<code>.push</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：把 span 插入到 div 里面</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.appendChild(span);  <span class=\"comment\">// -- 把 span 插入到 div 里面</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">把目标节点内部的节点上顺序逆序</span><br><span class=\"line\">    Element.prototype.invertedChild = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> child = <span class=\"built_in\">this</span>.children,</span><br><span class=\"line\">            len = child.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = len - <span class=\"number\">2</span>;i &gt;= <span class=\"number\">0</span>;i --)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.appendChild(child[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    div.invertedChild();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"insertBefore-a-b\"><a href=\"#insertBefore-a-b\" class=\"headerlink\" title=\"insertBefore(a,b)\"></a>insertBefore(a,b)</h3><p><code>insertBefore(a,b)</code>一定是先<code>insert a，before b</code>，就是拿 a 插入到 b 的前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：把 strong 插入到 span 的前面</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;strong&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.insertBefore(strong,span);  <span class=\"comment\">// -- 把 strong 插入到 span 前面</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"insertAfter-a-b\"><a href=\"#insertAfter-a-b\" class=\"headerlink\" title=\"insertAfter(a,b)\"></a>insertAfter(a,b)</h3><p><code>insertAfter(a,b)</code>一定是先<code>insert a，before b</code>，就是拿 a 插到 b 的后面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`insertAfter 系统没有定义，所以是自己利用 insertBefore 来写的一个相反的方法`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    Element.prototype.insertAfter(targetNode,afterNode)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> beforeNode = afterNode.nextElementSibling;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">if</span>(beforeNode == <span class=\"literal\">null</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">this</span>.appendChild(targetNode);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">this</span>.insertBefore(targetNode,beforeNode);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;b&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><h3 id=\"removeChild\"><a href=\"#removeChild\" class=\"headerlink\" title=\"removeChild()\"></a>removeChild()</h3><p>就是被剪切出来了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;strong&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">document</span>.create(<span class=\"string\">&#x27;i&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.insertBefore(strong,span);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.insertBefore(i,strong);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.removeChild(i);</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  var ii = div.removeChild(i);</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  ii</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove()\"></a>remove()</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;strong&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">document</span>.create(<span class=\"string\">&#x27;i&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.insertBefore(strong,span);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.insertBefore(i,strong);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  i.remove()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  strong.remove();</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  span.remove()</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><h3 id=\"replaceChild-new-origin\"><a href=\"#replaceChild-new-origin\" class=\"headerlink\" title=\"replaceChild(new,origin)\"></a>replaceChild(new,origin)</h3><p><code>replaceChild(new,origin); 用新的 new 去置换旧的 origin</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;span&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> strong = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;strong&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">document</span>.create(<span class=\"string\">&#x27;i&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.insertBefore(strong,span);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.insertBefore(i,strong);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;i&gt;&lt;/i&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;span&gt;&lt;/span&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &lt;/div&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.replaceChild(p,strong)</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;div&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;i&gt;&lt;/i&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;p&gt;&lt;/p&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//       &lt;span&gt;&lt;/span&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DOM-基础操作-Element节点的方法-属性⑤\"><a href=\"#DOM-基础操作-Element节点的方法-属性⑤\" class=\"headerlink\" title=\"DOM 基础操作 - Element节点的方法|属性⑤\"></a>DOM 基础操作 - Element节点的方法|属性⑤</h1><h2 id=\"Element-节点的一些属性\"><a href=\"#Element-节点的一些属性\" class=\"headerlink\" title=\"Element 节点的一些属性\"></a>Element 节点的一些属性</h2><h3 id=\"innerHTML-innerText\"><a href=\"#innerHTML-innerText\" class=\"headerlink\" title=\"innerHTML \\ innerText\"></a>innerHTML \\ innerText</h3><p><code>innerHTML</code>  –&gt; 给 HTML文档赋值  –  可取，可写，可赋值，赋值之后覆盖原来的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">取：</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>234<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.innerHTML</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//         &lt;span&gt;123&lt;/span&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//         &lt;strong&gt;234&lt;/strong&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">写：</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>234<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.innerHTML = &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;123&#x27; -- 覆盖</span></span><br></pre></td></tr></table></figure>\n\n<p><code>innerText</code>  –&gt; 给HTML文档添加文本  –  可取，可赋值（老版本火狐不兼容）/ textContent（火狐使用这个，老版本 IE 不好使）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>234<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;div&gt;&lt;span&gt;234&lt;/span&lt;/div&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.innerText = 123</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;div&gt;123&lt;/div&gt;  --  赋值要谨慎，因为赋值会把原来的文本覆盖</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Element-节点的一些方法\"><a href=\"#Element-节点的一些方法\" class=\"headerlink\" title=\"Element 节点的一些方法\"></a>Element 节点的一些方法</h2><h3 id=\"setAttribute-getAttribute\"><a href=\"#setAttribute-getAttribute\" class=\"headerlink\" title=\"setAttribute \\ getAttribute\"></a>setAttribute \\ getAttribute</h3><p><code>setAttribute</code> 设置，往元素里面写值（class，id）等等,比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">demo.setAttribute(<span class=\"string\">&#x27;属性名&#x27;</span>,<span class=\"string\">&#x27;属性值&#x27;</span>); <span class=\"comment\">// 我们可以自己添加属性和属性值</span></span><br></pre></td></tr></table></figure>\n\n<p><code>getAttribute</code> 取元素的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>234<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.setAttribute(&#x27;class&#x27;,&#x27;demo&#x27;);  --  添加 类.class</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;div class=&#x27;demo&#x27;&gt;…&lt;/div&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.setAttribute(&#x27;id&#x27;,&#x27;only&#x27;);  --  添加 id</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &lt;div class=&#x27;demo&#x27; id=&#x27;only&#x27;&gt;…&lt;/div&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.getAttribute(&#x27;id&#x27;,&#x27;only&#x27;);  --  取 id 值</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;  div.getAttribute(&#x27;id&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;· &#x27;only&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">通过 div.setAttribute(<span class=\"string\">&#x27;id&#x27;</span>,<span class=\"string\">&#x27;only&#x27;</span>)动态的去改div的值</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-id\">#only</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">color</span>:fff;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">background-color</span>: orange;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>234<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.setAttribute(<span class=\"string\">&#x27;id&#x27;</span>,<span class=\"string\">&#x27;only&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"data-log\"><a href=\"#data-log\" class=\"headerlink\" title=\"data-log\"></a>data-log</h3><p>当满足一定条件时，if就可以动态操作了，配合事件连成整体操作 这个行间属性可以设置系统没有的。<code>data-log</code>是打点，点击率，这是人工设置的行间 属性，不是系统定义的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">如何去取这个 data-log？</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#x27;#&#x27;</span> <span class=\"attr\">data-log</span>=<span class=\"string\">&#x27;0&#x27;</span>&gt;</span>hehe<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;a&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        a.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.getAttribute(<span class=\"string\">&#x27;data-log&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">给三个标签，让他们行间有一个属性 <span class=\"built_in\">this</span>-name，比如第一个 div，第二个span</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> all = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;*&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; all.length; i++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            all[i]setAttribute(<span class=\"string\">&#x27;this-item&#x27;</span>,all[i].nodeName);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日期对象-Date-—-就是一种对象，是系统提供好的\"><a href=\"#日期对象-Date-—-就是一种对象，是系统提供好的\" class=\"headerlink\" title=\"日期对象 Date()   —   就是一种对象，是系统提供好的\"></a>日期对象 Date()   —   就是一种对象，是系统提供好的</h1><p><code>var date = new Date()</code>大写的<code>Date</code>是系统提供的一个构造函数，通过<code>new Date</code>的方法会给我们返回一个对象，这个对象就是一个日期对象。日期对象有很多属性和方法。小的<code>date</code>代表此时此刻的时间。用小的<code>date</code>调用方法，如<code>date.getDate()</code></p>\n<h2 id=\"Date-对象属性（不够标准）\"><a href=\"#Date-对象属性（不够标准）\" class=\"headerlink\" title=\"Date 对象属性（不够标准）\"></a>Date 对象属性（不够标准）</h2><ul>\n<li><p>属性           : 描述</p>\n</li>\n<li><p><code>constructor    : 返回对创建对象的 </code>Date`函数的引用。原型上的属性</p>\n</li>\n<li><p><code>prototype      : 使您有能力向对象添加属性和方法。</code>prototype`是构造函数的属性</p>\n</li>\n</ul>\n<h2 id=\"Date-对象方法\"><a href=\"#Date-对象方法\" class=\"headerlink\" title=\"Date 对象方法\"></a>Date 对象方法</h2><ul>\n<li><p>`方法                 ：描述</p>\n</li>\n<li><p><code>Date()</code>———：返回当日的日期和时间</p>\n</li>\n<li><p><code>getDate()</code>———：制作出对象，从 <code>Date</code> 对象返回一个月中的某一天<code>（1 ~ 31）</code></p>\n</li>\n<li><p><code>getDay()</code>——：今天是一周的第几天，如果是 2 是星期二，但是是指第三天（第一天是周日，也就是 0）。从 <code>Date</code> 对象返回一周中的某一天（1 ~ 6）</p>\n</li>\n<li><p><code>getMonth()</code>——：一月份返回值是 0，从 <code>Date</code> 对象返回月份（0 ~ 11）</p>\n</li>\n<li><p><code>getFullYear()</code>——：从 <code>Date</code> 对象以四位数字返回年份</p>\n</li>\n<li><p><code>getYear()</code>——：已废弃。请使用 getFullYear()` 方法代替</p>\n</li>\n<li><p><code>getHours()</code>——：返回 <code>Date</code> 对象的小时（0 ~ 23）</p>\n</li>\n<li><p><code>getMinutes()</code>——：返回 <code>Date</code> 对象的分钟（0 ~ 59）</p>\n</li>\n<li><p><code>getSeconds()</code>——：返回 <code>Date</code> 对象的秒钟（0 ~ 59）</p>\n</li>\n<li><p><code>getMilliseconds()</code>——：返回 <code>Date</code> 对象的毫秒（0 ~ 999）</p>\n</li>\n<li><p><code>getTime()</code>——：返回 1970 年 1 月 1 日（纪元时刻）至今的毫秒数。经常用于项目的计算时间。获取<code>时间戳</code></p>\n</li>\n<li><p><code>setDate()</code>——：设置 <code>Date</code> 对象中月的某一天（1 ~ 31）</p>\n</li>\n<li><p><code>setMonth()</code>——：设置 <code>Date</code> 对象中月份（0 ~ 11）</p>\n</li>\n<li><p><code>setFullYear()</code>——：设置 <code>Date</code> 对象中的年份（四位数字）</p>\n</li>\n<li><p><code>setYear()</code>——：已废弃，请使用 setFullYea()方法代替</p>\n</li>\n<li><p><code>setHours()</code>——：设置 <code>Date</code> 对象中的小时（0 ~ 23）</p>\n</li>\n<li><p><code>setMinutes()</code>——：设置 <code>Date</code> 对象中的分钟（0 ~ 59）</p>\n</li>\n<li><p><code>setSeconds()</code>——：设置 <code>Date</code> 对象中的秒钟（0 ~ 59）</p>\n</li>\n<li><p><code>setMilliseconds()</code>——：设置 <code>Date</code> 对象中的毫秒（0 ~ 999）</p>\n</li>\n<li><p><code>setTime()</code>———：以毫秒设置 <code>Date</code> 对象。机械之间交换时间</p>\n</li>\n<li><p><code>toSource()</code>——：返回该对象的源代码</p>\n</li>\n<li><p><code>toString()</code>——：把 <code>Date</code> 对象转换为字符串</p>\n</li>\n<li><p><code>toTimeString()</code>——：把 <code>Date</code> 对象的时间部分转换为字符串</p>\n</li>\n<li><p><code>to</code>Date<code>String()</code>——：把 <code>Date</code> 对象的日期部分转换为字符换</p>\n</li>\n</ul>\n<p><code>getUTC</code> 一类，<code>parse()</code> 的没用，不放表格里面，可以在 w3school date 中查看全部</p>\n<p>在控制台调用 <code>date.getSeconds</code> 就是 <code>date</code> 创建时间的毫秒数，是静止的，不是动态的。这个 <code>date</code> 对象记录的是出生的那一刻的时间，不是实时的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：利用 getTime() 计算程序计算的毫秒数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">1000000</span>;i ++)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lastTime - firstTime);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：setDate()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  date.setDate(<span class=\"number\">26</span>)</span><br><span class=\"line\">&lt;· <span class=\"number\">1580021359911</span></span><br><span class=\"line\">&gt;  date</span><br><span class=\"line\">&lt;· Sun Jan <span class=\"number\">26</span> <span class=\"number\">2020</span> <span class=\"number\">14</span>:<span class=\"number\">49</span>:<span class=\"number\">19</span> GMT+<span class=\"number\">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：循环执行用 <span class=\"built_in\">setInterval</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">date.setMinutes(<span class=\"number\">54</span>);</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>.getTime() - date.getTime() &gt; <span class=\"number\">1000</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;什么什么什么！！！&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：setTime()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  date.setTime(<span class=\"number\">12345678900</span>)</span><br><span class=\"line\">&lt;· <span class=\"number\">12345678900</span></span><br><span class=\"line\">&gt;  date</span><br><span class=\"line\">&lt;· Sun May <span class=\"number\">24</span> <span class=\"number\">1970</span> <span class=\"number\">05</span>:<span class=\"number\">21</span>:<span class=\"number\">18</span> GMT+<span class=\"number\">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：toString() 和 toTimeString() 和 toDateString()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  date.toString</span><br><span class=\"line\">&lt;· <span class=\"string\">&quot;Sun May 24 1970 05:21:18 GMT+0800 (中国标准时间)&quot;</span></span><br><span class=\"line\">&gt;  date.toTimeString()</span><br><span class=\"line\">&lt;· <span class=\"string\">&quot;05:21:18 GMT+0800 (中国标准时间)&quot;</span></span><br><span class=\"line\">&gt;  date.toDateString()</span><br><span class=\"line\">&lt;· <span class=\"string\">&quot;Sun May 24 1970&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>作业：封装函数，打印当前是何年何月何日何时，几分几秒</p>\n<h2 id=\"js-定时器\"><a href=\"#js-定时器\" class=\"headerlink\" title=\"js 定时器\"></a>js 定时器</h2><h3 id=\"一、setInterval-—-定时循环器\"><a href=\"#一、setInterval-—-定时循环器\" class=\"headerlink\" title=\"一、setInterval() —- 定时循环器\"></a>一、setInterval() —- 定时循环器</h3><p><code>注意：setInterval(&quot;func()&quot;,1000);定时循环器</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：<span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">1000</span>);定时器，意思是 <span class=\"number\">1000</span> 毫秒执行一次这个函数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;,time)</span><br><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"number\">2000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`time = 2000 不能改变函数里面的时间，只能执行写在 time 的时间数`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`如果先定义 1000 毫秒，在后面改成 2000 毫秒，程序仍按 1000 毫秒执行，因为他只识别一次，不能通过改变 time 改变 setInterval 的快慢 `</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：查数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    i ++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：判断定时器准确不准确？</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(lastTime - firstTime);</span><br><span class=\"line\">    firstTime = lastTime;</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`setInterval() 计算时间非常不准确`</span></span><br><span class=\"line\"></span><br><span class=\"line\">注意：<span class=\"string\">`setInterval(); 是 window 的方法，在全局上就算不写 window.setInterval(); 他也会上全局的 GO 里面查找，所以不写 window 也行`</span></span><br><span class=\"line\"></span><br><span class=\"line\">·每一个 <span class=\"built_in\">setInterval</span>(); 都会返回一个一个数字，作为唯一的标识，有唯一标识就可以把他清除掉（利用 <span class=\"built_in\">clearInterval</span>() 清除）<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：每一个 <span class=\"built_in\">setInterval</span> 都有着返回值，timer 是逐一罗列放下排序</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer2 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 console.log 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  timer</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 1</span></span><br><span class=\"line\"><span class=\"comment\">// &gt;  timer2</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;· 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、clearInterval-—-停止定时循环器（setInterval-）\"><a href=\"#二、clearInterval-—-停止定时循环器（setInterval-）\" class=\"headerlink\" title=\"二、clearInterval() —- 停止定时循环器（setInterval()）\"></a>二、clearInterval() —- 停止定时循环器（setInterval()）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：一般写了 <span class=\"built_in\">setInterval</span>() 就要写 <span class=\"built_in\">clearInterval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// clearInterval();</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i ++);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、setTimeout-—-真正的定时器-隔了一段时间后再执行（起推迟作用），并且-只执行一次\"><a href=\"#三、setTimeout-—-真正的定时器-隔了一段时间后再执行（起推迟作用），并且-只执行一次\" class=\"headerlink\" title=\"三、setTimeout() —- 真正的定时器,隔了一段时间后再执行（起推迟作用），并且 只执行一次\"></a>三、setTimeout() —- 真正的定时器,隔了一段时间后再执行（起推迟作用），并且 只执行一次</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：隔了 <span class=\"number\">1000</span> 毫秒才执行，并且只执行一次</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`常应用于电影试看 5 分钟`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、clearTimeout-—-清除-setTimeout-让他停止执行\"><a href=\"#四、clearTimeout-—-清除-setTimeout-让他停止执行\" class=\"headerlink\" title=\"四、clearTimeout() —- 清除 setTimeout(); 让他停止执行\"></a>四、clearTimeout() —- 清除 setTimeout(); 让他停止执行</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：这种写法，<span class=\"built_in\">setTimeout</span>();还没执行就被清除了，就执行不了了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timer);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：这个 timer = <span class=\"built_in\">setTimeout</span>();返回的唯一标识和 <span class=\"built_in\">setInterval</span> 返回的唯一标识是不会重叠的，他们两个是依次的</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer2 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 console 输出</span></span><br><span class=\"line\">&gt;  timer</span><br><span class=\"line\">&lt;· <span class=\"number\">1</span></span><br><span class=\"line\">&gt;  timer2</span><br><span class=\"line\">&lt;· <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><code>setInterval(); setTimeout(); clearInterval(); clearTimeout();</code>这四个都是全局对象，都是<code>window</code>上的方法，内部函数<code>function</code>里面的<code>this</code>指向 <code>window</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：<span class=\"built_in\">setInterval</span>(<span class=\"string\">&quot;function()&quot;</span>,<span class=\"number\">1000</span>) 和 <span class=\"built_in\">setTimeout</span>(); 都有另一种形式展现，里面可以写成字符串，例如<span class=\"string\">&quot;console.log(&#x27;a&#x27;);&quot;</span>。但是一般用 <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,<span class=\"number\">1000</span>);  ---  标准形式</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"string\">&quot;console.log(&#x27;a&#x27;);&quot;</span>,<span class=\"number\">1000</span>);  ---  特殊形式，一般不这样写，意思是 <span class=\"number\">1000</span> 毫秒执行一次<span class=\"built_in\">console</span>.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计时器作业\"><a href=\"#计时器作业\" class=\"headerlink\" title=\"计时器作业\"></a>计时器作业</h3><p><code>计时器，到三分钟停止</code></p>\n<p><code>定时器要计数，计完数以后要填到结构里面，下面的起的两个变量 minutes 和 seconds 用于计数，计完数以后要填到 dom 结构里面（元素标签最正确的说法是 dom结构， 因为他可以被 dom操作）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">input&#123;</span><br><span class=\"line\">    <span class=\"attr\">border</span>: 1px solid black;</span><br><span class=\"line\">    text-align: right;</span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">minutes</span>:&lt;input type=&quot;text&quot; value=&#x27;0&#x27;&gt;</span><br><span class=\"line\">seconds:&lt;input type=&#x27;text&#x27; value=&#x27;0&#x27;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var minutesNode = document.getElementsTagName = (&#x27;input&#x27;)[0];</span><br><span class=\"line\">var secondsNode = document.getElementsTagName = (&#x27;input&#x27;)[1];</span><br><span class=\"line\"></span><br><span class=\"line\">var minutes = 0,</span><br><span class=\"line\">    seconds = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">var timer = seInterval(function()&#123;</span><br><span class=\"line\">    var seconds = 0;</span><br><span class=\"line\">    if(seconds == 60)&#123;</span><br><span class=\"line\">        minutes ++;</span><br><span class=\"line\">        seconds = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    minutesNode.value = minutes;</span><br><span class=\"line\">    secondsNode.value = seconds;</span><br><span class=\"line\">    if(minutes = 3)&#123;</span><br><span class=\"line\">        clearInterval(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,10)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DOM-BOM-基本操作\"><a href=\"#DOM-BOM-基本操作\" class=\"headerlink\" title=\"DOM / BOM 基本操作\"></a>DOM / BOM 基本操作</h1><h2 id=\"一、查看滚动条的滚动距离\"><a href=\"#一、查看滚动条的滚动距离\" class=\"headerlink\" title=\"一、查看滚动条的滚动距离\"></a>一、查看滚动条的滚动距离</h2><ol>\n<li><p><strong><code>window.pageXOffset</code>（横向）/ <code>pageYOffset</code>（纵向）</strong></p>\n<p> IE8及IE8以下不兼容（IE9部分不兼容）IE9以上能用</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：滚动条往下滚动了 400px，求浏览器最顶端到滚动条滚动的位置的像素</span><br><span class=\"line\"></span><br><span class=\"line\">答：400px + 首屏像素（此时这个屏幕的底端距离整个网页的最顶端也是这样算的）</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>IE8及IE8以下的使用兼容方法</strong></p>\n<p> 1)<code>document.body.scrollLeft / scrollTop</code> —- document.body.横向 / 纵向</p>\n<p> 2)<code>document.documentElement.scrollLeft / scrollTop</code> —- document.documentEle2ment.横向 / 纵向</p>\n<p> <code>上面两个兼容性比较混乱，其中一个有值，另外一个的值一定是 0，这两个最好的用法是取两个值相加，因为不可能存在两个同时有值</code></p>\n<p> <code>例如：document.body.scrollLeft + document.documentElementscrollLeft</code></p>\n</li>\n<li><p><strong>封装兼容方法（那个浏览器都好用），求滚动轮滚动距离 getScrollOffset()</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScrollOffset</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.pageXOffset)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">x</span> : <span class=\"built_in\">window</span>.pageXOffset,</span><br><span class=\"line\">            <span class=\"attr\">y</span> : <span class=\"built_in\">window</span>.pageYOffset</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">x</span> : <span class=\"built_in\">document</span>.body.scrollLeft + <span class=\"built_in\">document</span>.documentElement.scrollLeft,</span><br><span class=\"line\">            <span class=\"attr\">y</span> : <span class=\"built_in\">document</span>.bodu.scrollTop + <span class=\"built_in\">document</span>.documentElement.scrollTop</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"二、查看视口的尺寸\"><a href=\"#二、查看视口的尺寸\" class=\"headerlink\" title=\"二、查看视口的尺寸\"></a>二、查看视口的尺寸</h2><p><code>可视区窗口就是编写的 html 文档可以看到的部分，不含菜单栏、地址栏、控制台</code></p>\n<p>注意渲染模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 渲染模式 : &lt;! DOCTYPE html&gt; 是 html5 的（在 emmet 插件下 html:<span class=\"number\">5</span> 就出来了）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 怪异/混杂模式 : 试图去兼容之前的语法，去掉&lt;!DOCTYPE html&gt;这一行即可开启（向后兼容）</span><br><span class=\"line\"></span><br><span class=\"line\">例：<span class=\"built_in\">document</span>.compatMode是判断是怪异模式还是标准模式</span><br><span class=\"line\"></span><br><span class=\"line\">    CSS1Compat -- 标准模式</span><br><span class=\"line\"></span><br><span class=\"line\">    BackCompat -- 怪异模式向后兼容</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong><code>window.innerWidth</code> / <code>innerHeight</code> 可视区域的宽高（加上 滚动条的宽度 / 高度）</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">IE8 及 IE8 以下不兼容</span><br><span class=\"line\"></span><br><span class=\"line\">如果窗口放大页面了，页面的尺寸也会拉伸了，尺寸就会变小</span><br></pre></td></tr></table></figure></li>\n<li><p><strong><code>document.documentElement.clientWidth</code> / <code>clientHeight</code></strong></p>\n<p><code>标准模式下，任意浏览器都兼容</code></p>\n</li>\n<li><p><strong><code>document.body.clientWidth</code> / <code>clientHeight</code></strong></p>\n<p> <code>适用于怪异渲染模式的浏览器</code></p>\n</li>\n<li><p><strong>封装兼容性方法，返回浏览器视口尺寸 <code>getViewportOffset()</code></strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`例：document.compatMode`</span>是判断是怪异模式还是标准模式</span><br><span class=\"line\"></span><br><span class=\"line\">CSS1Compat -- 标准模式</span><br><span class=\"line\"></span><br><span class=\"line\">BackCompat -- 怪异模式向后兼容</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getViewportOffset</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.innerWidth)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">w</span> : <span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">            <span class=\"attr\">h</span> : <span class=\"built_in\">window</span>.innerHeight</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">&#x27;CSS1Compat&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">w</span> : <span class=\"built_in\">document</span>.documentElement.clienWidth,</span><br><span class=\"line\">                <span class=\"attr\">h</span> : <span class=\"built_in\">document</span>.documentElement.clienHeight</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">w</span> : <span class=\"built_in\">document</span>.body.clienWidth,</span><br><span class=\"line\">                <span class=\"attr\">h</span> : <span class=\"built_in\">document</span>.body.clienHeight</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"三、查看元素的几何尺寸\"><a href=\"#三、查看元素的几何尺寸\" class=\"headerlink\" title=\"三、查看元素的几何尺寸\"></a>三、查看元素的几何尺寸</h2><ol>\n<li><p><strong>domEle.getBoundingClientRect() – 查看元素的几何尺寸</strong></p>\n<ol>\n<li><p><code>domEle.getBoundingClientRect()</code> 这是 es5.0 的方法，但只用了解</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">    &gt;  div.getBoundingClientRect();</span><br><span class=\"line\">    &lt;· ClientRect</span><br><span class=\"line\">        <span class=\"attr\">bottom</span> : <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"attr\">height</span> : <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">left</span> : <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">right</span> : <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"attr\">top</span> : <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">widht</span> : <span class=\"number\">100</span></span><br><span class=\"line\">        &gt; __proto__ : ClientRect</span><br></pre></td></tr></table></figure>\n\n<p> <code>求的是四个边和窗口之间的像素距离，right 是右边离 document 的边有 200px，也可以理解成求的是左上点和右下点的位置</code></p>\n</li>\n<li><p>兼容性很好</p>\n</li>\n<li><p>该方法返回一个对象，对象里面有<code>left,top,right,bottom</code>等属性。<code>left</code>和<code>top</code>代表该元素左上角的<code>X</code>和<code>Y</code>坐标，<code>right</code>和<code>bottom</code>代表元素右下角的<code>X</code>和<code>Y</code>坐标</p>\n</li>\n<li><p><code>height</code> 和 <code>width</code> 属性老版本<code>IE</code>并未实现</p>\n</li>\n<li><p>在老版本的IE里面，利用右侧边<code>right</code>减左侧面<code>left</code>解决</p>\n</li>\n<li><p>返回的结果并不是实时的</p>\n</li>\n</ol>\n</li>\n<li><p><strong>dom.offsetWidth , dom.offsetHeight – 查看元素的宽/高</strong></p>\n<ol>\n<li><p><code>dom.offsetWidth</code> 元素的宽</p>\n</li>\n<li><p><code>dom.offsetHeight</code> 元素的高</p>\n</li>\n</ol>\n<p><code>求的值是包括 padding 的</code></p>\n<p><code>dom.offsetWidth</code>和<code>domEle.getBoundingClientRect()</code>出现的值是一样的，求的值是一样的，求的值都是<code>padding + content</code>（视觉尺寸），可以被代替。</p>\n</li>\n</ol>\n<h2 id=\"四、查看元素的位置\"><a href=\"#四、查看元素的位置\" class=\"headerlink\" title=\"四、查看元素的位置\"></a>四、查看元素的位置</h2><ol>\n<li><p><strong>dom.offsetLeft，dom.offsetTop – 查看元素的 x , y 轴位置</strong></p>\n<ol>\n<li><p><code>dom.offsetLeft</code> 元素的 x 轴位置</p>\n</li>\n<li><p><code>dom.offsetTop</code> 元素的 y 轴位置</p>\n</li>\n</ol>\n<p><code>对于无定位父级的元素，返回的是相对于文档的坐标</code></p>\n<p><code>对于有定位父级的元素，返回相对于最近的有定位的父级的坐标（无论是 left 还是 margin-left 等都是距离）</code></p>\n</li>\n<li><p><strong>dom.offsetParent – 返回最近的有定位的父级</strong></p>\n<p> <code>返回最近的有定位的父级，如无，返回body，body.offsetParent 返回 null</code></p>\n<p> 这个方法能求有定位的父级</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：求元素相对于文档的坐标，以<span class=\"string\">`getElementPosition()`</span>命名</span><br><span class=\"line\"></span><br><span class=\"line\">思路：先看有没有有定位的父级，如果有，先求他与有定位父级的距离，然后把视角换到他有定位的父级上，这他这个有定位的父级上还有没有有定位的父级，一段一段的加，一直加到最后，是一个循环递归的过程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求元素相对于文档的坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementPosition</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!elem || !elem.offsetLeft)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> actualLeft = elem.offsetLeft,</span><br><span class=\"line\">        actualTop = elem.offsetTop,</span><br><span class=\"line\">        current = elem.offsetParent; <span class=\"comment\">// 取得元素的 offsetParent</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        actualLeft += current.offsetLeft;</span><br><span class=\"line\">        actualTOp += current.offestTop;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">left</span> : actualLeft,</span><br><span class=\"line\">        <span class=\"attr\">top</span> : actualTop</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相对于父级的位置坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementPosition</span>(<span class=\"params\">ele</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ele.offsetParent.nodeName = <span class=\"string\">&#x27;BODY&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">left</span> : ele.offsetLeft,</span><br><span class=\"line\">            <span class=\"attr\">top</span> : ele.offsetTop</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">left</span> : ele.offsetLeft + getElementPosition(ele.offsetParent).left,</span><br><span class=\"line\">            <span class=\"attr\">top</span> : ele.offsetTop + getElementPosition(ele.offsetParent).top</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"让滚动条滚动\"><a href=\"#让滚动条滚动\" class=\"headerlink\" title=\"让滚动条滚动\"></a>让滚动条滚动</h2><ol>\n<li><p><strong>window 上有三个方法 scroll(),scrollTo(),两个功能一样，scrollBy();累加滚动距离</strong></p>\n<p> <code>window.scroll(x,y),scrollTo(x,y)</code>功能是一样的，里面能填两个参数</p>\n<p> <code>window.sroll</code>(x 轴滚动的距离，y 轴滚动的距离)，里面的 xy 可以填负数</p>\n<p> <code>window.scrollBy(x,y)</code>是累加滚动距离，填负数就往上滚动</p>\n</li>\n<li><p><strong>三个方法功能类似，用法都是将 <code>x,y</code> 坐标传入。即实现让滚动轮滚动到当前的位置</strong></p>\n</li>\n<li><p><strong>区别 : <code>scrollBy()</code> 会在之前的数据基础之上做累加</strong></p>\n<p> eg : <code>可以利用scrollBy()做快速阅读的功能</code></p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\">start = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">stop = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> key = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">start.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key)&#123;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.scrollBy(<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">100</span>)</span><br><span class=\"line\">        key = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stop.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    clearsetInterval(timer);</span><br><span class=\"line\">    key = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"脚本化-CSS\"><a href=\"#脚本化-CSS\" class=\"headerlink\" title=\"脚本化 CSS\"></a>脚本化 CSS</h1><p><code>dom</code>不能操作<code>css</code>,是间接操作<code>css</code>,这一部分需要记下</p>\n<h2 id=\"一、读写元素-css-属性（间接控制）-–-dom-style-prop\"><a href=\"#一、读写元素-css-属性（间接控制）-–-dom-style-prop\" class=\"headerlink\" title=\"一、读写元素 css 属性（间接控制） – dom.style.prop\"></a>一、读写元素 css 属性（间接控制） – dom.style.prop</h2><p><strong>dom.style.prop;</strong></p>\n<p><code>只有这个是可读可写的，其他属性都是只能读</code></p>\n<p>1）<strong>可读写行间样式，没有兼容性问题，碰到<code>float</code>这样的关键字属性，前面应该加<code>css</code>（行间样式意外没有用）</strong></p>\n<p><strong>eg:flaot  ————&gt;  cssFloat</strong>,因为<code>float</code>属性在<code>js</code>里面是<code>保留字</code>，所以一般如果想要用<code>float</code>的话就用<code>cssFloat</code></p>\n<p>2）<strong>复合属性必须拆解（建议），组合单词变成小驼峰写法</strong></p>\n<p>3）<strong>写入的值必须是字符串格式</strong></p>\n<p>4）<strong>dom.style.prop 只能操作 css 行间样式</strong></p>\n<p>5）<strong>dom.style 属性。能拿，能写（通过写间接改变了 css 属性）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">    &gt;  div.style</span><br><span class=\"line\">    &lt;· CSSStyleDeclaration &#123;<span class=\"attr\">alignContent</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"attr\">alignItems</span>: <span class=\"string\">&quot;&quot;</span>,<span class=\"attr\">alignSelf</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"attr\">alignmentBaseline</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"attr\">all</span>: <span class=\"string\">&quot;&quot;</span>, …&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">`CSSstyleDeclaration`</span>是<span class=\"string\">`css`</span>样式表声明（类数组，有索引类的属性），把你能够用的所有的<span class=\"string\">`css`</span>都展示出来，里面不填写就是没有值是空串。</span><br><span class=\"line\"></span><br><span class=\"line\">    可以用<span class=\"string\">`div.style[&#x27;width&#x27;]`</span>拿出属性，也可以用<span class=\"string\">`div.style.width`</span>,效果一样。</span><br><span class=\"line\"></span><br><span class=\"line\">    在<span class=\"string\">`js`</span>访问属性的时候没有<span class=\"string\">`-杠`</span>的形式，不能写<span class=\"string\">`background-color`</span>，要写小驼峰。</span><br><span class=\"line\"></span><br><span class=\"line\">    不在<span class=\"string\">`html`</span>文件里面写的值也可以利用js调用，如<span class=\"string\">`div.style.borderRadius=&quot;50&quot;`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、查询计算样式-–-window-getComputedStyle-ele-null\"><a href=\"#二、查询计算样式-–-window-getComputedStyle-ele-null\" class=\"headerlink\" title=\"二、查询计算样式 – window.getComputedStyle(ele,null)\"></a>二、查询计算样式 – window.getComputedStyle(ele,null)</h2><p><strong>window.getComputedStyle(ele,null);</strong></p>\n<p><strong>可以选取伪元素，并获取:</strong><code>window.getComputedStyle(ele,null);括号里面要填两个东西，第一个ele是填的你要获取谁，第二个先填写null（null解决的就是伪元素的问题，它可以填写伪元素，填null只是用于平常元素，在null的地方写入伪元素，就可以选择获取伪元素，用它可以获取伪元素的样式表）</code></p>\n<p>1）<strong>window.getComputedStyle(ele,null);</strong>  <code>原生底层方法，展示权重最高的</code></p>\n<p>2）<strong>计算样式只读，不可以写入</strong></p>\n<p>3）<strong>返回的样式都是经过计算的，并且都是绝对值，没有相对单位，相对值会转换成绝对值显示</strong></p>\n<p>4）**<em>IE8及IE8以下不兼容</em>**</p>\n<p>5）<strong>dom.style.prop 是取行间样式的值，取一个元素显示样式的值，window.getComputedStyle()更准</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">在控制台操作就能有一个 css 样式表（类数组）</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"literal\">null</span>)</span><br><span class=\"line\">&lt;· CSSStyleDeclaration &#123;<span class=\"number\">0</span>: <span class=\"string\">&quot;animation-delay&quot;</span>, <span class=\"number\">1</span>: <span class=\"string\">&quot;animation-direction&quot;</span>,<span class=\"number\">2</span>: <span class=\"string\">&quot;animation-duration&quot;</span>, <span class=\"number\">3</span>: <span class=\"string\">&quot;animation-fill-mode&quot;</span>, <span class=\"number\">4</span>: <span class=\"string\">&quot;animation-iteration-count&quot;</span>, <span class=\"number\">5</span>: <span class=\"string\">&quot;animation-name&quot;</span>, <span class=\"number\">6</span>: <span class=\"string\">&quot;animation-play-state&quot;</span>……</span><br></pre></td></tr></table></figure>\n\n<p><code>window.getComputedStyle 不管填不填值都有值，这里的值都是默认的，这回获取的是这个当前元素所展现出的 css 属性的显示值都是页面中展现的最终效果的值</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        div&#123;</span></span><br><span class=\"line\"><span class=\"xml\">            font-size:10em; // 1em = 16px</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#x27;float:left;height:100px;background-color:red&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从console输出：</span></span><br><span class=\"line\">&gt;  <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"literal\">null</span>).width</span><br><span class=\"line\">&lt;· 160px; <span class=\"comment\">// 10em = 160px</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"literal\">null</span>).backgroundColor</span><br><span class=\"line\">&lt;· <span class=\"string\">&quot;rgb(255,0,0))&quot;</span> <span class=\"comment\">// red = rgb(255,0,0)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>返回的样式都是经过计算的，并且都是绝对值，没有相对单位，相对值会转换成绝对值显示</code></p>\n<h2 id=\"三、查询样式-–-ele-currentStyle\"><a href=\"#三、查询样式-–-ele-currentStyle\" class=\"headerlink\" title=\"三、查询样式 – ele.currentStyle\"></a>三、查询样式 – ele.currentStyle</h2><p><strong>ele.currentStyle;</strong></p>\n<p>1）<strong>ele.currentStyle</strong>  <code>展示权重最高的</code></p>\n<p>2）<strong>计算样式只读，不可以写入</strong></p>\n<p>3）<strong>返回的计算样式的值不是经过转换的值，是原封不动的值</strong></p>\n<p>4）**<em>IE独有的属性，只能用于IE</em>**</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：[<span class=\"string\">&#x27;width&#x27;</span>]写成<span class=\"string\">`.width`</span>也可以，推荐写<span class=\"string\">`点 .`</span></span><br><span class=\"line\"></span><br><span class=\"line\">div.currentStyle[<span class=\"string\">&#x27;width&#x27;</span>] == div.currentStyle.width</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"封装兼容性查询计算css样式方法-getStyle\"><a href=\"#封装兼容性查询计算css样式方法-getStyle\" class=\"headerlink\" title=\"封装兼容性查询计算css样式方法 getStyle()\"></a>封装兼容性查询计算css样式方法 getStyle()</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">elem,prop</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.getComputedStyle)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle(elem,<span class=\"literal\">null</span>)[prop];<span class=\"comment\">// 必须填写中括号</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> elem.currentStyle(prop); <span class=\"comment\">// 必须填写中括号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`function getStyle`</span>(elem,prop)&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// elem 是指获取谁的（dom 元素），prop 是获取的是什么属性</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"详细介绍获取伪元素方法，改变伪元素\"><a href=\"#详细介绍获取伪元素方法，改变伪元素\" class=\"headerlink\" title=\"详细介绍获取伪元素方法，改变伪元素\"></a>详细介绍获取伪元素方法，改变伪元素</h3><p>例：<em>理解 window.getComputedStyle(ele,null);第二个值是 null</em></p>\n<p><strong>获取伪元素的方法</strong>：<code>window.getComputedStyle(ele,null);</code>括号里面要填两个东西，第一 个<code>ele</code>是填的是你要获取谁，第二个先填写<code>null</code>（<code>null</code>解决的就是伪元素的问题，用它可以获取伪元素的样式表）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">background-color</span>:green;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">display</span>:inline-block;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;float:left;height:100px;width:100px;background-color:red&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"string\">&quot;after&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(div,“after”);就获取了伪元素的样式表，在控制台操作</span><br><span class=\"line\">&gt;  <span class=\"built_in\">window</span>.getComputedStyle(div,<span class=\"string\">&#x27;after&#x27;</span>).width</span><br><span class=\"line\">&lt;· <span class=\"string\">&#x27;50px&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>怎么改变伪元素;</strong></p>\n<p><em>改变伪元素并不一定要改变样式，可以改变 class</em>;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-class\">.green</span><span class=\"selector-pseudo\">::after</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">background-color</span>:green;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">display</span>:inline-block;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-class\">.yellow</span><span class=\"selector-pseudo\">::after</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">background-color</span>:yelllow;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">display</span>:inline-block;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;green&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;float:left;height:100px;width:100px;background-color:red&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            count ++;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">if</span>(count % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                div.className = <span class=\"string\">&#x27;yellow&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;<span class=\"keyword\">else</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                div.className = <span class=\"string\">&#x27;green&#x27;</span>;   <span class=\"comment\">// class 是保留字，所以用className</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如上</span></span><br><span class=\"line\"><span class=\"string\">`虽然我们通常用style改变css样式，但我们也可以通过改变class改变css样式`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`通过改变 class 来实现改变，改变状态位的操作`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`class 是保留字，所以要避开，用className`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小练习，让方块运动\"><a href=\"#小练习，让方块运动\" class=\"headerlink\" title=\"小练习，让方块运动\"></a>小练习，让方块运动</h3><p><strong>小方块持续运动;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">elem,prop</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.getComputedStyle)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle(elem,<span class=\"literal\">null</span>)[prop];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> elem.currentStyle[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"keyword\">var</span> <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    div.style.left = <span class=\"built_in\">parseInt</span>(getStyle(div,<span class=\"string\">&#x27;left&#x27;</span>)) + <span class=\"number\">10</span> + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">&#125;,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>加速运动,设置到一个时候就停止了;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">elem,prop</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.getComputedStyle)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle(elem,<span class=\"literal\">null</span>)[prop];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> elem.currentStyle[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> speed = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    div.style.left = parentInt(getStyle(div,<span class=\"string\">&#x27;left&#x27;</span>)) + speed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(parentInt(div.style.left) &gt; <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><h2 id=\"什么是事件\"><a href=\"#什么是事件\" class=\"headerlink\" title=\"什么是事件\"></a>什么是事件</h2><p>1）document.styleSheets</p>\n<p>2）该属性存储了一个 html 文档里面的所有 css 样式表的集合事件（所有事件都是用的小写）</p>\n<p><code>交互是你对页面动一下，页面给你一个反馈</code></p>\n<ol>\n<li><p>何为事件？ – 就是一个动作，没有效果也是事件</p>\n</li>\n<li><p>重要吗？ – 交互体验的核心功能</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">演示 demo -- 点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width: 100px;height: 100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>); <span class=\"comment\">// 点击之后控制台出现 a</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定事件方法\"><a href=\"#绑定事件方法\" class=\"headerlink\" title=\"绑定事件方法\"></a>绑定事件方法</h2><h3 id=\"一、句柄绑定方式：’on’-type（事件类型）\"><a href=\"#一、句柄绑定方式：’on’-type（事件类型）\" class=\"headerlink\" title=\"一、句柄绑定方式：’on’  + type（事件类型）\"></a>一、句柄绑定方式：’on’  + type（事件类型）</h3><p><strong>句柄绑定方式：elem.’on’ + 事件类型 = function(event){};</strong></p>\n<p><code>只可以用function来绑定事件，若绑定匿名函数，则无法解除</code></p>\n<p><code>打个比方：click 点击事件</code></p>\n<p><code>例：div.&#39;on&#39; + click = function()&#123;&#125;  == div.onclick = function()&#123;&#125;</code></p>\n<ol>\n<li><p><strong>兼容性很好，但是一个元素只能绑定一个事件处理程序:</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`例：div.onclick = function()&#123;&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">div.onclick 就叫做可以被点击的事件（绑定事件类型），<span class=\"string\">`function()&#123;&#125;`</span>是反馈，一旦事件被触发，就要执行<span class=\"string\">`function`</span>里面的函数（绑定的是一个事件处理函数）</span><br><span class=\"line\"></span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">// b 覆盖了 a，这是赋值的原因</span></span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>基本等同于写在 HTML 行间上，如下:</strong></p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> &lt;div onclick=<span class=\"string\">&quot;console.log(&#x27;a&#x27;)&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> 和 <span class=\"number\">2</span> 的效果是一样的，只是书写方式不一样</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><code>onclick=&#39;console.log(&quot;a&quot;)&#39; 是句柄的绑定方式，写在行间不用写function()&#123;&#125;</code></p>\n<h3 id=\"二、常用写法：\"><a href=\"#二、常用写法：\" class=\"headerlink\" title=\"二、常用写法：()\"></a>二、常用写法：()</h3><p><strong>elem.addEventListener(type,function(){},false);</strong></p>\n<p><code>IE9 以下不兼容，可以为一个事件绑定多个处理程序</code></p>\n<p><code>dom.addEventListener(&#39;事件类型&#39;,处理函数,false);</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;widht:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&lt;/sript&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; 是函数引用，和外面定义一个 <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; 直接写 test 是一样的</span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;widht:100px;height:100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,test,<span class=\"literal\">false</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>时间有一个事件监听机制:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：一个事件绑定了两个处理函数</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;widht:100px;height:100px;background:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,<span class=\"literal\">false</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;b&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"string\">`console.log 打印出来是两个函数结果，这是两个处理函数，是两个地址，所以可以输出两个结果`</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：下面只执行一个函数，这种写法是一个地址，一个人</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;widht:100px;height:100px;background:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,test,<span class=\"literal\">false</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,test,<span class=\"literal\">false</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"string\">`elem.addEventListener 不能给同一个函数绑定多次，重复的绑定一个函数就不可以用了,只能输出一个结果`</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、IE专用：attachEvent\"><a href=\"#三、IE专用：attachEvent\" class=\"headerlink\" title=\"三、IE专用：attachEvent()\"></a>三、IE专用：attachEvent()</h3><p>div.attachEvent(‘on’ + click’ + function(){});</p>\n<p><code>IE 独有，一个事件可以绑定多个处理程序，同一个函数绑定多次都可以</code></p>\n<p><code>div.attachEvent(&#39;on&#39; + 事件类型，处理函数);</code></p>\n<p><em><code>div.attachEvent(&#39;onclick&#39;,function()&#123;&#125;)</code></em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"> <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：想给三个 li 都绑定这个事件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> liCol = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>],</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        len = li.length;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len; i++)&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">           liCol[i].addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"built_in\">console</span>.log(i);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;,<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;(i))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件处理程序的运行环境\"><a href=\"#事件处理程序的运行环境\" class=\"headerlink\" title=\"事件处理程序的运行环境\"></a>事件处理程序的运行环境</h3><ol>\n<li><p>elem.onclick = function(){}</p>\n<ol>\n<li>程序<code>this</code>指向是<code>dom</code>元素本身（指向自己）</li>\n</ol>\n</li>\n<li><p>elem.addEventListener(type,fn,false)</p>\n<ol>\n<li>程序<code>this</code>指向是<code>dom</code>元素本身（指向自己）</li>\n</ol>\n</li>\n<li><p>elem.attachEvent(‘on’ + type,fn)</p>\n<ol>\n<li>程序<code>this</code>指向<code>window</code></li>\n<li>可以通过<code>call</code>来指向自己</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    handle.call(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装绑定事件函数\"><a href=\"#封装绑定事件函数\" class=\"headerlink\" title=\"封装绑定事件函数\"></a>封装绑定事件函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">elem, type, handle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elem.addEventListener) &#123;</span><br><span class=\"line\">        elem.addEventListener(type, handle, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (elem.attachEvent) &#123;</span><br><span class=\"line\">        elem[<span class=\"string\">&#x27;on&#x27;</span> + type] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            handle.call(elem);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        elem[<span class=\"string\">&quot;on&quot;</span> + type] = handle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解除事件绑定方法\"><a href=\"#解除事件绑定方法\" class=\"headerlink\" title=\"解除事件绑定方法\"></a>解除事件绑定方法</h2><h3 id=\"一、句柄方式解除绑定：elem-’on’-type（事件类型）-false-null\"><a href=\"#一、句柄方式解除绑定：elem-’on’-type（事件类型）-false-null\" class=\"headerlink\" title=\"一、句柄方式解除绑定：elem.’on’ + type（事件类型） = false/null\"></a>一、句柄方式解除绑定：elem.’on’ + type（事件类型） = false/null</h3><p><code>elem.&#39;on&#39; + type = false/null;     ==&gt;     就是解除 elem.&#39;on&#39; + type = function(e))&#123;&#125;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：用 div.onclick = <span class=\"literal\">null</span>; 解除事件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"string\">`直接解除事件，不可以再执行`</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.onclick = <span class=\"literal\">null</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"string\">`只能执行一次的事件的写法`</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.onclick = <span class=\"literal\">null</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、常用方式解除绑定：elem-removeEventListener-type-fn-false\"><a href=\"#二、常用方式解除绑定：elem-removeEventListener-type-fn-false\" class=\"headerlink\" title=\"二、常用方式解除绑定：elem.removeEventListener(type,fn,false)\"></a>二、常用方式解除绑定：elem.removeEventListener(type,fn,false)</h3><p><strong>elem.removeEventListener(type,function(){},false);</strong></p>\n<p><code>div.removeEventListener(&#39;事件类型&#39;,处理函数,false);</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：elem.removeEventListener(type,fn,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">div.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`test`</span>如果填别的<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,就找不到他了，就没有办法清除，所以函数体一般要写在外面</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、IE专用方式解除：elem-detachEvent-‘on’-type-fn\"><a href=\"#三、IE专用方式解除：elem-detachEvent-‘on’-type-fn\" class=\"headerlink\" title=\"三、IE专用方式解除：elem.detachEvent(‘on’ + type,fn)\"></a>三、IE专用方式解除：elem.detachEvent(‘on’ + type,fn)</h3><p><strong>elem.detachEvent(‘on’ + click’ + function(){});</strong></p>\n<p><code>elem.detachEvent(&#39;on&#39; + 事件类型，处理函数);</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：div.detachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    div.attachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.detachEvent(<span class=\"string\">&#x27;onclick&#x27;</span>,test,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装解除绑定函数\"><a href=\"#封装解除绑定函数\" class=\"headerlink\" title=\"封装解除绑定函数\"></a>封装解除绑定函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeEvent</span>(<span class=\"params\">elem, type, handle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elem.removeEventListener) &#123;</span><br><span class=\"line\">        elem.removeEventListener(type, handle, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        elem.detachEvent(<span class=\"string\">&#x27;on&#x27;</span> + type, handle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件处理模型-–-事件冒泡、捕获\"><a href=\"#事件处理模型-–-事件冒泡、捕获\" class=\"headerlink\" title=\"事件处理模型 – 事件冒泡、捕获\"></a>事件处理模型 – 事件冒泡、捕获</h2><p>事件处理的两个模型：事件冒泡、捕获（不能同时存在）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-class\">.wrapper</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">background-color</span>:red;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-class\">.content</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            bakground-<span class=\"attribute\">color</span>:green;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-class\">.box</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">background-color</span>:orange;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dvi</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;content&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; box</span></span><br><span class=\"line\"><span class=\"comment\">//   content</span></span><br><span class=\"line\"><span class=\"comment\">//   wrapper</span></span><br><span class=\"line\"><span class=\"string\">`只是点了黄色区域，但是出现了 box，content，wrapper 三个结果，往下漏了，这就是事件冒泡`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h3><p><strong>结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，及同一事件，自子元素冒泡向父元素（自底向上）;</strong></p>\n<p><code>结构上存在父子关系的元素，如果点击到子元素，会一级一级向父元素传递这个事件（从代码的角度是自底向上一层一层冒泡的）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：加了 margin，只点黄色方块，还是出现了 box，content，wrapper。所以与视觉无关</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dvi</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;content&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; box</span></span><br><span class=\"line\"><span class=\"comment\">//   content</span></span><br><span class=\"line\"><span class=\"comment\">//   wrapper</span></span><br><span class=\"line\"><span class=\"string\">`加了 margin，只点黄色区域，还是出现了 box，content，wrapper 三种结果，所以与视觉无关`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h3><p><strong>1）结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，及同一事件，自父元素捕获至子元素（事件源元素）（自顶向下）;</strong></p>\n<p><strong>2）IE 没有捕获事件;</strong></p>\n<p><code>一个对象的一个事件类型，只能存在一个事件处理模型（冒泡或捕获）</code></p>\n<p><code>elem.addEventListener(type,fn,true);第三个参数就是事件捕获，把false改为true</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：把 <span class=\"literal\">false</span>改成 <span class=\"literal\">true</span>，就变成了事件捕获，只把 <span class=\"literal\">false</span> 改成 <span class=\"literal\">true</span> 就变成事件捕获了</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">dvi</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;content&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; wrapper</span></span><br><span class=\"line\"><span class=\"comment\">//   content</span></span><br><span class=\"line\"><span class=\"comment\">//   box</span></span><br></pre></td></tr></table></figure>\n\n<p><code>结果和事件冒泡结果反了过来，先红色区域捕获事件并且执行，再绿色区域捕获事件并且实行，最后只执行事件黄色区域。</code>_捕获是把结构的最外面先抓住_。<strong>最外面先捕获，再一层层向里面捕获，最里面的是按常规执行</strong></p>\n<p><strong>思考</strong>：同一个对象的同一个事件类型，上面绑定了两个事件处理函数，一个符合冒泡，一个符合捕获，点一个元素后，是先捕获，还是先冒泡？</p>\n<p><strong>3）触发顺序，先捕获，后冒泡;</strong></p>\n<p><code>同一个对象的一个事件处理类型，上面绑定了两个事件处理，分别执行事件冒泡和时间执行</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 沿用上面代码</span></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出</span></span><br><span class=\"line\"><span class=\"comment\">// wrapper</span></span><br><span class=\"line\"><span class=\"comment\">// content</span></span><br><span class=\"line\"><span class=\"comment\">// box</span></span><br><span class=\"line\"><span class=\"comment\">// boxBubble</span></span><br><span class=\"line\"><span class=\"comment\">// contentBubble</span></span><br><span class=\"line\"><span class=\"comment\">// wrapperBubble</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`先捕获，后冒泡`</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变一下冒泡，捕获的顺序</span></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\">box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wrapper&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">content.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\">box.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;content&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出</span></span><br><span class=\"line\"><span class=\"comment\">// wrapper</span></span><br><span class=\"line\"><span class=\"comment\">// content</span></span><br><span class=\"line\"><span class=\"comment\">// boxBubble</span></span><br><span class=\"line\"><span class=\"comment\">// box</span></span><br><span class=\"line\"><span class=\"comment\">// contentBubble</span></span><br><span class=\"line\"><span class=\"comment\">// wrapperBubble</span></span><br></pre></td></tr></table></figure>\n\n<p><code>顺序是先捕获红色，在捕获绿色，boxBubble黄色区域执行，box黄色区域执行，冒泡到绿色，冒泡到红色（谁先绑定，谁先执行，boxBubble 先绑定，所以先执行）</code></p>\n<p><strong>4）focus，blur，change，submit，reset，select 等事件不冒泡;</strong></p>\n<h2 id=\"取消冒泡和阻止默认事件\"><a href=\"#取消冒泡和阻止默认事件\" class=\"headerlink\" title=\"取消冒泡和阻止默认事件\"></a>取消冒泡和阻止默认事件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：给 div 绑定一个事件，也给<span class=\"built_in\">document</span>绑定一个事件（点击div，也冒泡到<span class=\"built_in\">document</span>）</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你闲的啊！&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>在每一个事件处理函数中【div.onclick = function()&#123;&#125;】,我们可以写一个形参（如e），系统可以传递</code> <strong>事件对象（记载了数据发生时的状态和信息）</strong> <code>到这个参数里面去</code></p>\n<h3 id=\"一、取消冒泡\"><a href=\"#一、取消冒泡\" class=\"headerlink\" title=\"一、取消冒泡\"></a>一、取消冒泡</h3><h4 id=\"1）W3C标准：event-stopPropagation\"><a href=\"#1）W3C标准：event-stopPropagation\" class=\"headerlink\" title=\"1）W3C标准：event.stopPropagation()\"></a>1）W3C标准：event.stopPropagation()</h4><blockquote>\n<p>event.stopPropagation(); – 但不支持 ie9  以下版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：事件对象上有一个 event.stopPropagation() 取消冒泡事件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你闲的啊啊&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tyle.background=<span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）IE专用：event-cancelBubble-true\"><a href=\"#2）IE专用：event-cancelBubble-true\" class=\"headerlink\" title=\"2）IE专用：event.cancelBubble = true\"></a>2）IE专用：event.cancelBubble = true</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：ie 里面事件对象上有一个 event.cancelBubble = <span class=\"literal\">true</span>;能取消冒泡事件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你闲的啊啊&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e || <span class=\"built_in\">window</span>.event; <span class=\"comment\">// 解决 ie 兼容问题</span></span><br><span class=\"line\">    e.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.background=<span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"封装取消冒泡函数-stopBubble-event\"><a href=\"#封装取消冒泡函数-stopBubble-event\" class=\"headerlink\" title=\"封装取消冒泡函数 stopBubble(event)\"></a>封装取消冒泡函数 stopBubble(event)</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopBubble</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.stopPropagation)&#123;</span><br><span class=\"line\">        event.stopPropagation();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        event.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、阻止默认事件\"><a href=\"#二、阻止默认事件\" class=\"headerlink\" title=\"二、阻止默认事件\"></a>二、阻止默认事件</h3><h4 id=\"什么是默认事件-–-表单提交，a-标签跳转，右键菜单等\"><a href=\"#什么是默认事件-–-表单提交，a-标签跳转，右键菜单等\" class=\"headerlink\" title=\"什么是默认事件 – 表单提交，a 标签跳转，右键菜单等\"></a>什么是默认事件 – 表单提交，a 标签跳转，右键菜单等</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：浏览器点击右键出菜单，是一个事件（默认事件）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>); <span class=\"comment\">// 在网页中鼠标右键控制台打印 &#x27;a&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1）句柄阻止默认事件方式：return-false\"><a href=\"#1）句柄阻止默认事件方式：return-false\" class=\"headerlink\" title=\"1）句柄阻止默认事件方式：return false\"></a>1）句柄阻止默认事件方式：return false</h4><p><em><code>兼容性非常好，以对象属性的方式注册的事件才生效（这是句柄的方式阻止默认事件，只有句柄的方式绑定事件才好使）;</code></em></p>\n<blockquote>\n<p>return false 是只有句柄绑定方式才可以用的阻止默认事件方式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 在网页右键点击的时候不会出现菜单了，但还在控制台打印 &#x27;a&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）W3C标准：event-preventDefault\"><a href=\"#2）W3C标准：event-preventDefault\" class=\"headerlink\" title=\"2）W3C标准：event.preventDefault()\"></a>2）W3C标准：event.preventDefault()</h4><blockquote>\n<p>event.preventDefault();  W3C标注，IE9以下不兼容</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）兼容IE：event-returnValue-false\"><a href=\"#3）兼容IE：event-returnValue-false\" class=\"headerlink\" title=\"3）兼容IE：event.returnValue = false\"></a>3）兼容IE：event.returnValue = false</h4><blockquote>\n<p>event.returnValue = false  —  兼容IE</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e = e || <span class=\"built_in\">window</span>.event; <span class=\"comment\">// 兼容IE</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    e.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"封装阻止默认事件的函数-cancelHandler-event\"><a href=\"#封装阻止默认事件的函数-cancelHandler-event\" class=\"headerlink\" title=\"封装阻止默认事件的函数 cancelHandler(event)\"></a>封装阻止默认事件的函数 cancelHandler(event)</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancelHandler</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event &amp;&amp; event.preventDefault)&#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        widnow.event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：a 标签有一个跳转的默认事件</span><br><span class=\"line\"></span><br><span class=\"line\">a.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 句柄阻止方式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.addEventListener(e)&#123;</span><br><span class=\"line\">    e.preventDefault();  <span class=\"comment\">// w3c 标准阻止方式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.addEventListener(e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.e.returnValue = <span class=\"literal\">false</span>; <span class=\"comment\">// IE阻止方式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a href=<span class=\"string\">&#x27;javascript:void(false)&#x27;</span>&gt;&lt;<span class=\"regexp\">/a&gt; /</span><span class=\"regexp\">/ 直接在 a 标签加入也可以</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p><code>非 ie 浏览器会把事件对象（记载了数据发生时的状态和信息）打包传到参数里面去</code></p>\n<p><code>ie 浏览器在 window.evnet 里面储存事件对象</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;widht:100px;height:100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 非 ie 浏览器会记录事件对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一、event-window-event-用于IE兼容\"><a href=\"#一、event-window-event-用于IE兼容\" class=\"headerlink\" title=\"一、event || window.event 用于IE兼容\"></a>一、event || window.event 用于IE兼容</h3><p><strong><code>window.event 用于IE，event 只能用于非 ie 浏览器</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：这是储存事件对象的兼容性写法</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// MouseEvent &#123;isTrusted: true, screenX: 966, screenY: 174, clientX: 86, clientY: 36, …&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// clientX : 76</span></span><br><span class=\"line\"><span class=\"comment\">// clientY : 77</span></span><br><span class=\"line\"><span class=\"comment\">// 鼠标坐标点，可以用这个来记录鼠标坐标点</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>事件对象上有个专门的信息是存储事件源的。就是 srcElement 属性，可以查看事件源</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;wrapper&quot;</span> style=<span class=\"string\">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50px;height:50px;background-color:green;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>点红色会执行，点绿色会冒泡执行。点红色是点击到他自己来执行;点绿色身上，触发事件的点在绿色身上，是绿色传递的，我们把</code> <strong>触发事件的地方叫做事件源。</strong></p>\n<h3 id=\"事件源对象（找事件源对象的方法）\"><a href=\"#事件源对象（找事件源对象的方法）\" class=\"headerlink\" title=\"事件源对象（找事件源对象的方法）\"></a>事件源对象（找事件源对象的方法）</h3><p><strong>event.target</strong>  –  <em>火狐独有的;</em></p>\n<p><strong>event.srcElement</strong>  –  <em>IE独有的;</em></p>\n<p><strong>这俩 chrome 都有;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：时间源对象的兼容性写法</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;wrapper&quot;</span> style=<span class=\"string\">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50px;height:50px;background-color:green;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;box&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：我们给每个 li 绑定事件，要求点那个 li 就输出那个内容，这不涉及闭包问题</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> len = li.length;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len;i ++)&#123;</span><br><span class=\"line\">    li[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.innerText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面的写法不是很好（如果是三千亿个li就没有效率了）不能动态，要用事件源和事件冒泡解决</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>事件委托：利用事件冒泡，和事件源对象进行处理;</strong></p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p><em><code>性能 不需要循环所有的子元素一个一个绑定事件</code></em></p>\n</li>\n<li><p><em><code>灵活 当有新的子元素不需要重新绑定事件</code></em></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：给每个 li 绑定事件，再增加 li 也能使用</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ul&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">ul.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target.innerText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>面试问题：</strong></p>\n<p><em><strong>什么是事件捕获，一个是冒泡，一个是捕获，第二种捕获不是事件处理模型，而是一种真实的事件获取的过程，用于解决拖拽出方块的问题</strong></em></p>\n<p><em><code>第二种捕获仅在 IE 好使，利用 div.setCapture(); 会捕获页面上发生的所有事情，都获取到自己身上。对应的用 div.releaseCapture();释放。但是方法比较老旧，一般不用。</code></em></p>\n<h2 id=\"事件分类\"><a href=\"#事件分类\" class=\"headerlink\" title=\"事件分类\"></a>事件分类</h2><h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><blockquote>\n<p>不需要小驼峰和大驼峰</p>\n</blockquote>\n<p><strong>W3C 标准规定：click 事件只能监听左键，只能通过 mousedown 和 mouseup 来判断鼠标键;</strong></p>\n<p><strong>如何解决 mousedown 和 click 的冲突;</strong></p>\n<p><strong>移动端 onmousedown 不能用，只能用 touchstart，touchmove，touchend;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">onclick       | 鼠标点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">onmousedown   | 鼠标按键被按下时执行函数</span><br><span class=\"line\"></span><br><span class=\"line\">onmouseup     | 鼠标按键被松开时执行函数</span><br><span class=\"line\"></span><br><span class=\"line\">onmousemove   | 鼠标移动到指定元素上移动时执行函数</span><br><span class=\"line\"></span><br><span class=\"line\">contextmenu   | 右键取消菜单事件</span><br><span class=\"line\"></span><br><span class=\"line\">onmouseover   | 鼠标指针移动到元素上执行函数 -- 支持冒泡</span><br><span class=\"line\"></span><br><span class=\"line\">onmouseout    | 鼠标在移出指针时执行函数 -- 支持冒泡</span><br><span class=\"line\"></span><br><span class=\"line\">onmouseenter  | 鼠标指针移动到元素上执行函数 - 不支持冒泡 - html5</span><br><span class=\"line\"></span><br><span class=\"line\">onmouseleave  | 鼠标在移出指针时执行函数 - 不支持冒泡 - html5</span><br><span class=\"line\"></span><br><span class=\"line\">ondblclick    | 当用户双击某个对象时触发</span><br></pre></td></tr></table></figure>\n\n<p><strong>click = mousedown + mousemove;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：click = mousedown + mousemove</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;mousedown&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;mouseup&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// mousedown</span></span><br><span class=\"line\"><span class=\"comment\">// mouseup</span></span><br><span class=\"line\"><span class=\"comment\">// click</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`触发顺序是：mousedown、mouseup、click`</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>用 button 来区分鼠标的按键;</strong></p>\n<p>只有 <code>mouseup、mousedown</code>两个事件可以区分鼠标左右键</p>\n<p><em><code>button返回值：右键：2，左键：0，滚轮：1</code></em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.button == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2,right&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.button == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;0,left&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.button == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1,middle&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h3><blockquote>\n<p>触发顺序是 keydown &gt; keypress &gt; keyup</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">onkeydown    | 事件会在用户按下一个键盘按键时发生</span><br><span class=\"line\"></span><br><span class=\"line\">onkeyup      | 事件会在键盘按键被松开时发生</span><br><span class=\"line\"></span><br><span class=\"line\">onkeypress   | 事件会在键盘按键被按下并释放一个键时发生</span><br></pre></td></tr></table></figure>\n\n<p><strong>1）keydown 和 keypress 的区别:</strong></p>\n<p><strong>i ：keydown 可以响应任意键盘按键，keypress 只可以响应字符类键盘按键;</strong></p>\n<p>检测字符不准确，<code>keypress</code> 检测字符很准确。但是 <code>keydown</code> 能监控所有，包括上下左右都能监控，但是 <code>keypress</code> 只能监控字符。</p>\n<p><code>用法：如果你想监控字符类按键，并想区分大小写，就用 keypress，如果是操作类按键的话，就用 keydown 上的 which 属性来区分按键（which：39 是给按键牌号 39，不是 ascii 码）</code></p>\n<p><strong>ii ：keypress 返回的 ASCII 码，可以转换为相应字符;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：连续按键盘的时候就是连续触发 keydown 和 keypress，松开触发 keyup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;keypress&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;keydown&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onkeyup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;keyup&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// keydown</span></span><br><span class=\"line\"><span class=\"comment\">// keypress</span></span><br><span class=\"line\"><span class=\"comment\">// keyup</span></span><br><span class=\"line\"></span><br><span class=\"line\">注意：游戏触发设置在 keydown 上，机械键盘抬起速度快反馈力量大，对游戏没用</span><br></pre></td></tr></table></figure>\n\n<p><strong>charCode：获取按下的键盘按键 Unicode 编码值;</strong></p>\n<p><strong>静态 String.fromCharCode() 方法返回由指定的 Unicode 编码转换为输入的键;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：利用下面，把 Unicode 编码转成对应值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>.fromCharCode(e.charCode));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">oninput    | 在用户输入时触发（有变化（增删改）都会触发 input 事件）</span><br><span class=\"line\"></span><br><span class=\"line\">onchange   | 事件会在输入的内容改变时触发（点击别的物体时触发）</span><br><span class=\"line\"></span><br><span class=\"line\">onfocus    | 事件在对象获得焦点时发生</span><br><span class=\"line\"></span><br><span class=\"line\">onblur     | 事件会在对象失去焦点时发生</span><br><span class=\"line\"></span><br><span class=\"line\">onreset    | 表单重置时触发</span><br><span class=\"line\"></span><br><span class=\"line\">onsearch   | 用户向搜索域输入文本时触发 (&lt;input=&quot;search&quot;&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\">onselect   | 用户选取文本时触发 (&lt;input&gt; 和 &lt;textarea&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\">onsubmit   | 表单提交时触发</span><br><span class=\"line\"></span><br><span class=\"line\">onfocusin  | 元素即将获取焦点时触发</span><br><span class=\"line\"></span><br><span class=\"line\">onfocusout | 元素即将失去焦点时触发</span><br></pre></td></tr></table></figure>\n\n<p><strong>input:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例如：input 框里面所以有变化（增删改）都会触发 input 事件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">input.oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>change:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：change 对比鼠标聚焦，或失去焦点时，两个状态是否发生改变，如果两个状态没有改变就不触发，如果发生改变就触发</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;input&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">input.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>focus，blur:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text/css&quot;</span> value=<span class=\"string\">&quot;请输入用户名&quot;</span> style=<span class=\"string\">&quot;color:#999&quot;</span> onfocus=<span class=\"string\">&quot;if(this.value == &#x27;请输入用户名&#x27;)&#123;this.value = &#x27;&#x27;;this.style.color=&#x27;#424242&#x27;&#125;&quot;</span> onblur=<span class=\"string\">&quot;if(this.value == &#x27;&#x27;)&#123;this.value = &#x27;请输入用户名&#x27;;this.style.color=&#x27;#999&#x27;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"鼠标键盘事件对象属性\"><a href=\"#鼠标键盘事件对象属性\" class=\"headerlink\" title=\"鼠标键盘事件对象属性\"></a>鼠标键盘事件对象属性</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">altKey          | 返回当事件被触发时，<span class=\"string\">&quot;ALT&quot;</span> 是否被按下。</span><br><span class=\"line\"></span><br><span class=\"line\">button          | 返回当事件被触发时，哪个鼠标按钮被点击。</span><br><span class=\"line\"></span><br><span class=\"line\">clientX         | 返回当事件被触发时，鼠标指针的水平坐标。</span><br><span class=\"line\"></span><br><span class=\"line\">clientY         | 返回当事件被触发时，鼠标指针的垂直坐标。</span><br><span class=\"line\"></span><br><span class=\"line\">ctrlKey         | 返回当事件被触发时，<span class=\"string\">&quot;CTRL&quot;</span> 键是否被按下。</span><br><span class=\"line\"></span><br><span class=\"line\">Location        | 返回按键在设备上的位置</span><br><span class=\"line\"></span><br><span class=\"line\">charCode        | 返回onkeypress事件触发键值的字母代码。</span><br><span class=\"line\"></span><br><span class=\"line\">key             | 在按下按键时返回按键的标识符。</span><br><span class=\"line\"></span><br><span class=\"line\">keyCode         | 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</span><br><span class=\"line\"></span><br><span class=\"line\">which           | 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</span><br><span class=\"line\"></span><br><span class=\"line\">metaKey         | 返回当事件被触发时，<span class=\"string\">&quot;meta&quot;</span> 键是否被按下。</span><br><span class=\"line\"></span><br><span class=\"line\">relatedTarget   | 返回与事件的目标节点相关的节点。</span><br><span class=\"line\"></span><br><span class=\"line\">screenX         | 返回当某个事件被触发时，鼠标指针的水平坐标。</span><br><span class=\"line\"></span><br><span class=\"line\">screenY         | 返回当某个事件被触发时，鼠标指针的垂直坐标。</span><br><span class=\"line\"></span><br><span class=\"line\">shiftKey        | 返回当事件被触发时，<span class=\"string\">&quot;SHIFT&quot;</span> 键是否被按下。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"窗体操作类（window-上的事件）onscroll，onload\"><a href=\"#窗体操作类（window-上的事件）onscroll，onload\" class=\"headerlink\" title=\"窗体操作类（window 上的事件）onscroll，onload\"></a>窗体操作类（window 上的事件）onscroll，onload</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">onload    |  事件会在页面或图像加载完成后立即发生（所有页面加载完毕，才能执行）</span><br><span class=\"line\"></span><br><span class=\"line\">onscroll  |  事件在元素滚动条在滚动时触发</span><br></pre></td></tr></table></figure>\n\n<p><strong>onscroll:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：scroll 当滚动条一滚动，scroll 事件就触发了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.pageXOffset + <span class=\"string\">&quot; &quot;</span> + <span class=\"built_in\">window</span>.pageYOffset);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ie6</code>没有fixed定位，就用<code>position</code>的<code>top = 原来的 top + 滚动条的位置</code>来写。<code>absolute</code>定位相对于文档定位，就用<code>absolute</code>定位模拟<code>fixed</code>定位，挪动距离加载<code>absolute</code>的<code>top</code>上读到<code>js</code>的时候就阻断页面，所以必须把<code>js</code>写在下面才能把上面的东西读出来</p>\n<p><strong>onload:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：load重要但是不用。<span class=\"built_in\">window</span>.onload 发生在什么时候</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(div);</span><br><span class=\"line\">    div.style.width = <span class=\"string\">&#x27;100px&#x27;</span>;</span><br><span class=\"line\">    div.style.height = <span class=\"string\">&#x27;100px&#x27;</span>;</span><br><span class=\"line\">    div.style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用了 onload 就能操作写在下面的 div 了，但是我们不能这样用</p>\n<blockquote>\n<p>理由：html 和 css 是一起解析的，在解析的时候会有 html 有 domTree，css 有 cssTree 生成（树形图的顶底是 document，然后是html，然后是 head，body） ，两个树拼在 一起是 renderTree</p>\n</blockquote>\n<p><code>什么时候把节点放在树里？dom节点解析，如确定是 img 标签就把他放到树里。（先 解析完 img，同时开启一个线程异步的去下载里面的内容，后下载完）</code></p>\n<p><code>我们把 js 的 script 标签写在最下面的好处是，这些刚刚解析完 js 就能操作页面了， 就更快了。而 window.onload 要等整个页面解析完，下载完才能操作 js，才能触发事 件（效率很差） onload 能提醒我们什么时候整个页面解析完毕。在设计广告时，就 要用 onload，等整个页面下载完了才开始用，但是onload 绝对用于主程序里面</code></p>\n<h2 id=\"练习总结\"><a href=\"#练习总结\" class=\"headerlink\" title=\"练习总结\"></a>练习总结</h2><h3 id=\"一、封装拖拽元素函数（不兼容）\"><a href=\"#一、封装拖拽元素函数（不兼容）\" class=\"headerlink\" title=\"一、封装拖拽元素函数（不兼容）\"></a>一、封装拖拽元素函数（不兼容）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">    elem.addEventListener(<span class=\"string\">&#x27;mousedown&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> diX = e.clientX - elem.offsetLeft;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> diY = e.clientY - elem.offsetTop;</span><br><span class=\"line\">        elem.addEventListener(<span class=\"string\">&#x27;mousemove&#x27;</span>, mouseMove, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        elem.addEventListener(<span class=\"string\">&#x27;mouseup&#x27;</span>, mouseUp, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseMove</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = e || widow.event;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = e.clientX - diX;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> top = e.clientY - diY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left &gt; <span class=\"built_in\">window</span>.innerWidth - elem.offsetWidth) &#123;</span><br><span class=\"line\">            left = <span class=\"built_in\">window</span>.innerWidth - elem.offsetWidth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (top &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top &gt; <span class=\"built_in\">window</span>.innerHeight - elem.offsetHeight) &#123;</span><br><span class=\"line\">            top = <span class=\"built_in\">window</span>.innerHeight - elem.offsetHeight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        elem.style.left = left + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">        elem.style.top = top + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseUp</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        elem.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>, mouseMove, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        elem.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>, mouseUp, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、输入框功能完善\"><a href=\"#二、输入框功能完善\" class=\"headerlink\" title=\"二、输入框功能完善\"></a>二、输入框功能完善</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;text&quot;</span> value=<span class=\"string\">&quot;请输入用户名&quot;</span> style=<span class=\"string\">&quot;color:#999&quot;</span></span><br><span class=\"line\">onfocus=<span class=\"string\">&quot;if(this.value == &#x27;请输入用户名&#x27;)&#123;this.value = &#x27;&#x27;;this.style.color = &#x27;#424242&#x27;&#125;&quot;</span></span><br><span class=\"line\">onblur=<span class=\"string\">&quot;if(this.value == &#x27;&#x27;)&#123;this.value = &#x27;请输入用户名&#x27;;this.style.color = &#x27;#999&#x27;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、提取密码框的密码\"><a href=\"#三、提取密码框的密码\" class=\"headerlink\" title=\"三、提取密码框的密码\"></a>三、提取密码框的密码</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;input&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">input.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"built_in\">String</span>.fromCharCode(e.charCode);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、轮播图\"><a href=\"#四、轮播图\" class=\"headerlink\" title=\"四、轮播图\"></a>四、轮播图</h3><h3 id=\"五、贪吃蛇游戏\"><a href=\"#五、贪吃蛇游戏\" class=\"headerlink\" title=\"五、贪吃蛇游戏\"></a>五、贪吃蛇游戏</h3><h3 id=\"六、扫雷游戏\"><a href=\"#六、扫雷游戏\" class=\"headerlink\" title=\"六、扫雷游戏\"></a>六、扫雷游戏</h3><h1 id=\"JSON和异步加载js\"><a href=\"#JSON和异步加载js\" class=\"headerlink\" title=\"JSON和异步加载js\"></a>JSON和异步加载js</h1><h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p><strong>JSON是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json是用来传输的）</strong></p>\n<ol>\n<li><p><code>JSON.parse();    JSON ————&gt; String</code></p>\n</li>\n<li><p><code>JSON.stringify();   String ————&gt; JSON</code></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例如：json的属性名必须加双引号（传的是二进制文本）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`json 格式`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;deng&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON.string(obj)</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;&#123;&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;123&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">JSON</span>.stringify(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// str</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;&#123;&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;123&quot;&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON.parse(str)</span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;name: &quot;abc&quot;, age: 123&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步加载Js\"><a href=\"#异步加载Js\" class=\"headerlink\" title=\"异步加载Js\"></a>异步加载Js</h2><blockquote>\n<p>js是单线程的，会阻断 HTML，css 加载（因为js会修改 html 和 css 一起加载会乱），所以是同步加载 js。先下载 js，在下载 HTML 和 css。<strong>常规来说 js 是同步加载的，所以我们讲讲 js 异步加载的情况;</strong></p>\n</blockquote>\n<p><strong>js加载的缺点：加载工具方法没必要阻塞文档，过的 js 加载会影响页面效率，一旦网速不好，那么整个网站将等待 js 加载而不进行后续渲染等工作;</strong></p>\n<p><strong>有些工具方法需要按需加载，用到再加载，不用不加载;</strong></p>\n<p>javascript 异步加载的三种方案</p>\n<h3 id=\"一、IE专用-defer\"><a href=\"#一、IE专用-defer\" class=\"headerlink\" title=\"一、IE专用 defer\"></a>一、IE专用 defer</h3><p><code>defer</code><strong>异步加载，但要等到 dom 文档全部解析完成（dom 树生成完）才会被执行。只有 IE 能用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> scr=<span class=\"string\">&quot;xxx&quot;</span> defer=<span class=\"string\">&quot;defer&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">scr</span>=<span class=\"string\">&quot;xxx&quot;</span> <span class=\"attr\">defer</span>=<span class=\"string\">&quot;defer&quot;</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`两种方法,可以在内部用，也可以再外部用`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、w3c标准-async\"><a href=\"#二、w3c标准-async\" class=\"headerlink\" title=\"二、w3c标准 async\"></a>二、w3c标准 async</h3><p><code>async</code> <strong>异步加载，加载完就执行，async 只能加载外部脚本，不能把 js 写在 script 标签里，ie9 以上可以用，w3c 标准</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> scr=<span class=\"string\">&quot;xxx&quot;</span> <span class=\"keyword\">async</span>=<span class=\"string\">&quot;async&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`只有一种方法,只能加载外部脚本`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、创建-script\"><a href=\"#三、创建-script\" class=\"headerlink\" title=\"三、创建 script\"></a>三、创建 script</h3><p>创建<code>script</code>，插入到 DOM 中，加载完毕后<code>callBack</code>（按需加载，方便） –&gt;  常用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">script.src = <span class=\"string\">&#x27;tools.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.head.appendChild(script); <span class=\"comment\">// 如果不写这一段，就是只加载，不执行，像这样写了执行以后才执行</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    test(); <span class=\"comment\">// 这个test函数是 tools.js 里面的函数，执行的是tools.js的函数</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么要用 setTimeout（定时器）呢？因为还没有下载完成，因为程序执行时非常快的，当程序读到 document.head 读到 test(); 时，上面的 script.type 和 script.src 还没有下载完，所以执行不了。所以，能不能有一个东西提示我们，他下载完了我们再用?</p>\n</blockquote>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p><code>用 onload 方法</code></p>\n<p>非 <code>ie</code> 方法，<code>script.onload = function()&#123;&#125;</code>,触发 <code>script.onload</code> 事件就代表他下载完了，当他们下载完了再执行 <code>test</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">script.src = <span class=\"string\">&#x27;tools.js&#x27;</span>;</span><br><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    test(); <span class=\"comment\">// test 函数是 tools.js 的函数，执行的也是 tools.js 的函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.head.appendChild(script);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p><code>ie 上有一个状态码，script.readyState，功能与 script.onlaod 相似。</code></p>\n<p><strong>script.readyState = ‘loading’; 最开始的值;</strong></p>\n<p><strong>script.readyState = ‘complete’ 或 ‘loaded’ 表示加载完成;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">我们封装一个函数：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    script.type = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;</span><br><span class=\"line\">        script.onreadystatechenge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">&#x27;complete&#x27;</span> || script.readyState == <span class=\"string\">&#x27;loaded&#x27;</span>)&#123;</span><br><span class=\"line\">                callback();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.src = url;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间里面有一个绑定的事件处理函数，当满足一定执行条件才执行的函数叫做回调函数，回调函数叫 callback</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>)</span>&#123;…&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadScript(<span class=\"string\">&#x27;tools.js&#x27;</span>,test); <span class=\"comment\">// test 是 tools.js 里面的函数，调用的是 tools.js 的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">执行顺序：先 <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\"></span>)</span>&#123;&#125;【不会看里面的代码是什么】</span><br><span class=\"line\">再 loadScript() 【这一步的时候不知道 test 是什么】</span><br><span class=\"line\">然后执行<span class=\"string\">`function`</span>里面的内容，为了解决上面的问题，如下例：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>)</span>&#123;…&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadScript(<span class=\"string\">&#x27;tools.js&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">这样，用一个<span class=\"string\">`function`</span>来做第二个参数，而<span class=\"string\">`function`</span>里面则执行函数，这样也没有问题</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"js时间线\"><a href=\"#js时间线\" class=\"headerlink\" title=\"js时间线\"></a>js时间线</h1><p><code>js加载时间线：依据 js 出生的那一刻起，记录了一系列浏览器按照顺序做的事情（就是一个执行顺序）</code></p>\n<p><strong>时间线步骤（创建 document 对象 ==&gt; 文档解析完 ==&gt; 文档解析完加载完执行完）:</strong></p>\n<ol>\n<li><p>创建<code>Document</code>对象，开始解析<code>web</code>页面。解析<code>HTML</code>元素和他们的文本内容后添加<code>Element</code>对象和<code>Text</code>节点到文档中。这个阶段<code>document.readyState = &#39;loading&#39;</code>。</p>\n</li>\n<li><p>遇到<code>link</code>外部<code>css</code>创建线程，进行异步加载，并继续解析文档。</p>\n</li>\n<li><p>遇到<code>script</code>外部<code>js</code>,并且没有设置<code>async</code>、<code>defer</code>,浏览器同步加载，并阻塞，等待 js 加载完成并执行该脚本，然后继续解析文档。</p>\n</li>\n<li><p>遇到<code>script</code>外部 <code>js</code>，并且设置有<code>async、defer</code>，浏览器创建线程异步加载，并继续解析文档。对于<code>async</code>属性的脚本，脚本加载完成后立即执行。（异步禁止使用 document.write()<code>，</code>因为当你整个文档解析到差不多，再调用<code>document.write()</code>会把之前所有的文档流都清空，用里面的文档代替）</p>\n</li>\n<li><p>遇到<code>img</code>等（带有<code>src</code>），先正常解析 dom 结构，然后浏览器异步加载<code>src</code>，并继续解析文档。看到标签直接生产<code>dom</code>树，不用等着<code>img</code>加载完<code>src</code>。</p>\n</li>\n<li><p>当文档解析完成（<code>domTree</code>建立完毕，不是加载完毕），<code>document.readyState = &#39;interactive&#39;</code>。</p>\n</li>\n<li><p>文档解析完成后，所有设置有 defer 的脚本会按照顺序执行。（注意与<code>async</code>的不同，但同样禁止使用<code>document.write()</code>）;</p>\n</li>\n<li><p><code>document</code>对象触发<code>DOMContentLoaded</code>事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。</p>\n</li>\n<li><p>当所有<code>async</code>的脚本加载完成并执行后、<code>img</code>等加载完成后（页面所有的都执行加载完之后），<code>document.readyState = &#39;complete&#39;，&#39;window&#39;</code>对象触发<code>load</code> 事件。</p>\n</li>\n<li><p>从此，以异步响应方式处理用户输入、网络事件等。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：异步加载禁止使用 <span class=\"built_in\">document</span>.write()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"comment\">// 用window.onload 会等整个页面执行加载完才执行，消除文档流（把自己都给删了）</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：执行到 <span class=\"built_in\">document</span>.readyState 时，整个 dom 树还没有解析完成，所以不会是 interactive</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; loading</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; loading</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：我们就利用 <span class=\"built_in\">window</span>.onload 事件，看到的是 complete,代表执行加载完</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"comment\">// 用window.onload 会等整个页面执行加载完才执行，消除文档流（把自己都给删了）</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; loading</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; complete</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：如果想要看到 interactive，就用 onreadystatechenge 事件。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">document</span>.onreadystatechenge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 所有事件都是用小写</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readayState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; loading</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; interactive</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; complete</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：DOMContentloadend 事件只能用在 addEventListener 事件绑定上面</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=<span class=\"string\">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&#x27;DOMContentloaded&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,<span class=\"literal\">false</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从控制台输出：</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; loading</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; interactive</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; a</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; complete</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">通用写法是把 JS 的 script 写在最下面，为什么我们要把他写在最下面？</span><br><span class=\"line\"></span><br><span class=\"line\">写在最下面意味着上面的 dom 已经处理完毕了。<span class=\"built_in\">window</span>.onload 是整个页面加载完才执行，慢等 dom 解析完毕等执行完就执行，比较快。如下</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload <span class=\"comment\">// : 区别：慢，只要有一个图片没有加载完，window.onload 就不能用，所以效率非常低下</span></span><br><span class=\"line\"></span><br><span class=\"line\">script 标签写在上面。既能操作 div，又能 dom 解析完就处理，效率很高。但是最好还是写在最下面</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&#x27;text/javascript&#x27;</span>&gt;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&#x27;DOMContentLoad&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(div);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RegExp-正则表达式\"><a href=\"#RegExp-正则表达式\" class=\"headerlink\" title=\"RegExp 正则表达式\"></a>RegExp 正则表达式</h1><p><strong>正则表达式的作用</strong>：匹配特殊字符或有特殊搭配原则的字符的最佳选择</p>\n<p><code>RegExp</code>对象表示正则表达式，它是对字符串执行模式匹配的强大工具（判断字符串满不满要求）。正则表达式其他语言也有，规则是一样的，在这个基础上，<code>js</code>增加了自己独特的方法</p>\n<h2 id=\"创建正则表达式的方法\"><a href=\"#创建正则表达式的方法\" class=\"headerlink\" title=\"创建正则表达式的方法\"></a>创建正则表达式的方法</h2><h3 id=\"第一种方法：正则表达式字面量\"><a href=\"#第一种方法：正则表达式字面量\" class=\"headerlink\" title=\"第一种方法：正则表达式字面量 //\"></a>第一种方法：正则表达式字面量 //</h3><p><strong>正则表达式字面量：</strong><code>var 变量 = /表达式/;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abc/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(str));</span><br><span class=\"line\"><span class=\"comment\">// &gt; true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：意思是正则表达式测验一下字符串含不含有我规定的片段</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abc/</span>; <span class=\"comment\">// 我规定的片段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>; <span class=\"comment\">// 声明一个变量</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(str));</span><br><span class=\"line\"><span class=\"comment\">// 我测验一下 str 里面有没有我规定片段的片段，如果有返回 true，如果没有 false</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abce/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(str));</span><br><span class=\"line\"><span class=\"comment\">// &gt; false,顺序不对或者没有挨着，都是不算的</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：像下面这种，虽然都有 abce，但是没挨着，或者排序不对，都不算</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abce/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcde&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(str));</span><br><span class=\"line\"><span class=\"comment\">// false, 顺序不对</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/ab/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abababab&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;ab&#x27;], match 是 str 的方法，可以查看 str 匹配 reg 的内容</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方法：new-RegExp\"><a href=\"#第二种方法：new-RegExp\" class=\"headerlink\" title=\"第二种方法：new RegExp()\"></a>第二种方法：new RegExp()</h3><p><strong>new RegExp方法：</strong><code>var reg = new RegExp(&#39;pattern&#39;)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：括号里面写的规则</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(str));</span><br><span class=\"line\"><span class=\"comment\">// &gt; true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">下面是给正则表达式增加属性的方法</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式-3种-属性（修饰符）\"><a href=\"#正则表达式-3种-属性（修饰符）\" class=\"headerlink\" title=\"正则表达式 3种 属性（修饰符）\"></a>正则表达式 3种 属性（修饰符）</h2><ul>\n<li><p><code>i</code> 忽视大小写的意思</p>\n</li>\n<li><p><code>g</code> 全局匹配</p>\n</li>\n<li><p><code>m</code> 执行多行匹配</p>\n</li>\n</ul>\n<p><strong><code>i</code></strong> <em>是 ignoreCase的缩写，是</em><strong>忽视大小写的意思</strong>，例如:<code>var reg = /abce/i;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abce/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;ABCEd&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(str));</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>g</code></strong> <strong>是全局匹配的意思，</strong><em>选择全部的东西，例如：</em><code>var reg = /abce/g;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/ab/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;ababababab&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;ab&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/ab/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;ababababab&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(str));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;ab&#x27;,&#x27;ab&#x27;,&#x27;ab&#x27;,&#x27;ab&#x27;,&#x27;ab&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>m</code> 是执行多行匹配</strong><em>，例如：</em><code>var reg = /abce/m;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：^a 的意思是必须是 a 开头的</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^a/gm</span>; <span class=\"comment\">// g是全局匹配，选择全部的东西</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcde\\na&#x27;</span>; <span class=\"comment\">// \\n 是换行的意思，转义字符,就是实际上已经是两行了</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;a&#x27;,&#x27;a&#x27;];</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式的表达式\"><a href=\"#正则表达式的表达式\" class=\"headerlink\" title=\"正则表达式的表达式\"></a>正则表达式的表达式</h2><ul>\n<li><p><code>reg.test()</code><strong>只能判断这个字符有没有符合要求的判断，返回的结果只有</strong><code>true</code><strong>和</strong><code>false</code></p>\n</li>\n<li><p><code>str.match()</code><strong>可以把所有的东西匹配出来，返回给你，比上一种方法更直观，还能告诉你返回了多少个</strong></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：想把一、二、三位都是数字都匹配出来，不同，可变化的数字，可以用 [] 来写，</span><br><span class=\"line\">一个 [] 可以代表一个数，[] 里面放的是范围，是一个区间，如 [<span class=\"number\">1234567890</span>] ，</span><br><span class=\"line\">如下图：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[1234567890][1234567890][1234567890]/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 里面放了3个[],就代表可以匹配3个数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;123adsf654as8df56d4f&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;123&#x27;,&#x27;654&#x27;];</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[ab][cd][d]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;bcd&#x27;]，指的是和 ab、cd、d匹配的数字</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：<span class=\"number\">0</span>-<span class=\"number\">9</span> 是指 <span class=\"number\">0</span> 到 <span class=\"number\">9</span>，A-Z 是指大 A 到 Z，a-z 是指小 a - z</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[0-9A-Za-z][cd][d]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcd&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 就相当于字符和数字全部匹配了，也可以 A-z,直接从大A到小z</span></span><br><span class=\"line\"><span class=\"comment\">// 这是按 ASCII 码排序的，从大写到小可以写成 A-z</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[0-9A-z][cd][d]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;ab1cd&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [1cd]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：^ 在正则表达式里面和外面的意思不一样，在正则表达式里面是 非 的意思</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^a][^b]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;ab1cd&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;b1&#x27;,&#x27;cd&#x27;]，就是打印出不是 a 开头的和 b 开头的东西</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：| 在正则表达式种是 或 的意思</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(abc|bcd)/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;abc&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(abc|bcd)[0-9]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;bcd2&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;bcd2&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式的元字符\"><a href=\"#正则表达式的元字符\" class=\"headerlink\" title=\"正则表达式的元字符\"></a>正则表达式的元字符</h2><p><strong>正则表达式的元字符和表达式是要给东西;</strong></p>\n<p><strong>元字符（Metacharacter）是拥有特殊含义的字符;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">字符             | 描述</span><br><span class=\"line\"></span><br><span class=\"line\">\\               | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符</span><br><span class=\"line\"></span><br><span class=\"line\">()              | 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和 \\)</span><br><span class=\"line\"></span><br><span class=\"line\">[]              | 标记一个中括号表达式的开始。要匹配 [，请使用 \\[</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;              | 标记限定符表达式的开始。要匹配 &#123;，请使用 \\&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">^               | 以什么什么开头，匹配输入字符串的开始位置。如果设置了 <span class=\"built_in\">RegExp</span> 对象的 Multiline 属性，^ 也匹配 <span class=\"string\">&#x27;\\n&#x27;</span> 或 <span class=\"string\">&#x27;\\r&#x27;</span> 之后的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">n$              | 以什么什么结尾，匹配任何结尾为 n 的字符串。 匹配输入字符串的结束位置。如果设置了<span class=\"built_in\">RegExp</span> 对象的 Multiline 属性，$ 也匹配 <span class=\"string\">&#x27;\\n&#x27;</span> 或 <span class=\"string\">&#x27;\\r&#x27;</span> 之前的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">$n              | 代表第几个子表达式的内容，比如：$<span class=\"number\">1</span> 代表第一个子表达式的内容</span><br><span class=\"line\"></span><br><span class=\"line\">n*              | 匹配任何包含零个或多个 n 的字符串。这个变量可以出现 <span class=\"number\">0</span> 到无数次。 匹配前面的子表达式零次或多次。例如，zo* 能匹配 <span class=\"string\">&quot;z&quot;</span> 以及 <span class=\"string\">&quot;zoo&quot;</span>。* 等价于&#123;<span class=\"number\">0</span>,&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">n+              | 匹配任何包含至少一个 n 的字符串。这个变量可以出现 <span class=\"number\">1</span> 到无数次。 匹配前面的子表达式一次或多次。例如，<span class=\"string\">&#x27;zo+&#x27;</span> 能匹配 <span class=\"string\">&quot;zo&quot;</span> 以及 <span class=\"string\">&quot;zoo&quot;</span>，但不能匹配 <span class=\"string\">&quot;z&quot;</span>。+ 等价于 &#123;<span class=\"number\">1</span>,&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">n?              | 匹配任何包含零个或一个 n 的字符串。这个变量 <span class=\"number\">0</span>或 <span class=\"number\">1</span> 个一匹配。匹配前面的子表达式零次或一次。例如，<span class=\"string\">&quot;do(es)?&quot;</span> 可以匹配 <span class=\"string\">&quot;do&quot;</span> 或 <span class=\"string\">&quot;does&quot;</span> 中的<span class=\"string\">&quot;do&quot;</span> 。? 等价于 &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;。</span><br><span class=\"line\"></span><br><span class=\"line\">n&#123;X&#125;            | 匹配包含 X 个 n 的序列的字符串。n 是一个非负整数。匹配确定的 n 次。例如，<span class=\"string\">&#x27;o&#123;2&#125;&#x27;</span> 不能匹配 <span class=\"string\">&quot;Bob&quot;</span> 中的 <span class=\"string\">&#x27;o&#x27;</span>，但是能匹配 <span class=\"string\">&quot;food&quot;</span> 中的两个 o。</span><br><span class=\"line\"></span><br><span class=\"line\">n&#123;X,&#125;           | 匹配包含至少 X 个 n 的序列的字符串。n 是一个非负整数。至少匹配n 次。例如，<span class=\"string\">&#x27;o&#123;2,&#125;&#x27;</span> 不能匹配 <span class=\"string\">&quot;Bob&quot;</span> 中的 <span class=\"string\">&#x27;o&#x27;</span>，但能匹配 <span class=\"string\">&quot;foooood&quot;</span> 中的所有 o。<span class=\"string\">&#x27;o&#123;1,&#125;&#x27;</span> 等价于 <span class=\"string\">&#x27;o+&#x27;</span>。<span class=\"string\">&#x27;o&#123;0,&#125;&#x27;</span> 则等价于 <span class=\"string\">&#x27;o*&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">n&#123;X,Y&#125;          | 匹配包含 X 至 Y 个 n 的序列的字符串。m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，<span class=\"string\">&quot;o&#123;1,3&#125;&quot;</span> 将匹配 <span class=\"string\">&quot;fooooood&quot;</span> 中的前三个 o。<span class=\"string\">&#x27;o&#123;0,1&#125;&#x27;</span> 等价于 <span class=\"string\">&#x27;o?&#x27;</span>。请注意在逗号和两个数之间不能有空格。</span><br><span class=\"line\"></span><br><span class=\"line\">n?              | 匹配任何包含零个或一个 n 的字符串。这个变量 <span class=\"number\">0</span> 或 <span class=\"number\">1</span> 个一匹配。 当该字符紧跟在任何一个其他限制符 (*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 <span class=\"string\">&quot;oooo&quot;</span>，<span class=\"string\">&#x27;o+?&#x27;</span> 将匹配单个 <span class=\"string\">&quot;o&quot;</span>，而 <span class=\"string\">&#x27;o+&#x27;</span> 将匹配所有 <span class=\"string\">&#x27;o&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">.               | 查找单个字符，除了换行和行结束符。匹配除 <span class=\"string\">&quot;\\n&quot;</span> 和 <span class=\"string\">&quot;\\r&quot;</span> 之外的任何单个字符。要匹配包括 <span class=\"string\">&#x27;\\n&#x27;</span> 和 <span class=\"string\">&quot;\\r&quot;</span> 在内的任何字符，请使用象 <span class=\"string\">&#x27;[.\\n\\r]&#x27;</span> 的模式。</span><br><span class=\"line\"></span><br><span class=\"line\">(?:pattern)     | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 <span class=\"string\">&quot;或&quot;</span> 字符 (|) 来组合一个模式的各个部分是很有用。例如， <span class=\"string\">&#x27;industr(?:y|ies)&#x27;</span> 就是一个比 <span class=\"string\">&#x27;industry|industries&#x27;</span> 更简略的表达式。</span><br><span class=\"line\"></span><br><span class=\"line\">(?=n)           | 匹配任何其后紧接指定字符串 n 的字符串。正向预查，在任何匹配 n 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，<span class=\"string\">&#x27;Windows (?=95|98|NT|2000)&#x27;</span> 能匹配 <span class=\"string\">&quot;Windows 2000&quot;</span> 中的 <span class=\"string\">&quot;Windows&quot;</span> ，但不能匹配 <span class=\"string\">&quot;Windows 3.1&quot;</span> 中的 <span class=\"string\">&quot;Windows&quot;</span>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span><br><span class=\"line\"></span><br><span class=\"line\">(?!n)           | 匹配任何其后没有紧接指定字符串 n 的字符串。后面不跟着 n 负向预查，在任何不匹配 n 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如<span class=\"string\">&#x27;Windows (?!95|98|NT|2000)&#x27;</span> 能匹配 <span class=\"string\">&quot;Windows 3.1&quot;</span> 中的 <span class=\"string\">&quot;Windows&quot;</span>，但不能匹配 <span class=\"string\">&quot;Windows 2000&quot;</span> 中的 <span class=\"string\">&quot;Windows&quot;</span>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span><br><span class=\"line\"></span><br><span class=\"line\">x|y             | 形容或。匹配 x 或 y。例如，<span class=\"string\">&#x27;z|food&#x27;</span> 能匹配 <span class=\"string\">&quot;z&quot;</span> 或 <span class=\"string\">&quot;food&quot;</span>。<span class=\"string\">&#x27;(z|f)ood&#x27;</span> 则匹配 <span class=\"string\">&quot;zood&quot;</span> 或 <span class=\"string\">&quot;food&quot;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">[^a-z]          | 形容非，负值字符范围。匹配任何不在指定范围内的任意字符。例如，<span class=\"string\">&#x27;[^a-z]&#x27;</span> 就是匹配任何不在 <span class=\"string\">&#x27;a&#x27;</span> 到 <span class=\"string\">&#x27;z&#x27;</span> 范围内的任意字符。</span><br><span class=\"line\"></span><br><span class=\"line\">\\cx             | 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 <span class=\"string\">&#x27;c&#x27;</span> 字符。</span><br><span class=\"line\"></span><br><span class=\"line\">\\b              | 匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class=\"string\">&#x27;er\\b&#x27;</span> 可以匹配<span class=\"string\">&quot;never&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>，但不能匹配 <span class=\"string\">&quot;verb&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">\\B              | 匹配非单词边界。<span class=\"string\">&#x27;er\\B&#x27;</span> 能匹配 <span class=\"string\">&quot;verb&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>，但不能匹配 <span class=\"string\">&quot;never&quot;</span> 中的 <span class=\"string\">&#x27;er&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">\\s              | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</span><br><span class=\"line\"></span><br><span class=\"line\">    \\n              | 匹配一个换行符。等价于 \\x0a 和 \\cJ。</span><br><span class=\"line\">    \\f              | 匹配一个换页符。等价于 \\x0c 和 \\cL。</span><br><span class=\"line\">    \\v              | 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</span><br><span class=\"line\">    \\r              | 匹配一个回车符。等价于 \\x0d 和 \\cM。</span><br><span class=\"line\">    \\t              | 匹配一个制表符。等价于 \\x09 和 \\cI</span><br><span class=\"line\"></span><br><span class=\"line\">\\S              | 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]</span><br><span class=\"line\"></span><br><span class=\"line\">\\d              | 匹配一个数字字符。等价于 [<span class=\"number\">0</span>-<span class=\"number\">9</span>]。</span><br><span class=\"line\"></span><br><span class=\"line\">\\D              | 匹配一个非数字字符。等价于 [^<span class=\"number\">0</span>-<span class=\"number\">9</span>]。</span><br><span class=\"line\"></span><br><span class=\"line\">\\w              | 匹配包括下划线的任何单词字符。就是于<span class=\"string\">&#x27;[A-Za-z0-9_]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [a-z]           | 字符范围。匹配指定范围内的任意字符。例如，<span class=\"string\">&#x27;[a-z]&#x27;</span> 可以匹配 <span class=\"string\">&#x27;a&#x27;</span> 到 <span class=\"string\">&#x27;z&#x27;</span> 范围内的任意小写字母字符。</span><br><span class=\"line\"></span><br><span class=\"line\">    [A-Z]           | 字符范围。匹配指定范围内的任意字符。例如，<span class=\"string\">&#x27;[A-A]&#x27;</span> 可以匹配 <span class=\"string\">&#x27;A&#x27;</span> 到 <span class=\"string\">&#x27;Z&#x27;</span> 范围内的任意小写字母字符。</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"number\">0</span>-<span class=\"number\">9</span>]           | 字符范围。匹配指定范围内的任意字符。例如，<span class=\"string\">&#x27;[0-9]&#x27;</span> 可以匹配 <span class=\"string\">&#x27;0&#x27;</span> 到 <span class=\"string\">&#x27;9&#x27;</span> 范围内的任意小写字母字符。</span><br><span class=\"line\"></span><br><span class=\"line\">\\W              | 匹配任何非单词字符。等价于 <span class=\"string\">&#x27;[^A-Za-z0-9_]&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">\\n              | 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (<span class=\"number\">0</span>-<span class=\"number\">7</span>)，则 n 为一个八进制转义值。</span><br><span class=\"line\"></span><br><span class=\"line\">\\uxxxx          | 查找以十六进制数 xxxx 规定的 Unicode 字符。 匹配 xxxx，其中 xxxx 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)</span><br><span class=\"line\"></span><br><span class=\"line\">贪婪匹配         | 贪婪匹配。变成贪婪匹配（能少就不多），在量词后面加个<span class=\"string\">&#x27;？&#x27;</span>号。例如：<span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a+?/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">懒惰性           | 懒惰性则是正则在成功捕获一次后不管后边的字符串有没有符合条件的都不再捕获。如果想捕获目标中所有符合条件的字符串的话，我们可以用标识符g来标明是全局捕获</span><br></pre></td></tr></table></figure>\n\n<p><strong>运算符的优先级：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`从左到右进行运算,不同优先级的运算先高后低:`</span></span><br><span class=\"line\"></span><br><span class=\"line\">运算符                      | 描述</span><br><span class=\"line\"></span><br><span class=\"line\">\\                          | 转义符</span><br><span class=\"line\"></span><br><span class=\"line\">(), (?:), (?=), []          | 圆括号和方括号</span><br><span class=\"line\"></span><br><span class=\"line\">*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;   | 限定符</span><br><span class=\"line\"></span><br><span class=\"line\">^, $, \\任何元字符、任何字符    | 定位点和序列（即：位置和顺序）</span><br><span class=\"line\"></span><br><span class=\"line\">|                           | 替换，<span class=\"string\">&quot;或&quot;</span>操作字符具有高于替换运算符的优先级，使得<span class=\"string\">&quot;m|food&quot;</span>匹配<span class=\"string\">&quot;m&quot;</span>或<span class=\"string\">&quot;food&quot;</span>。若要匹配<span class=\"string\">&quot;mood&quot;</span>或<span class=\"string\">&quot;food&quot;</span>，请使用括号创建子表达式，从而产生<span class=\"string\">&quot;(m|f)ood&quot;</span>。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RegExp-对象方法、属性\"><a href=\"#RegExp-对象方法、属性\" class=\"headerlink\" title=\"RegExp 对象方法、属性\"></a>RegExp 对象方法、属性</h2><p><strong>RegExp 对象方法属性（FF是火狐浏览器，IE 的 ie 浏览器，从哪个版本开始兼容）;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">属性        | 描述</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">global</span>      | <span class=\"built_in\">RegExp</span> 对象是否具有标志 g，进行全局匹配</span><br><span class=\"line\"></span><br><span class=\"line\">ignoreCase  | <span class=\"built_in\">RegExp</span> 对象是否具有标志 i，不区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">input       | 被匹配的串</span><br><span class=\"line\"></span><br><span class=\"line\">lastIndex   | 一个整数，标示开始下一次匹配的字符位置</span><br><span class=\"line\"></span><br><span class=\"line\">lastParen   | 被最后一个括号括起来的子串</span><br><span class=\"line\"></span><br><span class=\"line\">lastContent | 最近一次匹配以左的子串</span><br><span class=\"line\"></span><br><span class=\"line\">multiline   | <span class=\"built_in\">RegExp</span> 对象是否具有标志 m，进行多行匹配</span><br><span class=\"line\"></span><br><span class=\"line\">source      | 正则表达式的源文本</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法        | 描述</span><br><span class=\"line\"></span><br><span class=\"line\">compile     | 编译正则表达式</span><br><span class=\"line\"></span><br><span class=\"line\">exec        | 检索字符串中指定的值。返回找到的值，并确定位置</span><br><span class=\"line\"></span><br><span class=\"line\">test        | 检索字符串中指定的值，返回<span class=\"built_in\">Boolean</span>值（<span class=\"literal\">true</span> &amp; <span class=\"literal\">false</span>）</span><br><span class=\"line\"></span><br><span class=\"line\">match       | 找到一个或多个正则表达式的匹配</span><br><span class=\"line\"></span><br><span class=\"line\">search      | 检索与正则表达式相匹配的值，返回的不是 -<span class=\"number\">1</span> 都匹配成功了，返回的是匹配这个东西的位置</span><br><span class=\"line\"></span><br><span class=\"line\">split       | 把字符串分割为字符串数组</span><br><span class=\"line\"></span><br><span class=\"line\">replace     | 替换和正则表达式匹配的字符串，replace 的精华是正则表达式</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><p>*？意思是能取 0，就不取多</p>\n</li>\n<li><p>想匹配空格，直接写，就可以了</p>\n</li>\n<li><p>想把选中的字符替换成$，直接写$是不行的，需要加上转义字符$</p>\n<p> 由于在替换文本里面$有了特殊的含义（$代表反向引用），如果想要是替换 $ 这个字符的话，需要写成 $$，充当转义字符</p>\n</li>\n<li><p>正则表达式要匹配一个反向引用的东西，写\\</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;aa\\\\aaaa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\\\/g</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;\\&#x27;]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在正则表达式里面要匹配问号？写? 其余*+-()星号加号减号都类似</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;aa?aaaa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\?/g</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg));</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;?&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：下面是想去重，变成 abc，先匹配一串，再取一</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;aaaaaaaaaaaabbbbbbbbbccccccccc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\w)\\1*/g</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(reg,$<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">百度招聘 <span class=\"number\">14</span> 年最后一题:</span><br><span class=\"line\">给 <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;100000000000&#x27;</span>; 这个数字科学计数法，每隔三位打点</span><br><span class=\"line\">思路：找规律，从后往前查，每三位打个点，换个空进去【什么样的空？后面的数 一定是 <span class=\"number\">3</span> 的倍数，(\\d&#123;<span class=\"number\">3</span>&#125;)+是 <span class=\"number\">3</span> 的倍数位个数字，这里面的东西一到多个，第一个/ 后面的空后面加上正向预查，后面是<span class=\"number\">3</span> 的倍数位个数字，$以什么结尾】空的后面跟 着 <span class=\"number\">3</span> 的倍数位个数字并且以这个结尾。\\B 非单词边界</span><br><span class=\"line\"></span><br><span class=\"line\">答案：</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;1000000000000&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(?=(\\B)(\\d&#123;3&#125;))+$/g</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(reg,<span class=\"string\">&#x27;.&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关面试题\"><a href=\"#相关面试题\" class=\"headerlink\" title=\"相关面试题\"></a>相关面试题</h2><blockquote>\n<ol>\n<li> 正则表达式实现aabb的形式变成bbaa</li>\n<li> 给10000000000三位打点 变成 10.000.000.000</li>\n<li> 字符串去重 aaaaaaaaaaaaaaaaaaaaaabbbbbbbbcccccccccc变成abc</li>\n<li> 把the-first-name转换成小驼峰式theFirstName</li>\n<li> 匹配结尾的数字</li>\n<li> 统一空格数</li>\n<li> 判断字符串是不是由数字构成</li>\n<li> 删除字符串中的空格</li>\n<li> 身份证号匹配</li>\n<li> 将字符串”select student.*,result.* from student inner join result on student.id = result.studentid” 和字符串”select * from student “中的student替换成key值</li>\n</ol>\n</blockquote>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><p><strong><code>BOM</code></strong> 是 <strong><code>brower object model</code></strong> 的缩写，简称浏览器对象模型，主要处理浏览器窗口和框架，描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，回退历史记录，获取url……。</p>\n<h2 id=\"一、BOM-与-DOM（Document-Object-Model）的关系\"><a href=\"#一、BOM-与-DOM（Document-Object-Model）的关系\" class=\"headerlink\" title=\"一、BOM 与 DOM（Document Object Model）的关系\"></a>一、BOM 与 DOM（Document Object Model）的关系</h2><p><code>javascript</code>是通过访问<code>BOM</code>对象来访问、控制、修改浏览器</p>\n<p><code>window</code>是BOM的属性，也就是说<code>BOM</code>的<code>window</code>包含了<code>document</code>，因此通过<code>window</code>对象的<code>document</code>属性就可以访问、检索、修改文档内容与结构</p>\n<p><code>document</code>对象又是<code>DOM</code>模型的根节点。因此，<code>BOM</code>包含了<code>DOM</code>，浏览器提供出来给予访问的是<code>BOM</code>对象，从BOM对象再访问到<code>DOM</code>对象，从而js可以操作浏览器以及浏览器读取到的文档</p>\n<p><code>DOM</code>的大部分内容都是<code>W3c</code>标准规范，所以兼容性很好，不需要太多的兼容性代码，而<code>BOM</code>则不一样，<code>BOM</code>没有<code>W3c</code>规范，每个浏览器厂家的规范也就不一样了。</p>\n<h2 id=\"二、BOM对象包含的对象\"><a href=\"#二、BOM对象包含的对象\" class=\"headerlink\" title=\"二、BOM对象包含的对象\"></a>二、BOM对象包含的对象</h2><p><strong>不是说BOM下面只包含了一个window对象吗？其实BOM对象下面只有一个window对象，但是因为了解清除，所以其他四个也是比较重要的对象了;</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Window      | Javascript 层级中的顶层对象，表示浏览器窗口</span><br><span class=\"line\"></span><br><span class=\"line\">Navigator   | 包含客户端浏览器的信息。（比如浏览器的版本号）</span><br><span class=\"line\"></span><br><span class=\"line\">History     | 包含了浏览器窗口访问过的URL（比如历史记录，前进、后退）</span><br><span class=\"line\"></span><br><span class=\"line\">Location    | 包含了当前URL的信息（地址栏中的信息）</span><br><span class=\"line\"></span><br><span class=\"line\">Screen      | 包含了客户端显示屏的信息（返回一些屏幕信息，基本上用不到）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Window-对象\"><a href=\"#Window-对象\" class=\"headerlink\" title=\"Window 对象\"></a>Window 对象</h3><p><strong><code>Window</code>对象表示一个浏览器窗口或一个框架，在客户端JavaScript中，<code>Window</code>对象是全局对象，所有的表达式都在当前的环境中计算，也就是说，要引用当前窗口根本不需要特殊的语法，可以把那个窗口的属性作为全局变量来使用。例如，可以只写<code>document</code>，而不必写<code>window.document</code>；</strong></p>\n<h4 id=\"window-对象属性\"><a href=\"#window-对象属性\" class=\"headerlink\" title=\"window 对象属性\"></a>window 对象属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`closed`</span>        | 返回窗口是否已被关闭，例：<span class=\"built_in\">window</span>.closed;</span><br><span class=\"line\"></span><br><span class=\"line\">defaultStatus   | 设置或返回窗口状态栏中的默认文本。（仅Opera支持）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>        | 对 Document 对象的只读引用，请参阅 Document 对象</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`history`</span>       | 对 History 对象的只读引用。请参数 History 对象</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`innerHeight`</span>   | 返回窗口的文档显示区的高度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`innerWidth`</span>    | 返回窗口的文档显示区的宽度</span><br><span class=\"line\"></span><br><span class=\"line\">length          | 设置或返回窗口中的框架数量</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`location`</span>      | 用于窗口或框架的 Location 对象，请参阅 Location 对象</span><br><span class=\"line\"></span><br><span class=\"line\">name            | 设置或返回窗口的名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`Navigator`</span>     | 对 Navigator 对象的只读引用，请参阅 Navigator 对象</span><br><span class=\"line\"></span><br><span class=\"line\">opener          | 返回对创建此窗口的窗口的引用</span><br><span class=\"line\"></span><br><span class=\"line\">outerheight     | 返回窗口的外部高度</span><br><span class=\"line\"></span><br><span class=\"line\">outerwidth      | 返回窗口的外部宽度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`pageXoffset`</span>   | 设置或返回当前页面相对于窗口显示区左上角的 X 位置</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`pageYoffset`</span>   | 设置或返回当前页面相对于窗口显示区左上角的 Y 位置</span><br><span class=\"line\"></span><br><span class=\"line\">parent          | 返回父窗口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`Screen`</span>        | 对 Screen 对象的只读引用，请参数 Screen 对象</span><br><span class=\"line\"></span><br><span class=\"line\">self            | 返回对当前窗口的引用，等价于 Window 属性</span><br><span class=\"line\"></span><br><span class=\"line\">status          | 设置窗口状态栏的文本（默认只支持 Opera）</span><br><span class=\"line\"></span><br><span class=\"line\">top             | 返回最顶层的先辈窗口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>          | <span class=\"built_in\">window</span> 属性等价于 self 属性，它包含了对窗口自身的引用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`screenLeft`</span>    | 返回窗口相对于屏幕的 X 坐标。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`screenTop`</span>     | 返回窗口相对于屏幕的 Y 坐标。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`screenX`</span>       | 返回窗口相对于屏幕的 X 坐标。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`screenY`</span>       | 返回窗口相对于屏幕的 Y 坐标。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"window-对象方法\"><a href=\"#window-对象方法\" class=\"headerlink\" title=\"window 对象方法\"></a>window 对象方法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`alert()`</span>           | 显示或弹出带有一段消息和一个确认按钮的警告框</span><br><span class=\"line\"></span><br><span class=\"line\">blur()              | 把键盘焦点从顶层窗口移开</span><br><span class=\"line\"></span><br><span class=\"line\">focus()             | 把键盘焦点给予一个窗口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`setInterval()`</span>     | 按照指定的周期（以毫秒来调用函数或计算表达式），定时器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`setTimerout()`</span>     | 在指定的毫秒数后调用函数或计算表达式，定时器，只执行一次</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`clearInterval()`</span>   | 取消由<span class=\"built_in\">setInterval</span>设置的定时器tiemout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`clearTimeout()`</span>    | 取消由<span class=\"built_in\">setTimeout</span>设置的定时器tiemout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`close(`</span>)           | 关闭浏览器窗口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`confirm()`</span>         | 显示或弹出带有一段消息以及确认按钮和取消按钮的对话框，确认返回<span class=\"literal\">true</span>，取消返回<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">createPopup()       | 创建一个弹出窗口，只有ie支持（不包括ie11）</span><br><span class=\"line\"></span><br><span class=\"line\">moveBy(x,y)         | 可相对窗口的当前坐标把它移动指定的像素，moveBy(<span class=\"number\">100</span>,<span class=\"number\">100</span>)中的<span class=\"number\">100</span>就代表<span class=\"number\">100</span>像素，可以配合 open()来时使用</span><br><span class=\"line\"></span><br><span class=\"line\">moveTO()            | 把窗口的左上角移动到要给指定的坐标</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`open()`</span>            | 打开一个新的浏览器窗口或查找一个已命名的窗口，<span class=\"built_in\">window</span>.open(URL,name（窗口的名称）,features,replace),例如：open(<span class=\"string\">&#x27;url&#x27;</span>,<span class=\"string\">&#x27;name（窗口的名称）&#x27;</span>,<span class=\"string\">&#x27;属性&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print()             | 打印（就是打印当前页面）当前窗口内容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`prompt()`</span>          | 显示可提示用户输入的对话框</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`resizeBy()`</span>        | 按照指定的像素调整窗口的大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`resizeTo()`</span>        | 把窗口的大小调整到指定宽度和高度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`scrollBy()`</span>        | 按照指定的像素值来滚动内容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`scrollTo()`</span>        | 把内容滚动到指定的坐标</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Navigator-对象\"><a href=\"#Navigator-对象\" class=\"headerlink\" title=\"Navigator 对象\"></a>Navigator 对象</h3><p><strong><code>Navigator</code>对象包含的属性描述了正在使用的浏览器。可以使用这些属性进行平台专用的配置。虽然这个对象的名称显而易见的是<code>Netscape</code>的<code>Navigator</code>浏览器，但其他实现了<code>JavaScript</code>的浏览器也支持这个对象</strong></p>\n<h4 id=\"Navigator-对象属性\"><a href=\"#Navigator-对象属性\" class=\"headerlink\" title=\"Navigator 对象属性\"></a>Navigator 对象属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">appCodeName      | 返回浏览器的代码名。以 Netscape 代码为基础的浏览器中，它的值是<span class=\"string\">&quot;Mozila&quot;</span>。为兼容Microsoft也是</span><br><span class=\"line\"></span><br><span class=\"line\">appMinorVersion  | 返回浏览器的次级版本。（IE4、Opera支持）</span><br><span class=\"line\"></span><br><span class=\"line\">appName          | 返回浏览器的名称</span><br><span class=\"line\"></span><br><span class=\"line\">appVersion       | 返回浏览器的平台和版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">browserLanguage  | 返回当前浏览器的语言（IE 和 Opera 支持）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`cookieEnabled`</span>  | 返回指明浏览器中是否启用 cookie 的布尔值</span><br><span class=\"line\"></span><br><span class=\"line\">cpuClass         | 返回浏览器系统的 CPU 等级（IE支持）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`onLina`</span>         | 返回执行系统是否处于脱机模式的布尔值（连没连网）</span><br><span class=\"line\"></span><br><span class=\"line\">platform         | 返回运行浏览器的操作系统平台</span><br><span class=\"line\"></span><br><span class=\"line\">systemLanguage   | 返回当前系统的默认语言。（IE支持）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`userAgent`</span>      | 返回有客户机发送服务器的 user-agent 头部的值。</span><br><span class=\"line\"></span><br><span class=\"line\">userLanguage     | 返回操作系统设定的自然语言。（IE 和 Opera 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">plugins          | 返回包含客户端安装的所欲插件的数组</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Navigator-对象方法\"><a href=\"#Navigator-对象方法\" class=\"headerlink\" title=\"Navigator 对象方法\"></a>Navigator 对象方法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">javaEnabled()     | 规定浏览器是否支持并启用了 Java</span><br><span class=\"line\"></span><br><span class=\"line\">taintEnabled()    | 规定浏览器是否启用数据污点（data tainting）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h3><p><strong>History 对象包含用户（在浏览器窗口中）访问过的URL;</strong></p>\n<h4 id=\"History-对象属性\"><a href=\"#History-对象属性\" class=\"headerlink\" title=\"History 对象属性\"></a>History 对象属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">length      | 返回浏览器历史列表中的 URL 数量</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"History-对象方法\"><a href=\"#History-对象方法\" class=\"headerlink\" title=\"History 对象方法\"></a>History 对象方法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">back()      | 加载 history 列表中的前一个 URL</span><br><span class=\"line\"></span><br><span class=\"line\">forward()   | 加载 history 列表中的下一个 URL</span><br><span class=\"line\"></span><br><span class=\"line\">go()        | 加载 history 列表中的某个具体页面,例如 history.go(-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Location-对象\"><a href=\"#Location-对象\" class=\"headerlink\" title=\"Location 对象\"></a>Location 对象</h3><p><strong>Location 对象包含有关当前 URL 的信息;</strong></p>\n<h4 id=\"Location-对象属性\"><a href=\"#Location-对象属性\" class=\"headerlink\" title=\"Location 对象属性\"></a>Location 对象属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`hash`</span>        | 设置或返回从井号（#）开始的 URL（锚）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`host`</span>        | 加载 history 列表中的下一个 URL</span><br><span class=\"line\"></span><br><span class=\"line\">hostname      | 加载 history 列表中的某个具体页面,例如 history.go(-<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`href`</span>        | 设置或返回完整的 URL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`pathname`</span>    | 设置或返回当前 URL 的路径部分</span><br><span class=\"line\"></span><br><span class=\"line\">port          | 设置或返回当前 URL 的端口号</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`protocol`</span>    | 设置或返回当前 URL 的协议</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`search`</span>      | 设置或返回从问号（？）开始的 URL(查询部分)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Location-对象方法\"><a href=\"#Location-对象方法\" class=\"headerlink\" title=\"Location 对象方法\"></a>Location 对象方法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`assign()`</span>          | 加载新的文档</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`reload(&#x27;force&#x27;)`</span>   | 重新加载当前文档，参数可选，不填或填 <span class=\"literal\">false</span> 则取浏览器缓存的文档</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`replace()`</span>         | 用新的文档替换当前文档</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Screen-对象\"><a href=\"#Screen-对象\" class=\"headerlink\" title=\"Screen 对象\"></a>Screen 对象</h3><blockquote>\n<p><code>Screen</code>对象包含有关客户端显示屏幕的信息。每个<code>Window</code>对象的<code>screen</code>属性都引用一个<code>Screen</code>对象。<code>Screen</code>对象中存放着有关显示浏览器屏幕的信息。<code>Javascript</code>程序将利用这些信息来优化它们的输出，以达到用户的显示要求。例如，一个程序可以根据显示器的尺寸选择使用大图像还是使用小图像，它还可以根据显示器的颜色深度选择使用<code>16</code>位色还是使用<code>8</code>位色的图形。另外，<code>JavaScript</code>程序还能根据有关屏幕尺寸的信息将新的浏览器窗口定位在屏幕中间</p>\n</blockquote>\n<h4 id=\"Screen-对象属性\"><a href=\"#Screen-对象属性\" class=\"headerlink\" title=\"Screen 对象属性\"></a>Screen 对象属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">availHeight            | 返回显示屏的高度（除 Windows 任务栏之外）</span><br><span class=\"line\"></span><br><span class=\"line\">availWidth             | 返回显示屏的宽度（除 Windows 任务栏之外）</span><br><span class=\"line\"></span><br><span class=\"line\">bufferDepth            | 设置或返回调色板的比特深度（仅 IE 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">colorDepth             | 返回目标设备或缓冲器上的调色板的比特深度</span><br><span class=\"line\"></span><br><span class=\"line\">deviceXDPI             | 返回显示屏幕的每英寸水平点数（仅 IE 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">deviceYDPI             | 返回显示屏幕的每英寸垂直点数（仅 IE 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">fontSmoothingEnabled   | 返回用户是否在显示控制面板中启用了字体平滑（仅 IE 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">height                 | 返回显示屏幕的高度</span><br><span class=\"line\"></span><br><span class=\"line\">logicaIXDPI            | 返回显示屏幕每英寸的水平方向的常规点数（仅 IE 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">logicaIYDPI            | 返回显示屏幕每英寸的垂直方向的常规点数（仅 IE 支持）</span><br><span class=\"line\"></span><br><span class=\"line\">pixelDepth             | 返回显示器的颜色分辨率（比特每像素）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Js运动\"><a href=\"#Js运动\" class=\"headerlink\" title=\"Js运动\"></a>Js运动</h1><h2 id=\"加速运动\"><a href=\"#加速运动\" class=\"headerlink\" title=\"加速运动\"></a>加速运动</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oWrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">oWrapper.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    startMove(<span class=\"built_in\">this</span>, <span class=\"number\">300</span>); <span class=\"comment\">// this就是obj对象，300就是运动距离</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj,target</span>) </span>&#123; <span class=\"comment\">// obj 是DOM对象,target是距离</span></span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iSpeed; <span class=\"comment\">// 速度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        iSpeed = (target - obj.offsetLeft) / <span class=\"number\">8</span>; <span class=\"comment\">// 速度-DOM对象的offsetLeft，查看还有多少距离，当距离达到300就停止，除8 是因为数字太大</span></span><br><span class=\"line\">        iSpeed = iSpeed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(iSpeed) : <span class=\"built_in\">Math</span>.floor(iSpeed); <span class=\"comment\">// 当 iSpeed 大于0时，使用ceil向上取整，否则floor向下取整</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.offsetLeft == target) &#123; <span class=\"comment\">// 停止条件</span></span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">            obj.offsetLeft = target;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 不等于300时执行下面程序</span></span><br><span class=\"line\">            obj.style.left = obj.offsetLeft + iSpeed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"悬浮拉伸\"><a href=\"#悬浮拉伸\" class=\"headerlink\" title=\"悬浮拉伸\"></a>悬浮拉伸</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oWrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// oWrapper 是一个父元素，可以添加一个子元素，延伸到外面，使用冒泡触发</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">oWrapper.onmouseenter = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    startMove(<span class=\"built_in\">this</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oWrapper.onmouseleave = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    startMove(<span class=\"built_in\">this</span>, -<span class=\"number\">400</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj, target</span>) </span>&#123; <span class=\"comment\">// this就是对象，300就是运动距离</span></span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(timer); <span class=\"comment\">// 如果不停止，它会累加每次的速度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> iSpeed; <span class=\"comment\">// 速度</span></span><br><span class=\"line\">    timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        iSpeed = (target - obj.offsetLeft) / <span class=\"number\">8</span>; 速度-DOM对象的offsetLeft，查看还有多少距离</span><br><span class=\"line\">        iSpeed = iSpeed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(iSpeed) : <span class=\"built_in\">Math</span>.floor(iSpeed);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.offsetLeft === target) &#123;<span class=\"comment\">// 停止条件</span></span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 不等于300时执行下面程序</span></span><br><span class=\"line\">            obj.style.left = obj.offsetLeft + iSpeed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链式运动框架\"><a href=\"#链式运动框架\" class=\"headerlink\" title=\"链式运动框架\"></a>链式运动框架</h2><h3 id=\"透明运动函数\"><a href=\"#透明运动函数\" class=\"headerlink\" title=\"透明运动函数\"></a>透明运动函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oWrapper = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;wrapper&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">oWrapper.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        startMove(<span class=\"built_in\">this</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj, prop</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.currentStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[prop];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle(obj, <span class=\"literal\">null</span>)[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iSpeed, iCur;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        iCur = <span class=\"built_in\">parseFloat</span>(getStyle(obj,<span class=\"string\">&#x27;opacity&#x27;</span>)) * <span class=\"number\">100</span>;</span><br><span class=\"line\">        iSpeed = (target - iCur) / <span class=\"number\">7</span>;</span><br><span class=\"line\">        iSpeed = iSpeed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(iSpeed) : <span class=\"built_in\">Math</span>.floor(iSpeed);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(iCur == target)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            obj.style.opacity = (iCur + iSpeed) / <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链式运动框架-1\"><a href=\"#链式运动框架-1\" class=\"headerlink\" title=\"链式运动框架\"></a>链式运动框架</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\">obj,json,callback</span>) </span>&#123; <span class=\"comment\">// obj是DOM对象，json是参数对象，callback是回调函数（可以重复调动）</span></span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iSpeed,iCur; <span class=\"comment\">// iSpeed 为速度，iCur 是DOM元素的原参数</span></span><br><span class=\"line\">    obj.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bStop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> attr <span class=\"keyword\">in</span> json) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(attr == <span class=\"string\">&#x27;opacity&#x27;</span>) &#123;</span><br><span class=\"line\">                iCur = <span class=\"built_in\">parseFloat</span>(getStyle(obj,attr)) * <span class=\"number\">100</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                iCur = <span class=\"built_in\">parseInt</span>(getStyle(obj,attr));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            iSpeed = (json[attr] - iCur) / <span class=\"number\">7</span>; <span class=\"comment\">// 传进去的参数 - 原来的参数，查看还有多少，越来越小就代表越来越接近传进来的参数设置，就会停止，/7是因为数字太大，可以除任何一个数字</span></span><br><span class=\"line\">            iSpeed = iSpeed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(iSpeed) : <span class=\"built_in\">Math</span>.floor(iSpeed); <span class=\"comment\">//当 iSpeed 大于0时，使用ceil向上取整，否则floor向下取整，为了让iSpeed最后可以完美接近传进来的参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(attr == <span class=\"string\">&#x27;opacity&#x27;</span>) &#123;</span><br><span class=\"line\">                obj.style.opacity = (iCur + iSpeed) / <span class=\"number\">100</span>; <span class=\"comment\">// iCur 是原来提取的样式，iSpeed是速度，不断向传进来的参数靠近，越来越小，最终停止</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                obj.style[attr] = (iCur + iSpeed) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(iCur != json[attr]) &#123;</span><br><span class=\"line\">            bStop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bStop) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> callback == <span class=\"string\">&#x27;function&#x27;</span> ? callback() : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"弹性运动\"><a href=\"#弹性运动\" class=\"headerlink\" title=\"弹性运动\"></a>弹性运动</h2><h3 id=\"初级弹性运动\"><a href=\"#初级弹性运动\" class=\"headerlink\" title=\"初级弹性运动\"></a>初级弹性运动</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oNav = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">oDiv.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    startMove(<span class=\"built_in\">this</span>,<span class=\"number\">300</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iSpeed = <span class=\"number\">40</span>,a,u = <span class=\"number\">0.8</span>;</span><br><span class=\"line\">    obj.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        a = (target - obj.offsetLeft) / <span class=\"number\">8</span>;</span><br><span class=\"line\">        iSpeed += a;</span><br><span class=\"line\">        iSpeed *= u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(iSpeed) &lt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(<span class=\"number\">300</span> - obj.offsetLeft) &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            obj.style.left = obj.offsetLeft + iSpeed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"横向弹性导航\"><a href=\"#横向弹性导航\" class=\"headerlink\" title=\"横向弹性导航\"></a>横向弹性导航</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> LiArr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;nav&#x27;</span>),<span class=\"number\">0</span>); <span class=\"comment\">// 把ul下的li选中变成数组，好用forEach方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oBg = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;bg&#x27;</span>)[<span class=\"number\">0</span>]; <span class=\"comment\">// 选中ul下面的第一个li，让它独立出来，不给位置，作为背景色 // 自己悬浮</span></span><br><span class=\"line\">LiArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index</span>) </span>&#123;</span><br><span class=\"line\">    ele.onmouseenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 自己悬浮</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> newLeft = <span class=\"built_in\">this</span>.offsetLeft; <span class=\"comment\">// 自己的offstLeft属性</span></span><br><span class=\"line\">            startMove(oBg,newLeft);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iSpeed = <span class=\"number\">40</span>, <span class=\"comment\">// 初速度</span></span><br><span class=\"line\">        a, u = <span class=\"number\">0.75</span>; <span class=\"comment\">// a为接近速度，u为摩擦力</span></span><br><span class=\"line\">    obj.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        a = (target - obj.offsetLeft) / <span class=\"number\">7</span>;</span><br><span class=\"line\">        iSpeed += a;</span><br><span class=\"line\">        iSpeed *= u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(iSpeed) &lt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(target - obj.offsetLeft) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">            obj.style.left = target + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            obj.style.left = obj.offsetLeft + iSpeed + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扔球的函数\"><a href=\"#扔球的函数\" class=\"headerlink\" title=\"扔球的函数\"></a>扔球的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwBall</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    obj.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event, <span class=\"comment\">// 兼容IE</span></span><br><span class=\"line\">            timer, <span class=\"comment\">//定时器</span></span><br><span class=\"line\">            disX, <span class=\"comment\">//鼠标X、Y轴位置</span></span><br><span class=\"line\">            disY,</span><br><span class=\"line\">            lastX = obj.offsetLeft,</span><br><span class=\"line\">            lastY = obj.offsetTop,</span><br><span class=\"line\">            iSpeedX = <span class=\"number\">0</span>, <span class=\"comment\">// 鼠标向X、y轴施的力</span></span><br><span class=\"line\">            iSpeedY = <span class=\"number\">0</span>,</span><br><span class=\"line\">            that = <span class=\"built_in\">this</span>; <span class=\"comment\">// 代表this一直为obj</span></span><br><span class=\"line\">        disX = e.clientX - <span class=\"built_in\">this</span>.offsetLeft; <span class=\"comment\">// 现在的鼠标X，Y轴位置</span></span><br><span class=\"line\">        disY = e.clientY - <span class=\"built_in\">this</span>.offsetTop;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> newLeft = e.clientX - disX; <span class=\"comment\">// 移动时的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> newTop = e.clientY - disY;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(that.timer); <span class=\"comment\">// 每次移动都要停止之前的定时器，要不然会不受控</span></span><br><span class=\"line\">            iSpeedX = newLeft - lastX; <span class=\"comment\">// 更新X，Y轴施力</span></span><br><span class=\"line\">            iSpeedY = newTop - lastY;</span><br><span class=\"line\">            lastX = newLeft; <span class=\"comment\">// 更新X，Y轴位置</span></span><br><span class=\"line\">            lastY = newTop;</span><br><span class=\"line\">            that.style.left = newLeft + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">            that.style.top = newTop + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.onmousemove = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.onmouseup = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            startMoveTwo(that, iSpeedX, iSpeedY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMoveTwo</span>(<span class=\"params\">obj,iSpeedX,iSpeedY</span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 每次开始前就清空以前的计时器</span></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">    \t<span class=\"comment\">// g为初始力</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> g = <span class=\"number\">6</span>;</span><br><span class=\"line\">        obj.timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            iSpeedY += g;</span><br><span class=\"line\">            newLeft = obj.offsetLeft + iSpeedX;</span><br><span class=\"line\">            newTop = obj.offsetTop + iSpeedY;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newTop &gt;= <span class=\"built_in\">document</span>.documentElement.clientHeight - obj.offsetHeight) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当弹到左右两边的时候 *-1 反转弹回来</span></span><br><span class=\"line\">                iSpeedY *= -<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 每次 *0.8 是摩擦力，让它可以停下来</span></span><br><span class=\"line\">                iSpeedX *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                iSpeedY *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                newTop = <span class=\"built_in\">document</span>.documentElement.clientHeight - obj.offsetHeight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newTop &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                iSpeedY *= -<span class=\"number\">1</span>;</span><br><span class=\"line\">                iSpeedX *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                iSpeedY *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                newTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newLeft &gt;= <span class=\"built_in\">document</span>.documentElement.clientWidth - obj.offsetWidth) &#123;</span><br><span class=\"line\">                iSpeedX *= -<span class=\"number\">1</span>;</span><br><span class=\"line\">                iSpeedX *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                iSpeedY *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                newLeft = <span class=\"built_in\">document</span>.documentElement.clientWidth - obj.offsetHeight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newLeft &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                iSpeedX *= -<span class=\"number\">1</span>;</span><br><span class=\"line\">                iSpeedX *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                iSpeedY *= <span class=\"number\">0.8</span>;</span><br><span class=\"line\">                newLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 结束条件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(iSpeedX) &lt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(iSpeedY) &lt;= <span class=\"number\">1</span> &amp;&amp; newTop == <span class=\"built_in\">document</span>.documentElement</span><br><span class=\"line\">                .clientHeight - obj.clientHeight) &#123;</span><br><span class=\"line\">                iSpeedX = <span class=\"number\">0</span>;</span><br><span class=\"line\">                iSpeedY = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"built_in\">clearInterval</span>(obj.timer);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;over&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            obj.style.left = newLeft + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">            obj.style.top = newTop + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">        &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tab菜单切换-手风琴菜单\"><a href=\"#tab菜单切换-手风琴菜单\" class=\"headerlink\" title=\"tab菜单切换 \\ 手风琴菜单\"></a>tab菜单切换 \\ 手风琴菜单</h2><h3 id=\"tab菜单\"><a href=\"#tab菜单\" class=\"headerlink\" title=\"tab菜单\"></a>tab菜单</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tabs = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;tab&#x27;</span>); <span class=\"comment\">// 标题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> goods = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;good&#x27;</span>); <span class=\"comment\">// 内容</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tabs.length; i++) &#123;</span><br><span class=\"line\">    tabs[i].index = i;</span><br><span class=\"line\">    tabs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; goods.length; j++) &#123;</span><br><span class=\"line\">            goods[j].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        goods[<span class=\"built_in\">this</span>.index].style.display = <span class=\"string\">&#x27;block&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手风琴菜单\"><a href=\"#手风琴菜单\" class=\"headerlink\" title=\"手风琴菜单\"></a>手风琴菜单</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oInfos = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;info-con&#x27;</span>); <span class=\"comment\">// li，包裹着图片的，用js加载图片，要先写好样式   // 包裹li外面的ul标签给css样式是</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> len = oInfos.length <span class=\"comment\">// li数量，也是图片的数量</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    oInfos[i].style.backgroundImage = <span class=\"string\">&quot;url(images/&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&#x27;.png)&#x27;</span>; <span class=\"comment\">// 加载图片，用字符串串联起来</span></span><br><span class=\"line\">    oInfos[i].onmousemove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            startMove(oInfos[j], &#123;</span><br><span class=\"line\">                    <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                &#125;) <span class=\"comment\">// 鼠标悬浮的时候其他的图片宽度都改为100</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        startMove(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">width</span>: <span class=\"number\">900</span></span><br><span class=\"line\">            &#125;) <span class=\"comment\">// 鼠标悬浮时选中的图片宽度为900，看具体图片宽度多少</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    oInfos[i].onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            startMove(oInfos[i], &#123;</span><br><span class=\"line\">                <span class=\"attr\">width</span>: <span class=\"number\">240</span></span><br><span class=\"line\">            &#125;); <span class=\"comment\">// 鼠标离开的时候全部回归正常宽度，看你css给li多少宽度，240是我给的，看具体情况</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JavaScript-必会知识点（琐碎、相互独立）\"><a href=\"#JavaScript-必会知识点（琐碎、相互独立）\" class=\"headerlink\" title=\"JavaScript 必会知识点（琐碎、相互独立）\"></a>JavaScript 必会知识点（琐碎、相互独立）</h1><ol>\n<li><p><strong>属性映射 HTML属性，映射到Element;</strong></p>\n</li>\n<li><p><strong>cdn（缓存服务器）;</strong></p>\n</li>\n<li><p><strong>断点调试（debugger;）;</strong></p>\n</li>\n<li><p><strong>typeof(new Array).<strong>proto</strong>.constructor();;</strong></p>\n</li>\n</ol>\n<h2 id=\"渲染模式\"><a href=\"#渲染模式\" class=\"headerlink\" title=\"渲染模式\"></a>渲染模式</h2><blockquote>\n<p>在多年以前（IE6诞生以前），各大浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。随着web的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如IE6就是其中之一。但是考虑到以前建设的网站并不支持标准模式，所以各大浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">DOCTYPE <span class=\"comment\">// 三种标准模式的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> &lt;!DOCTYPE html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> &lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">如果当&lt;!DOCTYPE html&gt;不写，或者写错了，都会进入到怪异渲染模式中</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>渲染模式 : &lt;! DOCTYPE html&gt; 是 html5 的，写三种的任何一种都是可以的，都是正常渲染模式</strong></p>\n</li>\n<li><p><strong>怪异/混杂模式 : 试图去兼容之前的语法，去掉<!DOCTYPE html>这一行即可开启（向后兼容）</strong></p>\n</li>\n</ol>\n<p><strong>document.compatMode</strong>是判断是怪异模式还是标准模式</p>\n<p><strong>CSS1Compat – 标准模式;</strong></p>\n<p><strong>BackCompat – 怪异模式向后兼容;</strong></p>\n<p><code>怪异模式不是说对所有的浏览器都管用，主要是针对IE6及以下的浏览器版本的。</code></p>\n<p><code>怪异模式下盒模型会变成IE盒模型，行盒也会可以改变宽高</code></p>\n<p><strong>IE盒模型：box-sizing:border-box;</strong></p>\n<p><strong>属性</strong>：<em>content-box;</em></p>\n<p>元素的宽高 = 边框 + 内边距 + 内容宽高</p>\n<p><strong>属性</strong>：<em>border-box;</em></p>\n<p>元素的宽高 = width/height的宽高</p>\n<p><strong>W3c标准盒模型：</strong></p>\n<p>宽度 = 左外边距 + 左边框 + 左内边距 + width + 右内边距 + 右边框 + 右外边距</p>\n<p>高度 = 上外边距 + 上边框 + 上内边距 + height + 下内边距 + 下边框 + 下外边距</p>\n<h2 id=\"img图片预加载-图片懒加载\"><a href=\"#img图片预加载-图片懒加载\" class=\"headerlink\" title=\"img图片预加载 \\ 图片懒加载\"></a>img图片预加载 \\ 图片懒加载</h2><p><strong>图片预加载:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片预加载，就是在全部内容加载完之后再加载图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> OImg = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">OImg.src = <span class=\"string\">&#x27;图片地址&#x27;</span>;</span><br><span class=\"line\">OImg.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(OImg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>图片懒加载:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片懒加载，我需要你的时候在加载，不需要你的时候就不要加载</span></span><br><span class=\"line\">&lt;button&gt; getTime &lt;/button&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oBtn = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;button&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">OBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> OImg = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    OImg.src = <span class=\"string\">&#x27;图片地址&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(OImg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文档碎片\"><a href=\"#文档碎片\" class=\"headerlink\" title=\"文档碎片\"></a>文档碎片</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Oul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;ul&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Oli = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    Oli.innerHTML = i;</span><br><span class=\"line\">    Oul.appendChild(Oli);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是， 如果当我们要向document中添加大量数据时(比如1w条)， 如果像上面的代码一样， 逐条添加节点， 这个过程就可能会十分缓慢。<br>当然, 你也可以建个新的节点, 比如说div, 先将oP添加到div上, 然后再将div添加到body中.但这样要在body中多添加一个 &lt; div &gt; &lt; /div&gt;.但文档碎片不会产生这种节点.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> OUl = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;ul&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ODiv = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> OLi = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    OLi.innerHTML = i;</span><br><span class=\"line\">    ODiv.appendChild(OLi);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OUl.appendChild(ODiv);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了解决这个问题， 我们可以引入createDocumentFragment() 方法， 它的作用是创建一个文档碎片， 把要插入的新节点先附加在它上面， 然后再一次性添加到document中。 代码如下：</p>\n</blockquote>\n<p>代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;&lt;/ul&gt;</span><br><span class=\"line\"><span class=\"comment\">//先创建文档碎片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oFragmeng = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\"><span class=\"keyword\">var</span> OUl = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;ul&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> OLi = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    OLi.innerHTML = i;</span><br><span class=\"line\">    <span class=\"comment\">//先附加在文档碎片中</span></span><br><span class=\"line\">    oFragmeng.appendChild(OLi);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最后一次性添加到document中</span></span><br><span class=\"line\">OUl.appendChild(oFragmeng);</span><br><span class=\"line\"><span class=\"comment\">//这就是文档碎片</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当然，还有一种方法:用字符串拼接也可以</span></span><br><span class=\"line\">&lt;ul&gt;&lt;/ul&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> OUl = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;ul&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 声明一个空字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">1000</span>;i ++)&#123;</span><br><span class=\"line\">    str += <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + i + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>; <span class=\"comment\">// 让标签用字符串＋起来</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OUl.innerHTML = str; <span class=\"comment\">// 最后用innerHTML插入到ul里面</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"byClassName（封装函数，兼容性vrey-Good-）\"><a href=\"#byClassName（封装函数，兼容性vrey-Good-）\" class=\"headerlink\" title=\"byClassName（封装函数，兼容性vrey Good!）\"></a>byClassName（封装函数，兼容性vrey Good!）</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.prototype.getByClassName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classname</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allDomArr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;8&#x27;</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filterArr = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dealClass</span>(<span class=\"params\">dom</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\s+/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arrClassName = dom.className.replace(reg,<span class=\"string\">&#x27; &#x27;</span>).trim();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrClassName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    allDomArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemClassArr = dealClass(ele).split(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; itemClassArr.length;i ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(itemClassArr[i] == className)&#123;</span><br><span class=\"line\">                filterArr.push(ele);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-对象\"><a href=\"#Math-对象\" class=\"headerlink\" title=\"Math 对象\"></a>Math 对象</h2><ul>\n<li><p><code>Math.abs(num)</code> : 返回<code>num</code>的绝对值</p>\n</li>\n<li><p><code>Math.acos(num)</code> : 返回<code>num</code>的反余弦值</p>\n</li>\n<li><p><code>Math.asin(num)</code> : 返回<code>num</code>的反正弦值</p>\n</li>\n<li><p><code>Math.atan(num)</code> : 返回<code>num</code>的反正切值</p>\n</li>\n<li><p><code>Math.atan2(y,x)</code> : 返回<code>y</code>除以<code>x</code>的商的反正切值</p>\n</li>\n<li><p><code>Math.ceil(num)</code> : 返回大于<code>num</code>的最小整数</p>\n</li>\n<li><p><code>Math.cos(num)</code> : 返回<code>num</code>的余弦值</p>\n</li>\n<li><p><code>Math.exp(x)</code> : 返回以自然数为底,x次幂的数</p>\n</li>\n<li><p><code>Math.floor(num)</code> : 返回小于<code>num</code>的最大整数</p>\n</li>\n<li><p><code>Math.log(num)</code> : 返回<code>num</code>的自然对数</p>\n</li>\n<li><p><code>Math.max(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较大的一个</p>\n</li>\n<li><p><code>Math.min(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较小的一个</p>\n</li>\n<li><p><code>Math.pow(x,y)</code> : 返回<code>x</code>的<code>y</code>次方的值</p>\n</li>\n<li><p><code>Math.random()</code> : 返回<code>0</code>到<code>1</code>之间的一个随机数</p>\n</li>\n<li><p><code>Math.round(num)</code> : 返回<code>num</code>四舍五入后的值</p>\n</li>\n<li><p><code>Math.sin(num)</code> : 返回<code>num</code>的正弦值</p>\n</li>\n<li><p><code>Math.sqrt(num)</code> : 返回<code>num</code>的平方根</p>\n</li>\n<li><p><code>Math.tan(num)</code> : 返回<code>num</code>的正切值</p>\n</li>\n<li><p><code>Math.E</code> : 自然数(<code>2.718281828459045</code>)</p>\n</li>\n<li><p><code>Math.LN2</code> : <code>2</code>的自然对数(<code>0.6931471805599453</code>)</p>\n</li>\n<li><p><code>Math.LN10</code> : <code>10</code>的自然对数(<code>2.302585092994046</code>)</p>\n</li>\n<li><p><code>Math.LOG2E</code> : <code>log 2</code> 为底的自然数(<code>1.4426950408889634</code>)</p>\n</li>\n<li><p><code>Math.LOG10E</code> : <code>log 10</code> 为底的自然数(<code>0.4342944819032518</code>)</p>\n</li>\n<li><p><code>Math.PI</code> : <code>π(3.141592653589793)</code></p>\n</li>\n<li><p><code>Math.SQRT1_2</code> : <code>1/2</code>的平方根(<code>0.7071067811865476</code>)</p>\n</li>\n<li><p><code>Math.SQRT2</code> : <code>2</code>的平方根(<code>1.4142135623730951</code>)</p>\n</li>\n</ul>\n<h3 id=\"Math-random\"><a href=\"#Math-random\" class=\"headerlink\" title=\"Math.random()\"></a>Math.random()</h3><p><em><strong>生成一个随机数，生成一个 0 ~ 1 之间的一个随机数。</strong></em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i ++)&#123;</span><br><span class=\"line\">    str = arr[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">5</span>)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"><span class=\"comment\">// 可以取一个数组中任意三个字母</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i ++)&#123;</span><br><span class=\"line\">    str = arr[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">3</span> + <span class=\"number\">2</span>)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"><span class=\"comment\">// 可以取数组中2 ~ 5中的任意三个字母;</span></span><br><span class=\"line\">就比如：我想让随机数在 <span class=\"number\">2</span> ~ <span class=\"number\">5</span> 之间取一个随机数，就例如：</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.random() * <span class=\"number\">3</span> + <span class=\"number\">2</span> <span class=\"comment\">// 3是2到5之间的一个数字，2就是5-3=2；</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：抽奖</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(num &lt; <span class=\"number\">0.001</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;一等奖&#x27;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &lt; <span class=\"number\">0.01</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;二等奖&#x27;</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &lt; <span class=\"number\">0.1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;三等奖&#x27;</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;特等奖&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-对象\"><a href=\"#String-对象\" class=\"headerlink\" title=\"String 对象\"></a>String 对象</h2><h3 id=\"String-对象属性\"><a href=\"#String-对象属性\" class=\"headerlink\" title=\"String 对象属性\"></a><code>String</code> 对象属性</h3><ul>\n<li><p><code>constructor</code> 对创建该对象的函数的引用</p>\n</li>\n<li><p><code>length</code>字符串的长度</p>\n</li>\n<li><p><code>prototype</code>允许您向对象添加属性和方法</p>\n</li>\n</ul>\n<h3 id=\"String-对象方法\"><a href=\"#String-对象方法\" class=\"headerlink\" title=\"String 对象方法\"></a><code>String</code> 对象方法</h3><ul>\n<li><p><code>charAt(n)</code> ：返回在指定位置的字符，字符串的索引，第n位</p>\n</li>\n<li><p><code>charCodeAt()</code> ：返回在指定的位置的字符的<code>Unicode</code>编码。这个返回值是<code>0 - 65535</code>之间的整数。(当返回值是<code>&lt;=255</code>时为英文，当返回值<code>&gt;255</code>时为中文)</p>\n</li>\n<li><p><code>concat()</code> ：连接两个或更多字符串，并返回新的字符串。</p>\n</li>\n<li><p><code>fromCharCode()</code> ：将 Unicode 编码转为字符。</p>\n</li>\n<li><p><code>indexOf()</code> ：返回某个指定的字符串值在字符串中首次出现的位置，如果没有找到匹配的字符串则返回 -1。</p>\n</li>\n<li><p><code>includes()</code> ：查找字符串中是否包含指定的子字符串。</p>\n</li>\n<li><p><code>lastIndexOf()</code> ：从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现* 的位置。</p>\n</li>\n<li><p><code>match()</code> ：查找找到一个或多个正则表达式的匹配。</p>\n</li>\n<li><p><code>repeat()</code> ：复制字符串指定次数，并将它们连接在一起返回。</p>\n</li>\n<li><p><code>replace()</code> ：在字符串中查找匹配的子串， 并替换与正则表达式匹配的子l串。</p>\n</li>\n<li><p><code>search()</code> ：查找与正则表达式相匹配的值。</p>\n</li>\n<li><p><code>slice(a,b)</code> ：提取字符串的片断，并在新的字符串中返回被提取的部分，剪切，从<code>a</code>剪切到<code>b</code>。</p>\n</li>\n<li><p><code>split()</code> ：把字符串分割为字符串数组。</p>\n</li>\n<li><p><code>startsWith()</code> ：查看字符串是否以指定的子字符串开头。</p>\n</li>\n<li><p><code>substr()</code> ：从起始索引号提取字符串中指定数目的字符。</p>\n</li>\n<li><p><code>substring()</code> ：提取字符串中两个指定的索引号之间的字符。</p>\n</li>\n<li><p><code>toLowerCase()</code> ：把字符串转换为小写。</p>\n</li>\n<li><p><code>toUpperCase()</code> ：把字符串转换为大写。</p>\n</li>\n<li><p><code>trim()</code> ：去除字符串两边的空白</p>\n</li>\n<li><p><code>toLocaleLowerCase()</code> ：根据本地主机的语言环境把字符串转换为小写。</p>\n</li>\n<li><p><code>toLocaleUpperCase()</code> ：根据本地主机的语言环境把字符串转换为大写。</p>\n</li>\n<li><p><code>valueOf()</code> ：返回某个字符串对象的原始值。</p>\n</li>\n<li><p><code>toString()</code> ：返回一个字符串。</p>\n</li>\n<li><p><code>String HTML</code>：包装方法</p>\n</li>\n<li><p><code>HTML</code> ：返回包含在相对应的 HTML 标签中的内容。</p>\n</li>\n</ul>\n<p><strong>以下方法并非标准方法，所以可能在某些浏览器下不支持。</strong></p>\n<ul>\n<li><p><code>anchor()</code>：创建 HTML 锚。</p>\n</li>\n<li><p><code>big()</code>：用大号字体显示字符串。</p>\n</li>\n<li><p><code>blink()</code>：显示闪动字符串。</p>\n</li>\n<li><p><code>bold()</code>：使用粗体显示字符串。</p>\n</li>\n<li><p><code>fixed()</code>：以打字机文本显示字符串。</p>\n</li>\n<li><p><code>fontcolor()</code>：使用指定的颜色来显示字符串。</p>\n</li>\n<li><p><code>fontsize()</code>：使用指定的尺寸来显示字符串。</p>\n</li>\n<li><p><code>italics()</code>：使用斜体显示字符串。</p>\n</li>\n<li><p><code>link()</code>：将字符串显示为链接。</p>\n</li>\n<li><p><code>small()</code>：使用小字号来显示字符串。</p>\n</li>\n<li><p><code>strike()</code>：用于显示加删除线的字符串。</p>\n</li>\n<li><p><code>sub()</code>：把字符串显示为下标。</p>\n</li>\n<li><p><code>sup()</code>：把字符串显示为上标。</p>\n</li>\n</ul>\n<h1 id=\"javaScript书写规范：\"><a href=\"#javaScript书写规范：\" class=\"headerlink\" title=\"javaScript书写规范：\"></a>javaScript书写规范：</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">常量名</span><br><span class=\"line\">    全部大写并单词间用下划线分隔</span><br><span class=\"line\">    如：CSS_BTN_CLOSE、TXT_LOADING</span><br><span class=\"line\">对象的属性或方法名</span><br><span class=\"line\">    小驼峰式（little camel-<span class=\"keyword\">case</span>）</span><br><span class=\"line\">    如：init、bindEvent、updatePosition</span><br><span class=\"line\">    示例：Dialog.prototype = &#123;</span><br><span class=\"line\">                <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">                <span class=\"attr\">bindEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">                <span class=\"attr\">updatePosition</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">                …</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">类名（构造器）</span><br><span class=\"line\">    --&gt;小驼峰式但首字母大写</span><br><span class=\"line\">    --&gt;如：Current、DefaultConfig</span><br><span class=\"line\">函数名</span><br><span class=\"line\">    --&gt;小驼峰式</span><br><span class=\"line\">    --&gt;如：current()、defaultConfig()</span><br><span class=\"line\">变量名</span><br><span class=\"line\">    --&gt;小驼峰式</span><br><span class=\"line\">    --&gt;如：current、defaultConfig</span><br><span class=\"line\">私有变量名</span><br><span class=\"line\">    --&gt;小驼峰式但需要用_开头</span><br><span class=\"line\">    --&gt;如：_current、_defaultConfig</span><br><span class=\"line\">变量名的前缀</span><br><span class=\"line\">    --&gt;续</span><br></pre></td></tr></table></figure>\n\n<p>代码格式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;()&quot;</span>前后需要跟空格</span><br><span class=\"line\"><span class=\"string\">&quot;=&quot;</span>前后需要跟空格</span><br><span class=\"line\"><span class=\"string\">&quot;,&quot;</span>后面需要跟空格</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>对象需格式化对象参数</span><br><span class=\"line\"><span class=\"keyword\">if</span>、<span class=\"keyword\">while</span>、<span class=\"keyword\">for</span>、<span class=\"keyword\">do</span>语句的执行体用<span class=\"string\">&quot;&#123;&#125;&quot;</span>括起来</span><br></pre></td></tr></table></figure>\n\n<p>“{}”格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>避免额外的逗号</p>\n<p><code>var arr = [1,2,3,];</code></p>\n<blockquote>\n<p>for-in循环体中必须用hasOwnProperty方法检查成员是否为自身成员，避免来自原型链上的污染。 长语句可考虑断行</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEMPL_SONGLIST.replace(<span class=\"string\">&#x27;&#123;TABLE&#125;&#x27;</span>, da[<span class=\"string\">&#x27;results&#x27;</span>])</span><br><span class=\"line\">    .replace(<span class=\"string\">&#x27;&#123;PREV_NUM&#125;&#x27;</span>, prev)</span><br><span class=\"line\">    .replace(<span class=\"string\">&#x27;&#123;NEXT_NUM&#125;&#x27;</span>, next)</span><br><span class=\"line\">    .replace(<span class=\"string\">&#x27;&#123;CURRENT_NUM&#125;&#x27;</span>, current)</span><br><span class=\"line\">    .replace(<span class=\"string\">&#x27;&#123;TOTAL_NUM&#125;&#x27;</span>, da.page_total);</span><br></pre></td></tr></table></figure>\n\n<p>为了避免和JSLint的检验机制冲突，“.”或“+”这类操作符放在行尾</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEMPL_SONGLIST.replace(<span class=\"string\">&#x27;&#123;TABLE&#125;&#x27;</span>, da[<span class=\"string\">&#x27;results&#x27;</span>]).</span><br><span class=\"line\">  replace(<span class=\"string\">&#x27;&#123;PREV_NUM&#125;&#x27;</span>, prev).</span><br><span class=\"line\">  replace(<span class=\"string\">&#x27;&#123;NEXT_NUM&#125;&#x27;</span>, next).</span><br><span class=\"line\">  replace(<span class=\"string\">&#x27;&#123;CURRENT_NUM&#125;&#x27;</span>, current).</span><br><span class=\"line\">  replace(<span class=\"string\">&#x27;&#123;TOTAL_NUM&#125;&#x27;</span>, da.page_total);</span><br></pre></td></tr></table></figure>\n\n<p>如果模块代码中，使用其它全局变量想跳过JSLint的检查，可以在该文件中加入/global/声明。</p>\n<p><code>/*global alert: true, console: true, top: true, setTimeout: true */</code></p>\n<p>使用严格的条件判断符。用===代替==，用!==代替!=，避免掉入==造成的陷阱,在条件判断时，这样的一些值表示<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>与<span class=\"literal\">null</span>相等</span><br><span class=\"line\">字符串<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">数字<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>在==时，则会有一些让人难以理解的陷阱</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"literal\">undefined</span> == <span class=\"literal\">null</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"number\">1</span> == <span class=\"literal\">true</span>; <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"number\">2</span> == <span class=\"literal\">true</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"number\">0</span> == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"number\">0</span> == <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>;<span class=\"comment\">// false</span></span><br><span class=\"line\">    [] == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">    [] == ![]; <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>对于不同类型的 == 判断，有这样一些规则，顺序自上而下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span>与<span class=\"literal\">null</span>相等</span><br><span class=\"line\">一个是number一个是string时，会尝试将string转换为number</span><br><span class=\"line\">尝试将boolean转换为number</span><br><span class=\"line\"><span class=\"number\">0</span>或<span class=\"number\">1</span></span><br><span class=\"line\">尝试将<span class=\"built_in\">Object</span>转换成number或string</span><br></pre></td></tr></table></figure>\n\n<p>而这些取决于另外一个对比量，即值的类型，所以对于0、空字符串的判断，建议使用=== ===会先判断两边的值类型，类型不匹配时为false。 下面类型的对象不建议用new构造</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span> <span class=\"comment\">//用&#123;&#125;代替</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span> <span class=\"comment\">//用[]代替</span></span><br></pre></td></tr></table></figure>\n\n<p>引用对象成员用obj.prop代替obj[“prop”]，除非属性名是变量。 从number到string的转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 推荐写法*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(a); <span class=\"comment\">//&quot;number&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aa=a+<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(aa); <span class=\"comment\">//&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">//&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">/** 不推荐写法*/</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(a)或a.toString()</span><br></pre></td></tr></table></figure>\n\n<p>从string到number的转换，使用parseInt，必须显式指定第二个参数的进制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 推荐写法*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> aa = <span class=\"built_in\">parseInt</span>(a,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(a); <span class=\"comment\">//&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(aa); <span class=\"comment\">//&quot;number&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<p>从float到integer的转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 推荐写法*/</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor/<span class=\"built_in\">Math</span>.round/<span class=\"built_in\">Math</span>.ceil</span><br><span class=\"line\"><span class=\"comment\">/** 不推荐写法*/</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串拼接应使用数组保存字符串片段，使用时调用join方法。避免使用+或+=的方式拼接较长的字符串，每个字符串都会使用一个小的内存片段，过多的内存片段会影响性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**推荐的拼接方式array的push、join*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str=[],</span><br><span class=\"line\">    list=[<span class=\"string\">&#x27;测试A&#x27;</span>,<span class=\"string\">&#x27;测试B&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span> , len=list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    str.push( <span class=\"string\">&#x27;&lt;div&gt;&#x27;</span>+ list[i] + <span class=\"string\">&#x27;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.join(<span class=\"string\">&#x27;&#x27;</span>)); <span class=\"comment\">//&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/** 不推荐的拼接方式+=*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    list=[<span class=\"string\">&#x27;测试A&#x27;</span>,<span class=\"string\">&#x27;测试B&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = list.length; i&lt; len; i++) &#123;</span><br><span class=\"line\">    str+=<span class=\"string\">&#x27;&lt;div&gt;&#x27;</span> + list[i] + <span class=\"string\">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>尽量避免使用存在兼容性及消耗资源的方法或属性</p>\n<p><code>不要使用with，void，evil，eval_r，innerText</code></p>\n<p>注重HTML分离, 减小reflow, 注重性能</p>\n<h2 id=\"图片规范\"><a href=\"#图片规范\" class=\"headerlink\" title=\"图片规范\"></a>图片规范</h2><p>命名应用小写英文、数字、_组合，便于团队其他成员理解</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">header_btn.gif</span><br><span class=\"line\">header_btn2.gif</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>页面元素类图片均放入img文件夹,</li>\n<li>测试用图片放于img/testimg文件夹，psd源图放入img/psdimg文件夹。</li>\n<li>图片格式仅限于gif、png、jpg等。</li>\n<li>用png图片做图片时,要求图片格式为png-8格式,若png-8实在影响图片质量或其中有半透明效果,请为ie-6单独定义背景，并尽量避免使用半透明的png图片。</li>\n<li>背景图片请尽可能使用sprite技术, 减小http请求</li>\n</ul>\n<h2 id=\"注释规范：\"><a href=\"#注释规范：\" class=\"headerlink\" title=\"注释规范：\"></a>注释规范：</h2><blockquote>\n<p>JAVASCRIPT、CSS文件注释需要标明作者、文件版本、创建/修改时间、重大版本修改记录、函数描述、文件版本、创建或者修改时间、功能、作者等信息。</p>\n</blockquote>\n<p><code>/* * 注释块 */</code></p>\n<p>中间可添加如下信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">@file 文件名</span><br><span class=\"line\">@addon 把一个函数标记为另一个函数的扩张，另一个函数的定义不在源文件中</span><br><span class=\"line\">@argument 用大括号中的自变量类型描述一个自变量</span><br><span class=\"line\">@author 函数/类作者的姓名</span><br><span class=\"line\">@base 如果类是继承得来，定义提供的类名称</span><br><span class=\"line\"><span class=\"string\">`@class`</span>用来给一个类提供描述，不能用于构造器的文档中</span><br><span class=\"line\">@<span class=\"title\">constructor</span> 描述一个类的构造器</span><br><span class=\"line\">@<span class=\"title\">deprecated</span> 表示函数/类已被忽略</span><br><span class=\"line\">@<span class=\"title\">exception</span> 描述函数/类产生的一个错误</span><br><span class=\"line\">@<span class=\"title\">exec</span> @<span class=\"title\">extends</span> 表示派生出当前类的另一个类</span><br><span class=\"line\">@<span class=\"title\">fileoverview</span> 表示文档块将用于描述当前文件，这个标签应该放在其它任何标签之前</span><br><span class=\"line\">@<span class=\"title\">final</span> 指出函数/类</span><br><span class=\"line\">@<span class=\"title\">ignore</span> 让<span class=\"title\">jsdoc</span>忽视随后的代码</span><br><span class=\"line\">@<span class=\"title\">link</span> 类似于@<span class=\"title\">link</span>标签，用于连接许多其它页面</span><br><span class=\"line\">@<span class=\"title\">member</span> 定义随后的函数为提供的类名称的一个成员</span><br><span class=\"line\">@<span class=\"title\">param</span> 用大括号中的参数类型描述一个参数</span><br><span class=\"line\">@<span class=\"title\">private</span> 表示函数/类为私有，不应包含在生成的文档中</span><br><span class=\"line\">@<span class=\"title\">requires</span> 表示需要另一个函数/类</span><br><span class=\"line\">@<span class=\"title\">return</span> 描述一个函数的返回值</span><br><span class=\"line\">@<span class=\"title\">see</span> 连接到另一个函数/类</span><br><span class=\"line\">@<span class=\"title\">throws</span> 描述函数/类可能产生的错误</span><br><span class=\"line\">@<span class=\"title\">type</span> 指定函数/成员的返回类型</span><br><span class=\"line\">@<span class=\"title\">version</span> 函数/类的版本号</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"你不知道的js\"><a href=\"#你不知道的js\" class=\"headerlink\" title=\"你不知道的js\"></a>你不知道的js</h1><h2 id=\"原理篇\"><a href=\"#原理篇\" class=\"headerlink\" title=\"原理篇\"></a>原理篇</h2><ul>\n<li><p><code>js</code>引擎线程（解释执行<code>js</code>代码、用户输入、网络请求）</p>\n</li>\n<li><p><code>GUI</code>线程（绘制用户界面、与<code>js</code>主线程是互斥的）</p>\n<ul>\n<li><p><code>JS 可以操作DOM元素，进而会影响到GUI的渲染结果，因此JS引擎线程与GUI渲染线程是互斥的。也就是说当JS引擎线程处于运行状态时，GUI渲染线程将处于冻结状态</code></p>\n</li>\n<li><p><code>js单线程-同一时间只能做一件事</code></p>\n</li>\n<li><p><code>js设计出来就是为了与用户交互，处理DOM，假如js是多线程，同一时间一个线程想要修改DOM，另一个线程想要删除DOM，问题就变得复杂多了，浏览器不知道听谁的，如果引入“锁”的机制，这不就又回到了被其他语言尴尬的困境了吗</code></p>\n</li>\n<li><p><code>单线程计算能力有限，大量数据需要计算渲染的话，我们可以配合后端进行操作，比如我们后期进阶班的VUE与node.js配合，也就是传说中的SSR技术</code></p>\n</li>\n</ul>\n</li>\n<li><p><code>http</code>网络请求线程（处理用户的<code>get、post</code>等请求，等返回结果后将回调函数推入任务队列）</p>\n</li>\n<li><p>定时触发器线程（<code>setTimeout、setInterval</code>等待时间结束后把执行函数推入任务队列中）</p>\n</li>\n<li><p>浏览器事件处理线程（将<code>click、mouse</code>等交互事件发生后将这些事件放入事件队列中）</p>\n</li>\n</ul>\n<h3 id=\"js运行机制\"><a href=\"#js运行机制\" class=\"headerlink\" title=\"js运行机制\"></a>js运行机制</h3><p><code>JavaScript是基于单线程运行的，同时又可以异步执行的，一般来说这种即是单线程又是异步的语言都是基于事件来驱动的，恰好浏览器就给JavaScript提供了这么一个环境</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">                        任务进行执行栈</span><br><span class=\"line\">                             ｜</span><br><span class=\"line\">                             ｜</span><br><span class=\"line\">                             ｜</span><br><span class=\"line\">          ------------同步任务还是异步任务-----------</span><br><span class=\"line\">         ｜                                      ｜</span><br><span class=\"line\">         同步                                    异步</span><br><span class=\"line\">         ｜                                      ｜</span><br><span class=\"line\">         ｜                                      ｜</span><br><span class=\"line\">       主线程                                Event Table</span><br><span class=\"line\">         ｜                                      ｜</span><br><span class=\"line\">         ｜                                      ｜</span><br><span class=\"line\">         ｜                                  注册回调函数</span><br><span class=\"line\">    任务全部执行完毕                                ｜</span><br><span class=\"line\">         ｜                                       ｜</span><br><span class=\"line\">         |                                   Event Queue</span><br><span class=\"line\">         |                                        |</span><br><span class=\"line\">         |                                        |</span><br><span class=\"line\">         |     ___________________________________|</span><br><span class=\"line\">         |     |</span><br><span class=\"line\">读取任务队列中的结果，进入主线程执行</span><br></pre></td></tr></table></figure>\n\n<p>上面要表示的内容用文字来表述的话：</p>\n<ol>\n<li><p>同步和异步的任务分别进入不同的执行“场所”，同步的进入主线程，异步的进入<code>Event Table</code>并注册函数</p>\n</li>\n<li><p>当指定的事情完成时，<code>Event Table</code>会将这个函数移入<code>Event Queue</code></p>\n</li>\n<li><p>主线程内的任务执行完毕为空，回去<code>Event Queue</code>读取对应的函数，进入主线程执行。</p>\n</li>\n</ol>\n<p>上述过程会不断的重复，也就是常说的<code>Event Loop</code>（事件循环）</p>\n<h3 id=\"call、apply的模拟实现\"><a href=\"#call、apply的模拟实现\" class=\"headerlink\" title=\"call、apply的模拟实现\"></a>call、apply的模拟实现</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">call的封装函数实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototupe.newCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    ctx.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i &lt; <span class=\"built_in\">arguments</span>.length;i ++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">&#x27;arguments[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;ctx.fn(&#x27;</span> + args.join(<span class=\"string\">&#x27;,&#x27;</span>) + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ctx.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply的封装函数实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.newApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx,arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = ctx || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    ctx.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = ctx.fn();</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> ctx.fn;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i &lt; arr.length;i ++)&#123;</span><br><span class=\"line\">            args.push(<span class=\"string\">&#x27;arguments[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;ctx.fn(&#x27;</span> + args.join(<span class=\"string\">&#x27;,&#x27;</span>) + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> ctx.fn;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Javascript"],"tags":["Javascript"]},{"title":"404 Not Found：该页无法显示","url":"https://github.com/huaideabcd/huaideabcd.github.io.git//404.html","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n<hr>\n<div class=\"pic\">\n<img src=\"/img/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","categories":[],"tags":[]},{"title":"about","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/categories/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/css/personal-style.css","content":"@font-face {\n\tsrc: url(\"/fonts/Meiryo.eot\");\n\t/* IE9 */\n\tsrc: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n\turl(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n\turl(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n\turl(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n\tfont-family: \"Meiryo\";\n\t/* iOS 4.1- */\n\tfont-style: normal;\n\tfont-weight: normal;\n}\n/* ����㲻ϲ����ҳ���İ�ɫ������Ի�һ�㣬������Զ�����ҳ�ı�����ɫ����ͼƬ */\nhtml.page-home {\n\tposition: absolute;\n\tleft: 0;\n\tright: 0;\n\ttop: 0;\n\tbottom: 0;\n\t/*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n\t/*background-blend-mode: screen;*/\n\t/*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n\tbackground: #000;\n\tbackground-color: transparent;\n\tbackground-image: url(\"/images/bg.jpg\");\n\tbackground-repeat: no-repeat;\n\tbackground-position: center center;\n\tbackground-size: cover;\n}\n\n\n.qrcode_container {\n\tposition: fixed;\n\tright: 999px;\n\ttop: 140px;\n\tpadding: 10px 0 0;\n\twidth: 140px;\n\tbackground-color: #fff;\n\tbox-shadow: -1px 0 2px .5px rgba(0,127,255,.2);\n\ttext-align: center;\n}\n\n.ad_container {\n\tposition: fixed;\n\tright: -999px;\n\ttop: 360px;\n\tpadding: 10px 0 0;\n\twidth: 140px;\n\tbackground-color: #fff;\n\ttext-align: center;\n}\n\n.ad_container img {\n\theight: 150px;\n}\n\n@media (min-width: 480px) and (orientation: landscape) {\n\t.qrcode_container {\n\t\tright: 0 !important;\n\t}\n\t.ad_container {\n\t\tright: 0 !important;\n\t}\n}\n\n\n.qrcode_container > div h4 {\n\tmargin: 0;\n\tfont-size: 15px;\n\tcolor: #007fff;\n}\n\n.qrcode_container > div p {\n\tmargin: 10px 0;\n\tfont-size: 12px;\n}\n\n.qrcode_container > div img {\n\twidth: 140px;\n}\n","categories":[],"tags":[]},{"title":"search","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/search/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/project/index.html","content":"","categories":[],"tags":[]},{"title":"留言","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/guestbook/index.html","content":"<style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px !important;\n        height: 56px !important;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n        box-shadow: 1px 1px 1px rgba(0,0,0, .15);\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n    \n</style>\n\n\n<hr>\n<div class=\"player\">\n<iframe scrolling=\"auto\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=100% height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>\n\n<hr>\n<br>\n> 最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"40\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","categories":[],"tags":[]},{"title":"link","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://github.com/huaideabcd/huaideabcd.github.io.git/tags/index.html","content":"","categories":[],"tags":[]}]